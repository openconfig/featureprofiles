// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: metadata.proto

package metadata_go_proto

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/openconfig/ondatra/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of testbeds on which the test may run.
type Metadata_Testbed int32

const (
	Metadata_TESTBED_UNSPECIFIED        Metadata_Testbed = 0
	Metadata_TESTBED_DUT                Metadata_Testbed = 1
	Metadata_TESTBED_DUT_DUT_4LINKS     Metadata_Testbed = 2
	Metadata_TESTBED_DUT_ATE_2LINKS     Metadata_Testbed = 3
	Metadata_TESTBED_DUT_ATE_4LINKS     Metadata_Testbed = 4
	Metadata_TESTBED_DUT_ATE_9LINKS_LAG Metadata_Testbed = 5
	Metadata_TESTBED_DUT_DUT_ATE_2LINKS Metadata_Testbed = 6
	Metadata_TESTBED_DUT_ATE_8LINKS     Metadata_Testbed = 7
)

// Enum value maps for Metadata_Testbed.
var (
	Metadata_Testbed_name = map[int32]string{
		0: "TESTBED_UNSPECIFIED",
		1: "TESTBED_DUT",
		2: "TESTBED_DUT_DUT_4LINKS",
		3: "TESTBED_DUT_ATE_2LINKS",
		4: "TESTBED_DUT_ATE_4LINKS",
		5: "TESTBED_DUT_ATE_9LINKS_LAG",
		6: "TESTBED_DUT_DUT_ATE_2LINKS",
		7: "TESTBED_DUT_ATE_8LINKS",
	}
	Metadata_Testbed_value = map[string]int32{
		"TESTBED_UNSPECIFIED":        0,
		"TESTBED_DUT":                1,
		"TESTBED_DUT_DUT_4LINKS":     2,
		"TESTBED_DUT_ATE_2LINKS":     3,
		"TESTBED_DUT_ATE_4LINKS":     4,
		"TESTBED_DUT_ATE_9LINKS_LAG": 5,
		"TESTBED_DUT_DUT_ATE_2LINKS": 6,
		"TESTBED_DUT_ATE_8LINKS":     7,
	}
)

func (x Metadata_Testbed) Enum() *Metadata_Testbed {
	p := new(Metadata_Testbed)
	*p = x
	return p
}

func (x Metadata_Testbed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_Testbed) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[0].Descriptor()
}

func (Metadata_Testbed) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[0]
}

func (x Metadata_Testbed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_Testbed.Descriptor instead.
func (Metadata_Testbed) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 0}
}

type Metadata_Tags int32

const (
	Metadata_TAGS_UNSPECIFIED     Metadata_Tags = 0
	Metadata_TAGS_AGGREGATION     Metadata_Tags = 1
	Metadata_TAGS_DATACENTER_EDGE Metadata_Tags = 2
	Metadata_TAGS_EDGE            Metadata_Tags = 3
	Metadata_TAGS_TRANSIT         Metadata_Tags = 4
)

// Enum value maps for Metadata_Tags.
var (
	Metadata_Tags_name = map[int32]string{
		0: "TAGS_UNSPECIFIED",
		1: "TAGS_AGGREGATION",
		2: "TAGS_DATACENTER_EDGE",
		3: "TAGS_EDGE",
		4: "TAGS_TRANSIT",
	}
	Metadata_Tags_value = map[string]int32{
		"TAGS_UNSPECIFIED":     0,
		"TAGS_AGGREGATION":     1,
		"TAGS_DATACENTER_EDGE": 2,
		"TAGS_EDGE":            3,
		"TAGS_TRANSIT":         4,
	}
)

func (x Metadata_Tags) Enum() *Metadata_Tags {
	p := new(Metadata_Tags)
	*p = x
	return p
}

func (x Metadata_Tags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_Tags) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[1].Descriptor()
}

func (Metadata_Tags) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[1]
}

func (x Metadata_Tags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_Tags.Descriptor instead.
func (Metadata_Tags) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 1}
}

// Metadata about a Feature Profiles test.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of the test.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// ID of the test in the test plan.
	PlanId string `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// One-line description of the test.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Testbed on which the test is intended to run.
	Testbed Metadata_Testbed `protobuf:"varint,4,opt,name=testbed,proto3,enum=openconfig.testing.Metadata_Testbed" json:"testbed,omitempty"`
	// The `platform` field for each `platform_exceptions` should be mutually
	// exclusive. Duplicate matches will result in a test failure.
	PlatformExceptions []*Metadata_PlatformExceptions `protobuf:"bytes,5,rep,name=platform_exceptions,json=platformExceptions,proto3" json:"platform_exceptions,omitempty"`
	// The `tags` used to identify the area(s) testcase applies to. An empty tag
	// is the default implying it applies to all areas.
	Tags []Metadata_Tags `protobuf:"varint,6,rep,packed,name=tags,proto3,enum=openconfig.testing.Metadata_Tags" json:"tags,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Metadata) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetTestbed() Metadata_Testbed {
	if x != nil {
		return x.Testbed
	}
	return Metadata_TESTBED_UNSPECIFIED
}

func (x *Metadata) GetPlatformExceptions() []*Metadata_PlatformExceptions {
	if x != nil {
		return x.PlatformExceptions
	}
	return nil
}

func (x *Metadata) GetTags() []Metadata_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Metadata_Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vendor of the device.
	Vendor proto.Device_Vendor `protobuf:"varint,1,opt,name=vendor,proto3,enum=ondatra.Device_Vendor" json:"vendor,omitempty"`
	// Regex for hardware model of the device.
	// The empty string will match any hardware model.
	HardwareModelRegex string `protobuf:"bytes,3,opt,name=hardware_model_regex,json=hardwareModelRegex,proto3" json:"hardware_model_regex,omitempty"`
	// Regex for software version of the device.
	// The empty string will match any software version.
	SoftwareVersionRegex string `protobuf:"bytes,4,opt,name=software_version_regex,json=softwareVersionRegex,proto3" json:"software_version_regex,omitempty"`
}

func (x *Metadata_Platform) Reset() {
	*x = Metadata_Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Platform) ProtoMessage() {}

func (x *Metadata_Platform) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Platform.ProtoReflect.Descriptor instead.
func (*Metadata_Platform) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Metadata_Platform) GetVendor() proto.Device_Vendor {
	if x != nil {
		return x.Vendor
	}
	return proto.Device_Vendor(0)
}

func (x *Metadata_Platform) GetHardwareModelRegex() string {
	if x != nil {
		return x.HardwareModelRegex
	}
	return ""
}

func (x *Metadata_Platform) GetSoftwareVersionRegex() string {
	if x != nil {
		return x.SoftwareVersionRegex
	}
	return ""
}

type Metadata_Deviations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device does not support interface/ipv4/enabled,
	// so suppress configuring this leaf.
	Ipv4MissingEnabled bool `protobuf:"varint,1,opt,name=ipv4_missing_enabled,json=ipv4MissingEnabled,proto3" json:"ipv4_missing_enabled,omitempty"`
	// Device does not support fragmentation bit for traceroute.
	TracerouteFragmentation bool `protobuf:"varint,2,opt,name=traceroute_fragmentation,json=tracerouteFragmentation,proto3" json:"traceroute_fragmentation,omitempty"`
	// Device only support UDP as l4 protocol for traceroute.
	TracerouteL4ProtocolUdp bool `protobuf:"varint,3,opt,name=traceroute_l4_protocol_udp,json=tracerouteL4ProtocolUdp,proto3" json:"traceroute_l4_protocol_udp,omitempty"`
	// Device does not support
	// bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy.
	PrepolicyReceivedRoutes bool `protobuf:"varint,4,opt,name=prepolicy_received_routes,json=prepolicyReceivedRoutes,proto3" json:"prepolicy_received_routes,omitempty"`
	// Expected ucmp traffic tolerance. Minimum value is 0.2, anything less
	// will be coerced to 0.2.
	// Juniper: partnerissuetracker.corp.google.com/282234301
	// Cisco: partnerissuetracker.corp.google.com/279477633
	HierarchicalWeightResolutionTolerance float64 `protobuf:"fixed64,5,opt,name=hierarchical_weight_resolution_tolerance,json=hierarchicalWeightResolutionTolerance,proto3" json:"hierarchical_weight_resolution_tolerance,omitempty"`
	// Device skip isis multi-topology check if value is true.
	IsisMultiTopologyUnsupported bool `protobuf:"varint,6,opt,name=isis_multi_topology_unsupported,json=isisMultiTopologyUnsupported,proto3" json:"isis_multi_topology_unsupported,omitempty"`
	// Disable isis level1 under interface mode on the device if value is true.
	IsisInterfaceLevel1DisableRequired bool `protobuf:"varint,7,opt,name=isis_interface_level1_disable_required,json=isisInterfaceLevel1DisableRequired,proto3" json:"isis_interface_level1_disable_required,omitempty"`
	// Set isis af ipv6 single topology on the device if value is true.
	IsisSingleTopologyRequired bool `protobuf:"varint,8,opt,name=isis_single_topology_required,json=isisSingleTopologyRequired,proto3" json:"isis_single_topology_required,omitempty"`
	// Don't set isis instance enable flag on the device if value is true.
	IsisInstanceEnabledRequired bool `protobuf:"varint,10,opt,name=isis_instance_enabled_required,json=isisInstanceEnabledRequired,proto3" json:"isis_instance_enabled_required,omitempty"`
	// Set and validate isis interface address family enable on the device if
	// value is true.
	MissingIsisInterfaceAfiSafiEnable bool `protobuf:"varint,11,opt,name=missing_isis_interface_afi_safi_enable,json=missingIsisInterfaceAfiSafiEnable,proto3" json:"missing_isis_interface_afi_safi_enable,omitempty"`
	// Don't set isis global authentication-check on the device if value is
	// true.
	IsisGlobalAuthenticationNotRequired bool `protobuf:"varint,12,opt,name=isis_global_authentication_not_required,json=isisGlobalAuthenticationNotRequired,proto3" json:"isis_global_authentication_not_required,omitempty"`
	// Configure CSNP, LSP and PSNP under level authentication explicitly if
	// value is true.
	IsisExplicitLevelAuthenticationConfig bool `protobuf:"varint,13,opt,name=isis_explicit_level_authentication_config,json=isisExplicitLevelAuthenticationConfig,proto3" json:"isis_explicit_level_authentication_config,omitempty"`
	// Device skip isis restart-suppress check if value is true.
	IsisRestartSuppressUnsupported bool `protobuf:"varint,14,opt,name=isis_restart_suppress_unsupported,json=isisRestartSuppressUnsupported,proto3" json:"isis_restart_suppress_unsupported,omitempty"`
	// Device does not support interface/ipv4(6)/neighbor.
	// Cisco: partnerissuetracker.corp.google.com/268243828
	IpNeighborMissing bool `protobuf:"varint,15,opt,name=ip_neighbor_missing,json=ipNeighborMissing,proto3" json:"ip_neighbor_missing,omitempty"`
	// Device requires separate reboot to activate OS.
	OsactivateNoreboot bool `protobuf:"varint,16,opt,name=osactivate_noreboot,json=osactivateNoreboot,proto3" json:"osactivate_noreboot,omitempty"`
	// Device requires OS installation on standby RP as well as active RP.
	OsinstallForStandbyRp bool `protobuf:"varint,17,opt,name=osinstall_for_standby_rp,json=osinstallForStandbyRp,proto3" json:"osinstall_for_standby_rp,omitempty"`
	// Set this flag for LLDP interface config to override the global config.
	LldpInterfaceConfigOverrideGlobal bool `protobuf:"varint,18,opt,name=lldp_interface_config_override_global,json=lldpInterfaceConfigOverrideGlobal,proto3" json:"lldp_interface_config_override_global,omitempty"`
	// Skip check for
	// bgp/neighbors/neighbor/state/messages/received/last-notification-error-code
	// leaf missing case.
	MissingBgpLastNotificationErrorCode bool `protobuf:"varint,21,opt,name=missing_bgp_last_notification_error_code,json=missingBgpLastNotificationErrorCode,proto3" json:"missing_bgp_last_notification_error_code,omitempty"`
	// Device does not support interface-ref configuration when applying
	// features to interface.
	InterfaceRefConfigUnsupported bool `protobuf:"varint,22,opt,name=interface_ref_config_unsupported,json=interfaceRefConfigUnsupported,proto3" json:"interface_ref_config_unsupported,omitempty"`
	// Device does not support these state paths.
	// Juniper: partnerissuetracker.corp.google.com/279470921
	StatePathUnsupported bool `protobuf:"varint,23,opt,name=state_path_unsupported,json=statePathUnsupported,proto3" json:"state_path_unsupported,omitempty"`
	// Device requires Ipv6 to be enabled on interface for gRIBI NH programmed
	// with destination mac address.
	// Juniper: partnerissuetracker.corp.google.com/267642089
	Ipv6EnableForGribiNhDmac bool `protobuf:"varint,24,opt,name=ipv6_enable_for_gribi_nh_dmac,json=ipv6EnableForGribiNhDmac,proto3" json:"ipv6_enable_for_gribi_nh_dmac,omitempty"`
	// Device requires additional config for ECN.
	// Juniper: partnerissuetracker.corp.google.com/277657269
	EcnProfileRequiredDefinition bool `protobuf:"varint,25,opt,name=ecn_profile_required_definition,json=ecnProfileRequiredDefinition,proto3" json:"ecn_profile_required_definition,omitempty"`
	// Set true for device that does not support interface ipv6 discarded packet
	// statistics.
	// Juniper: partnerissuetracker.corp.google.com/277762075
	Ipv6DiscardedPktsUnsupported bool `protobuf:"varint,26,opt,name=ipv6_discarded_pkts_unsupported,json=ipv6DiscardedPktsUnsupported,proto3" json:"ipv6_discarded_pkts_unsupported,omitempty"`
	// Device does not support drop and weight leaves under queue management
	// profile.
	// Juniper: partnerissuetracker.corp.google.com/279471405
	DropWeightLeavesUnsupported bool `protobuf:"varint,27,opt,name=drop_weight_leaves_unsupported,json=dropWeightLeavesUnsupported,proto3" json:"drop_weight_leaves_unsupported,omitempty"`
	// Config pushed through origin CLI takes precedence over config pushed
	// through origin OC.
	CliTakesPrecedenceOverOc bool `protobuf:"varint,29,opt,name=cli_takes_precedence_over_oc,json=cliTakesPrecedenceOverOc,proto3" json:"cli_takes_precedence_over_oc,omitempty"`
	// Device does not support weight above 100.
	// Juniper: partnerissuetracker.corp.google.com/277066804
	SchedulerInputWeightLimit bool `protobuf:"varint,30,opt,name=scheduler_input_weight_limit,json=schedulerInputWeightLimit,proto3" json:"scheduler_input_weight_limit,omitempty"`
	// Device does not support id leaf for SwitchChip components.
	// Juniper: partnerissuetracker.corp.google.com/277134501
	SwitchChipIdUnsupported bool `protobuf:"varint,31,opt,name=switch_chip_id_unsupported,json=switchChipIdUnsupported,proto3" json:"switch_chip_id_unsupported,omitempty"`
	// Device does not support backplane-facing-capacity leaves for some of the
	// components.
	// Juniper: partnerissuetracker.corp.google.com/277134501
	BackplaneFacingCapacityUnsupported bool `protobuf:"varint,32,opt,name=backplane_facing_capacity_unsupported,json=backplaneFacingCapacityUnsupported,proto3" json:"backplane_facing_capacity_unsupported,omitempty"`
	// Device only supports querying counters from the state container, not from
	// individual counter leaves.
	InterfaceCountersFromContainer bool `protobuf:"varint,33,opt,name=interface_counters_from_container,json=interfaceCountersFromContainer,proto3" json:"interface_counters_from_container,omitempty"`
	// Use this deviation when the device does not support a mix of tagged and
	// untagged subinterfaces.
	NoMixOfTaggedAndUntaggedSubinterfaces bool `protobuf:"varint,34,opt,name=no_mix_of_tagged_and_untagged_subinterfaces,json=noMixOfTaggedAndUntaggedSubinterfaces,proto3" json:"no_mix_of_tagged_and_untagged_subinterfaces,omitempty"`
	// Device does not report P4RT node names in the component hierarchy.
	ExplicitP4RtNodeComponent bool `protobuf:"varint,35,opt,name=explicit_p4rt_node_component,json=explicitP4rtNodeComponent,proto3" json:"explicit_p4rt_node_component,omitempty"`
	// Configure ACLs using vendor native model specifically for RT-1.4.
	UseVendorNativeAclConfig bool `protobuf:"varint,36,opt,name=use_vendor_native_acl_config,json=useVendorNativeAclConfig,proto3" json:"use_vendor_native_acl_config,omitempty"`
	// Device does not support reporting software version according to the
	// requirements in gNMI-1.10.
	SwVersionUnsupported bool `protobuf:"varint,37,opt,name=sw_version_unsupported,json=swVersionUnsupported,proto3" json:"sw_version_unsupported,omitempty"`
	// Device requires explicit interface ref configuration when applying
	// features to interface.
	ExplicitInterfaceRefDefinition bool `protobuf:"varint,38,opt,name=explicit_interface_ref_definition,json=explicitInterfaceRefDefinition,proto3" json:"explicit_interface_ref_definition,omitempty"`
	// Device does not support telemetry path /components/component/storage.
	// Juniper: partnerissuetracker.corp.google.com/284239001
	StorageComponentUnsupported bool `protobuf:"varint,39,opt,name=storage_component_unsupported,json=storageComponentUnsupported,proto3" json:"storage_component_unsupported,omitempty"`
	// Device requires gribi-protocol to be enabled under network-instance.
	ExplicitGribiUnderNetworkInstance bool `protobuf:"varint,40,opt,name=explicit_gribi_under_network_instance,json=explicitGribiUnderNetworkInstance,proto3" json:"explicit_gribi_under_network_instance,omitempty"`
	// Device requires port-speed to be set because its default value may not be
	// usable.
	ExplicitPortSpeed bool `protobuf:"varint,41,opt,name=explicit_port_speed,json=explicitPortSpeed,proto3" json:"explicit_port_speed,omitempty"`
	// Device requires explicit attachment of an interface or subinterface to
	// the default network instance.
	// Nokia: partnerissuetracker.corp.google.com/260928639
	ExplicitInterfaceInDefaultVrf bool `protobuf:"varint,42,opt,name=explicit_interface_in_default_vrf,json=explicitInterfaceInDefaultVrf,proto3" json:"explicit_interface_in_default_vrf,omitempty"`
	// Skip checking QOS Dropped octets stats for interface.
	QosDroppedOctets bool `protobuf:"varint,43,opt,name=qos_dropped_octets,json=qosDroppedOctets,proto3" json:"qos_dropped_octets,omitempty"`
	// Device is missing subinterface packet counters for IPv4/IPv6.
	SubinterfacePacketCountersMissing bool `protobuf:"varint,44,opt,name=subinterface_packet_counters_missing,json=subinterfacePacketCountersMissing,proto3" json:"subinterface_packet_counters_missing,omitempty"`
	// Connect-retry is not supported
	// /bgp/neighbors/neighbor/timers/config/connect-retry.
	ConnectRetry bool `protobuf:"varint,45,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	// Device does not support programming a gribi flow with a next-hop entry of
	// mac-address only.
	GribiMacOverrideWithStaticArp bool `protobuf:"varint,46,opt,name=gribi_mac_override_with_static_arp,json=gribiMacOverrideWithStaticArp,proto3" json:"gribi_mac_override_with_static_arp,omitempty"`
	// Set true for device that does not support route-policy under AFI/SAFI.
	RoutePolicyUnderAfiUnsupported bool `protobuf:"varint,47,opt,name=route_policy_under_afi_unsupported,json=routePolicyUnderAfiUnsupported,proto3" json:"route_policy_under_afi_unsupported,omitempty"`
	// Device does not support using gNOI to reboot the Fabric Component.
	GnoiFabricComponentRebootUnsupported bool `protobuf:"varint,48,opt,name=gnoi_fabric_component_reboot_unsupported,json=gnoiFabricComponentRebootUnsupported,proto3" json:"gnoi_fabric_component_reboot_unsupported,omitempty"`
	// Device does not support the ntp nondefault vrf case.
	NtpNonDefaultVrfUnsupported bool `protobuf:"varint,49,opt,name=ntp_non_default_vrf_unsupported,json=ntpNonDefaultVrfUnsupported,proto3" json:"ntp_non_default_vrf_unsupported,omitempty"`
	// Device does not support setting the L2 MTU. OpenConfig allows a device to
	// enforce that L2 MTU, which has a default value of 1514, must be set to a
	// higher value than L3 MTU.
	// Arista: partnerissuetracker.corp.google.com/243445300
	OmitL2Mtu bool `protobuf:"varint,50,opt,name=omit_l2_mtu,json=omitL2Mtu,proto3" json:"omit_l2_mtu,omitempty"`
	// Skip power admin for controller card
	SkipControllerCardPowerAdmin bool `protobuf:"varint,51,opt,name=skip_controller_card_power_admin,json=skipControllerCardPowerAdmin,proto3" json:"skip_controller_card_power_admin,omitempty"`
	// Device requires the banner to have a delimiter character.
	BannerDelimiter string `protobuf:"bytes,60,opt,name=banner_delimiter,json=bannerDelimiter,proto3" json:"banner_delimiter,omitempty"`
	// Allowed tolerance for BGP traffic flow while comparing for pass or fail
	// condition.
	BgpToleranceValue int32 `protobuf:"varint,61,opt,name=bgp_tolerance_value,json=bgpToleranceValue,proto3" json:"bgp_tolerance_value,omitempty"`
	// Device requires additional time to complete post delete link
	// qualification cleanup.
	LinkQualWaitAfterDeleteRequired bool `protobuf:"varint,62,opt,name=link_qual_wait_after_delete_required,json=linkQualWaitAfterDeleteRequired,proto3" json:"link_qual_wait_after_delete_required,omitempty"`
	// The response of gNOI reboot status is a single value (not a list), so the
	// device requires explict component path to account for a situation when
	// there is more than one active reboot requests.
	// Arista: partnerissuetracker.corp.google.com/245550570
	GnoiStatusEmptySubcomponent bool `protobuf:"varint,63,opt,name=gnoi_status_empty_subcomponent,json=gnoiStatusEmptySubcomponent,proto3" json:"gnoi_status_empty_subcomponent,omitempty"`
	// Device requiries explicit deletion of network-instance table.
	NetworkInstanceTableDeletionRequired bool `protobuf:"varint,64,opt,name=network_instance_table_deletion_required,json=networkInstanceTableDeletionRequired,proto3" json:"network_instance_table_deletion_required,omitempty"`
	// Device requires a BGP session reset to utilize a new MD5 key.
	BgpMd5RequiresReset bool `protobuf:"varint,65,opt,name=bgp_md5_requires_reset,json=bgpMd5RequiresReset,proto3" json:"bgp_md5_requires_reset,omitempty"`
	// Devices do not count dequeued and deleted packets as drops.
	// Arista: partnerissuetracker.corp.google.com/275384848
	DequeueDeleteNotCountedAsDrops bool `protobuf:"varint,66,opt,name=dequeue_delete_not_counted_as_drops,json=dequeueDeleteNotCountedAsDrops,proto3" json:"dequeue_delete_not_counted_as_drops,omitempty"`
	// Device only supports RIB ack, so tests that normally expect FIB_ACK will
	// allow just RIB_ACK.
	GribiRibackOnly bool `protobuf:"varint,67,opt,name=gribi_riback_only,json=gribiRibackOnly,proto3" json:"gribi_riback_only,omitempty"`
	// Device requires that aggregate Port-Channel and its members be defined in
	// a single gNMI Update transaction at /interfaces; otherwise lag-type will
	// be dropped, and no member can be added to the aggregate.
	// Arista: partnerissuetracker.corp.google.com/201574574
	AggregateAtomicUpdate bool `protobuf:"varint,68,opt,name=aggregate_atomic_update,json=aggregateAtomicUpdate,proto3" json:"aggregate_atomic_update,omitempty"`
	// Device returns no value for some OpenConfig paths if the operational
	// value equals the default.
	// Arista: partnerissuetracker.corp.google.com/258286131
	MissingValueForDefaults bool `protobuf:"varint,69,opt,name=missing_value_for_defaults,json=missingValueForDefaults,proto3" json:"missing_value_for_defaults,omitempty"`
	// The name used for the static routing protocol.  The default name in
	// OpenConfig is \"DEFAULT\" but some devices use other names.
	// Arista: partnerissuetracker.corp.google.com/269699737
	StaticProtocolName string `protobuf:"bytes,70,opt,name=static_protocol_name,json=staticProtocolName,proto3" json:"static_protocol_name,omitempty"`
	// Device currently uses component name instead of a full openconfig path,
	// so suppress creating a full oc compliant path for subcomponent.
	GnoiSubcomponentPath bool `protobuf:"varint,71,opt,name=gnoi_subcomponent_path,json=gnoiSubcomponentPath,proto3" json:"gnoi_subcomponent_path,omitempty"`
	// When configuring interface, config VRF prior config IP address.
	// Arista: partnerissuetracker.corp.google.com/261958938
	InterfaceConfigVrfBeforeAddress bool `protobuf:"varint,72,opt,name=interface_config_vrf_before_address,json=interfaceConfigVrfBeforeAddress,proto3" json:"interface_config_vrf_before_address,omitempty"`
	// Device requires using the deprecated openconfig-vlan:vlan/config/vlan-id
	// or openconfig-vlan:vlan/state/vlan-id leaves.
	// Arista: partnerissuetracker.corp.google.com/261085885
	DeprecatedVlanId bool `protobuf:"varint,73,opt,name=deprecated_vlan_id,json=deprecatedVlanId,proto3" json:"deprecated_vlan_id,omitempty"`
	// Device requires gRIBI MAC Override using Static ARP + Static Route
	// Arista: partnerissuetracker.corp.google.com/234635355
	GribiMacOverrideStaticArpStaticRoute bool `protobuf:"varint,74,opt,name=gribi_mac_override_static_arp_static_route,json=gribiMacOverrideStaticArpStaticRoute,proto3" json:"gribi_mac_override_static_arp_static_route,omitempty"`
	// Device requires interface enabled leaf booleans to be explicitly set to
	// true.
	InterfaceEnabled bool `protobuf:"varint,75,opt,name=interface_enabled,json=interfaceEnabled,proto3" json:"interface_enabled,omitempty"`
	// Skip checking QOS octet stats for interface.
	// Arista: partnerissuetracker.corp.google.com/283541442
	QosOctets bool `protobuf:"varint,76,opt,name=qos_octets,json=qosOctets,proto3" json:"qos_octets,omitempty"`
	// Device CPU components do not map to a FRU parent component in the OC
	// tree.
	CpuMissingAncestor bool `protobuf:"varint,77,opt,name=cpu_missing_ancestor,json=cpuMissingAncestor,proto3" json:"cpu_missing_ancestor,omitempty"`
	// Device needs subinterface 0 to be routed for non-zero sub-interfaces.
	RequireRoutedSubinterface_0 bool `protobuf:"varint,78,opt,name=require_routed_subinterface_0,json=requireRoutedSubinterface0,proto3" json:"require_routed_subinterface_0,omitempty"`
	// Device does not report last-switchover-reason as USER_INITIATED for
	// gNOI.SwitchControlProcessor.
	GnoiSwitchoverReasonMissingUserInitiated bool `protobuf:"varint,79,opt,name=gnoi_switchover_reason_missing_user_initiated,json=gnoiSwitchoverReasonMissingUserInitiated,proto3" json:"gnoi_switchover_reason_missing_user_initiated,omitempty"`
	// The name used for the default network instance for VRF.  The default name
	// in OpenConfig is \"DEFAULT\" but some legacy devices still use
	// \"default\".
	DefaultNetworkInstance string `protobuf:"bytes,80,opt,name=default_network_instance,json=defaultNetworkInstance,proto3" json:"default_network_instance,omitempty"`
	// Device allows unset Election ID to be primary.
	P4RtUnsetelectionidPrimaryAllowed bool `protobuf:"varint,81,opt,name=p4rt_unsetelectionid_primary_allowed,json=p4rtUnsetelectionidPrimaryAllowed,proto3" json:"p4rt_unsetelectionid_primary_allowed,omitempty"`
	// Device sets ALREADY_EXISTS status code for all backup client responses.
	BkupArbitrationRespCode bool `protobuf:"varint,82,opt,name=bkup_arbitration_resp_code,json=bkupArbitrationRespCode,proto3" json:"bkup_arbitration_resp_code,omitempty"`
	// Device requires IPOverIP decapsulation for backup NHG without interfaces.
	BackupNhgRequiresVrfWithDecap bool `protobuf:"varint,83,opt,name=backup_nhg_requires_vrf_with_decap,json=backupNhgRequiresVrfWithDecap,proto3" json:"backup_nhg_requires_vrf_with_decap,omitempty"`
	// Devices don't support configuring ISIS /afi-safi/af/config container.
	IsisInterfaceAfiUnsupported bool `protobuf:"varint,85,opt,name=isis_interface_afi_unsupported,json=isisInterfaceAfiUnsupported,proto3" json:"isis_interface_afi_unsupported,omitempty"`
	// Devices don't support modify table entry operation in P4 Runtime.
	P4RtModifyTableEntryUnsupported bool `protobuf:"varint,86,opt,name=p4rt_modify_table_entry_unsupported,json=p4rtModifyTableEntryUnsupported,proto3" json:"p4rt_modify_table_entry_unsupported,omitempty"`
	// Parent of OS component is of type SUPERVISOR or LINECARD.
	OsComponentParentIsSupervisorOrLinecard bool `protobuf:"varint,87,opt,name=os_component_parent_is_supervisor_or_linecard,json=osComponentParentIsSupervisorOrLinecard,proto3" json:"os_component_parent_is_supervisor_or_linecard,omitempty"`
	// Parent of OS component is of type CHASSIS.
	OsComponentParentIsChassis bool `protobuf:"varint,88,opt,name=os_component_parent_is_chassis,json=osComponentParentIsChassis,proto3" json:"os_component_parent_is_chassis,omitempty"`
	// Devices require configuring the same ISIS Metrics for Level 1 when
	// configuring Level 2 Metrics.
	IsisRequireSameL1MetricWithL2Metric bool `protobuf:"varint,91,opt,name=isis_require_same_l1_metric_with_l2_metric,json=isisRequireSameL1MetricWithL2Metric,proto3" json:"isis_require_same_l1_metric_with_l2_metric,omitempty"`
	// Devices require configuring the same OSPF setMetric when BGP
	// SetMED is configured.
	BgpSetMedRequiresEqualOspfSetMetric bool `protobuf:"varint,92,opt,name=bgp_set_med_requires_equal_ospf_set_metric,json=bgpSetMedRequiresEqualOspfSetMetric,proto3" json:"bgp_set_med_requires_equal_ospf_set_metric,omitempty"`
	// Devices require configuring subinterface with tagged vlan for p4rt
	// packet in.
	P4RtGdpRequiresDot1QSubinterface bool `protobuf:"varint,93,opt,name=p4rt_gdp_requires_dot1q_subinterface,json=p4rtGdpRequiresDot1qSubinterface,proto3" json:"p4rt_gdp_requires_dot1q_subinterface,omitempty"`
	// ATE port link state operations are a no-op in KNE/virtualized environments.
	AtePortLinkStateOperationsUnsupported bool `protobuf:"varint,94,opt,name=ate_port_link_state_operations_unsupported,json=atePortLinkStateOperationsUnsupported,proto3" json:"ate_port_link_state_operations_unsupported,omitempty"`
	// Creates a user and assigns role/rbac to said user via native model.
	SetNativeUser bool `protobuf:"varint,95,opt,name=set_native_user,json=setNativeUser,proto3" json:"set_native_user,omitempty"`
	// Devices require configuring lspRefreshInterval ISIS timer when
	// lspLifetimeInterval is configured.
	// Arista: partnerissuetracker.corp.google.com/293667850
	IsisLspLifetimeIntervalRequiresLspRefreshInterval bool `protobuf:"varint,96,opt,name=isis_lsp_lifetime_interval_requires_lsp_refresh_interval,json=isisLspLifetimeIntervalRequiresLspRefreshInterval,proto3" json:"isis_lsp_lifetime_interval_requires_lsp_refresh_interval,omitempty"`
	// Device does not support telemetry path
	// /components/component/cpu/utilization/state/avg for linecards' CPU card.
	LinecardCpuUtilizationUnsupported bool `protobuf:"varint,98,opt,name=linecard_cpu_utilization_unsupported,json=linecardCpuUtilizationUnsupported,proto3" json:"linecard_cpu_utilization_unsupported,omitempty"`
	// Device does not support consistent component names for GNOI and GNMI.
	ConsistentComponentNamesUnsupported bool `protobuf:"varint,99,opt,name=consistent_component_names_unsupported,json=consistentComponentNamesUnsupported,proto3" json:"consistent_component_names_unsupported,omitempty"`
	// Device does not support telemetry path
	// /components/component/cpu/utilization/state/avg for controller cards'
	// CPU card.
	ControllerCardCpuUtilizationUnsupported bool `protobuf:"varint,100,opt,name=controller_card_cpu_utilization_unsupported,json=controllerCardCpuUtilizationUnsupported,proto3" json:"controller_card_cpu_utilization_unsupported,omitempty"`
	// Device does not support counter for fabric block lost packets.
	FabricDropCounterUnsupported bool `protobuf:"varint,101,opt,name=fabric_drop_counter_unsupported,json=fabricDropCounterUnsupported,proto3" json:"fabric_drop_counter_unsupported,omitempty"`
	// Device does not support memory utilization related leaves for linecard components.
	LinecardMemoryUtilizationUnsupported bool `protobuf:"varint,102,opt,name=linecard_memory_utilization_unsupported,json=linecardMemoryUtilizationUnsupported,proto3" json:"linecard_memory_utilization_unsupported,omitempty"`
	// Device does not support telemetry path
	// /qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts.
	QosVoqDropCounterUnsupported bool `protobuf:"varint,103,opt,name=qos_voq_drop_counter_unsupported,json=qosVoqDropCounterUnsupported,proto3" json:"qos_voq_drop_counter_unsupported,omitempty"`
	// ATE IPv6 flow label unsupported in KNE/virtualized environments.
	AteIpv6FlowLabelUnsupported bool `protobuf:"varint,104,opt,name=ate_ipv6_flow_label_unsupported,json=ateIpv6FlowLabelUnsupported,proto3" json:"ate_ipv6_flow_label_unsupported,omitempty"`
	// Devices do not support configuring isis csnp-interval timer.
	// Arista: partnerissuetracker.corp.google.com/299283216
	IsisTimersCsnpIntervalUnsupported bool `protobuf:"varint,105,opt,name=isis_timers_csnp_interval_unsupported,json=isisTimersCsnpIntervalUnsupported,proto3" json:"isis_timers_csnp_interval_unsupported,omitempty"`
	// Devices do not support telemetry for isis counter:
	// manual-address-drop-from-areas.
	// Arista: partnerissuetracker.corp.google.com/299285115
	IsisCounterManualAddressDropFromAreasUnsupported bool `protobuf:"varint,106,opt,name=isis_counter_manual_address_drop_from_areas_unsupported,json=isisCounterManualAddressDropFromAreasUnsupported,proto3" json:"isis_counter_manual_address_drop_from_areas_unsupported,omitempty"`
	// Devices do not support telemetry for isis counter: part-changes.
	// Arista: partnerissuetracker.corp.google.com/317086576
	IsisCounterPartChangesUnsupported bool `protobuf:"varint,107,opt,name=isis_counter_part_changes_unsupported,json=isisCounterPartChangesUnsupported,proto3" json:"isis_counter_part_changes_unsupported,omitempty"`
	// Devices do not support threshold container under /components/component/transceiver.
	TransceiverThresholdsUnsupported bool `protobuf:"varint,108,opt,name=transceiver_thresholds_unsupported,json=transceiverThresholdsUnsupported,proto3" json:"transceiver_thresholds_unsupported,omitempty"`
	// Update interface loopback mode using raw gnmi API due to server version.
	InterfaceLoopbackModeRawGnmi bool `protobuf:"varint,109,opt,name=interface_loopback_mode_raw_gnmi,json=interfaceLoopbackModeRawGnmi,proto3" json:"interface_loopback_mode_raw_gnmi,omitempty"`
	// Devices do not support showing negotiated tcp mss value in bgp tcp mss telemetry.
	// Juniper: b/300499125
	SkipTcpNegotiatedMssCheck bool `protobuf:"varint,110,opt,name=skip_tcp_negotiated_mss_check,json=skipTcpNegotiatedMssCheck,proto3" json:"skip_tcp_negotiated_mss_check,omitempty"`
	// Devices don't support ISIS-Lsp metadata paths: checksum, sequence-number,
	// remaining-lifetime.
	IsisLspMetadataLeafsUnsupported bool `protobuf:"varint,111,opt,name=isis_lsp_metadata_leafs_unsupported,json=isisLspMetadataLeafsUnsupported,proto3" json:"isis_lsp_metadata_leafs_unsupported,omitempty"`
	// QOS queue requires configuration with queue-id
	QosQueueRequiresId bool `protobuf:"varint,112,opt,name=qos_queue_requires_id,json=qosQueueRequiresId,proto3" json:"qos_queue_requires_id,omitempty"`
	// Devices do not support forwarding for fib failed routes.
	SkipFibFailedTrafficForwardingCheck bool `protobuf:"varint,113,opt,name=skip_fib_failed_traffic_forwarding_check,json=skipFibFailedTrafficForwardingCheck,proto3" json:"skip_fib_failed_traffic_forwarding_check,omitempty"`
	// QOS requires buffer-allocation-profile configuration
	QosBufferAllocationConfigRequired bool `protobuf:"varint,114,opt,name=qos_buffer_allocation_config_required,json=qosBufferAllocationConfigRequired,proto3" json:"qos_buffer_allocation_config_required,omitempty"`
	// Devices do not support configuring ExtendedNextHopEncoding at the BGP global level.
	// Arista: https://partnerissuetracker.corp.google.com/issues/203683090
	BgpGlobalExtendedNextHopEncodingUnsupported bool `protobuf:"varint,115,opt,name=bgp_global_extended_next_hop_encoding_unsupported,json=bgpGlobalExtendedNextHopEncodingUnsupported,proto3" json:"bgp_global_extended_next_hop_encoding_unsupported,omitempty"`
	// OC unsupported for BGP LLGR disable.
	// Juniper: b/303479602
	BgpLlgrOcUndefined bool `protobuf:"varint,116,opt,name=bgp_llgr_oc_undefined,json=bgpLlgrOcUndefined,proto3" json:"bgp_llgr_oc_undefined,omitempty"`
	// Device does not support tunnel interfaces state paths
	// Juniper: partnerissuetracker.corp.google.com/300111031
	TunnelStatePathUnsupported bool `protobuf:"varint,117,opt,name=tunnel_state_path_unsupported,json=tunnelStatePathUnsupported,proto3" json:"tunnel_state_path_unsupported,omitempty"`
	// Device does not support tunnel interfaces source and destination address config paths
	// Juniper: partnerissuetracker.corp.google.com/300111031
	TunnelConfigPathUnsupported bool `protobuf:"varint,118,opt,name=tunnel_config_path_unsupported,json=tunnelConfigPathUnsupported,proto3" json:"tunnel_config_path_unsupported,omitempty"`
	// Cisco: Device does not support same minimun and maximum threshold value in QOS ECN config.
	EcnSameMinMaxThresholdUnsupported bool `protobuf:"varint,119,opt,name=ecn_same_min_max_threshold_unsupported,json=ecnSameMinMaxThresholdUnsupported,proto3" json:"ecn_same_min_max_threshold_unsupported,omitempty"`
	// Cisco: QOS requires scheduler configuration.
	QosSchedulerConfigRequired bool `protobuf:"varint,120,opt,name=qos_scheduler_config_required,json=qosSchedulerConfigRequired,proto3" json:"qos_scheduler_config_required,omitempty"`
	// Cisco: Device does not support set weight config under QOS ECN configuration.
	QosSetWeightConfigUnsupported bool `protobuf:"varint,121,opt,name=qos_set_weight_config_unsupported,json=qosSetWeightConfigUnsupported,proto3" json:"qos_set_weight_config_unsupported,omitempty"`
	// Cisco: Device does not support these get state path.
	QosGetStatePathUnsupported bool `protobuf:"varint,122,opt,name=qos_get_state_path_unsupported,json=qosGetStatePathUnsupported,proto3" json:"qos_get_state_path_unsupported,omitempty"`
	// Devices requires enabled leaf under isis level
	// Juniper: partnerissuetracker.corp.google.com/302661486
	IsisLevelEnabled bool `protobuf:"varint,123,opt,name=isis_level_enabled,json=isisLevelEnabled,proto3" json:"isis_level_enabled,omitempty"`
	// Devices which require to use interface-id format of interface name + .subinterface index with Interface-ref container
	InterfaceRefInterfaceIdFormat bool `protobuf:"varint,124,opt,name=interface_ref_interface_id_format,json=interfaceRefInterfaceIdFormat,proto3" json:"interface_ref_interface_id_format,omitempty"`
	// Devices does not support member link loopback
	// Juniper: b/307763669
	MemberLinkLoopbackUnsupported bool `protobuf:"varint,125,opt,name=member_link_loopback_unsupported,json=memberLinkLoopbackUnsupported,proto3" json:"member_link_loopback_unsupported,omitempty"`
	// Device does not support PLQ operational status check on interface
	// Juniper: b/308990185
	SkipPlqInterfaceOperStatusCheck bool `protobuf:"varint,126,opt,name=skip_plq_interface_oper_status_check,json=skipPlqInterfaceOperStatusCheck,proto3" json:"skip_plq_interface_oper_status_check,omitempty"`
	// Device set received prefix limits explicitly under prefix-limit-received rather than
	// "prefix-limit"
	BgpExplicitPrefixLimitReceived bool `protobuf:"varint,127,opt,name=bgp_explicit_prefix_limit_received,json=bgpExplicitPrefixLimitReceived,proto3" json:"bgp_explicit_prefix_limit_received,omitempty"`
	// Device does not configure BGP maximum routes correctly when max-prefixes
	// leaf is configured
	BgpMissingOcMaxPrefixesConfiguration bool `protobuf:"varint,128,opt,name=bgp_missing_oc_max_prefixes_configuration,json=bgpMissingOcMaxPrefixesConfiguration,proto3" json:"bgp_missing_oc_max_prefixes_configuration,omitempty"`
	// Devices which needs to skip checking AFI-SAFI disable.
	// Juniper: b/310698466
	SkipBgpSessionCheckWithoutAfisafi bool `protobuf:"varint,129,opt,name=skip_bgp_session_check_without_afisafi,json=skipBgpSessionCheckWithoutAfisafi,proto3" json:"skip_bgp_session_check_without_afisafi,omitempty"`
	// Devices that have separate naming conventions for hardware resource name
	// in /system/ tree and /components/ tree.
	MismatchedHardwareResourceNameInComponent bool `protobuf:"varint,130,opt,name=mismatched_hardware_resource_name_in_component,json=mismatchedHardwareResourceNameInComponent,proto3" json:"mismatched_hardware_resource_name_in_component,omitempty"`
	// Devices that don't support telemetry for hardware resources before
	// used-threshold-upper configuration.
	MissingHardwareResourceTelemetryBeforeConfig bool `protobuf:"varint,131,opt,name=missing_hardware_resource_telemetry_before_config,json=missingHardwareResourceTelemetryBeforeConfig,proto3" json:"missing_hardware_resource_telemetry_before_config,omitempty"`
	// Device does not support reboot status check on subcomponents.
	GnoiSubcomponentRebootStatusUnsupported bool `protobuf:"varint,132,opt,name=gnoi_subcomponent_reboot_status_unsupported,json=gnoiSubcomponentRebootStatusUnsupported,proto3" json:"gnoi_subcomponent_reboot_status_unsupported,omitempty"`
	// Devices exports routes from all protocols to BGP if the export-policy is ACCEPT
	// Juniper: b/308970803
	SkipNonBgpRouteExportCheck bool `protobuf:"varint,133,opt,name=skip_non_bgp_route_export_check,json=skipNonBgpRouteExportCheck,proto3" json:"skip_non_bgp_route_export_check,omitempty"`
	// Devices do not support path
	// /network-instances/network-instance/protocols/protocol/isis/levels/level/state/metric-style
	// Arista: https://partnerissuetracker.corp.google.com/issues/317064733
	IsisMetricStyleTelemetryUnsupported bool `protobuf:"varint,134,opt,name=isis_metric_style_telemetry_unsupported,json=isisMetricStyleTelemetryUnsupported,proto3" json:"isis_metric_style_telemetry_unsupported,omitempty"`
	// Devices do not support configuring Interface-ref under Static-Route Next-Hop
	StaticRouteNextHopInterfaceRefUnsupported bool `protobuf:"varint,135,opt,name=static_route_next_hop_interface_ref_unsupported,json=staticRouteNextHopInterfaceRefUnsupported,proto3" json:"static_route_next_hop_interface_ref_unsupported,omitempty"`
	// Devices which does not support nexthop index state
	// Juniper: b/304729237
	SkipStaticNexthopCheck bool `protobuf:"varint,136,opt,name=skip_static_nexthop_check,json=skipStaticNexthopCheck,proto3" json:"skip_static_nexthop_check,omitempty"`
	// Devices which needs to enable leaf specific flag
	// Juniper: b/319202763
	EnableFlowctrlFlag bool `protobuf:"varint,137,opt,name=enable_flowctrl_flag,json=enableFlowctrlFlag,proto3" json:"enable_flowctrl_flag,omitempty"`
	// Device doesn't support router advertisement enable and mode config
	// Juniper: b/316173974
	Ipv6RouterAdvertisementConfigUnsupported bool `protobuf:"varint,138,opt,name=ipv6_router_advertisement_config_unsupported,json=ipv6RouterAdvertisementConfigUnsupported,proto3" json:"ipv6_router_advertisement_config_unsupported,omitempty"`
	// Devices does not support setting prefix limit exceeded flag.
	// Juniper : b/317181227
	PrefixLimitExceededTelemetryUnsupported bool `protobuf:"varint,139,opt,name=prefix_limit_exceeded_telemetry_unsupported,json=prefixLimitExceededTelemetryUnsupported,proto3" json:"prefix_limit_exceeded_telemetry_unsupported,omitempty"`
	// Skip setting allow-multiple-as while configuring eBGP
	// Arista: partnerissuetracker.corp.google.com/issues/317422300
	SkipSettingAllowMultipleAs bool `protobuf:"varint,140,opt,name=skip_setting_allow_multiple_as,json=skipSettingAllowMultipleAs,proto3" json:"skip_setting_allow_multiple_as,omitempty"`
	// Skip tests with decap encap vrf as PBF action
	// Nokia: partnerissuetracker.corp.google.com/issues/323251581
	SkipPbfWithDecapEncapVrf bool `protobuf:"varint,141,opt,name=skip_pbf_with_decap_encap_vrf,json=skipPbfWithDecapEncapVrf,proto3" json:"skip_pbf_with_decap_encap_vrf,omitempty"`
	// Devices which does not support copying TTL.
	// Juniper: b/307258544
	TtlCopyUnsupported bool `protobuf:"varint,142,opt,name=ttl_copy_unsupported,json=ttlCopyUnsupported,proto3" json:"ttl_copy_unsupported,omitempty"`
	// Devices does not support mixed prefix length in gribi.
	// Juniper: b/307824407
	GribiDecapMixedPlenUnsupported bool `protobuf:"varint,143,opt,name=gribi_decap_mixed_plen_unsupported,json=gribiDecapMixedPlenUnsupported,proto3" json:"gribi_decap_mixed_plen_unsupported,omitempty"`
	// Skip setting isis-actions set-level while configuring routing-policy statement action
	SkipIsisSetLevel bool `protobuf:"varint,144,opt,name=skip_isis_set_level,json=skipIsisSetLevel,proto3" json:"skip_isis_set_level,omitempty"`
	// Skip setting isis-actions set-metric-style-type while configuring routing-policy statement action
	SkipIsisSetMetricStyleType bool `protobuf:"varint,145,opt,name=skip_isis_set_metric_style_type,json=skipIsisSetMetricStyleType,proto3" json:"skip_isis_set_metric_style_type,omitempty"`
	// Skip setting match-prefix-set match-set-options while configuring routing-policy statement condition
	SkipSetRpMatchSetOptions bool `protobuf:"varint,146,opt,name=skip_set_rp_match_set_options,json=skipSetRpMatchSetOptions,proto3" json:"skip_set_rp_match_set_options,omitempty"`
	// Skip setting disable-metric-propagation while configuring table-connection
	SkipSettingDisableMetricPropagation bool `protobuf:"varint,147,opt,name=skip_setting_disable_metric_propagation,json=skipSettingDisableMetricPropagation,proto3" json:"skip_setting_disable_metric_propagation,omitempty"`
}

func (x *Metadata_Deviations) Reset() {
	*x = Metadata_Deviations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_Deviations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Deviations) ProtoMessage() {}

func (x *Metadata_Deviations) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Deviations.ProtoReflect.Descriptor instead.
func (*Metadata_Deviations) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Metadata_Deviations) GetIpv4MissingEnabled() bool {
	if x != nil {
		return x.Ipv4MissingEnabled
	}
	return false
}

func (x *Metadata_Deviations) GetTracerouteFragmentation() bool {
	if x != nil {
		return x.TracerouteFragmentation
	}
	return false
}

func (x *Metadata_Deviations) GetTracerouteL4ProtocolUdp() bool {
	if x != nil {
		return x.TracerouteL4ProtocolUdp
	}
	return false
}

func (x *Metadata_Deviations) GetPrepolicyReceivedRoutes() bool {
	if x != nil {
		return x.PrepolicyReceivedRoutes
	}
	return false
}

func (x *Metadata_Deviations) GetHierarchicalWeightResolutionTolerance() float64 {
	if x != nil {
		return x.HierarchicalWeightResolutionTolerance
	}
	return 0
}

func (x *Metadata_Deviations) GetIsisMultiTopologyUnsupported() bool {
	if x != nil {
		return x.IsisMultiTopologyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisInterfaceLevel1DisableRequired() bool {
	if x != nil {
		return x.IsisInterfaceLevel1DisableRequired
	}
	return false
}

func (x *Metadata_Deviations) GetIsisSingleTopologyRequired() bool {
	if x != nil {
		return x.IsisSingleTopologyRequired
	}
	return false
}

func (x *Metadata_Deviations) GetIsisInstanceEnabledRequired() bool {
	if x != nil {
		return x.IsisInstanceEnabledRequired
	}
	return false
}

func (x *Metadata_Deviations) GetMissingIsisInterfaceAfiSafiEnable() bool {
	if x != nil {
		return x.MissingIsisInterfaceAfiSafiEnable
	}
	return false
}

func (x *Metadata_Deviations) GetIsisGlobalAuthenticationNotRequired() bool {
	if x != nil {
		return x.IsisGlobalAuthenticationNotRequired
	}
	return false
}

func (x *Metadata_Deviations) GetIsisExplicitLevelAuthenticationConfig() bool {
	if x != nil {
		return x.IsisExplicitLevelAuthenticationConfig
	}
	return false
}

func (x *Metadata_Deviations) GetIsisRestartSuppressUnsupported() bool {
	if x != nil {
		return x.IsisRestartSuppressUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIpNeighborMissing() bool {
	if x != nil {
		return x.IpNeighborMissing
	}
	return false
}

func (x *Metadata_Deviations) GetOsactivateNoreboot() bool {
	if x != nil {
		return x.OsactivateNoreboot
	}
	return false
}

func (x *Metadata_Deviations) GetOsinstallForStandbyRp() bool {
	if x != nil {
		return x.OsinstallForStandbyRp
	}
	return false
}

func (x *Metadata_Deviations) GetLldpInterfaceConfigOverrideGlobal() bool {
	if x != nil {
		return x.LldpInterfaceConfigOverrideGlobal
	}
	return false
}

func (x *Metadata_Deviations) GetMissingBgpLastNotificationErrorCode() bool {
	if x != nil {
		return x.MissingBgpLastNotificationErrorCode
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceRefConfigUnsupported() bool {
	if x != nil {
		return x.InterfaceRefConfigUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetStatePathUnsupported() bool {
	if x != nil {
		return x.StatePathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6EnableForGribiNhDmac() bool {
	if x != nil {
		return x.Ipv6EnableForGribiNhDmac
	}
	return false
}

func (x *Metadata_Deviations) GetEcnProfileRequiredDefinition() bool {
	if x != nil {
		return x.EcnProfileRequiredDefinition
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6DiscardedPktsUnsupported() bool {
	if x != nil {
		return x.Ipv6DiscardedPktsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetDropWeightLeavesUnsupported() bool {
	if x != nil {
		return x.DropWeightLeavesUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetCliTakesPrecedenceOverOc() bool {
	if x != nil {
		return x.CliTakesPrecedenceOverOc
	}
	return false
}

func (x *Metadata_Deviations) GetSchedulerInputWeightLimit() bool {
	if x != nil {
		return x.SchedulerInputWeightLimit
	}
	return false
}

func (x *Metadata_Deviations) GetSwitchChipIdUnsupported() bool {
	if x != nil {
		return x.SwitchChipIdUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBackplaneFacingCapacityUnsupported() bool {
	if x != nil {
		return x.BackplaneFacingCapacityUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceCountersFromContainer() bool {
	if x != nil {
		return x.InterfaceCountersFromContainer
	}
	return false
}

func (x *Metadata_Deviations) GetNoMixOfTaggedAndUntaggedSubinterfaces() bool {
	if x != nil {
		return x.NoMixOfTaggedAndUntaggedSubinterfaces
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitP4RtNodeComponent() bool {
	if x != nil {
		return x.ExplicitP4RtNodeComponent
	}
	return false
}

func (x *Metadata_Deviations) GetUseVendorNativeAclConfig() bool {
	if x != nil {
		return x.UseVendorNativeAclConfig
	}
	return false
}

func (x *Metadata_Deviations) GetSwVersionUnsupported() bool {
	if x != nil {
		return x.SwVersionUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitInterfaceRefDefinition() bool {
	if x != nil {
		return x.ExplicitInterfaceRefDefinition
	}
	return false
}

func (x *Metadata_Deviations) GetStorageComponentUnsupported() bool {
	if x != nil {
		return x.StorageComponentUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitGribiUnderNetworkInstance() bool {
	if x != nil {
		return x.ExplicitGribiUnderNetworkInstance
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitPortSpeed() bool {
	if x != nil {
		return x.ExplicitPortSpeed
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitInterfaceInDefaultVrf() bool {
	if x != nil {
		return x.ExplicitInterfaceInDefaultVrf
	}
	return false
}

func (x *Metadata_Deviations) GetQosDroppedOctets() bool {
	if x != nil {
		return x.QosDroppedOctets
	}
	return false
}

func (x *Metadata_Deviations) GetSubinterfacePacketCountersMissing() bool {
	if x != nil {
		return x.SubinterfacePacketCountersMissing
	}
	return false
}

func (x *Metadata_Deviations) GetConnectRetry() bool {
	if x != nil {
		return x.ConnectRetry
	}
	return false
}

func (x *Metadata_Deviations) GetGribiMacOverrideWithStaticArp() bool {
	if x != nil {
		return x.GribiMacOverrideWithStaticArp
	}
	return false
}

func (x *Metadata_Deviations) GetRoutePolicyUnderAfiUnsupported() bool {
	if x != nil {
		return x.RoutePolicyUnderAfiUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiFabricComponentRebootUnsupported() bool {
	if x != nil {
		return x.GnoiFabricComponentRebootUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetNtpNonDefaultVrfUnsupported() bool {
	if x != nil {
		return x.NtpNonDefaultVrfUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetOmitL2Mtu() bool {
	if x != nil {
		return x.OmitL2Mtu
	}
	return false
}

func (x *Metadata_Deviations) GetSkipControllerCardPowerAdmin() bool {
	if x != nil {
		return x.SkipControllerCardPowerAdmin
	}
	return false
}

func (x *Metadata_Deviations) GetBannerDelimiter() string {
	if x != nil {
		return x.BannerDelimiter
	}
	return ""
}

func (x *Metadata_Deviations) GetBgpToleranceValue() int32 {
	if x != nil {
		return x.BgpToleranceValue
	}
	return 0
}

func (x *Metadata_Deviations) GetLinkQualWaitAfterDeleteRequired() bool {
	if x != nil {
		return x.LinkQualWaitAfterDeleteRequired
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiStatusEmptySubcomponent() bool {
	if x != nil {
		return x.GnoiStatusEmptySubcomponent
	}
	return false
}

func (x *Metadata_Deviations) GetNetworkInstanceTableDeletionRequired() bool {
	if x != nil {
		return x.NetworkInstanceTableDeletionRequired
	}
	return false
}

func (x *Metadata_Deviations) GetBgpMd5RequiresReset() bool {
	if x != nil {
		return x.BgpMd5RequiresReset
	}
	return false
}

func (x *Metadata_Deviations) GetDequeueDeleteNotCountedAsDrops() bool {
	if x != nil {
		return x.DequeueDeleteNotCountedAsDrops
	}
	return false
}

func (x *Metadata_Deviations) GetGribiRibackOnly() bool {
	if x != nil {
		return x.GribiRibackOnly
	}
	return false
}

func (x *Metadata_Deviations) GetAggregateAtomicUpdate() bool {
	if x != nil {
		return x.AggregateAtomicUpdate
	}
	return false
}

func (x *Metadata_Deviations) GetMissingValueForDefaults() bool {
	if x != nil {
		return x.MissingValueForDefaults
	}
	return false
}

func (x *Metadata_Deviations) GetStaticProtocolName() string {
	if x != nil {
		return x.StaticProtocolName
	}
	return ""
}

func (x *Metadata_Deviations) GetGnoiSubcomponentPath() bool {
	if x != nil {
		return x.GnoiSubcomponentPath
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceConfigVrfBeforeAddress() bool {
	if x != nil {
		return x.InterfaceConfigVrfBeforeAddress
	}
	return false
}

func (x *Metadata_Deviations) GetDeprecatedVlanId() bool {
	if x != nil {
		return x.DeprecatedVlanId
	}
	return false
}

func (x *Metadata_Deviations) GetGribiMacOverrideStaticArpStaticRoute() bool {
	if x != nil {
		return x.GribiMacOverrideStaticArpStaticRoute
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceEnabled() bool {
	if x != nil {
		return x.InterfaceEnabled
	}
	return false
}

func (x *Metadata_Deviations) GetQosOctets() bool {
	if x != nil {
		return x.QosOctets
	}
	return false
}

func (x *Metadata_Deviations) GetCpuMissingAncestor() bool {
	if x != nil {
		return x.CpuMissingAncestor
	}
	return false
}

func (x *Metadata_Deviations) GetRequireRoutedSubinterface_0() bool {
	if x != nil {
		return x.RequireRoutedSubinterface_0
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiSwitchoverReasonMissingUserInitiated() bool {
	if x != nil {
		return x.GnoiSwitchoverReasonMissingUserInitiated
	}
	return false
}

func (x *Metadata_Deviations) GetDefaultNetworkInstance() string {
	if x != nil {
		return x.DefaultNetworkInstance
	}
	return ""
}

func (x *Metadata_Deviations) GetP4RtUnsetelectionidPrimaryAllowed() bool {
	if x != nil {
		return x.P4RtUnsetelectionidPrimaryAllowed
	}
	return false
}

func (x *Metadata_Deviations) GetBkupArbitrationRespCode() bool {
	if x != nil {
		return x.BkupArbitrationRespCode
	}
	return false
}

func (x *Metadata_Deviations) GetBackupNhgRequiresVrfWithDecap() bool {
	if x != nil {
		return x.BackupNhgRequiresVrfWithDecap
	}
	return false
}

func (x *Metadata_Deviations) GetIsisInterfaceAfiUnsupported() bool {
	if x != nil {
		return x.IsisInterfaceAfiUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetP4RtModifyTableEntryUnsupported() bool {
	if x != nil {
		return x.P4RtModifyTableEntryUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetOsComponentParentIsSupervisorOrLinecard() bool {
	if x != nil {
		return x.OsComponentParentIsSupervisorOrLinecard
	}
	return false
}

func (x *Metadata_Deviations) GetOsComponentParentIsChassis() bool {
	if x != nil {
		return x.OsComponentParentIsChassis
	}
	return false
}

func (x *Metadata_Deviations) GetIsisRequireSameL1MetricWithL2Metric() bool {
	if x != nil {
		return x.IsisRequireSameL1MetricWithL2Metric
	}
	return false
}

func (x *Metadata_Deviations) GetBgpSetMedRequiresEqualOspfSetMetric() bool {
	if x != nil {
		return x.BgpSetMedRequiresEqualOspfSetMetric
	}
	return false
}

func (x *Metadata_Deviations) GetP4RtGdpRequiresDot1QSubinterface() bool {
	if x != nil {
		return x.P4RtGdpRequiresDot1QSubinterface
	}
	return false
}

func (x *Metadata_Deviations) GetAtePortLinkStateOperationsUnsupported() bool {
	if x != nil {
		return x.AtePortLinkStateOperationsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSetNativeUser() bool {
	if x != nil {
		return x.SetNativeUser
	}
	return false
}

func (x *Metadata_Deviations) GetIsisLspLifetimeIntervalRequiresLspRefreshInterval() bool {
	if x != nil {
		return x.IsisLspLifetimeIntervalRequiresLspRefreshInterval
	}
	return false
}

func (x *Metadata_Deviations) GetLinecardCpuUtilizationUnsupported() bool {
	if x != nil {
		return x.LinecardCpuUtilizationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetConsistentComponentNamesUnsupported() bool {
	if x != nil {
		return x.ConsistentComponentNamesUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetControllerCardCpuUtilizationUnsupported() bool {
	if x != nil {
		return x.ControllerCardCpuUtilizationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetFabricDropCounterUnsupported() bool {
	if x != nil {
		return x.FabricDropCounterUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetLinecardMemoryUtilizationUnsupported() bool {
	if x != nil {
		return x.LinecardMemoryUtilizationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosVoqDropCounterUnsupported() bool {
	if x != nil {
		return x.QosVoqDropCounterUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetAteIpv6FlowLabelUnsupported() bool {
	if x != nil {
		return x.AteIpv6FlowLabelUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisTimersCsnpIntervalUnsupported() bool {
	if x != nil {
		return x.IsisTimersCsnpIntervalUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisCounterManualAddressDropFromAreasUnsupported() bool {
	if x != nil {
		return x.IsisCounterManualAddressDropFromAreasUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisCounterPartChangesUnsupported() bool {
	if x != nil {
		return x.IsisCounterPartChangesUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTransceiverThresholdsUnsupported() bool {
	if x != nil {
		return x.TransceiverThresholdsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceLoopbackModeRawGnmi() bool {
	if x != nil {
		return x.InterfaceLoopbackModeRawGnmi
	}
	return false
}

func (x *Metadata_Deviations) GetSkipTcpNegotiatedMssCheck() bool {
	if x != nil {
		return x.SkipTcpNegotiatedMssCheck
	}
	return false
}

func (x *Metadata_Deviations) GetIsisLspMetadataLeafsUnsupported() bool {
	if x != nil {
		return x.IsisLspMetadataLeafsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosQueueRequiresId() bool {
	if x != nil {
		return x.QosQueueRequiresId
	}
	return false
}

func (x *Metadata_Deviations) GetSkipFibFailedTrafficForwardingCheck() bool {
	if x != nil {
		return x.SkipFibFailedTrafficForwardingCheck
	}
	return false
}

func (x *Metadata_Deviations) GetQosBufferAllocationConfigRequired() bool {
	if x != nil {
		return x.QosBufferAllocationConfigRequired
	}
	return false
}

func (x *Metadata_Deviations) GetBgpGlobalExtendedNextHopEncodingUnsupported() bool {
	if x != nil {
		return x.BgpGlobalExtendedNextHopEncodingUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpLlgrOcUndefined() bool {
	if x != nil {
		return x.BgpLlgrOcUndefined
	}
	return false
}

func (x *Metadata_Deviations) GetTunnelStatePathUnsupported() bool {
	if x != nil {
		return x.TunnelStatePathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTunnelConfigPathUnsupported() bool {
	if x != nil {
		return x.TunnelConfigPathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetEcnSameMinMaxThresholdUnsupported() bool {
	if x != nil {
		return x.EcnSameMinMaxThresholdUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosSchedulerConfigRequired() bool {
	if x != nil {
		return x.QosSchedulerConfigRequired
	}
	return false
}

func (x *Metadata_Deviations) GetQosSetWeightConfigUnsupported() bool {
	if x != nil {
		return x.QosSetWeightConfigUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosGetStatePathUnsupported() bool {
	if x != nil {
		return x.QosGetStatePathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisLevelEnabled() bool {
	if x != nil {
		return x.IsisLevelEnabled
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceRefInterfaceIdFormat() bool {
	if x != nil {
		return x.InterfaceRefInterfaceIdFormat
	}
	return false
}

func (x *Metadata_Deviations) GetMemberLinkLoopbackUnsupported() bool {
	if x != nil {
		return x.MemberLinkLoopbackUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipPlqInterfaceOperStatusCheck() bool {
	if x != nil {
		return x.SkipPlqInterfaceOperStatusCheck
	}
	return false
}

func (x *Metadata_Deviations) GetBgpExplicitPrefixLimitReceived() bool {
	if x != nil {
		return x.BgpExplicitPrefixLimitReceived
	}
	return false
}

func (x *Metadata_Deviations) GetBgpMissingOcMaxPrefixesConfiguration() bool {
	if x != nil {
		return x.BgpMissingOcMaxPrefixesConfiguration
	}
	return false
}

func (x *Metadata_Deviations) GetSkipBgpSessionCheckWithoutAfisafi() bool {
	if x != nil {
		return x.SkipBgpSessionCheckWithoutAfisafi
	}
	return false
}

func (x *Metadata_Deviations) GetMismatchedHardwareResourceNameInComponent() bool {
	if x != nil {
		return x.MismatchedHardwareResourceNameInComponent
	}
	return false
}

func (x *Metadata_Deviations) GetMissingHardwareResourceTelemetryBeforeConfig() bool {
	if x != nil {
		return x.MissingHardwareResourceTelemetryBeforeConfig
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiSubcomponentRebootStatusUnsupported() bool {
	if x != nil {
		return x.GnoiSubcomponentRebootStatusUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipNonBgpRouteExportCheck() bool {
	if x != nil {
		return x.SkipNonBgpRouteExportCheck
	}
	return false
}

func (x *Metadata_Deviations) GetIsisMetricStyleTelemetryUnsupported() bool {
	if x != nil {
		return x.IsisMetricStyleTelemetryUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetStaticRouteNextHopInterfaceRefUnsupported() bool {
	if x != nil {
		return x.StaticRouteNextHopInterfaceRefUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipStaticNexthopCheck() bool {
	if x != nil {
		return x.SkipStaticNexthopCheck
	}
	return false
}

func (x *Metadata_Deviations) GetEnableFlowctrlFlag() bool {
	if x != nil {
		return x.EnableFlowctrlFlag
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6RouterAdvertisementConfigUnsupported() bool {
	if x != nil {
		return x.Ipv6RouterAdvertisementConfigUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPrefixLimitExceededTelemetryUnsupported() bool {
	if x != nil {
		return x.PrefixLimitExceededTelemetryUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipSettingAllowMultipleAs() bool {
	if x != nil {
		return x.SkipSettingAllowMultipleAs
	}
	return false
}

func (x *Metadata_Deviations) GetSkipPbfWithDecapEncapVrf() bool {
	if x != nil {
		return x.SkipPbfWithDecapEncapVrf
	}
	return false
}

func (x *Metadata_Deviations) GetTtlCopyUnsupported() bool {
	if x != nil {
		return x.TtlCopyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetGribiDecapMixedPlenUnsupported() bool {
	if x != nil {
		return x.GribiDecapMixedPlenUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipIsisSetLevel() bool {
	if x != nil {
		return x.SkipIsisSetLevel
	}
	return false
}

func (x *Metadata_Deviations) GetSkipIsisSetMetricStyleType() bool {
	if x != nil {
		return x.SkipIsisSetMetricStyleType
	}
	return false
}

func (x *Metadata_Deviations) GetSkipSetRpMatchSetOptions() bool {
	if x != nil {
		return x.SkipSetRpMatchSetOptions
	}
	return false
}

func (x *Metadata_Deviations) GetSkipSettingDisableMetricPropagation() bool {
	if x != nil {
		return x.SkipSettingDisableMetricPropagation
	}
	return false
}

type Metadata_PlatformExceptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform   *Metadata_Platform   `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Deviations *Metadata_Deviations `protobuf:"bytes,2,opt,name=deviations,proto3" json:"deviations,omitempty"`
}

func (x *Metadata_PlatformExceptions) Reset() {
	*x = Metadata_PlatformExceptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata_PlatformExceptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_PlatformExceptions) ProtoMessage() {}

func (x *Metadata_PlatformExceptions) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_PlatformExceptions.ProtoReflect.Descriptor instead.
func (*Metadata_PlatformExceptions) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Metadata_PlatformExceptions) GetPlatform() *Metadata_Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *Metadata_PlatformExceptions) GetDeviations() *Metadata_Deviations {
	if x != nil {
		return x.Deviations
	}
	return nil
}

var File_metadata_proto protoreflect.FileDescriptor

var file_metadata_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x1a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x6e, 0x64, 0x61,
	0x74, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x51, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x52, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x62, 0x65, 0x64, 0x12, 0x60, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0xb8, 0x01, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x6e, 0x64, 0x61,
	0x74, 0x72, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73, 0x6f, 0x66,
	0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x52, 0x0e, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xef, 0x49, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x70, 0x76, 0x34, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6c, 0x34, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x75, 0x64,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4c, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x55, 0x64, 0x70,
	0x12, 0x3a, 0x0a, 0x19, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x72, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x28,
	0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x25,
	0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x75, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x69, 0x73, 0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x26,
	0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x31, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x69, 0x73,
	0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x31, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x41, 0x0a, 0x1d, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x69, 0x73, 0x69, 0x73, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73, 0x69,
	0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x26, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x49, 0x73, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x66,
	0x69, 0x53, 0x61, 0x66, 0x69, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x27, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x73,
	0x69, 0x73, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x58, 0x0a, 0x29, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x69, 0x73, 0x69, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x21, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x6f, 0x73, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4e,
	0x6f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x73, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x5f, 0x72, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6f, 0x73, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x70,
	0x12, 0x50, 0x0a, 0x25, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x21, 0x6c, 0x6c, 0x64, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x12, 0x55, 0x0a, 0x28, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x67,
	0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x42, 0x67, 0x70,
	0x4c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1d, 0x69, 0x70, 0x76, 0x36,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x6e, 0x68, 0x5f, 0x64, 0x6d, 0x61, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x18, 0x69, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x47, 0x72,
	0x69, 0x62, 0x69, 0x4e, 0x68, 0x44, 0x6d, 0x61, 0x63, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x63, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x65, 0x63, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x1f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x70, 0x76, 0x36, 0x44,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1b, 0x64, 0x72, 0x6f, 0x70, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x73, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1c,
	0x63, 0x6c, 0x69, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x63, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x63, 0x6c, 0x69, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x63, 0x12, 0x3f, 0x0a, 0x1c,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a,
	0x1a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x55,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x25, 0x62, 0x61,
	0x63, 0x6b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x62, 0x61, 0x63, 0x6b, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x46, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a,
	0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x2b, 0x6e, 0x6f, 0x5f, 0x6d,
	0x69, 0x78, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x75, 0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x6e,
	0x6f, 0x4d, 0x69, 0x78, 0x4f, 0x66, 0x54, 0x61, 0x67, 0x67, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x55,
	0x6e, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x5f, 0x70, 0x34, 0x72, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x78, 0x70, 0x6c,
	0x69, 0x63, 0x69, 0x74, 0x50, 0x34, 0x72, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x75, 0x73, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x63, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x77, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x77, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x21, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x47, 0x72, 0x69, 0x62, 0x69, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21,
	0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72,
	0x66, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x72, 0x66, 0x12, 0x2c, 0x0a, 0x12, 0x71, 0x6f, 0x73, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x71, 0x6f, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x24, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x21, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x22, 0x67, 0x72,
	0x69, 0x62, 0x69, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x72, 0x70,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x67, 0x72, 0x69, 0x62, 0x69, 0x4d, 0x61, 0x63,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x41, 0x72, 0x70, 0x12, 0x4a, 0x0a, 0x22, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x69, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x66, 0x69, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x56, 0x0a, 0x28, 0x67, 0x6e, 0x6f, 0x69, 0x5f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x24, 0x67, 0x6e, 0x6f, 0x69, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x6e, 0x74, 0x70,
	0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x72, 0x66,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x6e, 0x74, 0x70, 0x4e, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x72, 0x66, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0b, 0x6f, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x32, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6d, 0x69, 0x74, 0x4c, 0x32, 0x4d, 0x74, 0x75, 0x12,
	0x46, 0x0a, 0x20, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x73, 0x6b, 0x69, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x62, 0x67, 0x70, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1f, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x75, 0x61, 0x6c, 0x57, 0x61, 0x69, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x43, 0x0a, 0x1e, 0x67, 0x6e, 0x6f, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x67, 0x6e, 0x6f, 0x69, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x28, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x16, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x64, 0x35, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x62, 0x67, 0x70, 0x4d, 0x64, 0x35, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x23, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x41, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x72, 0x69, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x69,
	0x62, 0x69, 0x52, 0x69, 0x62, 0x61, 0x63, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x17,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x44, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x67, 0x6e, 0x6f, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x67, 0x6e, 0x6f, 0x69, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x72,
	0x66, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x72, 0x66, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x72, 0x65,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x2a, 0x67, 0x72, 0x69, 0x62, 0x69, 0x5f, 0x6d,
	0x61, 0x63, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x61, 0x72, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x67, 0x72, 0x69, 0x62, 0x69,
	0x4d, 0x61, 0x63, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x41, 0x72, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x71, 0x6f, 0x73, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x71, 0x6f, 0x73, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x70, 0x75, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x70, 0x75, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a,
	0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x64, 0x5f,
	0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x30, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x30,
	0x12, 0x5f, 0x0a, 0x2d, 0x67, 0x6e, 0x6f, 0x69, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x67, 0x6e, 0x6f, 0x69, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x70,
	0x34, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x70, 0x34, 0x72, 0x74, 0x55,
	0x6e, 0x73, 0x65, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a,
	0x62, 0x6b, 0x75, 0x70, 0x5f, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x62, 0x6b, 0x75, 0x70, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x22, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x68, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x76, 0x72, 0x66, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x18,
	0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x68, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x56, 0x72, 0x66, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x63, 0x61, 0x70, 0x12, 0x43, 0x0a, 0x1e, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x69, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x69, 0x73,
	0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x66, 0x69, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x34, 0x72,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x56, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x34, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x2d, 0x6f, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18, 0x57, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27,
	0x6f, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x4f, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x1e, 0x6f, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x73, 0x5f, 0x63, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x18, 0x58, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x6f, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x73, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x12, 0x57, 0x0a, 0x2a, 0x69,
	0x73, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x65,
	0x5f, 0x6c, 0x31, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x6c, 0x32, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x23, 0x69, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x65,
	0x4c, 0x31, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x32, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x57, 0x0a, 0x2a, 0x62, 0x67, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x65, 0x71, 0x75,
	0x61, 0x6c, 0x5f, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x62, 0x67, 0x70, 0x53, 0x65, 0x74,
	0x4d, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x45, 0x71, 0x75, 0x61, 0x6c,
	0x4f, 0x73, 0x70, 0x66, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x4e, 0x0a,
	0x24, 0x70, 0x34, 0x72, 0x74, 0x5f, 0x67, 0x64, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x64, 0x6f, 0x74, 0x31, 0x71, 0x5f, 0x73, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x70, 0x34, 0x72,
	0x74, 0x47, 0x64, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x44, 0x6f, 0x74, 0x31,
	0x71, 0x53, 0x75, 0x62, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x59, 0x0a,
	0x2a, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x5e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x25, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x6e, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x73, 0x0a, 0x38, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x66,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x6c, 0x73, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x60, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x31, 0x69, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x4c, 0x69, 0x66, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x4c, 0x73, 0x70, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x24, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x62, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x21, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x43, 0x70, 0x75,
	0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5c, 0x0a, 0x2b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x27, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64,
	0x43, 0x70, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x1f, 0x66, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x55, 0x0a, 0x27, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x24, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x71, 0x6f, 0x73, 0x5f, 0x76,
	0x6f, 0x71, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x71, 0x6f, 0x73, 0x56, 0x6f, 0x71, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x1f, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x61, 0x74, 0x65, 0x49, 0x70, 0x76,
	0x36, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x73, 0x6e, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x43, 0x73, 0x6e, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x71, 0x0a, 0x37, 0x69, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x30, 0x69, 0x73, 0x69, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x73, 0x55,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x69, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x69, 0x73, 0x69, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x22,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x55,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x20, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x77, 0x5f, 0x67, 0x6e, 0x6d, 0x69, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c,
	0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x77, 0x47, 0x6e,
	0x6d, 0x69, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x6e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x73, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x54,
	0x63, 0x70, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x73, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x4c, 0x0a, 0x23, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x73, 0x70,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x61, 0x66, 0x73, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1f, 0x69, 0x73, 0x69, 0x73, 0x4c, 0x73, 0x70, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x65, 0x61, 0x66, 0x73, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x71, 0x6f, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x71, 0x6f, 0x73, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x28, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x69,
	0x62, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x69, 0x62,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x50, 0x0a, 0x25,
	0x71, 0x6f, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x71, 0x6f, 0x73,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x66,
	0x0a, 0x31, 0x62, 0x67, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2b, 0x62, 0x67, 0x70, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x67, 0x70, 0x5f, 0x6c, 0x6c,
	0x67, 0x72, 0x5f, 0x6f, 0x63, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x67, 0x70, 0x4c, 0x6c, 0x67, 0x72, 0x4f, 0x63,
	0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x75,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x76,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x51, 0x0a, 0x26, 0x65, 0x63, 0x6e, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x77, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x21, 0x65, 0x63, 0x6e, 0x53, 0x61, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x71, 0x6f, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x71, 0x6f, 0x73,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x71, 0x6f, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x71, 0x6f, 0x73, 0x53, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x1e, 0x71, 0x6f, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x71, 0x6f, 0x73, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x7b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x69, 0x73, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x21, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x0a,
	0x20, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x6f,
	0x70, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x4c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x24, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70,
	0x6c, 0x71, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x6c, 0x71, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x22, 0x62, 0x67, 0x70, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x62, 0x67, 0x70, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x58, 0x0a, 0x29, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x63, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x80,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x62, 0x67, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4f, 0x63, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x26, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x66,
	0x69, 0x73, 0x61, 0x66, 0x69, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x73, 0x6b,
	0x69, 0x70, 0x42, 0x67, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x66, 0x69, 0x73, 0x61, 0x66, 0x69, 0x12,
	0x62, 0x0a, 0x2e, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x29, 0x6d, 0x69, 0x73, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x68, 0x0a, 0x31, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x2c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a,
	0x2b, 0x67, 0x6e, 0x6f, 0x69, 0x5f, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x27, 0x67, 0x6e, 0x6f, 0x69, 0x53, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x85, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x70, 0x4e, 0x6f, 0x6e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x12, 0x55, 0x0a, 0x27, 0x69, 0x73, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x69, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x55, 0x6e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68,
	0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x87, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x29, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x66, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3a,
	0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x74, 0x72, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x5f, 0x0a,
	0x2c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x8a, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5d,
	0x0a, 0x2b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x8b, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x1e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x41, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x62, 0x66, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x63, 0x61, 0x70, 0x5f,
	0x76, 0x72, 0x66, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70,
	0x50, 0x62, 0x66, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x63, 0x61, 0x70, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x56, 0x72, 0x66, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x74, 0x6c, 0x5f, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x74, 0x6c, 0x43, 0x6f, 0x70, 0x79, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x22, 0x67, 0x72, 0x69, 0x62, 0x69,
	0x5f, 0x64, 0x65, 0x63, 0x61, 0x70, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x70, 0x6c, 0x65,
	0x6e, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x8f, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x67, 0x72, 0x69, 0x62, 0x69, 0x44, 0x65, 0x63, 0x61, 0x70,
	0x4d, 0x69, 0x78, 0x65, 0x64, 0x50, 0x6c, 0x65, 0x6e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x1f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x73, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x73, 0x6b, 0x69, 0x70, 0x49, 0x73, 0x69, 0x73, 0x53, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x70, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x65, 0x74, 0x52, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x27,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23,
	0x73, 0x6b, 0x69, 0x70, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x54, 0x10, 0x55, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a,
	0x04, 0x08, 0x1c, 0x10, 0x1d, 0x4a, 0x04, 0x08, 0x14, 0x10, 0x15, 0x4a, 0x04, 0x08, 0x5a, 0x10,
	0x5b, 0x4a, 0x04, 0x08, 0x61, 0x10, 0x62, 0x4a, 0x04, 0x08, 0x37, 0x10, 0x38, 0x4a, 0x04, 0x08,
	0x59, 0x10, 0x5a, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x1a, 0xa0, 0x01, 0x0a, 0x12, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x41, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe3, 0x01, 0x0a,
	0x07, 0x54, 0x65, 0x73, 0x74, 0x62, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x53, 0x54,
	0x42, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x42, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x54,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x53, 0x54, 0x42, 0x45, 0x44, 0x5f, 0x44, 0x55,
	0x54, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x34, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x45, 0x53, 0x54, 0x42, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x41, 0x54,
	0x45, 0x5f, 0x32, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45,
	0x53, 0x54, 0x42, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x41, 0x54, 0x45, 0x5f, 0x34, 0x4c,
	0x49, 0x4e, 0x4b, 0x53, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x53, 0x54, 0x42, 0x45,
	0x44, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x41, 0x54, 0x45, 0x5f, 0x39, 0x4c, 0x49, 0x4e, 0x4b, 0x53,
	0x5f, 0x4c, 0x41, 0x47, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x53, 0x54, 0x42, 0x45,
	0x44, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x4c,
	0x49, 0x4e, 0x4b, 0x53, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x53, 0x54, 0x42, 0x45,
	0x44, 0x5f, 0x44, 0x55, 0x54, 0x5f, 0x41, 0x54, 0x45, 0x5f, 0x38, 0x4c, 0x49, 0x4e, 0x4b, 0x53,
	0x10, 0x07, 0x22, 0x6d, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41,
	0x47, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x47, 0x53, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x47, 0x53, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x41, 0x47, 0x53, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x41, 0x47, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10,
	0x04, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metadata_proto_rawDescOnce sync.Once
	file_metadata_proto_rawDescData = file_metadata_proto_rawDesc
)

func file_metadata_proto_rawDescGZIP() []byte {
	file_metadata_proto_rawDescOnce.Do(func() {
		file_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_metadata_proto_rawDescData)
	})
	return file_metadata_proto_rawDescData
}

var file_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_metadata_proto_goTypes = []interface{}{
	(Metadata_Testbed)(0),               // 0: openconfig.testing.Metadata.Testbed
	(Metadata_Tags)(0),                  // 1: openconfig.testing.Metadata.Tags
	(*Metadata)(nil),                    // 2: openconfig.testing.Metadata
	(*Metadata_Platform)(nil),           // 3: openconfig.testing.Metadata.Platform
	(*Metadata_Deviations)(nil),         // 4: openconfig.testing.Metadata.Deviations
	(*Metadata_PlatformExceptions)(nil), // 5: openconfig.testing.Metadata.PlatformExceptions
	(proto.Device_Vendor)(0),            // 6: ondatra.Device.Vendor
}
var file_metadata_proto_depIdxs = []int32{
	0, // 0: openconfig.testing.Metadata.testbed:type_name -> openconfig.testing.Metadata.Testbed
	5, // 1: openconfig.testing.Metadata.platform_exceptions:type_name -> openconfig.testing.Metadata.PlatformExceptions
	1, // 2: openconfig.testing.Metadata.tags:type_name -> openconfig.testing.Metadata.Tags
	6, // 3: openconfig.testing.Metadata.Platform.vendor:type_name -> ondatra.Device.Vendor
	3, // 4: openconfig.testing.Metadata.PlatformExceptions.platform:type_name -> openconfig.testing.Metadata.Platform
	4, // 5: openconfig.testing.Metadata.PlatformExceptions.deviations:type_name -> openconfig.testing.Metadata.Deviations
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_metadata_proto_init() }
func file_metadata_proto_init() {
	if File_metadata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata_Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata_Deviations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metadata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata_PlatformExceptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metadata_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metadata_proto_goTypes,
		DependencyIndexes: file_metadata_proto_depIdxs,
		EnumInfos:         file_metadata_proto_enumTypes,
		MessageInfos:      file_metadata_proto_msgTypes,
	}.Build()
	File_metadata_proto = out.File
	file_metadata_proto_rawDesc = nil
	file_metadata_proto_goTypes = nil
	file_metadata_proto_depIdxs = nil
}
