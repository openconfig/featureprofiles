// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: metadata.proto

package metadata_go_proto

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	proto "github.com/openconfig/ondatra/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of testbeds on which the test may run.
type Metadata_Testbed int32

const (
	Metadata_TESTBED_UNSPECIFIED           Metadata_Testbed = 0
	Metadata_TESTBED_DUT                   Metadata_Testbed = 1
	Metadata_TESTBED_DUT_DUT_4LINKS        Metadata_Testbed = 2
	Metadata_TESTBED_DUT_ATE_2LINKS        Metadata_Testbed = 3
	Metadata_TESTBED_DUT_ATE_4LINKS        Metadata_Testbed = 4
	Metadata_TESTBED_DUT_ATE_9LINKS_LAG    Metadata_Testbed = 5
	Metadata_TESTBED_DUT_DUT_ATE_2LINKS    Metadata_Testbed = 6
	Metadata_TESTBED_DUT_ATE_8LINKS        Metadata_Testbed = 7
	Metadata_TESTBED_DUT_400ZR             Metadata_Testbed = 8
	Metadata_TESTBED_DUT_400ZR_PLUS        Metadata_Testbed = 9
	Metadata_TESTBED_DUT_400ZR_100G_4LINKS Metadata_Testbed = 10
	Metadata_TESTBED_DUT_400FR_100G_4LINKS Metadata_Testbed = 11
	Metadata_TESTBED_DUT_ATE_5LINKS        Metadata_Testbed = 12
)

// Enum value maps for Metadata_Testbed.
var (
	Metadata_Testbed_name = map[int32]string{
		0:  "TESTBED_UNSPECIFIED",
		1:  "TESTBED_DUT",
		2:  "TESTBED_DUT_DUT_4LINKS",
		3:  "TESTBED_DUT_ATE_2LINKS",
		4:  "TESTBED_DUT_ATE_4LINKS",
		5:  "TESTBED_DUT_ATE_9LINKS_LAG",
		6:  "TESTBED_DUT_DUT_ATE_2LINKS",
		7:  "TESTBED_DUT_ATE_8LINKS",
		8:  "TESTBED_DUT_400ZR",
		9:  "TESTBED_DUT_400ZR_PLUS",
		10: "TESTBED_DUT_400ZR_100G_4LINKS",
		11: "TESTBED_DUT_400FR_100G_4LINKS",
		12: "TESTBED_DUT_ATE_5LINKS",
	}
	Metadata_Testbed_value = map[string]int32{
		"TESTBED_UNSPECIFIED":           0,
		"TESTBED_DUT":                   1,
		"TESTBED_DUT_DUT_4LINKS":        2,
		"TESTBED_DUT_ATE_2LINKS":        3,
		"TESTBED_DUT_ATE_4LINKS":        4,
		"TESTBED_DUT_ATE_9LINKS_LAG":    5,
		"TESTBED_DUT_DUT_ATE_2LINKS":    6,
		"TESTBED_DUT_ATE_8LINKS":        7,
		"TESTBED_DUT_400ZR":             8,
		"TESTBED_DUT_400ZR_PLUS":        9,
		"TESTBED_DUT_400ZR_100G_4LINKS": 10,
		"TESTBED_DUT_400FR_100G_4LINKS": 11,
		"TESTBED_DUT_ATE_5LINKS":        12,
	}
)

func (x Metadata_Testbed) Enum() *Metadata_Testbed {
	p := new(Metadata_Testbed)
	*p = x
	return p
}

func (x Metadata_Testbed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_Testbed) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[0].Descriptor()
}

func (Metadata_Testbed) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[0]
}

func (x Metadata_Testbed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_Testbed.Descriptor instead.
func (Metadata_Testbed) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 0}
}

type Metadata_Tags int32

const (
	Metadata_TAGS_UNSPECIFIED     Metadata_Tags = 0
	Metadata_TAGS_AGGREGATION     Metadata_Tags = 1
	Metadata_TAGS_DATACENTER_EDGE Metadata_Tags = 2
	Metadata_TAGS_EDGE            Metadata_Tags = 3
	Metadata_TAGS_TRANSIT         Metadata_Tags = 4
)

// Enum value maps for Metadata_Tags.
var (
	Metadata_Tags_name = map[int32]string{
		0: "TAGS_UNSPECIFIED",
		1: "TAGS_AGGREGATION",
		2: "TAGS_DATACENTER_EDGE",
		3: "TAGS_EDGE",
		4: "TAGS_TRANSIT",
	}
	Metadata_Tags_value = map[string]int32{
		"TAGS_UNSPECIFIED":     0,
		"TAGS_AGGREGATION":     1,
		"TAGS_DATACENTER_EDGE": 2,
		"TAGS_EDGE":            3,
		"TAGS_TRANSIT":         4,
	}
)

func (x Metadata_Tags) Enum() *Metadata_Tags {
	p := new(Metadata_Tags)
	*p = x
	return p
}

func (x Metadata_Tags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Metadata_Tags) Descriptor() protoreflect.EnumDescriptor {
	return file_metadata_proto_enumTypes[1].Descriptor()
}

func (Metadata_Tags) Type() protoreflect.EnumType {
	return &file_metadata_proto_enumTypes[1]
}

func (x Metadata_Tags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Metadata_Tags.Descriptor instead.
func (Metadata_Tags) EnumDescriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 1}
}

// Metadata about a Feature Profiles test.
type Metadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// UUID of the test.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// ID of the test in the test plan.
	PlanId string `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	// One-line description of the test.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Testbed on which the test is intended to run.
	Testbed Metadata_Testbed `protobuf:"varint,4,opt,name=testbed,proto3,enum=openconfig.testing.Metadata_Testbed" json:"testbed,omitempty"`
	// The `platform` field for each `platform_exceptions` should be mutually
	// exclusive. Duplicate matches will result in a test failure.
	PlatformExceptions []*Metadata_PlatformExceptions `protobuf:"bytes,5,rep,name=platform_exceptions,json=platformExceptions,proto3" json:"platform_exceptions,omitempty"`
	// The `tags` used to identify the area(s) testcase applies to. An empty tag
	// is the default implying it applies to all areas.
	Tags []Metadata_Tags `protobuf:"varint,6,rep,packed,name=tags,proto3,enum=openconfig.testing.Metadata_Tags" json:"tags,omitempty"`
	// Whether this test only checks paths for presence rather than semantic
	// checks.
	PathPresenceTest bool `protobuf:"varint,7,opt,name=path_presence_test,json=pathPresenceTest,proto3" json:"path_presence_test,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_metadata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Metadata) GetPlanId() string {
	if x != nil {
		return x.PlanId
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetTestbed() Metadata_Testbed {
	if x != nil {
		return x.Testbed
	}
	return Metadata_TESTBED_UNSPECIFIED
}

func (x *Metadata) GetPlatformExceptions() []*Metadata_PlatformExceptions {
	if x != nil {
		return x.PlatformExceptions
	}
	return nil
}

func (x *Metadata) GetTags() []Metadata_Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Metadata) GetPathPresenceTest() bool {
	if x != nil {
		return x.PathPresenceTest
	}
	return false
}

type Metadata_Platform struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Vendor of the device.
	Vendor proto.Device_Vendor `protobuf:"varint,1,opt,name=vendor,proto3,enum=ondatra.Device_Vendor" json:"vendor,omitempty"`
	// Regex for hardware model of the device.
	// The empty string will match any hardware model.
	HardwareModelRegex string `protobuf:"bytes,3,opt,name=hardware_model_regex,json=hardwareModelRegex,proto3" json:"hardware_model_regex,omitempty"`
	// Regex for software version of the device.
	// The empty string will match any software version.
	SoftwareVersionRegex string `protobuf:"bytes,4,opt,name=software_version_regex,json=softwareVersionRegex,proto3" json:"software_version_regex,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *Metadata_Platform) Reset() {
	*x = Metadata_Platform{}
	mi := &file_metadata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Platform) ProtoMessage() {}

func (x *Metadata_Platform) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Platform.ProtoReflect.Descriptor instead.
func (*Metadata_Platform) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Metadata_Platform) GetVendor() proto.Device_Vendor {
	if x != nil {
		return x.Vendor
	}
	return proto.Device_Vendor(0)
}

func (x *Metadata_Platform) GetHardwareModelRegex() string {
	if x != nil {
		return x.HardwareModelRegex
	}
	return ""
}

func (x *Metadata_Platform) GetSoftwareVersionRegex() string {
	if x != nil {
		return x.SoftwareVersionRegex
	}
	return ""
}

type Metadata_Deviations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Device does not support interface/ipv4/enabled,
	// so suppress configuring this leaf.
	Ipv4MissingEnabled bool `protobuf:"varint,1,opt,name=ipv4_missing_enabled,json=ipv4MissingEnabled,proto3" json:"ipv4_missing_enabled,omitempty"`
	// Device does not support fragmentation bit for traceroute.
	TracerouteFragmentation bool `protobuf:"varint,2,opt,name=traceroute_fragmentation,json=tracerouteFragmentation,proto3" json:"traceroute_fragmentation,omitempty"`
	// Device only support UDP as l4 protocol for traceroute.
	TracerouteL4ProtocolUdp bool `protobuf:"varint,3,opt,name=traceroute_l4_protocol_udp,json=tracerouteL4ProtocolUdp,proto3" json:"traceroute_l4_protocol_udp,omitempty"`
	// Device does not support
	// bgp/neighbors/neighbor/afi-safis/afi-safi/state/prefixes/received-pre-policy.
	PrepolicyReceivedRoutes bool `protobuf:"varint,4,opt,name=prepolicy_received_routes,json=prepolicyReceivedRoutes,proto3" json:"prepolicy_received_routes,omitempty"`
	// Expected ucmp traffic tolerance. Minimum value is 0.2, anything less
	// will be coerced to 0.2.
	// Juniper: partnerissuetracker.corp.google.com/282234301
	// Cisco: partnerissuetracker.corp.google.com/279477633
	HierarchicalWeightResolutionTolerance float64 `protobuf:"fixed64,5,opt,name=hierarchical_weight_resolution_tolerance,json=hierarchicalWeightResolutionTolerance,proto3" json:"hierarchical_weight_resolution_tolerance,omitempty"`
	// Device skip isis multi-topology check if value is true.
	IsisMultiTopologyUnsupported bool `protobuf:"varint,6,opt,name=isis_multi_topology_unsupported,json=isisMultiTopologyUnsupported,proto3" json:"isis_multi_topology_unsupported,omitempty"`
	// Disable isis level1 under interface mode on the device if value is true.
	IsisInterfaceLevel1DisableRequired bool `protobuf:"varint,7,opt,name=isis_interface_level1_disable_required,json=isisInterfaceLevel1DisableRequired,proto3" json:"isis_interface_level1_disable_required,omitempty"`
	// Set isis af ipv6 single topology on the device if value is true.
	IsisSingleTopologyRequired bool `protobuf:"varint,8,opt,name=isis_single_topology_required,json=isisSingleTopologyRequired,proto3" json:"isis_single_topology_required,omitempty"`
	// Don't set isis instance enable flag on the device if value is true.
	IsisInstanceEnabledRequired bool `protobuf:"varint,10,opt,name=isis_instance_enabled_required,json=isisInstanceEnabledRequired,proto3" json:"isis_instance_enabled_required,omitempty"`
	// Set and validate isis interface address family enable on the device if
	// value is true.
	MissingIsisInterfaceAfiSafiEnable bool `protobuf:"varint,11,opt,name=missing_isis_interface_afi_safi_enable,json=missingIsisInterfaceAfiSafiEnable,proto3" json:"missing_isis_interface_afi_safi_enable,omitempty"`
	// Don't set isis global authentication-check on the device if value is
	// true.
	IsisGlobalAuthenticationNotRequired bool `protobuf:"varint,12,opt,name=isis_global_authentication_not_required,json=isisGlobalAuthenticationNotRequired,proto3" json:"isis_global_authentication_not_required,omitempty"`
	// Configure CSNP, LSP and PSNP under level authentication explicitly if
	// value is true.
	IsisExplicitLevelAuthenticationConfig bool `protobuf:"varint,13,opt,name=isis_explicit_level_authentication_config,json=isisExplicitLevelAuthenticationConfig,proto3" json:"isis_explicit_level_authentication_config,omitempty"`
	// Device skip isis restart-suppress check if value is true.
	IsisRestartSuppressUnsupported bool `protobuf:"varint,14,opt,name=isis_restart_suppress_unsupported,json=isisRestartSuppressUnsupported,proto3" json:"isis_restart_suppress_unsupported,omitempty"`
	// Device does not support interface/ipv4(6)/neighbor.
	// Cisco: partnerissuetracker.corp.google.com/268243828
	IpNeighborMissing bool `protobuf:"varint,15,opt,name=ip_neighbor_missing,json=ipNeighborMissing,proto3" json:"ip_neighbor_missing,omitempty"`
	// Device requires separate reboot to activate OS.
	OsactivateNoreboot bool `protobuf:"varint,16,opt,name=osactivate_noreboot,json=osactivateNoreboot,proto3" json:"osactivate_noreboot,omitempty"`
	// Device requires OS installation on standby RP as well as active RP.
	OsinstallForStandbyRp bool `protobuf:"varint,17,opt,name=osinstall_for_standby_rp,json=osinstallForStandbyRp,proto3" json:"osinstall_for_standby_rp,omitempty"`
	// Set this flag for LLDP interface config to override the global config.
	LldpInterfaceConfigOverrideGlobal bool `protobuf:"varint,18,opt,name=lldp_interface_config_override_global,json=lldpInterfaceConfigOverrideGlobal,proto3" json:"lldp_interface_config_override_global,omitempty"`
	// Skip check for
	// bgp/neighbors/neighbor/state/messages/received/last-notification-error-code
	// leaf missing case.
	MissingBgpLastNotificationErrorCode bool `protobuf:"varint,21,opt,name=missing_bgp_last_notification_error_code,json=missingBgpLastNotificationErrorCode,proto3" json:"missing_bgp_last_notification_error_code,omitempty"`
	// Device does not support interface-ref configuration when applying
	// features to interface.
	InterfaceRefConfigUnsupported bool `protobuf:"varint,22,opt,name=interface_ref_config_unsupported,json=interfaceRefConfigUnsupported,proto3" json:"interface_ref_config_unsupported,omitempty"`
	// Device does not support these state paths.
	// Juniper: partnerissuetracker.corp.google.com/279470921
	StatePathUnsupported bool `protobuf:"varint,23,opt,name=state_path_unsupported,json=statePathUnsupported,proto3" json:"state_path_unsupported,omitempty"`
	// Device requires Ipv6 to be enabled on interface for gRIBI NH programmed
	// with destination mac address.
	// Juniper: partnerissuetracker.corp.google.com/267642089
	Ipv6EnableForGribiNhDmac bool `protobuf:"varint,24,opt,name=ipv6_enable_for_gribi_nh_dmac,json=ipv6EnableForGribiNhDmac,proto3" json:"ipv6_enable_for_gribi_nh_dmac,omitempty"`
	// Device requires additional config for ECN.
	// Juniper: partnerissuetracker.corp.google.com/277657269
	EcnProfileRequiredDefinition bool `protobuf:"varint,25,opt,name=ecn_profile_required_definition,json=ecnProfileRequiredDefinition,proto3" json:"ecn_profile_required_definition,omitempty"`
	// Device does not support interface ipv6 discarded packet statistics.
	// Juniper: partnerissuetracker.corp.google.com/277762075
	Ipv6DiscardedPktsUnsupported bool `protobuf:"varint,26,opt,name=ipv6_discarded_pkts_unsupported,json=ipv6DiscardedPktsUnsupported,proto3" json:"ipv6_discarded_pkts_unsupported,omitempty"`
	// Device does not support drop and weight leaves under queue management
	// profile.
	// Juniper: partnerissuetracker.corp.google.com/279471405
	DropWeightLeavesUnsupported bool `protobuf:"varint,27,opt,name=drop_weight_leaves_unsupported,json=dropWeightLeavesUnsupported,proto3" json:"drop_weight_leaves_unsupported,omitempty"`
	// Config pushed through origin CLI takes precedence over config pushed
	// through origin OC.
	// Juniper: partnerissuetracker.corp.google.com/270474468
	CliTakesPrecedenceOverOc bool `protobuf:"varint,29,opt,name=cli_takes_precedence_over_oc,json=cliTakesPrecedenceOverOc,proto3" json:"cli_takes_precedence_over_oc,omitempty"`
	// Device does not support weight above 100.
	// Juniper: partnerissuetracker.corp.google.com/277066804
	SchedulerInputWeightLimit bool `protobuf:"varint,30,opt,name=scheduler_input_weight_limit,json=schedulerInputWeightLimit,proto3" json:"scheduler_input_weight_limit,omitempty"`
	// Device does not support id leaf for SwitchChip components.
	// Juniper: partnerissuetracker.corp.google.com/277134501
	SwitchChipIdUnsupported bool `protobuf:"varint,31,opt,name=switch_chip_id_unsupported,json=switchChipIdUnsupported,proto3" json:"switch_chip_id_unsupported,omitempty"`
	// Device does not support backplane-facing-capacity leaves for some of the
	// components.
	// Juniper: partnerissuetracker.corp.google.com/277134501
	BackplaneFacingCapacityUnsupported bool `protobuf:"varint,32,opt,name=backplane_facing_capacity_unsupported,json=backplaneFacingCapacityUnsupported,proto3" json:"backplane_facing_capacity_unsupported,omitempty"`
	// Device only supports querying counters from the state container, not from
	// individual counter leaves.
	InterfaceCountersFromContainer bool `protobuf:"varint,33,opt,name=interface_counters_from_container,json=interfaceCountersFromContainer,proto3" json:"interface_counters_from_container,omitempty"`
	// Use this deviation when the device does not support a mix of tagged and
	// untagged subinterfaces.
	// Juniper: partnerissuetracker.corp.google.com/267822588
	NoMixOfTaggedAndUntaggedSubinterfaces bool `protobuf:"varint,34,opt,name=no_mix_of_tagged_and_untagged_subinterfaces,json=noMixOfTaggedAndUntaggedSubinterfaces,proto3" json:"no_mix_of_tagged_and_untagged_subinterfaces,omitempty"`
	// Device does not support reporting software version according to the
	// requirements in gNMI-1.10.
	// Juniper: partnerissuetracker.corp.google.com/278764547
	SwVersionUnsupported bool `protobuf:"varint,37,opt,name=sw_version_unsupported,json=swVersionUnsupported,proto3" json:"sw_version_unsupported,omitempty"`
	// Device does not support telemetry path /components/component/storage.
	// Juniper: partnerissuetracker.corp.google.com/284239001
	StorageComponentUnsupported bool `protobuf:"varint,39,opt,name=storage_component_unsupported,json=storageComponentUnsupported,proto3" json:"storage_component_unsupported,omitempty"`
	// Device requires port-speed to be set because its default value may not be
	// usable.
	ExplicitPortSpeed bool `protobuf:"varint,41,opt,name=explicit_port_speed,json=explicitPortSpeed,proto3" json:"explicit_port_speed,omitempty"`
	// Device requires explicit attachment of an interface or subinterface to
	// the default network instance.
	// Nokia: partnerissuetracker.corp.google.com/260928639
	ExplicitInterfaceInDefaultVrf bool `protobuf:"varint,42,opt,name=explicit_interface_in_default_vrf,json=explicitInterfaceInDefaultVrf,proto3" json:"explicit_interface_in_default_vrf,omitempty"`
	// Device is missing subinterface packet counters for IPv4/IPv6.
	SubinterfacePacketCountersMissing bool `protobuf:"varint,44,opt,name=subinterface_packet_counters_missing,json=subinterfacePacketCountersMissing,proto3" json:"subinterface_packet_counters_missing,omitempty"`
	// Connect-retry is not supported
	// /bgp/neighbors/neighbor/timers/config/connect-retry.
	ConnectRetry bool `protobuf:"varint,45,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
	// Device does not support programming a gribi flow with a next-hop entry of
	// mac-address only.
	GribiMacOverrideWithStaticArp bool `protobuf:"varint,46,opt,name=gribi_mac_override_with_static_arp,json=gribiMacOverrideWithStaticArp,proto3" json:"gribi_mac_override_with_static_arp,omitempty"`
	// Set true for device that does not support route-policy under AFI/SAFI.
	RoutePolicyUnderAfiUnsupported bool `protobuf:"varint,47,opt,name=route_policy_under_afi_unsupported,json=routePolicyUnderAfiUnsupported,proto3" json:"route_policy_under_afi_unsupported,omitempty"`
	// Device does not support using gNOI to reboot the Fabric Component.
	GnoiFabricComponentRebootUnsupported bool `protobuf:"varint,48,opt,name=gnoi_fabric_component_reboot_unsupported,json=gnoiFabricComponentRebootUnsupported,proto3" json:"gnoi_fabric_component_reboot_unsupported,omitempty"`
	// Device does not support the ntp nondefault vrf case.
	NtpNonDefaultVrfUnsupported bool `protobuf:"varint,49,opt,name=ntp_non_default_vrf_unsupported,json=ntpNonDefaultVrfUnsupported,proto3" json:"ntp_non_default_vrf_unsupported,omitempty"`
	// Device does not support setting the L2 MTU. OpenConfig allows a device to
	// enforce that L2 MTU, which has a default value of 1514, must be set to a
	// higher value than L3 MTU.
	// Arista: partnerissuetracker.corp.google.com/243445300
	OmitL2Mtu bool `protobuf:"varint,50,opt,name=omit_l2_mtu,json=omitL2Mtu,proto3" json:"omit_l2_mtu,omitempty"`
	// Skip power admin for controller card
	SkipControllerCardPowerAdmin bool `protobuf:"varint,51,opt,name=skip_controller_card_power_admin,json=skipControllerCardPowerAdmin,proto3" json:"skip_controller_card_power_admin,omitempty"`
	// Device requires the banner to have a delimiter character.
	BannerDelimiter string `protobuf:"bytes,60,opt,name=banner_delimiter,json=bannerDelimiter,proto3" json:"banner_delimiter,omitempty"`
	// Allowed tolerance for BGP traffic flow while comparing for pass or fail
	// condition.
	BgpToleranceValue int32 `protobuf:"varint,61,opt,name=bgp_tolerance_value,json=bgpToleranceValue,proto3" json:"bgp_tolerance_value,omitempty"`
	// Device requires additional time to complete post delete link
	// qualification cleanup.
	LinkQualWaitAfterDeleteRequired bool `protobuf:"varint,62,opt,name=link_qual_wait_after_delete_required,json=linkQualWaitAfterDeleteRequired,proto3" json:"link_qual_wait_after_delete_required,omitempty"`
	// The response of gNOI reboot status is a single value (not a list), so the
	// device requires explict component path to account for a situation when
	// there is more than one active reboot requests.
	// Arista: partnerissuetracker.corp.google.com/245550570
	GnoiStatusEmptySubcomponent bool `protobuf:"varint,63,opt,name=gnoi_status_empty_subcomponent,json=gnoiStatusEmptySubcomponent,proto3" json:"gnoi_status_empty_subcomponent,omitempty"`
	// Device requiries explicit deletion of network-instance table.
	NetworkInstanceTableDeletionRequired bool `protobuf:"varint,64,opt,name=network_instance_table_deletion_required,json=networkInstanceTableDeletionRequired,proto3" json:"network_instance_table_deletion_required,omitempty"`
	// Device requires a BGP session reset to utilize a new MD5 key.
	BgpMd5RequiresReset bool `protobuf:"varint,65,opt,name=bgp_md5_requires_reset,json=bgpMd5RequiresReset,proto3" json:"bgp_md5_requires_reset,omitempty"`
	// Devices do not count dequeued and deleted packets as drops.
	// Arista: partnerissuetracker.corp.google.com/275384848
	DequeueDeleteNotCountedAsDrops bool `protobuf:"varint,66,opt,name=dequeue_delete_not_counted_as_drops,json=dequeueDeleteNotCountedAsDrops,proto3" json:"dequeue_delete_not_counted_as_drops,omitempty"`
	// Device only supports RIB ack, so tests that normally expect FIB_ACK will
	// allow just RIB_ACK.
	GribiRibackOnly bool `protobuf:"varint,67,opt,name=gribi_riback_only,json=gribiRibackOnly,proto3" json:"gribi_riback_only,omitempty"`
	// Device requires that aggregate Port-Channel and its members be defined in
	// a single gNMI Update transaction at /interfaces; otherwise lag-type will
	// be dropped, and no member can be added to the aggregate.
	// Arista: partnerissuetracker.corp.google.com/201574574
	AggregateAtomicUpdate bool `protobuf:"varint,68,opt,name=aggregate_atomic_update,json=aggregateAtomicUpdate,proto3" json:"aggregate_atomic_update,omitempty"`
	// Device returns no value for some OpenConfig paths if the operational
	// value equals the default.
	// Arista: partnerissuetracker.corp.google.com/258286131
	MissingValueForDefaults bool `protobuf:"varint,69,opt,name=missing_value_for_defaults,json=missingValueForDefaults,proto3" json:"missing_value_for_defaults,omitempty"`
	// The name used for the static routing protocol.  The default name in
	// OpenConfig is \"DEFAULT\" but some devices use other names.
	// Arista: partnerissuetracker.corp.google.com/269699737
	StaticProtocolName string `protobuf:"bytes,70,opt,name=static_protocol_name,json=staticProtocolName,proto3" json:"static_protocol_name,omitempty"`
	// Device currently uses component name instead of a full openconfig path,
	// so suppress creating a full oc compliant path for subcomponent.
	GnoiSubcomponentPath bool `protobuf:"varint,71,opt,name=gnoi_subcomponent_path,json=gnoiSubcomponentPath,proto3" json:"gnoi_subcomponent_path,omitempty"`
	// When configuring interface, config VRF prior config IP address.
	// Arista: partnerissuetracker.corp.google.com/261958938
	InterfaceConfigVrfBeforeAddress bool `protobuf:"varint,72,opt,name=interface_config_vrf_before_address,json=interfaceConfigVrfBeforeAddress,proto3" json:"interface_config_vrf_before_address,omitempty"`
	// Device requires using the deprecated openconfig-vlan:vlan/config/vlan-id
	// or openconfig-vlan:vlan/state/vlan-id leaves.
	// Arista: partnerissuetracker.corp.google.com/261085885
	DeprecatedVlanId bool `protobuf:"varint,73,opt,name=deprecated_vlan_id,json=deprecatedVlanId,proto3" json:"deprecated_vlan_id,omitempty"`
	// Device requires gRIBI MAC Override using Static ARP + Static Route
	// Arista: partnerissuetracker.corp.google.com/234635355
	GribiMacOverrideStaticArpStaticRoute bool `protobuf:"varint,74,opt,name=gribi_mac_override_static_arp_static_route,json=gribiMacOverrideStaticArpStaticRoute,proto3" json:"gribi_mac_override_static_arp_static_route,omitempty"`
	// Device requires interface enabled leaf booleans to be explicitly set to
	// true.
	InterfaceEnabled bool `protobuf:"varint,75,opt,name=interface_enabled,json=interfaceEnabled,proto3" json:"interface_enabled,omitempty"`
	// Skip checking QOS octet stats for interface.
	// Arista: partnerissuetracker.corp.google.com/283541442
	QosOctets bool `protobuf:"varint,76,opt,name=qos_octets,json=qosOctets,proto3" json:"qos_octets,omitempty"`
	// Device CPU components do not map to a FRU parent component in the OC
	// tree.
	CpuMissingAncestor bool `protobuf:"varint,77,opt,name=cpu_missing_ancestor,json=cpuMissingAncestor,proto3" json:"cpu_missing_ancestor,omitempty"`
	// Device needs subinterface 0 to be routed for non-zero sub-interfaces.
	RequireRoutedSubinterface_0 bool `protobuf:"varint,78,opt,name=require_routed_subinterface_0,json=requireRoutedSubinterface0,proto3" json:"require_routed_subinterface_0,omitempty"`
	// Device does not report last-switchover-reason as USER_INITIATED for
	// gNOI.SwitchControlProcessor.
	GnoiSwitchoverReasonMissingUserInitiated bool `protobuf:"varint,79,opt,name=gnoi_switchover_reason_missing_user_initiated,json=gnoiSwitchoverReasonMissingUserInitiated,proto3" json:"gnoi_switchover_reason_missing_user_initiated,omitempty"`
	// The name used for the default network instance for VRF.  The default name
	// in OpenConfig is \"DEFAULT\" but some legacy devices still use
	// \"default\".
	DefaultNetworkInstance string `protobuf:"bytes,80,opt,name=default_network_instance,json=defaultNetworkInstance,proto3" json:"default_network_instance,omitempty"`
	// Device allows unset Election ID to be primary.
	P4RtUnsetelectionidPrimaryAllowed bool `protobuf:"varint,81,opt,name=p4rt_unsetelectionid_primary_allowed,json=p4rtUnsetelectionidPrimaryAllowed,proto3" json:"p4rt_unsetelectionid_primary_allowed,omitempty"`
	// Device sets ALREADY_EXISTS status code for all backup client responses.
	BkupArbitrationRespCode bool `protobuf:"varint,82,opt,name=bkup_arbitration_resp_code,json=bkupArbitrationRespCode,proto3" json:"bkup_arbitration_resp_code,omitempty"`
	// Device requires IPOverIP decapsulation for backup NHG without interfaces.
	BackupNhgRequiresVrfWithDecap bool `protobuf:"varint,83,opt,name=backup_nhg_requires_vrf_with_decap,json=backupNhgRequiresVrfWithDecap,proto3" json:"backup_nhg_requires_vrf_with_decap,omitempty"`
	// Devices don't support configuring ISIS /afi-safi/af/config container.
	IsisInterfaceAfiUnsupported bool `protobuf:"varint,85,opt,name=isis_interface_afi_unsupported,json=isisInterfaceAfiUnsupported,proto3" json:"isis_interface_afi_unsupported,omitempty"`
	// Devices don't support modify table entry operation in P4 Runtime.
	P4RtModifyTableEntryUnsupported bool `protobuf:"varint,86,opt,name=p4rt_modify_table_entry_unsupported,json=p4rtModifyTableEntryUnsupported,proto3" json:"p4rt_modify_table_entry_unsupported,omitempty"`
	// Parent of OS component is of type SUPERVISOR or LINECARD.
	OsComponentParentIsSupervisorOrLinecard bool `protobuf:"varint,87,opt,name=os_component_parent_is_supervisor_or_linecard,json=osComponentParentIsSupervisorOrLinecard,proto3" json:"os_component_parent_is_supervisor_or_linecard,omitempty"`
	// Parent of OS component is of type CHASSIS.
	OsComponentParentIsChassis bool `protobuf:"varint,88,opt,name=os_component_parent_is_chassis,json=osComponentParentIsChassis,proto3" json:"os_component_parent_is_chassis,omitempty"`
	// Devices require configuring the same ISIS Metrics for Level 1 when
	// configuring Level 2 Metrics.
	IsisRequireSameL1MetricWithL2Metric bool `protobuf:"varint,91,opt,name=isis_require_same_l1_metric_with_l2_metric,json=isisRequireSameL1MetricWithL2Metric,proto3" json:"isis_require_same_l1_metric_with_l2_metric,omitempty"`
	// Devices require configuring the same OSPF setMetric when BGP
	// SetMED is configured.
	BgpSetMedRequiresEqualOspfSetMetric bool `protobuf:"varint,92,opt,name=bgp_set_med_requires_equal_ospf_set_metric,json=bgpSetMedRequiresEqualOspfSetMetric,proto3" json:"bgp_set_med_requires_equal_ospf_set_metric,omitempty"`
	// Devices require configuring subinterface with tagged vlan for p4rt
	// packet in.
	P4RtGdpRequiresDot1QSubinterface bool `protobuf:"varint,93,opt,name=p4rt_gdp_requires_dot1q_subinterface,json=p4rtGdpRequiresDot1qSubinterface,proto3" json:"p4rt_gdp_requires_dot1q_subinterface,omitempty"`
	// ATE port link state operations are a no-op in KNE/virtualized
	// environments.
	AtePortLinkStateOperationsUnsupported bool `protobuf:"varint,94,opt,name=ate_port_link_state_operations_unsupported,json=atePortLinkStateOperationsUnsupported,proto3" json:"ate_port_link_state_operations_unsupported,omitempty"`
	// Creates a user and assigns role/rbac to said user via native model.
	SetNativeUser bool `protobuf:"varint,95,opt,name=set_native_user,json=setNativeUser,proto3" json:"set_native_user,omitempty"`
	// Device does not support telemetry path
	// /components/component/cpu/utilization/state/avg for linecards' CPU card.
	LinecardCpuUtilizationUnsupported bool `protobuf:"varint,98,opt,name=linecard_cpu_utilization_unsupported,json=linecardCpuUtilizationUnsupported,proto3" json:"linecard_cpu_utilization_unsupported,omitempty"`
	// Device does not support consistent component names for GNOI and GNMI.
	ConsistentComponentNamesUnsupported bool `protobuf:"varint,99,opt,name=consistent_component_names_unsupported,json=consistentComponentNamesUnsupported,proto3" json:"consistent_component_names_unsupported,omitempty"`
	// Device does not support telemetry path
	// /components/component/cpu/utilization/state/avg for controller cards'
	// CPU card.
	ControllerCardCpuUtilizationUnsupported bool `protobuf:"varint,100,opt,name=controller_card_cpu_utilization_unsupported,json=controllerCardCpuUtilizationUnsupported,proto3" json:"controller_card_cpu_utilization_unsupported,omitempty"`
	// Device does not support counter for fabric block lost packets.
	FabricDropCounterUnsupported bool `protobuf:"varint,101,opt,name=fabric_drop_counter_unsupported,json=fabricDropCounterUnsupported,proto3" json:"fabric_drop_counter_unsupported,omitempty"`
	// Device does not support memory utilization related leaves for linecard
	// components.
	LinecardMemoryUtilizationUnsupported bool `protobuf:"varint,102,opt,name=linecard_memory_utilization_unsupported,json=linecardMemoryUtilizationUnsupported,proto3" json:"linecard_memory_utilization_unsupported,omitempty"`
	// Device does not support telemetry path
	// /qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue/state/dropped-pkts.
	QosVoqDropCounterUnsupported bool `protobuf:"varint,103,opt,name=qos_voq_drop_counter_unsupported,json=qosVoqDropCounterUnsupported,proto3" json:"qos_voq_drop_counter_unsupported,omitempty"`
	// ATE IPv6 flow label unsupported in KNE/virtualized environments.
	AteIpv6FlowLabelUnsupported bool `protobuf:"varint,104,opt,name=ate_ipv6_flow_label_unsupported,json=ateIpv6FlowLabelUnsupported,proto3" json:"ate_ipv6_flow_label_unsupported,omitempty"`
	// Devices do not support configuring isis csnp-interval timer.
	// Arista: partnerissuetracker.corp.google.com/299283216
	IsisTimersCsnpIntervalUnsupported bool `protobuf:"varint,105,opt,name=isis_timers_csnp_interval_unsupported,json=isisTimersCsnpIntervalUnsupported,proto3" json:"isis_timers_csnp_interval_unsupported,omitempty"`
	// Devices do not support telemetry for isis counter:
	// manual-address-drop-from-areas.
	// Arista: partnerissuetracker.corp.google.com/299285115
	IsisCounterManualAddressDropFromAreasUnsupported bool `protobuf:"varint,106,opt,name=isis_counter_manual_address_drop_from_areas_unsupported,json=isisCounterManualAddressDropFromAreasUnsupported,proto3" json:"isis_counter_manual_address_drop_from_areas_unsupported,omitempty"`
	// Devices do not support telemetry for isis counter: part-changes.
	// Arista: partnerissuetracker.corp.google.com/317086576
	IsisCounterPartChangesUnsupported bool `protobuf:"varint,107,opt,name=isis_counter_part_changes_unsupported,json=isisCounterPartChangesUnsupported,proto3" json:"isis_counter_part_changes_unsupported,omitempty"`
	// Devices do not support threshold container under
	// /components/component/transceiver.
	TransceiverThresholdsUnsupported bool `protobuf:"varint,108,opt,name=transceiver_thresholds_unsupported,json=transceiverThresholdsUnsupported,proto3" json:"transceiver_thresholds_unsupported,omitempty"`
	// Update interface loopback mode using raw gnmi API due to server version.
	InterfaceLoopbackModeRawGnmi bool `protobuf:"varint,109,opt,name=interface_loopback_mode_raw_gnmi,json=interfaceLoopbackModeRawGnmi,proto3" json:"interface_loopback_mode_raw_gnmi,omitempty"`
	// Devices do not support showing negotiated tcp mss value in bgp tcp mss
	// telemetry. Juniper: b/300499125
	SkipTcpNegotiatedMssCheck bool `protobuf:"varint,110,opt,name=skip_tcp_negotiated_mss_check,json=skipTcpNegotiatedMssCheck,proto3" json:"skip_tcp_negotiated_mss_check,omitempty"`
	// Devices don't support ISIS-Lsp metadata paths: checksum, sequence-number,
	// remaining-lifetime.
	IsisLspMetadataLeafsUnsupported bool `protobuf:"varint,111,opt,name=isis_lsp_metadata_leafs_unsupported,json=isisLspMetadataLeafsUnsupported,proto3" json:"isis_lsp_metadata_leafs_unsupported,omitempty"`
	// QOS queue requires configuration with queue-id
	QosQueueRequiresId bool `protobuf:"varint,112,opt,name=qos_queue_requires_id,json=qosQueueRequiresId,proto3" json:"qos_queue_requires_id,omitempty"`
	// QOS requires buffer-allocation-profile configuration
	QosBufferAllocationConfigRequired bool `protobuf:"varint,114,opt,name=qos_buffer_allocation_config_required,json=qosBufferAllocationConfigRequired,proto3" json:"qos_buffer_allocation_config_required,omitempty"`
	// Devices do not support configuring ExtendedNextHopEncoding at the BGP
	// global level. Arista:
	// https://partnerissuetracker.corp.google.com/issues/203683090
	BgpGlobalExtendedNextHopEncodingUnsupported bool `protobuf:"varint,115,opt,name=bgp_global_extended_next_hop_encoding_unsupported,json=bgpGlobalExtendedNextHopEncodingUnsupported,proto3" json:"bgp_global_extended_next_hop_encoding_unsupported,omitempty"`
	// OC unsupported for BGP LLGR disable.
	// Juniper: b/303479602
	BgpLlgrOcUndefined bool `protobuf:"varint,116,opt,name=bgp_llgr_oc_undefined,json=bgpLlgrOcUndefined,proto3" json:"bgp_llgr_oc_undefined,omitempty"`
	// Device does not support tunnel interfaces state paths
	// Juniper: partnerissuetracker.corp.google.com/300111031
	TunnelStatePathUnsupported bool `protobuf:"varint,117,opt,name=tunnel_state_path_unsupported,json=tunnelStatePathUnsupported,proto3" json:"tunnel_state_path_unsupported,omitempty"`
	// Device does not support tunnel interfaces source and destination address
	// config paths Juniper: partnerissuetracker.corp.google.com/300111031
	TunnelConfigPathUnsupported bool `protobuf:"varint,118,opt,name=tunnel_config_path_unsupported,json=tunnelConfigPathUnsupported,proto3" json:"tunnel_config_path_unsupported,omitempty"`
	// Cisco: Device does not support same minimun and maximum threshold value
	// in QOS ECN config.
	EcnSameMinMaxThresholdUnsupported bool `protobuf:"varint,119,opt,name=ecn_same_min_max_threshold_unsupported,json=ecnSameMinMaxThresholdUnsupported,proto3" json:"ecn_same_min_max_threshold_unsupported,omitempty"`
	// Cisco: QOS requires scheduler configuration.
	QosSchedulerConfigRequired bool `protobuf:"varint,120,opt,name=qos_scheduler_config_required,json=qosSchedulerConfigRequired,proto3" json:"qos_scheduler_config_required,omitempty"`
	// Cisco: Device does not support set weight config under QOS ECN
	// configuration.
	QosSetWeightConfigUnsupported bool `protobuf:"varint,121,opt,name=qos_set_weight_config_unsupported,json=qosSetWeightConfigUnsupported,proto3" json:"qos_set_weight_config_unsupported,omitempty"`
	// Cisco: Device does not support these get state path.
	QosGetStatePathUnsupported bool `protobuf:"varint,122,opt,name=qos_get_state_path_unsupported,json=qosGetStatePathUnsupported,proto3" json:"qos_get_state_path_unsupported,omitempty"`
	// Devices requires enabled leaf under isis level
	// Juniper: partnerissuetracker.corp.google.com/302661486
	IsisLevelEnabled bool `protobuf:"varint,123,opt,name=isis_level_enabled,json=isisLevelEnabled,proto3" json:"isis_level_enabled,omitempty"`
	// Devices which require to use interface-id format of interface name +
	// .subinterface index with Interface-ref container
	InterfaceRefInterfaceIdFormat bool `protobuf:"varint,124,opt,name=interface_ref_interface_id_format,json=interfaceRefInterfaceIdFormat,proto3" json:"interface_ref_interface_id_format,omitempty"`
	// Devices does not support member link loopback
	// Juniper: b/307763669
	MemberLinkLoopbackUnsupported bool `protobuf:"varint,125,opt,name=member_link_loopback_unsupported,json=memberLinkLoopbackUnsupported,proto3" json:"member_link_loopback_unsupported,omitempty"`
	// Device does not support PLQ operational status check on interface
	// Juniper: b/308990185
	SkipPlqInterfaceOperStatusCheck bool `protobuf:"varint,126,opt,name=skip_plq_interface_oper_status_check,json=skipPlqInterfaceOperStatusCheck,proto3" json:"skip_plq_interface_oper_status_check,omitempty"`
	// Device set received prefix limits explicitly under prefix-limit-received
	// rather than "prefix-limit"
	BgpExplicitPrefixLimitReceived bool `protobuf:"varint,127,opt,name=bgp_explicit_prefix_limit_received,json=bgpExplicitPrefixLimitReceived,proto3" json:"bgp_explicit_prefix_limit_received,omitempty"`
	// Device does not configure BGP maximum routes correctly when max-prefixes
	// leaf is configured
	BgpMissingOcMaxPrefixesConfiguration bool `protobuf:"varint,128,opt,name=bgp_missing_oc_max_prefixes_configuration,json=bgpMissingOcMaxPrefixesConfiguration,proto3" json:"bgp_missing_oc_max_prefixes_configuration,omitempty"`
	// Devices which needs to skip checking AFI-SAFI disable.
	// Juniper: b/310698466
	SkipBgpSessionCheckWithoutAfisafi bool `protobuf:"varint,129,opt,name=skip_bgp_session_check_without_afisafi,json=skipBgpSessionCheckWithoutAfisafi,proto3" json:"skip_bgp_session_check_without_afisafi,omitempty"`
	// Devices that have separate naming conventions for hardware resource name
	// in /system/ tree and /components/ tree.
	MismatchedHardwareResourceNameInComponent bool `protobuf:"varint,130,opt,name=mismatched_hardware_resource_name_in_component,json=mismatchedHardwareResourceNameInComponent,proto3" json:"mismatched_hardware_resource_name_in_component,omitempty"`
	// Device does not support reboot status check on subcomponents.
	GnoiSubcomponentRebootStatusUnsupported bool `protobuf:"varint,132,opt,name=gnoi_subcomponent_reboot_status_unsupported,json=gnoiSubcomponentRebootStatusUnsupported,proto3" json:"gnoi_subcomponent_reboot_status_unsupported,omitempty"`
	// Devices exports routes from all protocols to BGP if the export-policy is
	// ACCEPT Juniper: b/308970803
	SkipNonBgpRouteExportCheck bool `protobuf:"varint,133,opt,name=skip_non_bgp_route_export_check,json=skipNonBgpRouteExportCheck,proto3" json:"skip_non_bgp_route_export_check,omitempty"`
	// Devices do not support path
	// /network-instances/network-instance/protocols/protocol/isis/levels/level/state/metric-style
	// Arista: https://partnerissuetracker.corp.google.com/issues/317064733
	IsisMetricStyleTelemetryUnsupported bool `protobuf:"varint,134,opt,name=isis_metric_style_telemetry_unsupported,json=isisMetricStyleTelemetryUnsupported,proto3" json:"isis_metric_style_telemetry_unsupported,omitempty"`
	// Devices do not support configuring Interface-ref under Static-Route
	// Next-Hop
	StaticRouteNextHopInterfaceRefUnsupported bool `protobuf:"varint,135,opt,name=static_route_next_hop_interface_ref_unsupported,json=staticRouteNextHopInterfaceRefUnsupported,proto3" json:"static_route_next_hop_interface_ref_unsupported,omitempty"`
	// Devices which does not support nexthop index state
	// Juniper: b/304729237
	SkipStaticNexthopCheck bool `protobuf:"varint,136,opt,name=skip_static_nexthop_check,json=skipStaticNexthopCheck,proto3" json:"skip_static_nexthop_check,omitempty"`
	// Device doesn't support router advertisement enable and mode config
	// Juniper: b/316173974
	Ipv6RouterAdvertisementConfigUnsupported bool `protobuf:"varint,138,opt,name=ipv6_router_advertisement_config_unsupported,json=ipv6RouterAdvertisementConfigUnsupported,proto3" json:"ipv6_router_advertisement_config_unsupported,omitempty"`
	// Devices does not support setting prefix limit exceeded flag.
	// Juniper : b/317181227
	PrefixLimitExceededTelemetryUnsupported bool `protobuf:"varint,139,opt,name=prefix_limit_exceeded_telemetry_unsupported,json=prefixLimitExceededTelemetryUnsupported,proto3" json:"prefix_limit_exceeded_telemetry_unsupported,omitempty"`
	// Skip setting allow-multiple-as while configuring eBGP
	// Arista: partnerissuetracker.corp.google.com/issues/317422300
	SkipSettingAllowMultipleAs bool `protobuf:"varint,140,opt,name=skip_setting_allow_multiple_as,json=skipSettingAllowMultipleAs,proto3" json:"skip_setting_allow_multiple_as,omitempty"`
	// Devices does not support mixed prefix length in gribi.
	// Juniper: b/307824407
	GribiDecapMixedPlenUnsupported bool `protobuf:"varint,143,opt,name=gribi_decap_mixed_plen_unsupported,json=gribiDecapMixedPlenUnsupported,proto3" json:"gribi_decap_mixed_plen_unsupported,omitempty"`
	// Skip setting isis-actions set-level while configuring routing-policy
	// statement action
	SkipIsisSetLevel bool `protobuf:"varint,144,opt,name=skip_isis_set_level,json=skipIsisSetLevel,proto3" json:"skip_isis_set_level,omitempty"`
	// Skip setting isis-actions set-metric-style-type while configuring
	// routing-policy statement action
	SkipIsisSetMetricStyleType bool `protobuf:"varint,145,opt,name=skip_isis_set_metric_style_type,json=skipIsisSetMetricStyleType,proto3" json:"skip_isis_set_metric_style_type,omitempty"`
	// Skip setting match-prefix-set match-set-options while configuring
	// routing-policy statement condition
	SkipSetRpMatchSetOptions bool `protobuf:"varint,146,opt,name=skip_set_rp_match_set_options,json=skipSetRpMatchSetOptions,proto3" json:"skip_set_rp_match_set_options,omitempty"`
	// Skip setting disable-metric-propagation while configuring
	// table-connection
	SkipSettingDisableMetricPropagation bool `protobuf:"varint,147,opt,name=skip_setting_disable_metric_propagation,json=skipSettingDisableMetricPropagation,proto3" json:"skip_setting_disable_metric_propagation,omitempty"`
	// Devices do not support BGP conditions match-community-set
	BgpConditionsMatchCommunitySetUnsupported bool `protobuf:"varint,148,opt,name=bgp_conditions_match_community_set_unsupported,json=bgpConditionsMatchCommunitySetUnsupported,proto3" json:"bgp_conditions_match_community_set_unsupported,omitempty"`
	// Device requires match condition for ethertype v4 and v6 for default rule
	// with network-instance default-vrf in policy-forwarding.
	PfRequireMatchDefaultRule bool `protobuf:"varint,149,opt,name=pf_require_match_default_rule,json=pfRequireMatchDefaultRule,proto3" json:"pf_require_match_default_rule,omitempty"`
	// Devices missing component tree mapping from hardware port
	// to optical channel.
	MissingPortToOpticalChannelComponentMapping bool `protobuf:"varint,150,opt,name=missing_port_to_optical_channel_component_mapping,json=missingPortToOpticalChannelComponentMapping,proto3" json:"missing_port_to_optical_channel_component_mapping,omitempty"`
	// Skip gNMI container OP tc.
	// Cisco: https://partnerissuetracker.corp.google.com/issues/322291556
	SkipContainerOp bool `protobuf:"varint,151,opt,name=skip_container_op,json=skipContainerOp,proto3" json:"skip_container_op,omitempty"`
	// Reorder calls for vendor compatibility.
	// Cisco: https://partnerissuetracker.corp.google.com/issues/322291556
	ReorderCallsForVendorCompatibilty bool `protobuf:"varint,152,opt,name=reorder_calls_for_vendor_compatibilty,json=reorderCallsForVendorCompatibilty,proto3" json:"reorder_calls_for_vendor_compatibilty,omitempty"`
	// Add missing base config using cli.
	// Cisco: https://partnerissuetracker.corp.google.com/issues/322291556
	AddMissingBaseConfigViaCli bool `protobuf:"varint,153,opt,name=add_missing_base_config_via_cli,json=addMissingBaseConfigViaCli,proto3" json:"add_missing_base_config_via_cli,omitempty"`
	// skip_macaddress_check returns true if mac address for an interface via
	// gNMI needs to be skipped. Cisco:
	// https://partnerissuetracker.corp.google.com/issues/322291556
	SkipMacaddressCheck bool `protobuf:"varint,154,opt,name=skip_macaddress_check,json=skipMacaddressCheck,proto3" json:"skip_macaddress_check,omitempty"`
	// Devices are having native telemetry paths for BGP RIB verification.
	// Juniper : b/306144372
	BgpRibOcPathUnsupported bool `protobuf:"varint,155,opt,name=bgp_rib_oc_path_unsupported,json=bgpRibOcPathUnsupported,proto3" json:"bgp_rib_oc_path_unsupported,omitempty"`
	// Skip setting prefix-set mode while configuring prefix-set routing-policy
	SkipPrefixSetMode bool `protobuf:"varint,156,opt,name=skip_prefix_set_mode,json=skipPrefixSetMode,proto3" json:"skip_prefix_set_mode,omitempty"`
	// Devices set metric as preference for static next-hop
	SetMetricAsPreference bool `protobuf:"varint,157,opt,name=set_metric_as_preference,json=setMetricAsPreference,proto3" json:"set_metric_as_preference,omitempty"`
	// Devices don't support having an IPv6 static Route with an IPv4 address
	// as next hop and requires configuring a static ARP entry.
	// Arista: https://partnerissuetracker.corp.google.com/issues/316593298
	Ipv6StaticRouteWithIpv4NextHopRequiresStaticArp bool `protobuf:"varint,158,opt,name=ipv6_static_route_with_ipv4_next_hop_requires_static_arp,json=ipv6StaticRouteWithIpv4NextHopRequiresStaticArp,proto3" json:"ipv6_static_route_with_ipv4_next_hop_requires_static_arp,omitempty"`
	// Device requires policy-forwarding rules to be in sequential order in the
	// gNMI set-request.
	PfRequireSequentialOrderPbrRules bool `protobuf:"varint,159,opt,name=pf_require_sequential_order_pbr_rules,json=pfRequireSequentialOrderPbrRules,proto3" json:"pf_require_sequential_order_pbr_rules,omitempty"`
	// Device telemetry missing next hop metric value.
	// Arista: https://partnerissuetracker.corp.google.com/issues/321010782
	MissingStaticRouteNextHopMetricTelemetry bool `protobuf:"varint,160,opt,name=missing_static_route_next_hop_metric_telemetry,json=missingStaticRouteNextHopMetricTelemetry,proto3" json:"missing_static_route_next_hop_metric_telemetry,omitempty"`
	// Device does not support recursive resolution of static route next hop.
	// Arista: https://partnerissuetracker.corp.google.com/issues/314449182
	UnsupportedStaticRouteNextHopRecurse bool `protobuf:"varint,161,opt,name=unsupported_static_route_next_hop_recurse,json=unsupportedStaticRouteNextHopRecurse,proto3" json:"unsupported_static_route_next_hop_recurse,omitempty"`
	// Device missing telemetry for static route that has DROP next hop.
	// Arista: https://partnerissuetracker.corp.google.com/issues/330619816
	MissingStaticRouteDropNextHopTelemetry bool `protobuf:"varint,162,opt,name=missing_static_route_drop_next_hop_telemetry,json=missingStaticRouteDropNextHopTelemetry,proto3" json:"missing_static_route_drop_next_hop_telemetry,omitempty"`
	// Device missing 400ZR optical-channel tunable parameters telemetry:
	// min/max/avg.
	// Arista: https://partnerissuetracker.corp.google.com/issues/319314781
	MissingZrOpticalChannelTunableParametersTelemetry bool `protobuf:"varint,163,opt,name=missing_zr_optical_channel_tunable_parameters_telemetry,json=missingZrOpticalChannelTunableParametersTelemetry,proto3" json:"missing_zr_optical_channel_tunable_parameters_telemetry,omitempty"`
	// Device that does not support packet link qualification reflector packet
	// sent/received stats.
	PlqReflectorStatsUnsupported bool `protobuf:"varint,164,opt,name=plq_reflector_stats_unsupported,json=plqReflectorStatsUnsupported,proto3" json:"plq_reflector_stats_unsupported,omitempty"`
	// Device that does not support PLQ Generator max_mtu to be atleast >= 8184.
	PlqGeneratorCapabilitiesMaxMtu uint32 `protobuf:"varint,165,opt,name=plq_generator_capabilities_max_mtu,json=plqGeneratorCapabilitiesMaxMtu,proto3" json:"plq_generator_capabilities_max_mtu,omitempty"`
	// Device that does not support PLQ Generator max_pps to be atleast >=
	// 100000000.
	PlqGeneratorCapabilitiesMaxPps uint64 `protobuf:"varint,166,opt,name=plq_generator_capabilities_max_pps,json=plqGeneratorCapabilitiesMaxPps,proto3" json:"plq_generator_capabilities_max_pps,omitempty"`
	// Support for bgp extended community index
	BgpExtendedCommunityIndexUnsupported bool `protobuf:"varint,167,opt,name=bgp_extended_community_index_unsupported,json=bgpExtendedCommunityIndexUnsupported,proto3" json:"bgp_extended_community_index_unsupported,omitempty"`
	// Support for bgp community set refs
	BgpCommunitySetRefsUnsupported bool `protobuf:"varint,168,opt,name=bgp_community_set_refs_unsupported,json=bgpCommunitySetRefsUnsupported,proto3" json:"bgp_community_set_refs_unsupported,omitempty"`
	// Arista device needs CLI knob to enable WECMP feature
	RibWecmp bool `protobuf:"varint,169,opt,name=rib_wecmp,json=ribWecmp,proto3" json:"rib_wecmp,omitempty"`
	// Device not supporting table-connection need to set this true
	TableConnectionsUnsupported bool `protobuf:"varint,170,opt,name=table_connections_unsupported,json=tableConnectionsUnsupported,proto3" json:"table_connections_unsupported,omitempty"`
	// Configure tag-set using vendor native model
	UseVendorNativeTagSetConfig bool `protobuf:"varint,171,opt,name=use_vendor_native_tag_set_config,json=useVendorNativeTagSetConfig,proto3" json:"use_vendor_native_tag_set_config,omitempty"`
	// Skip setting send-community-type in bgp global config
	SkipBgpSendCommunityType bool `protobuf:"varint,172,opt,name=skip_bgp_send_community_type,json=skipBgpSendCommunityType,proto3" json:"skip_bgp_send_community_type,omitempty"`
	// Support for bgp actions set-community method
	BgpActionsSetCommunityMethodUnsupported bool `protobuf:"varint,174,opt,name=bgp_actions_set_community_method_unsupported,json=bgpActionsSetCommunityMethodUnsupported,proto3" json:"bgp_actions_set_community_method_unsupported,omitempty"`
	// Ensure no configurations exist under BGP Peer Groups
	SetNoPeerGroup bool `protobuf:"varint,175,opt,name=set_no_peer_group,json=setNoPeerGroup,proto3" json:"set_no_peer_group,omitempty"`
	// Bgp community member is a string
	BgpCommunityMemberIsAString bool `protobuf:"varint,176,opt,name=bgp_community_member_is_a_string,json=bgpCommunityMemberIsAString,proto3" json:"bgp_community_member_is_a_string,omitempty"`
	// Flag to indicate whether IPv4 static routes with IPv6 next-hops are
	// unsupported.
	Ipv4StaticRouteWithIpv6NhUnsupported bool `protobuf:"varint,177,opt,name=ipv4_static_route_with_ipv6_nh_unsupported,json=ipv4StaticRouteWithIpv6NhUnsupported,proto3" json:"ipv4_static_route_with_ipv6_nh_unsupported,omitempty"`
	// Flag to indicate whether IPv6 static routes with IPv4 next-hops are
	// unsupported.
	Ipv6StaticRouteWithIpv4NhUnsupported bool `protobuf:"varint,178,opt,name=ipv6_static_route_with_ipv4_nh_unsupported,json=ipv6StaticRouteWithIpv4NhUnsupported,proto3" json:"ipv6_static_route_with_ipv4_nh_unsupported,omitempty"`
	// Flag to indicate support for static routes that simply drop packets
	StaticRouteWithDropNh bool `protobuf:"varint,179,opt,name=static_route_with_drop_nh,json=staticRouteWithDropNh,proto3" json:"static_route_with_drop_nh,omitempty"`
	// Flag to indicate support for static routes that can be configured with an
	// explicit metric.
	StaticRouteWithExplicitMetric bool `protobuf:"varint,180,opt,name=static_route_with_explicit_metric,json=staticRouteWithExplicitMetric,proto3" json:"static_route_with_explicit_metric,omitempty"`
	// Support for bgp default import/export policy
	BgpDefaultPolicyUnsupported bool `protobuf:"varint,181,opt,name=bgp_default_policy_unsupported,json=bgpDefaultPolicyUnsupported,proto3" json:"bgp_default_policy_unsupported,omitempty"`
	// Flag to enable bgp explicity on default vrf
	// Arista: b/329094094#comment9
	ExplicitEnableBgpOnDefaultVrf bool `protobuf:"varint,182,opt,name=explicit_enable_bgp_on_default_vrf,json=explicitEnableBgpOnDefaultVrf,proto3" json:"explicit_enable_bgp_on_default_vrf,omitempty"`
	// tag-set is not a real separate entity, but is embedded in the policy
	// statement. this implies that 1. routing policy tag set name needs to be
	// '<policy name> <statement name>'
	// 2. only one policy statement can make use of a tag-set, and 3. tag must
	// be refered by a policy
	RoutingPolicyTagSetEmbedded bool `protobuf:"varint,183,opt,name=routing_policy_tag_set_embedded,json=routingPolicyTagSetEmbedded,proto3" json:"routing_policy_tag_set_embedded,omitempty"`
	// Devices does not support allow multiple as under AFI/SAFI.
	// CISCO: b/340859662
	SkipAfiSafiPathForBgpMultipleAs bool `protobuf:"varint,184,opt,name=skip_afi_safi_path_for_bgp_multiple_as,json=skipAfiSafiPathForBgpMultipleAs,proto3" json:"skip_afi_safi_path_for_bgp_multiple_as,omitempty"`
	// Device does not support regex with routing-policy community-member.
	CommunityMemberRegexUnsupported bool `protobuf:"varint,185,opt,name=community_member_regex_unsupported,json=communityMemberRegexUnsupported,proto3" json:"community_member_regex_unsupported,omitempty"`
	// Support for same import policy attached to all AFIs for given
	// (src-protocol, dst-protocol, network-instance) triple Arista:
	// b/339645876#comment4
	SamePolicyAttachedToAllAfis bool `protobuf:"varint,186,opt,name=same_policy_attached_to_all_afis,json=samePolicyAttachedToAllAfis,proto3" json:"same_policy_attached_to_all_afis,omitempty"`
	// Devices needs to skip setting statement for policy to be applied as
	// action pass otherwise it will be configured as action done.
	// CISCO: b/338523730
	SkipSettingStatementForPolicy bool `protobuf:"varint,187,opt,name=skip_setting_statement_for_policy,json=skipSettingStatementForPolicy,proto3" json:"skip_setting_statement_for_policy,omitempty"`
	// Devices does not support index specific attribute fetching and hence
	// wildcards has to be used.
	// CISCO: b/338523730
	SkipCheckingAttributeIndex bool `protobuf:"varint,188,opt,name=skip_checking_attribute_index,json=skipCheckingAttributeIndex,proto3" json:"skip_checking_attribute_index,omitempty"`
	// Devices does not suppport policy-chaining, so needs to flatten policies
	// with multiple statements.
	// CISCO: b/338526243
	FlattenPolicyWithMultipleStatements bool `protobuf:"varint,189,opt,name=flatten_policy_with_multiple_statements,json=flattenPolicyWithMultipleStatements,proto3" json:"flatten_policy_with_multiple_statements,omitempty"`
	// default_route_policy_unsupported is set to true for devices that do not
	// support default route policy.
	DefaultRoutePolicyUnsupported bool `protobuf:"varint,190,opt,name=default_route_policy_unsupported,json=defaultRoutePolicyUnsupported,proto3" json:"default_route_policy_unsupported,omitempty"`
	// CISCO: b/339801843
	SlaacPrefixLength128 bool `protobuf:"varint,191,opt,name=slaac_prefix_length128,json=slaacPrefixLength128,proto3" json:"slaac_prefix_length128,omitempty"`
	// Devices does not support bgp max multipaths
	// Juniper: b/319301559
	BgpMaxMultipathPathsUnsupported bool `protobuf:"varint,192,opt,name=bgp_max_multipath_paths_unsupported,json=bgpMaxMultipathPathsUnsupported,proto3" json:"bgp_max_multipath_paths_unsupported,omitempty"`
	// Devices does not multipath config at neighbor or afisafi level
	// Juniper: b/341130490
	MultipathUnsupportedNeighborOrAfisafi bool `protobuf:"varint,193,opt,name=multipath_unsupported_neighbor_or_afisafi,json=multipathUnsupportedNeighborOrAfisafi,proto3" json:"multipath_unsupported_neighbor_or_afisafi,omitempty"`
	// Devices that do not support /components/component/state/model-name for
	// any component types.
	// Note that for model name to be supported, the
	// /components/component/state/model-name of the chassis component must be
	// equal to the canonical hardware model name of its device.
	ModelNameUnsupported bool `protobuf:"varint,194,opt,name=model_name_unsupported,json=modelNameUnsupported,proto3" json:"model_name_unsupported,omitempty"`
	// community_match_with_redistribution_unsupported is set to true for devices that do not support matching community at the redistribution attach point.
	CommunityMatchWithRedistributionUnsupported bool `protobuf:"varint,195,opt,name=community_match_with_redistribution_unsupported,json=communityMatchWithRedistributionUnsupported,proto3" json:"community_match_with_redistribution_unsupported,omitempty"`
	// Devices that do not support components/component/state/install-component
	// and components/component/state/install-position.
	InstallPositionAndInstallComponentUnsupported bool `protobuf:"varint,196,opt,name=install_position_and_install_component_unsupported,json=installPositionAndInstallComponentUnsupported,proto3" json:"install_position_and_install_component_unsupported,omitempty"`
	// Encap tunnel is shut then zero traffic will flow to backup NHG
	EncapTunnelShutBackupNhgZeroTraffic bool `protobuf:"varint,197,opt,name=encap_tunnel_shut_backup_nhg_zero_traffic,json=encapTunnelShutBackupNhgZeroTraffic,proto3" json:"encap_tunnel_shut_backup_nhg_zero_traffic,omitempty"`
	// Flag to indicate support for max ecmp paths for isis.
	MaxEcmpPaths bool `protobuf:"varint,198,opt,name=max_ecmp_paths,json=maxEcmpPaths,proto3" json:"max_ecmp_paths,omitempty"`
	// wecmp_auto_unsupported is set to true for devices that do not support auto wecmp
	WecmpAutoUnsupported bool `protobuf:"varint,199,opt,name=wecmp_auto_unsupported,json=wecmpAutoUnsupported,proto3" json:"wecmp_auto_unsupported,omitempty"`
	// policy chaining, ie. more than one policy at an attachement point is not supported
	RoutingPolicyChainingUnsupported bool `protobuf:"varint,200,opt,name=routing_policy_chaining_unsupported,json=routingPolicyChainingUnsupported,proto3" json:"routing_policy_chaining_unsupported,omitempty"`
	// isis loopback config required
	IsisLoopbackRequired bool `protobuf:"varint,201,opt,name=isis_loopback_required,json=isisLoopbackRequired,proto3" json:"isis_loopback_required,omitempty"`
	// weighted ecmp feature verification using fixed packet
	WeightedEcmpFixedPacketVerification bool `protobuf:"varint,202,opt,name=weighted_ecmp_fixed_packet_verification,json=weightedEcmpFixedPacketVerification,proto3" json:"weighted_ecmp_fixed_packet_verification,omitempty"`
	// Override default NextHop scale while enabling encap/decap scale
	// CISCO:
	OverrideDefaultNhScale bool `protobuf:"varint,203,opt,name=override_default_nh_scale,json=overrideDefaultNhScale,proto3" json:"override_default_nh_scale,omitempty"`
	// Devices that donot support setting bgp extended community set
	BgpExtendedCommunitySetUnsupported bool `protobuf:"varint,204,opt,name=bgp_extended_community_set_unsupported,json=bgpExtendedCommunitySetUnsupported,proto3" json:"bgp_extended_community_set_unsupported,omitempty"`
	// Devices that do not support setting bgp extended community set refs
	BgpSetExtCommunitySetRefsUnsupported bool `protobuf:"varint,205,opt,name=bgp_set_ext_community_set_refs_unsupported,json=bgpSetExtCommunitySetRefsUnsupported,proto3" json:"bgp_set_ext_community_set_refs_unsupported,omitempty"`
	// Devices that do not support deleting link bandwidth
	BgpDeleteLinkBandwidthUnsupported bool `protobuf:"varint,206,opt,name=bgp_delete_link_bandwidth_unsupported,json=bgpDeleteLinkBandwidthUnsupported,proto3" json:"bgp_delete_link_bandwidth_unsupported,omitempty"`
	// qos_inqueue_drop_counter_Unsupported is set to true for devices that do not support qos ingress queue drop counters.
	// Juniper: b/341130490
	QosInqueueDropCounterUnsupported bool `protobuf:"varint,207,opt,name=qos_inqueue_drop_counter_unsupported,json=qosInqueueDropCounterUnsupported,proto3" json:"qos_inqueue_drop_counter_unsupported,omitempty"`
	// Devices that need bgp extended community enable explicitly
	BgpExplicitExtendedCommunityEnable bool `protobuf:"varint,208,opt,name=bgp_explicit_extended_community_enable,json=bgpExplicitExtendedCommunityEnable,proto3" json:"bgp_explicit_extended_community_enable,omitempty"`
	// devices that do not support match tag set condition
	MatchTagSetConditionUnsupported bool `protobuf:"varint,209,opt,name=match_tag_set_condition_unsupported,json=matchTagSetConditionUnsupported,proto3" json:"match_tag_set_condition_unsupported,omitempty"`
	// peer_group_def_bgp_vrf_unsupported is set to true for devices that do not support peer group definition under bgp vrf configuration.
	PeerGroupDefEbgpVrfUnsupported bool `protobuf:"varint,210,opt,name=peer_group_def_ebgp_vrf_unsupported,json=peerGroupDefEbgpVrfUnsupported,proto3" json:"peer_group_def_ebgp_vrf_unsupported,omitempty"`
	// redis_uconnected_under_ebgp_vrf_unsupported is set to true for devices that do not support redistribution of connected routes under ebgp vrf configuration.
	RedisConnectedUnderEbgpVrfUnsupported bool `protobuf:"varint,211,opt,name=redis_connected_under_ebgp_vrf_unsupported,json=redisConnectedUnderEbgpVrfUnsupported,proto3" json:"redis_connected_under_ebgp_vrf_unsupported,omitempty"`
	// bgp_afisafi_in_default_ni_before_other_ni is set to true for devices that require certain afi/safis to be enabled
	// in default network instance (ni) before enabling afi/safis for neighbors in default or non-default ni.
	BgpAfiSafiInDefaultNiBeforeOtherNi bool `protobuf:"varint,212,opt,name=bgp_afi_safi_in_default_ni_before_other_ni,json=bgpAfiSafiInDefaultNiBeforeOtherNi,proto3" json:"bgp_afi_safi_in_default_ni_before_other_ni,omitempty"`
	// Devices which do not support default import export policy.
	DefaultImportExportPolicyUnsupported bool `protobuf:"varint,213,opt,name=default_import_export_policy_unsupported,json=defaultImportExportPolicyUnsupported,proto3" json:"default_import_export_policy_unsupported,omitempty"`
	// ipv6_router_advertisement_interval_unsupported is set to true for devices that do not support ipv6 router advertisement interval configuration.
	Ipv6RouterAdvertisementIntervalUnsupported bool `protobuf:"varint,214,opt,name=ipv6_router_advertisement_interval_unsupported,json=ipv6RouterAdvertisementIntervalUnsupported,proto3" json:"ipv6_router_advertisement_interval_unsupported,omitempty"`
	// Decap NH with NextHopNetworkInstance is unsupported
	DecapNhWithNexthopNiUnsupported bool `protobuf:"varint,215,opt,name=decap_nh_with_nexthop_ni_unsupported,json=decapNhWithNexthopNiUnsupported,proto3" json:"decap_nh_with_nexthop_ni_unsupported,omitempty"`
	// Juniper: b/356898098
	CommunityInvertAnyUnsupported bool `protobuf:"varint,216,opt,name=community_invert_any_unsupported,json=communityInvertAnyUnsupported,proto3" json:"community_invert_any_unsupported,omitempty"`
	// SFlow source address update is unsupported
	// Arista: b/357914789
	SflowSourceAddressUpdateUnsupported bool `protobuf:"varint,217,opt,name=sflow_source_address_update_unsupported,json=sflowSourceAddressUpdateUnsupported,proto3" json:"sflow_source_address_update_unsupported,omitempty"`
	// Linklocal mask length is not 64
	// Cisco: b/368271859
	LinkLocalMaskLen bool `protobuf:"varint,218,opt,name=link_local_mask_len,json=linkLocalMaskLen,proto3" json:"link_local_mask_len,omitempty"`
	// use parent component for temperature telemetry
	UseParentComponentForTemperatureTelemetry bool `protobuf:"varint,219,opt,name=use_parent_component_for_temperature_telemetry,json=useParentComponentForTemperatureTelemetry,proto3" json:"use_parent_component_for_temperature_telemetry,omitempty"`
	// component manufactured date is unsupported
	ComponentMfgDateUnsupported bool `protobuf:"varint,220,opt,name=component_mfg_date_unsupported,json=componentMfgDateUnsupported,proto3" json:"component_mfg_date_unsupported,omitempty"`
	// trib protocol field under otn channel config unsupported
	OtnChannelTribUnsupported bool `protobuf:"varint,221,opt,name=otn_channel_trib_unsupported,json=otnChannelTribUnsupported,proto3" json:"otn_channel_trib_unsupported,omitempty"`
	// ingress parameters under eth channel config unsupported
	EthChannelIngressParametersUnsupported bool `protobuf:"varint,222,opt,name=eth_channel_ingress_parameters_unsupported,json=ethChannelIngressParametersUnsupported,proto3" json:"eth_channel_ingress_parameters_unsupported,omitempty"`
	// Cisco numbering for eth channel assignment starts from 1 instead of 0
	EthChannelAssignmentCiscoNumbering bool `protobuf:"varint,223,opt,name=eth_channel_assignment_cisco_numbering,json=ethChannelAssignmentCiscoNumbering,proto3" json:"eth_channel_assignment_cisco_numbering,omitempty"`
	// Devices needs time to update interface counters.
	InterfaceCountersUpdateDelayed bool `protobuf:"varint,224,opt,name=interface_counters_update_delayed,json=interfaceCountersUpdateDelayed,proto3" json:"interface_counters_update_delayed,omitempty"`
	// device does not support a Healthz GET RPC against Chassis level component like "CHASSIS" or "Rack 0"
	ChassisGetRpcUnsupported bool `protobuf:"varint,225,opt,name=chassis_get_rpc_unsupported,json=chassisGetRpcUnsupported,proto3" json:"chassis_get_rpc_unsupported,omitempty"`
	// Leaf-ref validation for list keys which is enforced for Cisco and hence deviation
	// b/373581140
	PowerDisableEnableLeafRefValidation bool `protobuf:"varint,226,opt,name=power_disable_enable_leaf_ref_validation,json=powerDisableEnableLeafRefValidation,proto3" json:"power_disable_enable_leaf_ref_validation,omitempty"`
	// Device does not support ssh server counters.
	SshServerCountersUnsupported bool `protobuf:"varint,227,opt,name=ssh_server_counters_unsupported,json=sshServerCountersUnsupported,proto3" json:"ssh_server_counters_unsupported,omitempty"`
	// True when the optical-channel operational-mode is unsupported.
	// Juniper: b/355456031
	OperationalModeUnsupported bool `protobuf:"varint,228,opt,name=operational_mode_unsupported,json=operationalModeUnsupported,proto3" json:"operational_mode_unsupported,omitempty"`
	// BGP session state idle is supported in passive mode instead of active
	// Cisco: b/376021545
	BgpSessionStateIdleInPassiveMode bool `protobuf:"varint,229,opt,name=bgp_session_state_idle_in_passive_mode,json=bgpSessionStateIdleInPassiveMode,proto3" json:"bgp_session_state_idle_in_passive_mode,omitempty"`
	// EnableMultipathUnderAfiSafi returns true for devices that do not support multipath under /global path and instead support under global/afi/safi path
	// CISCO: b/376241033
	// CISCO: b/340859662
	EnableMultipathUnderAfiSafi bool `protobuf:"varint,230,opt,name=enable_multipath_under_afi_safi,json=enableMultipathUnderAfiSafi,proto3" json:"enable_multipath_under_afi_safi,omitempty"`
	// Cisco numbering for OTN channel assignment starts from 1 instead of 0
	OtnChannelAssignmentCiscoNumbering bool `protobuf:"varint,232,opt,name=otn_channel_assignment_cisco_numbering,json=otnChannelAssignmentCiscoNumbering,proto3" json:"otn_channel_assignment_cisco_numbering,omitempty"`
	// Cisco pre-fec-ber inactive value for CISCO-ACACIA vendors
	CiscoPreFecBerInactiveValue bool `protobuf:"varint,233,opt,name=cisco_pre_fec_ber_inactive_value,json=ciscoPreFecBerInactiveValue,proto3" json:"cisco_pre_fec_ber_inactive_value,omitempty"`
	// Device does not support bgp afi safi wildcard.
	// Cisco: b/379863985
	BgpAfiSafiWildcardNotSupported bool `protobuf:"varint,235,opt,name=bgp_afi_safi_wildcard_not_supported,json=bgpAfiSafiWildcardNotSupported,proto3" json:"bgp_afi_safi_wildcard_not_supported,omitempty"`
	// Nokia; b/304493065 comment#7 SRL native admin_enable for table-connections
	EnableTableConnections bool `protobuf:"varint,236,opt,name=enable_table_connections,json=enableTableConnections,proto3" json:"enable_table_connections,omitempty"`
	// Device has default zero suppression.
	// Juniper : b/378646018
	NoZeroSuppression bool `protobuf:"varint,237,opt,name=no_zero_suppression,json=noZeroSuppression,proto3" json:"no_zero_suppression,omitempty"`
	// Cisco: b/378801305
	IsisInterfaceLevelPassiveUnsupported bool `protobuf:"varint,238,opt,name=isis_interface_level_passive_unsupported,json=isisInterfaceLevelPassiveUnsupported,proto3" json:"isis_interface_level_passive_unsupported,omitempty"`
	// Cisco: b/378616912
	IsisDisSysidUnsupported bool `protobuf:"varint,239,opt,name=isis_dis_sysid_unsupported,json=isisDisSysidUnsupported,proto3" json:"isis_dis_sysid_unsupported,omitempty"`
	// Cisco: b/378616912
	IsisDatabaseOverloadsUnsupported bool `protobuf:"varint,240,opt,name=isis_database_overloads_unsupported,json=isisDatabaseOverloadsUnsupported,proto3" json:"isis_database_overloads_unsupported,omitempty"`
	// Juniper: b/358534837
	// Devices that do not support setting med value using union type in OC.
	BgpSetMedV7Unsupported bool `protobuf:"varint,241,opt,name=bgp_set_med_v7_unsupported,json=bgpSetMedV7Unsupported,proto3" json:"bgp_set_med_v7_unsupported,omitempty"`
	// Cisco: b/388980373
	// default import policy for table connection unsupported is set to true for devices that do not support default import policy.
	TcDefaultImportPolicyUnsupported bool `protobuf:"varint,242,opt,name=tc_default_import_policy_unsupported,json=tcDefaultImportPolicyUnsupported,proto3" json:"tc_default_import_policy_unsupported,omitempty"`
	// Cisco: b/388955361
	// table connection metric propagation unsupported is set to true for devices that do not support metric propagation.
	TcMetricPropagationUnsupported bool `protobuf:"varint,243,opt,name=tc_metric_propagation_unsupported,json=tcMetricPropagationUnsupported,proto3" json:"tc_metric_propagation_unsupported,omitempty"`
	// Cisco: b/388980376
	// table connection attribute propagation unsupported is set to true for devices that do not support attribute propagation.
	TcAttributePropagationUnsupported bool `protobuf:"varint,244,opt,name=tc_attribute_propagation_unsupported,json=tcAttributePropagationUnsupported,proto3" json:"tc_attribute_propagation_unsupported,omitempty"`
	// Cisco: b/388955364
	// table connection subscription unsupported is set to true for devices that do not support subscription for table connection leaves.
	TcSubscriptionUnsupported bool `protobuf:"varint,245,opt,name=tc_subscription_unsupported,json=tcSubscriptionUnsupported,proto3" json:"tc_subscription_unsupported,omitempty"`
	// Cisco: b/388983709
	// default bgp instance name is used to set bgp instance name value other than DEFAULT
	DefaultBgpInstanceName string `protobuf:"bytes,246,opt,name=default_bgp_instance_name,json=defaultBgpInstanceName,proto3" json:"default_bgp_instance_name,omitempty"`
	// Arista does not support ETHChannel rate-class
	ChannelAssignmentRateClassParametersUnsupported bool `protobuf:"varint,247,opt,name=channel_assignment_rate_class_parameters_unsupported,json=channelAssignmentRateClassParametersUnsupported,proto3" json:"channel_assignment_rate_class_parameters_unsupported,omitempty"`
	// Arista: b/346557012
	// Devices that do not support qos scheduler ingress policer.
	QosSchedulerIngressPolicerUnsupported bool `protobuf:"varint,248,opt,name=qos_scheduler_ingress_policer_unsupported,json=qosSchedulerIngressPolicerUnsupported,proto3" json:"qos_scheduler_ingress_policer_unsupported,omitempty"`
	// Arista: b/354689142
	// Devices that do not support gRIBIencap headers.
	GribiEncapHeaderUnsupported bool `protobuf:"varint,249,opt,name=gribi_encap_header_unsupported,json=gribiEncapHeaderUnsupported,proto3" json:"gribi_encap_header_unsupported,omitempty"`
	// Device does not support P4RT Capabilities rpc.
	// Cisco: b/385298158
	P4RtCapabilitiesUnsupported bool `protobuf:"varint,250,opt,name=p4rt_capabilities_unsupported,json=p4rtCapabilitiesUnsupported,proto3" json:"p4rt_capabilities_unsupported,omitempty"`
	// Device does not support gNMI GET on root.
	// Cisco: b/385298159
	GnmiGetOnRootUnsupported bool `protobuf:"varint,251,opt,name=gnmi_get_on_root_unsupported,json=gnmiGetOnRootUnsupported,proto3" json:"gnmi_get_on_root_unsupported,omitempty"`
	// Device does not support packet processing aggregate drops.
	// Cisco: b/395567844
	PacketProcessingAggregateDropsUnsupported bool `protobuf:"varint,252,opt,name=packet_processing_aggregate_drops_unsupported,json=packetProcessingAggregateDropsUnsupported,proto3" json:"packet_processing_aggregate_drops_unsupported,omitempty"`
	// Device does not support fragment total drops.
	// Nokia: b/395553772
	FragmentTotalDropsUnsupported bool `protobuf:"varint,253,opt,name=fragment_total_drops_unsupported,json=fragmentTotalDropsUnsupported,proto3" json:"fragment_total_drops_unsupported,omitempty"`
	// Juniper: b/383145521
	// Device needs route policy reference to stream prefix set info.
	BgpPrefixsetReqRoutepolRef bool `protobuf:"varint,255,opt,name=bgp_prefixset_req_routepol_ref,json=bgpPrefixsetReqRoutepolRef,proto3" json:"bgp_prefixset_req_routepol_ref,omitempty"`
	// Devices that do not support oper-status for Integrated Circuits telemetry path
	// Juniper b/395551640
	OperStatusForIcUnsupported bool `protobuf:"varint,256,opt,name=oper_status_for_ic_unsupported,json=operStatusForIcUnsupported,proto3" json:"oper_status_for_ic_unsupported,omitempty"`
	// Nokia: b/383075189
	// ExplicitDcoConfig returns true if explicit configurations are required in module-functional-type for the transceiver
	ExplicitDcoConfig bool `protobuf:"varint,257,opt,name=explicit_dco_config,json=explicitDcoConfig,proto3" json:"explicit_dco_config,omitempty"`
	// verify_expected_breakout_supported_config is used to verify on Cisco devices if optic supports a given breakout mode
	// Cisco:
	VerifyExpectedBreakoutSupportedConfig bool `protobuf:"varint,258,opt,name=verify_expected_breakout_supported_config,json=verifyExpectedBreakoutSupportedConfig,proto3" json:"verify_expected_breakout_supported_config,omitempty"`
	// bgp_aspathset_unsupported is set to true for devices that do not support as-path-set for bgp-defined-sets.
	// Juniper: b/330173167
	BgpAspathsetUnsupported bool `protobuf:"varint,259,opt,name=bgp_aspathset_unsupported,json=bgpAspathsetUnsupported,proto3" json:"bgp_aspathset_unsupported,omitempty"`
	// Devices that do not support SR IGP configuration
	// Cisco b/390502067
	SrIgpConfigUnsupported bool `protobuf:"varint,260,opt,name=sr_igp_config_unsupported,json=srIgpConfigUnsupported,proto3" json:"sr_igp_config_unsupported,omitempty"`
	// Cisco: b/404301960
	// Devices that block one IS-IS level specific authentication config attribute for P2P links.
	// The same leafs can be set directly under ISIS Interface authentication /network-instances/network-instance/protocols/protocol/isis/interfaces/interface/authentication.
	SetIsisAuthWithInterfaceAuthenticationContainer bool `protobuf:"varint,261,opt,name=set_isis_auth_with_interface_authentication_container,json=setIsisAuthWithInterfaceAuthenticationContainer,proto3" json:"set_isis_auth_with_interface_authentication_container,omitempty"`
	// Devices that do not support GRE/GUE tunnel interface oc.
	// Juniper b/398171114
	GreGueTunnelInterfaceOcUnsupported bool `protobuf:"varint,262,opt,name=gre_gue_tunnel_interface_oc_unsupported,json=greGueTunnelInterfaceOcUnsupported,proto3" json:"gre_gue_tunnel_interface_oc_unsupported,omitempty"`
	// Devices that do not support load-interval configuration
	LoadIntervalNotSupported bool `protobuf:"varint,263,opt,name=load_interval_not_supported,json=loadIntervalNotSupported,proto3" json:"load_interval_not_supported,omitempty"`
	// SkipOpticalChannelOutputPowerInterval for devices that do not support optical-channel/output-power/interval leaf
	// Nokia b/394622454
	SkipOpticalChannelOutputPowerInterval bool `protobuf:"varint,264,opt,name=skip_optical_channel_output_power_interval,json=skipOpticalChannelOutputPowerInterval,proto3" json:"skip_optical_channel_output_power_interval,omitempty"`
	// SkipTransceiverDescription for devices that do not support transceiver/description leaf
	// Nokia b/394622453
	SkipTransceiverDescription bool `protobuf:"varint,265,opt,name=skip_transceiver_description,json=skipTransceiverDescription,proto3" json:"skip_transceiver_description,omitempty"`
	// Devices that do not support containerz config via OpenConfig.
	ContainerzOcUnsupported bool `protobuf:"varint,266,opt,name=containerz_oc_unsupported,json=containerzOcUnsupported,proto3" json:"containerz_oc_unsupported,omitempty"`
	// Device does not support BGP OC distance
	BgpDistanceOcPathUnsupported bool `protobuf:"varint,267,opt,name=bgp_distance_oc_path_unsupported,json=bgpDistanceOcPathUnsupported,proto3" json:"bgp_distance_oc_path_unsupported,omitempty"`
	// Devices that do not support ISIS MPLS
	IsisMplsUnsupported bool `protobuf:"varint,268,opt,name=isis_mpls_unsupported,json=isisMplsUnsupported,proto3" json:"isis_mpls_unsupported,omitempty"`
	// Devices that do not support oc path for auto-negotiate
	// Nokia b/417843274
	AutoNegotiateUnsupported bool `protobuf:"varint,269,opt,name=auto_negotiate_unsupported,json=autoNegotiateUnsupported,proto3" json:"auto_negotiate_unsupported,omitempty"`
	// Devices that do not support oc path for duplex-mode
	// Nokia b/417843274
	DuplexModeUnsupported bool `protobuf:"varint,270,opt,name=duplex_mode_unsupported,json=duplexModeUnsupported,proto3" json:"duplex_mode_unsupported,omitempty"`
	// Devices that do not support oc path for port-speed
	// Nokia b/417843274
	PortSpeedUnsupported bool `protobuf:"varint,271,opt,name=port_speed_unsupported,json=portSpeedUnsupported,proto3" json:"port_speed_unsupported,omitempty"`
	// Set-Med-Action is not supported for BGP
	// Cisco b/414333771
	BgpSetMedActionUnsupported bool `protobuf:"varint,272,opt,name=bgp_set_med_action_unsupported,json=bgpSetMedActionUnsupported,proto3" json:"bgp_set_med_action_unsupported,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Metadata_Deviations) Reset() {
	*x = Metadata_Deviations{}
	mi := &file_metadata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_Deviations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_Deviations) ProtoMessage() {}

func (x *Metadata_Deviations) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_Deviations.ProtoReflect.Descriptor instead.
func (*Metadata_Deviations) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Metadata_Deviations) GetIpv4MissingEnabled() bool {
	if x != nil {
		return x.Ipv4MissingEnabled
	}
	return false
}

func (x *Metadata_Deviations) GetTracerouteFragmentation() bool {
	if x != nil {
		return x.TracerouteFragmentation
	}
	return false
}

func (x *Metadata_Deviations) GetTracerouteL4ProtocolUdp() bool {
	if x != nil {
		return x.TracerouteL4ProtocolUdp
	}
	return false
}

func (x *Metadata_Deviations) GetPrepolicyReceivedRoutes() bool {
	if x != nil {
		return x.PrepolicyReceivedRoutes
	}
	return false
}

func (x *Metadata_Deviations) GetHierarchicalWeightResolutionTolerance() float64 {
	if x != nil {
		return x.HierarchicalWeightResolutionTolerance
	}
	return 0
}

func (x *Metadata_Deviations) GetIsisMultiTopologyUnsupported() bool {
	if x != nil {
		return x.IsisMultiTopologyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisInterfaceLevel1DisableRequired() bool {
	if x != nil {
		return x.IsisInterfaceLevel1DisableRequired
	}
	return false
}

func (x *Metadata_Deviations) GetIsisSingleTopologyRequired() bool {
	if x != nil {
		return x.IsisSingleTopologyRequired
	}
	return false
}

func (x *Metadata_Deviations) GetIsisInstanceEnabledRequired() bool {
	if x != nil {
		return x.IsisInstanceEnabledRequired
	}
	return false
}

func (x *Metadata_Deviations) GetMissingIsisInterfaceAfiSafiEnable() bool {
	if x != nil {
		return x.MissingIsisInterfaceAfiSafiEnable
	}
	return false
}

func (x *Metadata_Deviations) GetIsisGlobalAuthenticationNotRequired() bool {
	if x != nil {
		return x.IsisGlobalAuthenticationNotRequired
	}
	return false
}

func (x *Metadata_Deviations) GetIsisExplicitLevelAuthenticationConfig() bool {
	if x != nil {
		return x.IsisExplicitLevelAuthenticationConfig
	}
	return false
}

func (x *Metadata_Deviations) GetIsisRestartSuppressUnsupported() bool {
	if x != nil {
		return x.IsisRestartSuppressUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIpNeighborMissing() bool {
	if x != nil {
		return x.IpNeighborMissing
	}
	return false
}

func (x *Metadata_Deviations) GetOsactivateNoreboot() bool {
	if x != nil {
		return x.OsactivateNoreboot
	}
	return false
}

func (x *Metadata_Deviations) GetOsinstallForStandbyRp() bool {
	if x != nil {
		return x.OsinstallForStandbyRp
	}
	return false
}

func (x *Metadata_Deviations) GetLldpInterfaceConfigOverrideGlobal() bool {
	if x != nil {
		return x.LldpInterfaceConfigOverrideGlobal
	}
	return false
}

func (x *Metadata_Deviations) GetMissingBgpLastNotificationErrorCode() bool {
	if x != nil {
		return x.MissingBgpLastNotificationErrorCode
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceRefConfigUnsupported() bool {
	if x != nil {
		return x.InterfaceRefConfigUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetStatePathUnsupported() bool {
	if x != nil {
		return x.StatePathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6EnableForGribiNhDmac() bool {
	if x != nil {
		return x.Ipv6EnableForGribiNhDmac
	}
	return false
}

func (x *Metadata_Deviations) GetEcnProfileRequiredDefinition() bool {
	if x != nil {
		return x.EcnProfileRequiredDefinition
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6DiscardedPktsUnsupported() bool {
	if x != nil {
		return x.Ipv6DiscardedPktsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetDropWeightLeavesUnsupported() bool {
	if x != nil {
		return x.DropWeightLeavesUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetCliTakesPrecedenceOverOc() bool {
	if x != nil {
		return x.CliTakesPrecedenceOverOc
	}
	return false
}

func (x *Metadata_Deviations) GetSchedulerInputWeightLimit() bool {
	if x != nil {
		return x.SchedulerInputWeightLimit
	}
	return false
}

func (x *Metadata_Deviations) GetSwitchChipIdUnsupported() bool {
	if x != nil {
		return x.SwitchChipIdUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBackplaneFacingCapacityUnsupported() bool {
	if x != nil {
		return x.BackplaneFacingCapacityUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceCountersFromContainer() bool {
	if x != nil {
		return x.InterfaceCountersFromContainer
	}
	return false
}

func (x *Metadata_Deviations) GetNoMixOfTaggedAndUntaggedSubinterfaces() bool {
	if x != nil {
		return x.NoMixOfTaggedAndUntaggedSubinterfaces
	}
	return false
}

func (x *Metadata_Deviations) GetSwVersionUnsupported() bool {
	if x != nil {
		return x.SwVersionUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetStorageComponentUnsupported() bool {
	if x != nil {
		return x.StorageComponentUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitPortSpeed() bool {
	if x != nil {
		return x.ExplicitPortSpeed
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitInterfaceInDefaultVrf() bool {
	if x != nil {
		return x.ExplicitInterfaceInDefaultVrf
	}
	return false
}

func (x *Metadata_Deviations) GetSubinterfacePacketCountersMissing() bool {
	if x != nil {
		return x.SubinterfacePacketCountersMissing
	}
	return false
}

func (x *Metadata_Deviations) GetConnectRetry() bool {
	if x != nil {
		return x.ConnectRetry
	}
	return false
}

func (x *Metadata_Deviations) GetGribiMacOverrideWithStaticArp() bool {
	if x != nil {
		return x.GribiMacOverrideWithStaticArp
	}
	return false
}

func (x *Metadata_Deviations) GetRoutePolicyUnderAfiUnsupported() bool {
	if x != nil {
		return x.RoutePolicyUnderAfiUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiFabricComponentRebootUnsupported() bool {
	if x != nil {
		return x.GnoiFabricComponentRebootUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetNtpNonDefaultVrfUnsupported() bool {
	if x != nil {
		return x.NtpNonDefaultVrfUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetOmitL2Mtu() bool {
	if x != nil {
		return x.OmitL2Mtu
	}
	return false
}

func (x *Metadata_Deviations) GetSkipControllerCardPowerAdmin() bool {
	if x != nil {
		return x.SkipControllerCardPowerAdmin
	}
	return false
}

func (x *Metadata_Deviations) GetBannerDelimiter() string {
	if x != nil {
		return x.BannerDelimiter
	}
	return ""
}

func (x *Metadata_Deviations) GetBgpToleranceValue() int32 {
	if x != nil {
		return x.BgpToleranceValue
	}
	return 0
}

func (x *Metadata_Deviations) GetLinkQualWaitAfterDeleteRequired() bool {
	if x != nil {
		return x.LinkQualWaitAfterDeleteRequired
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiStatusEmptySubcomponent() bool {
	if x != nil {
		return x.GnoiStatusEmptySubcomponent
	}
	return false
}

func (x *Metadata_Deviations) GetNetworkInstanceTableDeletionRequired() bool {
	if x != nil {
		return x.NetworkInstanceTableDeletionRequired
	}
	return false
}

func (x *Metadata_Deviations) GetBgpMd5RequiresReset() bool {
	if x != nil {
		return x.BgpMd5RequiresReset
	}
	return false
}

func (x *Metadata_Deviations) GetDequeueDeleteNotCountedAsDrops() bool {
	if x != nil {
		return x.DequeueDeleteNotCountedAsDrops
	}
	return false
}

func (x *Metadata_Deviations) GetGribiRibackOnly() bool {
	if x != nil {
		return x.GribiRibackOnly
	}
	return false
}

func (x *Metadata_Deviations) GetAggregateAtomicUpdate() bool {
	if x != nil {
		return x.AggregateAtomicUpdate
	}
	return false
}

func (x *Metadata_Deviations) GetMissingValueForDefaults() bool {
	if x != nil {
		return x.MissingValueForDefaults
	}
	return false
}

func (x *Metadata_Deviations) GetStaticProtocolName() string {
	if x != nil {
		return x.StaticProtocolName
	}
	return ""
}

func (x *Metadata_Deviations) GetGnoiSubcomponentPath() bool {
	if x != nil {
		return x.GnoiSubcomponentPath
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceConfigVrfBeforeAddress() bool {
	if x != nil {
		return x.InterfaceConfigVrfBeforeAddress
	}
	return false
}

func (x *Metadata_Deviations) GetDeprecatedVlanId() bool {
	if x != nil {
		return x.DeprecatedVlanId
	}
	return false
}

func (x *Metadata_Deviations) GetGribiMacOverrideStaticArpStaticRoute() bool {
	if x != nil {
		return x.GribiMacOverrideStaticArpStaticRoute
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceEnabled() bool {
	if x != nil {
		return x.InterfaceEnabled
	}
	return false
}

func (x *Metadata_Deviations) GetQosOctets() bool {
	if x != nil {
		return x.QosOctets
	}
	return false
}

func (x *Metadata_Deviations) GetCpuMissingAncestor() bool {
	if x != nil {
		return x.CpuMissingAncestor
	}
	return false
}

func (x *Metadata_Deviations) GetRequireRoutedSubinterface_0() bool {
	if x != nil {
		return x.RequireRoutedSubinterface_0
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiSwitchoverReasonMissingUserInitiated() bool {
	if x != nil {
		return x.GnoiSwitchoverReasonMissingUserInitiated
	}
	return false
}

func (x *Metadata_Deviations) GetDefaultNetworkInstance() string {
	if x != nil {
		return x.DefaultNetworkInstance
	}
	return ""
}

func (x *Metadata_Deviations) GetP4RtUnsetelectionidPrimaryAllowed() bool {
	if x != nil {
		return x.P4RtUnsetelectionidPrimaryAllowed
	}
	return false
}

func (x *Metadata_Deviations) GetBkupArbitrationRespCode() bool {
	if x != nil {
		return x.BkupArbitrationRespCode
	}
	return false
}

func (x *Metadata_Deviations) GetBackupNhgRequiresVrfWithDecap() bool {
	if x != nil {
		return x.BackupNhgRequiresVrfWithDecap
	}
	return false
}

func (x *Metadata_Deviations) GetIsisInterfaceAfiUnsupported() bool {
	if x != nil {
		return x.IsisInterfaceAfiUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetP4RtModifyTableEntryUnsupported() bool {
	if x != nil {
		return x.P4RtModifyTableEntryUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetOsComponentParentIsSupervisorOrLinecard() bool {
	if x != nil {
		return x.OsComponentParentIsSupervisorOrLinecard
	}
	return false
}

func (x *Metadata_Deviations) GetOsComponentParentIsChassis() bool {
	if x != nil {
		return x.OsComponentParentIsChassis
	}
	return false
}

func (x *Metadata_Deviations) GetIsisRequireSameL1MetricWithL2Metric() bool {
	if x != nil {
		return x.IsisRequireSameL1MetricWithL2Metric
	}
	return false
}

func (x *Metadata_Deviations) GetBgpSetMedRequiresEqualOspfSetMetric() bool {
	if x != nil {
		return x.BgpSetMedRequiresEqualOspfSetMetric
	}
	return false
}

func (x *Metadata_Deviations) GetP4RtGdpRequiresDot1QSubinterface() bool {
	if x != nil {
		return x.P4RtGdpRequiresDot1QSubinterface
	}
	return false
}

func (x *Metadata_Deviations) GetAtePortLinkStateOperationsUnsupported() bool {
	if x != nil {
		return x.AtePortLinkStateOperationsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSetNativeUser() bool {
	if x != nil {
		return x.SetNativeUser
	}
	return false
}

func (x *Metadata_Deviations) GetLinecardCpuUtilizationUnsupported() bool {
	if x != nil {
		return x.LinecardCpuUtilizationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetConsistentComponentNamesUnsupported() bool {
	if x != nil {
		return x.ConsistentComponentNamesUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetControllerCardCpuUtilizationUnsupported() bool {
	if x != nil {
		return x.ControllerCardCpuUtilizationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetFabricDropCounterUnsupported() bool {
	if x != nil {
		return x.FabricDropCounterUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetLinecardMemoryUtilizationUnsupported() bool {
	if x != nil {
		return x.LinecardMemoryUtilizationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosVoqDropCounterUnsupported() bool {
	if x != nil {
		return x.QosVoqDropCounterUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetAteIpv6FlowLabelUnsupported() bool {
	if x != nil {
		return x.AteIpv6FlowLabelUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisTimersCsnpIntervalUnsupported() bool {
	if x != nil {
		return x.IsisTimersCsnpIntervalUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisCounterManualAddressDropFromAreasUnsupported() bool {
	if x != nil {
		return x.IsisCounterManualAddressDropFromAreasUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisCounterPartChangesUnsupported() bool {
	if x != nil {
		return x.IsisCounterPartChangesUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTransceiverThresholdsUnsupported() bool {
	if x != nil {
		return x.TransceiverThresholdsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceLoopbackModeRawGnmi() bool {
	if x != nil {
		return x.InterfaceLoopbackModeRawGnmi
	}
	return false
}

func (x *Metadata_Deviations) GetSkipTcpNegotiatedMssCheck() bool {
	if x != nil {
		return x.SkipTcpNegotiatedMssCheck
	}
	return false
}

func (x *Metadata_Deviations) GetIsisLspMetadataLeafsUnsupported() bool {
	if x != nil {
		return x.IsisLspMetadataLeafsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosQueueRequiresId() bool {
	if x != nil {
		return x.QosQueueRequiresId
	}
	return false
}

func (x *Metadata_Deviations) GetQosBufferAllocationConfigRequired() bool {
	if x != nil {
		return x.QosBufferAllocationConfigRequired
	}
	return false
}

func (x *Metadata_Deviations) GetBgpGlobalExtendedNextHopEncodingUnsupported() bool {
	if x != nil {
		return x.BgpGlobalExtendedNextHopEncodingUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpLlgrOcUndefined() bool {
	if x != nil {
		return x.BgpLlgrOcUndefined
	}
	return false
}

func (x *Metadata_Deviations) GetTunnelStatePathUnsupported() bool {
	if x != nil {
		return x.TunnelStatePathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTunnelConfigPathUnsupported() bool {
	if x != nil {
		return x.TunnelConfigPathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetEcnSameMinMaxThresholdUnsupported() bool {
	if x != nil {
		return x.EcnSameMinMaxThresholdUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosSchedulerConfigRequired() bool {
	if x != nil {
		return x.QosSchedulerConfigRequired
	}
	return false
}

func (x *Metadata_Deviations) GetQosSetWeightConfigUnsupported() bool {
	if x != nil {
		return x.QosSetWeightConfigUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosGetStatePathUnsupported() bool {
	if x != nil {
		return x.QosGetStatePathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisLevelEnabled() bool {
	if x != nil {
		return x.IsisLevelEnabled
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceRefInterfaceIdFormat() bool {
	if x != nil {
		return x.InterfaceRefInterfaceIdFormat
	}
	return false
}

func (x *Metadata_Deviations) GetMemberLinkLoopbackUnsupported() bool {
	if x != nil {
		return x.MemberLinkLoopbackUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipPlqInterfaceOperStatusCheck() bool {
	if x != nil {
		return x.SkipPlqInterfaceOperStatusCheck
	}
	return false
}

func (x *Metadata_Deviations) GetBgpExplicitPrefixLimitReceived() bool {
	if x != nil {
		return x.BgpExplicitPrefixLimitReceived
	}
	return false
}

func (x *Metadata_Deviations) GetBgpMissingOcMaxPrefixesConfiguration() bool {
	if x != nil {
		return x.BgpMissingOcMaxPrefixesConfiguration
	}
	return false
}

func (x *Metadata_Deviations) GetSkipBgpSessionCheckWithoutAfisafi() bool {
	if x != nil {
		return x.SkipBgpSessionCheckWithoutAfisafi
	}
	return false
}

func (x *Metadata_Deviations) GetMismatchedHardwareResourceNameInComponent() bool {
	if x != nil {
		return x.MismatchedHardwareResourceNameInComponent
	}
	return false
}

func (x *Metadata_Deviations) GetGnoiSubcomponentRebootStatusUnsupported() bool {
	if x != nil {
		return x.GnoiSubcomponentRebootStatusUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipNonBgpRouteExportCheck() bool {
	if x != nil {
		return x.SkipNonBgpRouteExportCheck
	}
	return false
}

func (x *Metadata_Deviations) GetIsisMetricStyleTelemetryUnsupported() bool {
	if x != nil {
		return x.IsisMetricStyleTelemetryUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetStaticRouteNextHopInterfaceRefUnsupported() bool {
	if x != nil {
		return x.StaticRouteNextHopInterfaceRefUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipStaticNexthopCheck() bool {
	if x != nil {
		return x.SkipStaticNexthopCheck
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6RouterAdvertisementConfigUnsupported() bool {
	if x != nil {
		return x.Ipv6RouterAdvertisementConfigUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPrefixLimitExceededTelemetryUnsupported() bool {
	if x != nil {
		return x.PrefixLimitExceededTelemetryUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipSettingAllowMultipleAs() bool {
	if x != nil {
		return x.SkipSettingAllowMultipleAs
	}
	return false
}

func (x *Metadata_Deviations) GetGribiDecapMixedPlenUnsupported() bool {
	if x != nil {
		return x.GribiDecapMixedPlenUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipIsisSetLevel() bool {
	if x != nil {
		return x.SkipIsisSetLevel
	}
	return false
}

func (x *Metadata_Deviations) GetSkipIsisSetMetricStyleType() bool {
	if x != nil {
		return x.SkipIsisSetMetricStyleType
	}
	return false
}

func (x *Metadata_Deviations) GetSkipSetRpMatchSetOptions() bool {
	if x != nil {
		return x.SkipSetRpMatchSetOptions
	}
	return false
}

func (x *Metadata_Deviations) GetSkipSettingDisableMetricPropagation() bool {
	if x != nil {
		return x.SkipSettingDisableMetricPropagation
	}
	return false
}

func (x *Metadata_Deviations) GetBgpConditionsMatchCommunitySetUnsupported() bool {
	if x != nil {
		return x.BgpConditionsMatchCommunitySetUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPfRequireMatchDefaultRule() bool {
	if x != nil {
		return x.PfRequireMatchDefaultRule
	}
	return false
}

func (x *Metadata_Deviations) GetMissingPortToOpticalChannelComponentMapping() bool {
	if x != nil {
		return x.MissingPortToOpticalChannelComponentMapping
	}
	return false
}

func (x *Metadata_Deviations) GetSkipContainerOp() bool {
	if x != nil {
		return x.SkipContainerOp
	}
	return false
}

func (x *Metadata_Deviations) GetReorderCallsForVendorCompatibilty() bool {
	if x != nil {
		return x.ReorderCallsForVendorCompatibilty
	}
	return false
}

func (x *Metadata_Deviations) GetAddMissingBaseConfigViaCli() bool {
	if x != nil {
		return x.AddMissingBaseConfigViaCli
	}
	return false
}

func (x *Metadata_Deviations) GetSkipMacaddressCheck() bool {
	if x != nil {
		return x.SkipMacaddressCheck
	}
	return false
}

func (x *Metadata_Deviations) GetBgpRibOcPathUnsupported() bool {
	if x != nil {
		return x.BgpRibOcPathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipPrefixSetMode() bool {
	if x != nil {
		return x.SkipPrefixSetMode
	}
	return false
}

func (x *Metadata_Deviations) GetSetMetricAsPreference() bool {
	if x != nil {
		return x.SetMetricAsPreference
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6StaticRouteWithIpv4NextHopRequiresStaticArp() bool {
	if x != nil {
		return x.Ipv6StaticRouteWithIpv4NextHopRequiresStaticArp
	}
	return false
}

func (x *Metadata_Deviations) GetPfRequireSequentialOrderPbrRules() bool {
	if x != nil {
		return x.PfRequireSequentialOrderPbrRules
	}
	return false
}

func (x *Metadata_Deviations) GetMissingStaticRouteNextHopMetricTelemetry() bool {
	if x != nil {
		return x.MissingStaticRouteNextHopMetricTelemetry
	}
	return false
}

func (x *Metadata_Deviations) GetUnsupportedStaticRouteNextHopRecurse() bool {
	if x != nil {
		return x.UnsupportedStaticRouteNextHopRecurse
	}
	return false
}

func (x *Metadata_Deviations) GetMissingStaticRouteDropNextHopTelemetry() bool {
	if x != nil {
		return x.MissingStaticRouteDropNextHopTelemetry
	}
	return false
}

func (x *Metadata_Deviations) GetMissingZrOpticalChannelTunableParametersTelemetry() bool {
	if x != nil {
		return x.MissingZrOpticalChannelTunableParametersTelemetry
	}
	return false
}

func (x *Metadata_Deviations) GetPlqReflectorStatsUnsupported() bool {
	if x != nil {
		return x.PlqReflectorStatsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPlqGeneratorCapabilitiesMaxMtu() uint32 {
	if x != nil {
		return x.PlqGeneratorCapabilitiesMaxMtu
	}
	return 0
}

func (x *Metadata_Deviations) GetPlqGeneratorCapabilitiesMaxPps() uint64 {
	if x != nil {
		return x.PlqGeneratorCapabilitiesMaxPps
	}
	return 0
}

func (x *Metadata_Deviations) GetBgpExtendedCommunityIndexUnsupported() bool {
	if x != nil {
		return x.BgpExtendedCommunityIndexUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpCommunitySetRefsUnsupported() bool {
	if x != nil {
		return x.BgpCommunitySetRefsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetRibWecmp() bool {
	if x != nil {
		return x.RibWecmp
	}
	return false
}

func (x *Metadata_Deviations) GetTableConnectionsUnsupported() bool {
	if x != nil {
		return x.TableConnectionsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetUseVendorNativeTagSetConfig() bool {
	if x != nil {
		return x.UseVendorNativeTagSetConfig
	}
	return false
}

func (x *Metadata_Deviations) GetSkipBgpSendCommunityType() bool {
	if x != nil {
		return x.SkipBgpSendCommunityType
	}
	return false
}

func (x *Metadata_Deviations) GetBgpActionsSetCommunityMethodUnsupported() bool {
	if x != nil {
		return x.BgpActionsSetCommunityMethodUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSetNoPeerGroup() bool {
	if x != nil {
		return x.SetNoPeerGroup
	}
	return false
}

func (x *Metadata_Deviations) GetBgpCommunityMemberIsAString() bool {
	if x != nil {
		return x.BgpCommunityMemberIsAString
	}
	return false
}

func (x *Metadata_Deviations) GetIpv4StaticRouteWithIpv6NhUnsupported() bool {
	if x != nil {
		return x.Ipv4StaticRouteWithIpv6NhUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6StaticRouteWithIpv4NhUnsupported() bool {
	if x != nil {
		return x.Ipv6StaticRouteWithIpv4NhUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetStaticRouteWithDropNh() bool {
	if x != nil {
		return x.StaticRouteWithDropNh
	}
	return false
}

func (x *Metadata_Deviations) GetStaticRouteWithExplicitMetric() bool {
	if x != nil {
		return x.StaticRouteWithExplicitMetric
	}
	return false
}

func (x *Metadata_Deviations) GetBgpDefaultPolicyUnsupported() bool {
	if x != nil {
		return x.BgpDefaultPolicyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitEnableBgpOnDefaultVrf() bool {
	if x != nil {
		return x.ExplicitEnableBgpOnDefaultVrf
	}
	return false
}

func (x *Metadata_Deviations) GetRoutingPolicyTagSetEmbedded() bool {
	if x != nil {
		return x.RoutingPolicyTagSetEmbedded
	}
	return false
}

func (x *Metadata_Deviations) GetSkipAfiSafiPathForBgpMultipleAs() bool {
	if x != nil {
		return x.SkipAfiSafiPathForBgpMultipleAs
	}
	return false
}

func (x *Metadata_Deviations) GetCommunityMemberRegexUnsupported() bool {
	if x != nil {
		return x.CommunityMemberRegexUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSamePolicyAttachedToAllAfis() bool {
	if x != nil {
		return x.SamePolicyAttachedToAllAfis
	}
	return false
}

func (x *Metadata_Deviations) GetSkipSettingStatementForPolicy() bool {
	if x != nil {
		return x.SkipSettingStatementForPolicy
	}
	return false
}

func (x *Metadata_Deviations) GetSkipCheckingAttributeIndex() bool {
	if x != nil {
		return x.SkipCheckingAttributeIndex
	}
	return false
}

func (x *Metadata_Deviations) GetFlattenPolicyWithMultipleStatements() bool {
	if x != nil {
		return x.FlattenPolicyWithMultipleStatements
	}
	return false
}

func (x *Metadata_Deviations) GetDefaultRoutePolicyUnsupported() bool {
	if x != nil {
		return x.DefaultRoutePolicyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSlaacPrefixLength128() bool {
	if x != nil {
		return x.SlaacPrefixLength128
	}
	return false
}

func (x *Metadata_Deviations) GetBgpMaxMultipathPathsUnsupported() bool {
	if x != nil {
		return x.BgpMaxMultipathPathsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetMultipathUnsupportedNeighborOrAfisafi() bool {
	if x != nil {
		return x.MultipathUnsupportedNeighborOrAfisafi
	}
	return false
}

func (x *Metadata_Deviations) GetModelNameUnsupported() bool {
	if x != nil {
		return x.ModelNameUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetCommunityMatchWithRedistributionUnsupported() bool {
	if x != nil {
		return x.CommunityMatchWithRedistributionUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetInstallPositionAndInstallComponentUnsupported() bool {
	if x != nil {
		return x.InstallPositionAndInstallComponentUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetEncapTunnelShutBackupNhgZeroTraffic() bool {
	if x != nil {
		return x.EncapTunnelShutBackupNhgZeroTraffic
	}
	return false
}

func (x *Metadata_Deviations) GetMaxEcmpPaths() bool {
	if x != nil {
		return x.MaxEcmpPaths
	}
	return false
}

func (x *Metadata_Deviations) GetWecmpAutoUnsupported() bool {
	if x != nil {
		return x.WecmpAutoUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetRoutingPolicyChainingUnsupported() bool {
	if x != nil {
		return x.RoutingPolicyChainingUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisLoopbackRequired() bool {
	if x != nil {
		return x.IsisLoopbackRequired
	}
	return false
}

func (x *Metadata_Deviations) GetWeightedEcmpFixedPacketVerification() bool {
	if x != nil {
		return x.WeightedEcmpFixedPacketVerification
	}
	return false
}

func (x *Metadata_Deviations) GetOverrideDefaultNhScale() bool {
	if x != nil {
		return x.OverrideDefaultNhScale
	}
	return false
}

func (x *Metadata_Deviations) GetBgpExtendedCommunitySetUnsupported() bool {
	if x != nil {
		return x.BgpExtendedCommunitySetUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpSetExtCommunitySetRefsUnsupported() bool {
	if x != nil {
		return x.BgpSetExtCommunitySetRefsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpDeleteLinkBandwidthUnsupported() bool {
	if x != nil {
		return x.BgpDeleteLinkBandwidthUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosInqueueDropCounterUnsupported() bool {
	if x != nil {
		return x.QosInqueueDropCounterUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpExplicitExtendedCommunityEnable() bool {
	if x != nil {
		return x.BgpExplicitExtendedCommunityEnable
	}
	return false
}

func (x *Metadata_Deviations) GetMatchTagSetConditionUnsupported() bool {
	if x != nil {
		return x.MatchTagSetConditionUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPeerGroupDefEbgpVrfUnsupported() bool {
	if x != nil {
		return x.PeerGroupDefEbgpVrfUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetRedisConnectedUnderEbgpVrfUnsupported() bool {
	if x != nil {
		return x.RedisConnectedUnderEbgpVrfUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpAfiSafiInDefaultNiBeforeOtherNi() bool {
	if x != nil {
		return x.BgpAfiSafiInDefaultNiBeforeOtherNi
	}
	return false
}

func (x *Metadata_Deviations) GetDefaultImportExportPolicyUnsupported() bool {
	if x != nil {
		return x.DefaultImportExportPolicyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIpv6RouterAdvertisementIntervalUnsupported() bool {
	if x != nil {
		return x.Ipv6RouterAdvertisementIntervalUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetDecapNhWithNexthopNiUnsupported() bool {
	if x != nil {
		return x.DecapNhWithNexthopNiUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetCommunityInvertAnyUnsupported() bool {
	if x != nil {
		return x.CommunityInvertAnyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSflowSourceAddressUpdateUnsupported() bool {
	if x != nil {
		return x.SflowSourceAddressUpdateUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetLinkLocalMaskLen() bool {
	if x != nil {
		return x.LinkLocalMaskLen
	}
	return false
}

func (x *Metadata_Deviations) GetUseParentComponentForTemperatureTelemetry() bool {
	if x != nil {
		return x.UseParentComponentForTemperatureTelemetry
	}
	return false
}

func (x *Metadata_Deviations) GetComponentMfgDateUnsupported() bool {
	if x != nil {
		return x.ComponentMfgDateUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetOtnChannelTribUnsupported() bool {
	if x != nil {
		return x.OtnChannelTribUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetEthChannelIngressParametersUnsupported() bool {
	if x != nil {
		return x.EthChannelIngressParametersUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetEthChannelAssignmentCiscoNumbering() bool {
	if x != nil {
		return x.EthChannelAssignmentCiscoNumbering
	}
	return false
}

func (x *Metadata_Deviations) GetInterfaceCountersUpdateDelayed() bool {
	if x != nil {
		return x.InterfaceCountersUpdateDelayed
	}
	return false
}

func (x *Metadata_Deviations) GetChassisGetRpcUnsupported() bool {
	if x != nil {
		return x.ChassisGetRpcUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPowerDisableEnableLeafRefValidation() bool {
	if x != nil {
		return x.PowerDisableEnableLeafRefValidation
	}
	return false
}

func (x *Metadata_Deviations) GetSshServerCountersUnsupported() bool {
	if x != nil {
		return x.SshServerCountersUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetOperationalModeUnsupported() bool {
	if x != nil {
		return x.OperationalModeUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpSessionStateIdleInPassiveMode() bool {
	if x != nil {
		return x.BgpSessionStateIdleInPassiveMode
	}
	return false
}

func (x *Metadata_Deviations) GetEnableMultipathUnderAfiSafi() bool {
	if x != nil {
		return x.EnableMultipathUnderAfiSafi
	}
	return false
}

func (x *Metadata_Deviations) GetOtnChannelAssignmentCiscoNumbering() bool {
	if x != nil {
		return x.OtnChannelAssignmentCiscoNumbering
	}
	return false
}

func (x *Metadata_Deviations) GetCiscoPreFecBerInactiveValue() bool {
	if x != nil {
		return x.CiscoPreFecBerInactiveValue
	}
	return false
}

func (x *Metadata_Deviations) GetBgpAfiSafiWildcardNotSupported() bool {
	if x != nil {
		return x.BgpAfiSafiWildcardNotSupported
	}
	return false
}

func (x *Metadata_Deviations) GetEnableTableConnections() bool {
	if x != nil {
		return x.EnableTableConnections
	}
	return false
}

func (x *Metadata_Deviations) GetNoZeroSuppression() bool {
	if x != nil {
		return x.NoZeroSuppression
	}
	return false
}

func (x *Metadata_Deviations) GetIsisInterfaceLevelPassiveUnsupported() bool {
	if x != nil {
		return x.IsisInterfaceLevelPassiveUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisDisSysidUnsupported() bool {
	if x != nil {
		return x.IsisDisSysidUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisDatabaseOverloadsUnsupported() bool {
	if x != nil {
		return x.IsisDatabaseOverloadsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpSetMedV7Unsupported() bool {
	if x != nil {
		return x.BgpSetMedV7Unsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTcDefaultImportPolicyUnsupported() bool {
	if x != nil {
		return x.TcDefaultImportPolicyUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTcMetricPropagationUnsupported() bool {
	if x != nil {
		return x.TcMetricPropagationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTcAttributePropagationUnsupported() bool {
	if x != nil {
		return x.TcAttributePropagationUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetTcSubscriptionUnsupported() bool {
	if x != nil {
		return x.TcSubscriptionUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetDefaultBgpInstanceName() string {
	if x != nil {
		return x.DefaultBgpInstanceName
	}
	return ""
}

func (x *Metadata_Deviations) GetChannelAssignmentRateClassParametersUnsupported() bool {
	if x != nil {
		return x.ChannelAssignmentRateClassParametersUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetQosSchedulerIngressPolicerUnsupported() bool {
	if x != nil {
		return x.QosSchedulerIngressPolicerUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetGribiEncapHeaderUnsupported() bool {
	if x != nil {
		return x.GribiEncapHeaderUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetP4RtCapabilitiesUnsupported() bool {
	if x != nil {
		return x.P4RtCapabilitiesUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetGnmiGetOnRootUnsupported() bool {
	if x != nil {
		return x.GnmiGetOnRootUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPacketProcessingAggregateDropsUnsupported() bool {
	if x != nil {
		return x.PacketProcessingAggregateDropsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetFragmentTotalDropsUnsupported() bool {
	if x != nil {
		return x.FragmentTotalDropsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpPrefixsetReqRoutepolRef() bool {
	if x != nil {
		return x.BgpPrefixsetReqRoutepolRef
	}
	return false
}

func (x *Metadata_Deviations) GetOperStatusForIcUnsupported() bool {
	if x != nil {
		return x.OperStatusForIcUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetExplicitDcoConfig() bool {
	if x != nil {
		return x.ExplicitDcoConfig
	}
	return false
}

func (x *Metadata_Deviations) GetVerifyExpectedBreakoutSupportedConfig() bool {
	if x != nil {
		return x.VerifyExpectedBreakoutSupportedConfig
	}
	return false
}

func (x *Metadata_Deviations) GetBgpAspathsetUnsupported() bool {
	if x != nil {
		return x.BgpAspathsetUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSrIgpConfigUnsupported() bool {
	if x != nil {
		return x.SrIgpConfigUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetSetIsisAuthWithInterfaceAuthenticationContainer() bool {
	if x != nil {
		return x.SetIsisAuthWithInterfaceAuthenticationContainer
	}
	return false
}

func (x *Metadata_Deviations) GetGreGueTunnelInterfaceOcUnsupported() bool {
	if x != nil {
		return x.GreGueTunnelInterfaceOcUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetLoadIntervalNotSupported() bool {
	if x != nil {
		return x.LoadIntervalNotSupported
	}
	return false
}

func (x *Metadata_Deviations) GetSkipOpticalChannelOutputPowerInterval() bool {
	if x != nil {
		return x.SkipOpticalChannelOutputPowerInterval
	}
	return false
}

func (x *Metadata_Deviations) GetSkipTransceiverDescription() bool {
	if x != nil {
		return x.SkipTransceiverDescription
	}
	return false
}

func (x *Metadata_Deviations) GetContainerzOcUnsupported() bool {
	if x != nil {
		return x.ContainerzOcUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpDistanceOcPathUnsupported() bool {
	if x != nil {
		return x.BgpDistanceOcPathUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetIsisMplsUnsupported() bool {
	if x != nil {
		return x.IsisMplsUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetAutoNegotiateUnsupported() bool {
	if x != nil {
		return x.AutoNegotiateUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetDuplexModeUnsupported() bool {
	if x != nil {
		return x.DuplexModeUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetPortSpeedUnsupported() bool {
	if x != nil {
		return x.PortSpeedUnsupported
	}
	return false
}

func (x *Metadata_Deviations) GetBgpSetMedActionUnsupported() bool {
	if x != nil {
		return x.BgpSetMedActionUnsupported
	}
	return false
}

type Metadata_PlatformExceptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Platform      *Metadata_Platform     `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Deviations    *Metadata_Deviations   `protobuf:"bytes,2,opt,name=deviations,proto3" json:"deviations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata_PlatformExceptions) Reset() {
	*x = Metadata_PlatformExceptions{}
	mi := &file_metadata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata_PlatformExceptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata_PlatformExceptions) ProtoMessage() {}

func (x *Metadata_PlatformExceptions) ProtoReflect() protoreflect.Message {
	mi := &file_metadata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata_PlatformExceptions.ProtoReflect.Descriptor instead.
func (*Metadata_PlatformExceptions) Descriptor() ([]byte, []int) {
	return file_metadata_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Metadata_PlatformExceptions) GetPlatform() *Metadata_Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *Metadata_PlatformExceptions) GetDeviations() *Metadata_Deviations {
	if x != nil {
		return x.Deviations
	}
	return nil
}

var File_metadata_proto protoreflect.FileDescriptor

const file_metadata_proto_rawDesc = "" +
	"\n" +
	"\x0emetadata.proto\x12\x12openconfig.testing\x1a1github.com/openconfig/ondatra/proto/testbed.proto\"\x93\x95\x01\n" +
	"\bMetadata\x12\x12\n" +
	"\x04uuid\x18\x01 \x01(\tR\x04uuid\x12\x17\n" +
	"\aplan_id\x18\x02 \x01(\tR\x06planId\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12>\n" +
	"\atestbed\x18\x04 \x01(\x0e2$.openconfig.testing.Metadata.TestbedR\atestbed\x12`\n" +
	"\x13platform_exceptions\x18\x05 \x03(\v2/.openconfig.testing.Metadata.PlatformExceptionsR\x12platformExceptions\x125\n" +
	"\x04tags\x18\x06 \x03(\x0e2!.openconfig.testing.Metadata.TagsR\x04tags\x12,\n" +
	"\x12path_presence_test\x18\a \x01(\bR\x10pathPresenceTest\x1a\xb8\x01\n" +
	"\bPlatform\x12.\n" +
	"\x06vendor\x18\x01 \x01(\x0e2\x16.ondatra.Device.VendorR\x06vendor\x120\n" +
	"\x14hardware_model_regex\x18\x03 \x01(\tR\x12hardwareModelRegex\x124\n" +
	"\x16software_version_regex\x18\x04 \x01(\tR\x14softwareVersionRegexJ\x04\b\x02\x10\x03R\x0ehardware_model\x1a\xe7\x8b\x01\n" +
	"\n" +
	"Deviations\x120\n" +
	"\x14ipv4_missing_enabled\x18\x01 \x01(\bR\x12ipv4MissingEnabled\x129\n" +
	"\x18traceroute_fragmentation\x18\x02 \x01(\bR\x17tracerouteFragmentation\x12;\n" +
	"\x1atraceroute_l4_protocol_udp\x18\x03 \x01(\bR\x17tracerouteL4ProtocolUdp\x12:\n" +
	"\x19prepolicy_received_routes\x18\x04 \x01(\bR\x17prepolicyReceivedRoutes\x12W\n" +
	"(hierarchical_weight_resolution_tolerance\x18\x05 \x01(\x01R%hierarchicalWeightResolutionTolerance\x12E\n" +
	"\x1fisis_multi_topology_unsupported\x18\x06 \x01(\bR\x1cisisMultiTopologyUnsupported\x12R\n" +
	"&isis_interface_level1_disable_required\x18\a \x01(\bR\"isisInterfaceLevel1DisableRequired\x12A\n" +
	"\x1disis_single_topology_required\x18\b \x01(\bR\x1aisisSingleTopologyRequired\x12C\n" +
	"\x1eisis_instance_enabled_required\x18\n" +
	" \x01(\bR\x1bisisInstanceEnabledRequired\x12Q\n" +
	"&missing_isis_interface_afi_safi_enable\x18\v \x01(\bR!missingIsisInterfaceAfiSafiEnable\x12T\n" +
	"'isis_global_authentication_not_required\x18\f \x01(\bR#isisGlobalAuthenticationNotRequired\x12X\n" +
	")isis_explicit_level_authentication_config\x18\r \x01(\bR%isisExplicitLevelAuthenticationConfig\x12I\n" +
	"!isis_restart_suppress_unsupported\x18\x0e \x01(\bR\x1eisisRestartSuppressUnsupported\x12.\n" +
	"\x13ip_neighbor_missing\x18\x0f \x01(\bR\x11ipNeighborMissing\x12/\n" +
	"\x13osactivate_noreboot\x18\x10 \x01(\bR\x12osactivateNoreboot\x127\n" +
	"\x18osinstall_for_standby_rp\x18\x11 \x01(\bR\x15osinstallForStandbyRp\x12P\n" +
	"%lldp_interface_config_override_global\x18\x12 \x01(\bR!lldpInterfaceConfigOverrideGlobal\x12U\n" +
	"(missing_bgp_last_notification_error_code\x18\x15 \x01(\bR#missingBgpLastNotificationErrorCode\x12G\n" +
	" interface_ref_config_unsupported\x18\x16 \x01(\bR\x1dinterfaceRefConfigUnsupported\x124\n" +
	"\x16state_path_unsupported\x18\x17 \x01(\bR\x14statePathUnsupported\x12?\n" +
	"\x1dipv6_enable_for_gribi_nh_dmac\x18\x18 \x01(\bR\x18ipv6EnableForGribiNhDmac\x12E\n" +
	"\x1fecn_profile_required_definition\x18\x19 \x01(\bR\x1cecnProfileRequiredDefinition\x12E\n" +
	"\x1fipv6_discarded_pkts_unsupported\x18\x1a \x01(\bR\x1cipv6DiscardedPktsUnsupported\x12C\n" +
	"\x1edrop_weight_leaves_unsupported\x18\x1b \x01(\bR\x1bdropWeightLeavesUnsupported\x12>\n" +
	"\x1ccli_takes_precedence_over_oc\x18\x1d \x01(\bR\x18cliTakesPrecedenceOverOc\x12?\n" +
	"\x1cscheduler_input_weight_limit\x18\x1e \x01(\bR\x19schedulerInputWeightLimit\x12;\n" +
	"\x1aswitch_chip_id_unsupported\x18\x1f \x01(\bR\x17switchChipIdUnsupported\x12Q\n" +
	"%backplane_facing_capacity_unsupported\x18  \x01(\bR\"backplaneFacingCapacityUnsupported\x12I\n" +
	"!interface_counters_from_container\x18! \x01(\bR\x1einterfaceCountersFromContainer\x12Z\n" +
	"+no_mix_of_tagged_and_untagged_subinterfaces\x18\" \x01(\bR%noMixOfTaggedAndUntaggedSubinterfaces\x124\n" +
	"\x16sw_version_unsupported\x18% \x01(\bR\x14swVersionUnsupported\x12B\n" +
	"\x1dstorage_component_unsupported\x18' \x01(\bR\x1bstorageComponentUnsupported\x12.\n" +
	"\x13explicit_port_speed\x18) \x01(\bR\x11explicitPortSpeed\x12H\n" +
	"!explicit_interface_in_default_vrf\x18* \x01(\bR\x1dexplicitInterfaceInDefaultVrf\x12O\n" +
	"$subinterface_packet_counters_missing\x18, \x01(\bR!subinterfacePacketCountersMissing\x12#\n" +
	"\rconnect_retry\x18- \x01(\bR\fconnectRetry\x12I\n" +
	"\"gribi_mac_override_with_static_arp\x18. \x01(\bR\x1dgribiMacOverrideWithStaticArp\x12J\n" +
	"\"route_policy_under_afi_unsupported\x18/ \x01(\bR\x1eroutePolicyUnderAfiUnsupported\x12V\n" +
	"(gnoi_fabric_component_reboot_unsupported\x180 \x01(\bR$gnoiFabricComponentRebootUnsupported\x12D\n" +
	"\x1fntp_non_default_vrf_unsupported\x181 \x01(\bR\x1bntpNonDefaultVrfUnsupported\x12\x1e\n" +
	"\vomit_l2_mtu\x182 \x01(\bR\tomitL2Mtu\x12F\n" +
	" skip_controller_card_power_admin\x183 \x01(\bR\x1cskipControllerCardPowerAdmin\x12)\n" +
	"\x10banner_delimiter\x18< \x01(\tR\x0fbannerDelimiter\x12.\n" +
	"\x13bgp_tolerance_value\x18= \x01(\x05R\x11bgpToleranceValue\x12M\n" +
	"$link_qual_wait_after_delete_required\x18> \x01(\bR\x1flinkQualWaitAfterDeleteRequired\x12C\n" +
	"\x1egnoi_status_empty_subcomponent\x18? \x01(\bR\x1bgnoiStatusEmptySubcomponent\x12V\n" +
	"(network_instance_table_deletion_required\x18@ \x01(\bR$networkInstanceTableDeletionRequired\x123\n" +
	"\x16bgp_md5_requires_reset\x18A \x01(\bR\x13bgpMd5RequiresReset\x12K\n" +
	"#dequeue_delete_not_counted_as_drops\x18B \x01(\bR\x1edequeueDeleteNotCountedAsDrops\x12*\n" +
	"\x11gribi_riback_only\x18C \x01(\bR\x0fgribiRibackOnly\x126\n" +
	"\x17aggregate_atomic_update\x18D \x01(\bR\x15aggregateAtomicUpdate\x12;\n" +
	"\x1amissing_value_for_defaults\x18E \x01(\bR\x17missingValueForDefaults\x120\n" +
	"\x14static_protocol_name\x18F \x01(\tR\x12staticProtocolName\x124\n" +
	"\x16gnoi_subcomponent_path\x18G \x01(\bR\x14gnoiSubcomponentPath\x12L\n" +
	"#interface_config_vrf_before_address\x18H \x01(\bR\x1finterfaceConfigVrfBeforeAddress\x12,\n" +
	"\x12deprecated_vlan_id\x18I \x01(\bR\x10deprecatedVlanId\x12X\n" +
	"*gribi_mac_override_static_arp_static_route\x18J \x01(\bR$gribiMacOverrideStaticArpStaticRoute\x12+\n" +
	"\x11interface_enabled\x18K \x01(\bR\x10interfaceEnabled\x12\x1d\n" +
	"\n" +
	"qos_octets\x18L \x01(\bR\tqosOctets\x120\n" +
	"\x14cpu_missing_ancestor\x18M \x01(\bR\x12cpuMissingAncestor\x12A\n" +
	"\x1drequire_routed_subinterface_0\x18N \x01(\bR\x1arequireRoutedSubinterface0\x12_\n" +
	"-gnoi_switchover_reason_missing_user_initiated\x18O \x01(\bR(gnoiSwitchoverReasonMissingUserInitiated\x128\n" +
	"\x18default_network_instance\x18P \x01(\tR\x16defaultNetworkInstance\x12O\n" +
	"$p4rt_unsetelectionid_primary_allowed\x18Q \x01(\bR!p4rtUnsetelectionidPrimaryAllowed\x12;\n" +
	"\x1abkup_arbitration_resp_code\x18R \x01(\bR\x17bkupArbitrationRespCode\x12I\n" +
	"\"backup_nhg_requires_vrf_with_decap\x18S \x01(\bR\x1dbackupNhgRequiresVrfWithDecap\x12C\n" +
	"\x1eisis_interface_afi_unsupported\x18U \x01(\bR\x1bisisInterfaceAfiUnsupported\x12L\n" +
	"#p4rt_modify_table_entry_unsupported\x18V \x01(\bR\x1fp4rtModifyTableEntryUnsupported\x12^\n" +
	"-os_component_parent_is_supervisor_or_linecard\x18W \x01(\bR'osComponentParentIsSupervisorOrLinecard\x12B\n" +
	"\x1eos_component_parent_is_chassis\x18X \x01(\bR\x1aosComponentParentIsChassis\x12W\n" +
	"*isis_require_same_l1_metric_with_l2_metric\x18[ \x01(\bR#isisRequireSameL1MetricWithL2Metric\x12W\n" +
	"*bgp_set_med_requires_equal_ospf_set_metric\x18\\ \x01(\bR#bgpSetMedRequiresEqualOspfSetMetric\x12N\n" +
	"$p4rt_gdp_requires_dot1q_subinterface\x18] \x01(\bR p4rtGdpRequiresDot1qSubinterface\x12Y\n" +
	"*ate_port_link_state_operations_unsupported\x18^ \x01(\bR%atePortLinkStateOperationsUnsupported\x12&\n" +
	"\x0fset_native_user\x18_ \x01(\bR\rsetNativeUser\x12O\n" +
	"$linecard_cpu_utilization_unsupported\x18b \x01(\bR!linecardCpuUtilizationUnsupported\x12S\n" +
	"&consistent_component_names_unsupported\x18c \x01(\bR#consistentComponentNamesUnsupported\x12\\\n" +
	"+controller_card_cpu_utilization_unsupported\x18d \x01(\bR'controllerCardCpuUtilizationUnsupported\x12E\n" +
	"\x1ffabric_drop_counter_unsupported\x18e \x01(\bR\x1cfabricDropCounterUnsupported\x12U\n" +
	"'linecard_memory_utilization_unsupported\x18f \x01(\bR$linecardMemoryUtilizationUnsupported\x12F\n" +
	" qos_voq_drop_counter_unsupported\x18g \x01(\bR\x1cqosVoqDropCounterUnsupported\x12D\n" +
	"\x1fate_ipv6_flow_label_unsupported\x18h \x01(\bR\x1bateIpv6FlowLabelUnsupported\x12P\n" +
	"%isis_timers_csnp_interval_unsupported\x18i \x01(\bR!isisTimersCsnpIntervalUnsupported\x12q\n" +
	"7isis_counter_manual_address_drop_from_areas_unsupported\x18j \x01(\bR0isisCounterManualAddressDropFromAreasUnsupported\x12P\n" +
	"%isis_counter_part_changes_unsupported\x18k \x01(\bR!isisCounterPartChangesUnsupported\x12L\n" +
	"\"transceiver_thresholds_unsupported\x18l \x01(\bR transceiverThresholdsUnsupported\x12F\n" +
	" interface_loopback_mode_raw_gnmi\x18m \x01(\bR\x1cinterfaceLoopbackModeRawGnmi\x12@\n" +
	"\x1dskip_tcp_negotiated_mss_check\x18n \x01(\bR\x19skipTcpNegotiatedMssCheck\x12L\n" +
	"#isis_lsp_metadata_leafs_unsupported\x18o \x01(\bR\x1fisisLspMetadataLeafsUnsupported\x121\n" +
	"\x15qos_queue_requires_id\x18p \x01(\bR\x12qosQueueRequiresId\x12P\n" +
	"%qos_buffer_allocation_config_required\x18r \x01(\bR!qosBufferAllocationConfigRequired\x12f\n" +
	"1bgp_global_extended_next_hop_encoding_unsupported\x18s \x01(\bR+bgpGlobalExtendedNextHopEncodingUnsupported\x121\n" +
	"\x15bgp_llgr_oc_undefined\x18t \x01(\bR\x12bgpLlgrOcUndefined\x12A\n" +
	"\x1dtunnel_state_path_unsupported\x18u \x01(\bR\x1atunnelStatePathUnsupported\x12C\n" +
	"\x1etunnel_config_path_unsupported\x18v \x01(\bR\x1btunnelConfigPathUnsupported\x12Q\n" +
	"&ecn_same_min_max_threshold_unsupported\x18w \x01(\bR!ecnSameMinMaxThresholdUnsupported\x12A\n" +
	"\x1dqos_scheduler_config_required\x18x \x01(\bR\x1aqosSchedulerConfigRequired\x12H\n" +
	"!qos_set_weight_config_unsupported\x18y \x01(\bR\x1dqosSetWeightConfigUnsupported\x12B\n" +
	"\x1eqos_get_state_path_unsupported\x18z \x01(\bR\x1aqosGetStatePathUnsupported\x12,\n" +
	"\x12isis_level_enabled\x18{ \x01(\bR\x10isisLevelEnabled\x12H\n" +
	"!interface_ref_interface_id_format\x18| \x01(\bR\x1dinterfaceRefInterfaceIdFormat\x12G\n" +
	" member_link_loopback_unsupported\x18} \x01(\bR\x1dmemberLinkLoopbackUnsupported\x12M\n" +
	"$skip_plq_interface_oper_status_check\x18~ \x01(\bR\x1fskipPlqInterfaceOperStatusCheck\x12J\n" +
	"\"bgp_explicit_prefix_limit_received\x18\x7f \x01(\bR\x1ebgpExplicitPrefixLimitReceived\x12X\n" +
	")bgp_missing_oc_max_prefixes_configuration\x18\x80\x01 \x01(\bR$bgpMissingOcMaxPrefixesConfiguration\x12R\n" +
	"&skip_bgp_session_check_without_afisafi\x18\x81\x01 \x01(\bR!skipBgpSessionCheckWithoutAfisafi\x12b\n" +
	".mismatched_hardware_resource_name_in_component\x18\x82\x01 \x01(\bR)mismatchedHardwareResourceNameInComponent\x12]\n" +
	"+gnoi_subcomponent_reboot_status_unsupported\x18\x84\x01 \x01(\bR'gnoiSubcomponentRebootStatusUnsupported\x12D\n" +
	"\x1fskip_non_bgp_route_export_check\x18\x85\x01 \x01(\bR\x1askipNonBgpRouteExportCheck\x12U\n" +
	"'isis_metric_style_telemetry_unsupported\x18\x86\x01 \x01(\bR#isisMetricStyleTelemetryUnsupported\x12c\n" +
	"/static_route_next_hop_interface_ref_unsupported\x18\x87\x01 \x01(\bR)staticRouteNextHopInterfaceRefUnsupported\x12:\n" +
	"\x19skip_static_nexthop_check\x18\x88\x01 \x01(\bR\x16skipStaticNexthopCheck\x12_\n" +
	",ipv6_router_advertisement_config_unsupported\x18\x8a\x01 \x01(\bR(ipv6RouterAdvertisementConfigUnsupported\x12]\n" +
	"+prefix_limit_exceeded_telemetry_unsupported\x18\x8b\x01 \x01(\bR'prefixLimitExceededTelemetryUnsupported\x12C\n" +
	"\x1eskip_setting_allow_multiple_as\x18\x8c\x01 \x01(\bR\x1askipSettingAllowMultipleAs\x12K\n" +
	"\"gribi_decap_mixed_plen_unsupported\x18\x8f\x01 \x01(\bR\x1egribiDecapMixedPlenUnsupported\x12.\n" +
	"\x13skip_isis_set_level\x18\x90\x01 \x01(\bR\x10skipIsisSetLevel\x12D\n" +
	"\x1fskip_isis_set_metric_style_type\x18\x91\x01 \x01(\bR\x1askipIsisSetMetricStyleType\x12@\n" +
	"\x1dskip_set_rp_match_set_options\x18\x92\x01 \x01(\bR\x18skipSetRpMatchSetOptions\x12U\n" +
	"'skip_setting_disable_metric_propagation\x18\x93\x01 \x01(\bR#skipSettingDisableMetricPropagation\x12b\n" +
	".bgp_conditions_match_community_set_unsupported\x18\x94\x01 \x01(\bR)bgpConditionsMatchCommunitySetUnsupported\x12A\n" +
	"\x1dpf_require_match_default_rule\x18\x95\x01 \x01(\bR\x19pfRequireMatchDefaultRule\x12g\n" +
	"1missing_port_to_optical_channel_component_mapping\x18\x96\x01 \x01(\bR+missingPortToOpticalChannelComponentMapping\x12+\n" +
	"\x11skip_container_op\x18\x97\x01 \x01(\bR\x0fskipContainerOp\x12Q\n" +
	"%reorder_calls_for_vendor_compatibilty\x18\x98\x01 \x01(\bR!reorderCallsForVendorCompatibilty\x12D\n" +
	"\x1fadd_missing_base_config_via_cli\x18\x99\x01 \x01(\bR\x1aaddMissingBaseConfigViaCli\x123\n" +
	"\x15skip_macaddress_check\x18\x9a\x01 \x01(\bR\x13skipMacaddressCheck\x12=\n" +
	"\x1bbgp_rib_oc_path_unsupported\x18\x9b\x01 \x01(\bR\x17bgpRibOcPathUnsupported\x120\n" +
	"\x14skip_prefix_set_mode\x18\x9c\x01 \x01(\bR\x11skipPrefixSetMode\x128\n" +
	"\x18set_metric_as_preference\x18\x9d\x01 \x01(\bR\x15setMetricAsPreference\x12r\n" +
	"8ipv6_static_route_with_ipv4_next_hop_requires_static_arp\x18\x9e\x01 \x01(\bR/ipv6StaticRouteWithIpv4NextHopRequiresStaticArp\x12P\n" +
	"%pf_require_sequential_order_pbr_rules\x18\x9f\x01 \x01(\bR pfRequireSequentialOrderPbrRules\x12a\n" +
	".missing_static_route_next_hop_metric_telemetry\x18\xa0\x01 \x01(\bR(missingStaticRouteNextHopMetricTelemetry\x12X\n" +
	")unsupported_static_route_next_hop_recurse\x18\xa1\x01 \x01(\bR$unsupportedStaticRouteNextHopRecurse\x12]\n" +
	",missing_static_route_drop_next_hop_telemetry\x18\xa2\x01 \x01(\bR&missingStaticRouteDropNextHopTelemetry\x12s\n" +
	"7missing_zr_optical_channel_tunable_parameters_telemetry\x18\xa3\x01 \x01(\bR1missingZrOpticalChannelTunableParametersTelemetry\x12F\n" +
	"\x1fplq_reflector_stats_unsupported\x18\xa4\x01 \x01(\bR\x1cplqReflectorStatsUnsupported\x12K\n" +
	"\"plq_generator_capabilities_max_mtu\x18\xa5\x01 \x01(\rR\x1eplqGeneratorCapabilitiesMaxMtu\x12K\n" +
	"\"plq_generator_capabilities_max_pps\x18\xa6\x01 \x01(\x04R\x1eplqGeneratorCapabilitiesMaxPps\x12W\n" +
	"(bgp_extended_community_index_unsupported\x18\xa7\x01 \x01(\bR$bgpExtendedCommunityIndexUnsupported\x12K\n" +
	"\"bgp_community_set_refs_unsupported\x18\xa8\x01 \x01(\bR\x1ebgpCommunitySetRefsUnsupported\x12\x1c\n" +
	"\trib_wecmp\x18\xa9\x01 \x01(\bR\bribWecmp\x12C\n" +
	"\x1dtable_connections_unsupported\x18\xaa\x01 \x01(\bR\x1btableConnectionsUnsupported\x12F\n" +
	" use_vendor_native_tag_set_config\x18\xab\x01 \x01(\bR\x1buseVendorNativeTagSetConfig\x12?\n" +
	"\x1cskip_bgp_send_community_type\x18\xac\x01 \x01(\bR\x18skipBgpSendCommunityType\x12^\n" +
	",bgp_actions_set_community_method_unsupported\x18\xae\x01 \x01(\bR'bgpActionsSetCommunityMethodUnsupported\x12*\n" +
	"\x11set_no_peer_group\x18\xaf\x01 \x01(\bR\x0esetNoPeerGroup\x12F\n" +
	" bgp_community_member_is_a_string\x18\xb0\x01 \x01(\bR\x1bbgpCommunityMemberIsAString\x12Y\n" +
	"*ipv4_static_route_with_ipv6_nh_unsupported\x18\xb1\x01 \x01(\bR$ipv4StaticRouteWithIpv6NhUnsupported\x12Y\n" +
	"*ipv6_static_route_with_ipv4_nh_unsupported\x18\xb2\x01 \x01(\bR$ipv6StaticRouteWithIpv4NhUnsupported\x129\n" +
	"\x19static_route_with_drop_nh\x18\xb3\x01 \x01(\bR\x15staticRouteWithDropNh\x12I\n" +
	"!static_route_with_explicit_metric\x18\xb4\x01 \x01(\bR\x1dstaticRouteWithExplicitMetric\x12D\n" +
	"\x1ebgp_default_policy_unsupported\x18\xb5\x01 \x01(\bR\x1bbgpDefaultPolicyUnsupported\x12J\n" +
	"\"explicit_enable_bgp_on_default_vrf\x18\xb6\x01 \x01(\bR\x1dexplicitEnableBgpOnDefaultVrf\x12E\n" +
	"\x1frouting_policy_tag_set_embedded\x18\xb7\x01 \x01(\bR\x1broutingPolicyTagSetEmbedded\x12P\n" +
	"&skip_afi_safi_path_for_bgp_multiple_as\x18\xb8\x01 \x01(\bR\x1fskipAfiSafiPathForBgpMultipleAs\x12L\n" +
	"\"community_member_regex_unsupported\x18\xb9\x01 \x01(\bR\x1fcommunityMemberRegexUnsupported\x12F\n" +
	" same_policy_attached_to_all_afis\x18\xba\x01 \x01(\bR\x1bsamePolicyAttachedToAllAfis\x12I\n" +
	"!skip_setting_statement_for_policy\x18\xbb\x01 \x01(\bR\x1dskipSettingStatementForPolicy\x12B\n" +
	"\x1dskip_checking_attribute_index\x18\xbc\x01 \x01(\bR\x1askipCheckingAttributeIndex\x12U\n" +
	"'flatten_policy_with_multiple_statements\x18\xbd\x01 \x01(\bR#flattenPolicyWithMultipleStatements\x12H\n" +
	" default_route_policy_unsupported\x18\xbe\x01 \x01(\bR\x1ddefaultRoutePolicyUnsupported\x125\n" +
	"\x16slaac_prefix_length128\x18\xbf\x01 \x01(\bR\x14slaacPrefixLength128\x12M\n" +
	"#bgp_max_multipath_paths_unsupported\x18\xc0\x01 \x01(\bR\x1fbgpMaxMultipathPathsUnsupported\x12Y\n" +
	")multipath_unsupported_neighbor_or_afisafi\x18\xc1\x01 \x01(\bR%multipathUnsupportedNeighborOrAfisafi\x125\n" +
	"\x16model_name_unsupported\x18\xc2\x01 \x01(\bR\x14modelNameUnsupported\x12e\n" +
	"/community_match_with_redistribution_unsupported\x18\xc3\x01 \x01(\bR+communityMatchWithRedistributionUnsupported\x12j\n" +
	"2install_position_and_install_component_unsupported\x18\xc4\x01 \x01(\bR-installPositionAndInstallComponentUnsupported\x12W\n" +
	")encap_tunnel_shut_backup_nhg_zero_traffic\x18\xc5\x01 \x01(\bR#encapTunnelShutBackupNhgZeroTraffic\x12%\n" +
	"\x0emax_ecmp_paths\x18\xc6\x01 \x01(\bR\fmaxEcmpPaths\x125\n" +
	"\x16wecmp_auto_unsupported\x18\xc7\x01 \x01(\bR\x14wecmpAutoUnsupported\x12N\n" +
	"#routing_policy_chaining_unsupported\x18\xc8\x01 \x01(\bR routingPolicyChainingUnsupported\x125\n" +
	"\x16isis_loopback_required\x18\xc9\x01 \x01(\bR\x14isisLoopbackRequired\x12U\n" +
	"'weighted_ecmp_fixed_packet_verification\x18\xca\x01 \x01(\bR#weightedEcmpFixedPacketVerification\x12:\n" +
	"\x19override_default_nh_scale\x18\xcb\x01 \x01(\bR\x16overrideDefaultNhScale\x12S\n" +
	"&bgp_extended_community_set_unsupported\x18\xcc\x01 \x01(\bR\"bgpExtendedCommunitySetUnsupported\x12Y\n" +
	"*bgp_set_ext_community_set_refs_unsupported\x18\xcd\x01 \x01(\bR$bgpSetExtCommunitySetRefsUnsupported\x12Q\n" +
	"%bgp_delete_link_bandwidth_unsupported\x18\xce\x01 \x01(\bR!bgpDeleteLinkBandwidthUnsupported\x12O\n" +
	"$qos_inqueue_drop_counter_unsupported\x18\xcf\x01 \x01(\bR qosInqueueDropCounterUnsupported\x12S\n" +
	"&bgp_explicit_extended_community_enable\x18\xd0\x01 \x01(\bR\"bgpExplicitExtendedCommunityEnable\x12M\n" +
	"#match_tag_set_condition_unsupported\x18\xd1\x01 \x01(\bR\x1fmatchTagSetConditionUnsupported\x12L\n" +
	"#peer_group_def_ebgp_vrf_unsupported\x18\xd2\x01 \x01(\bR\x1epeerGroupDefEbgpVrfUnsupported\x12Z\n" +
	"*redis_connected_under_ebgp_vrf_unsupported\x18\xd3\x01 \x01(\bR%redisConnectedUnderEbgpVrfUnsupported\x12W\n" +
	"*bgp_afi_safi_in_default_ni_before_other_ni\x18\xd4\x01 \x01(\bR\"bgpAfiSafiInDefaultNiBeforeOtherNi\x12W\n" +
	"(default_import_export_policy_unsupported\x18\xd5\x01 \x01(\bR$defaultImportExportPolicyUnsupported\x12c\n" +
	".ipv6_router_advertisement_interval_unsupported\x18\xd6\x01 \x01(\bR*ipv6RouterAdvertisementIntervalUnsupported\x12N\n" +
	"$decap_nh_with_nexthop_ni_unsupported\x18\xd7\x01 \x01(\bR\x1fdecapNhWithNexthopNiUnsupported\x12H\n" +
	" community_invert_any_unsupported\x18\xd8\x01 \x01(\bR\x1dcommunityInvertAnyUnsupported\x12U\n" +
	"'sflow_source_address_update_unsupported\x18\xd9\x01 \x01(\bR#sflowSourceAddressUpdateUnsupported\x12.\n" +
	"\x13link_local_mask_len\x18\xda\x01 \x01(\bR\x10linkLocalMaskLen\x12b\n" +
	".use_parent_component_for_temperature_telemetry\x18\xdb\x01 \x01(\bR)useParentComponentForTemperatureTelemetry\x12D\n" +
	"\x1ecomponent_mfg_date_unsupported\x18\xdc\x01 \x01(\bR\x1bcomponentMfgDateUnsupported\x12@\n" +
	"\x1cotn_channel_trib_unsupported\x18\xdd\x01 \x01(\bR\x19otnChannelTribUnsupported\x12[\n" +
	"*eth_channel_ingress_parameters_unsupported\x18\xde\x01 \x01(\bR&ethChannelIngressParametersUnsupported\x12S\n" +
	"&eth_channel_assignment_cisco_numbering\x18\xdf\x01 \x01(\bR\"ethChannelAssignmentCiscoNumbering\x12J\n" +
	"!interface_counters_update_delayed\x18\xe0\x01 \x01(\bR\x1einterfaceCountersUpdateDelayed\x12>\n" +
	"\x1bchassis_get_rpc_unsupported\x18\xe1\x01 \x01(\bR\x18chassisGetRpcUnsupported\x12V\n" +
	"(power_disable_enable_leaf_ref_validation\x18\xe2\x01 \x01(\bR#powerDisableEnableLeafRefValidation\x12F\n" +
	"\x1fssh_server_counters_unsupported\x18\xe3\x01 \x01(\bR\x1csshServerCountersUnsupported\x12A\n" +
	"\x1coperational_mode_unsupported\x18\xe4\x01 \x01(\bR\x1aoperationalModeUnsupported\x12Q\n" +
	"&bgp_session_state_idle_in_passive_mode\x18\xe5\x01 \x01(\bR bgpSessionStateIdleInPassiveMode\x12E\n" +
	"\x1fenable_multipath_under_afi_safi\x18\xe6\x01 \x01(\bR\x1benableMultipathUnderAfiSafi\x12S\n" +
	"&otn_channel_assignment_cisco_numbering\x18\xe8\x01 \x01(\bR\"otnChannelAssignmentCiscoNumbering\x12F\n" +
	" cisco_pre_fec_ber_inactive_value\x18\xe9\x01 \x01(\bR\x1bciscoPreFecBerInactiveValue\x12L\n" +
	"#bgp_afi_safi_wildcard_not_supported\x18\xeb\x01 \x01(\bR\x1ebgpAfiSafiWildcardNotSupported\x129\n" +
	"\x18enable_table_connections\x18\xec\x01 \x01(\bR\x16enableTableConnections\x12/\n" +
	"\x13no_zero_suppression\x18\xed\x01 \x01(\bR\x11noZeroSuppression\x12W\n" +
	"(isis_interface_level_passive_unsupported\x18\xee\x01 \x01(\bR$isisInterfaceLevelPassiveUnsupported\x12<\n" +
	"\x1aisis_dis_sysid_unsupported\x18\xef\x01 \x01(\bR\x17isisDisSysidUnsupported\x12N\n" +
	"#isis_database_overloads_unsupported\x18\xf0\x01 \x01(\bR isisDatabaseOverloadsUnsupported\x12;\n" +
	"\x1abgp_set_med_v7_unsupported\x18\xf1\x01 \x01(\bR\x16bgpSetMedV7Unsupported\x12O\n" +
	"$tc_default_import_policy_unsupported\x18\xf2\x01 \x01(\bR tcDefaultImportPolicyUnsupported\x12J\n" +
	"!tc_metric_propagation_unsupported\x18\xf3\x01 \x01(\bR\x1etcMetricPropagationUnsupported\x12P\n" +
	"$tc_attribute_propagation_unsupported\x18\xf4\x01 \x01(\bR!tcAttributePropagationUnsupported\x12?\n" +
	"\x1btc_subscription_unsupported\x18\xf5\x01 \x01(\bR\x19tcSubscriptionUnsupported\x12:\n" +
	"\x19default_bgp_instance_name\x18\xf6\x01 \x01(\tR\x16defaultBgpInstanceName\x12n\n" +
	"4channel_assignment_rate_class_parameters_unsupported\x18\xf7\x01 \x01(\bR/channelAssignmentRateClassParametersUnsupported\x12Y\n" +
	")qos_scheduler_ingress_policer_unsupported\x18\xf8\x01 \x01(\bR%qosSchedulerIngressPolicerUnsupported\x12D\n" +
	"\x1egribi_encap_header_unsupported\x18\xf9\x01 \x01(\bR\x1bgribiEncapHeaderUnsupported\x12C\n" +
	"\x1dp4rt_capabilities_unsupported\x18\xfa\x01 \x01(\bR\x1bp4rtCapabilitiesUnsupported\x12?\n" +
	"\x1cgnmi_get_on_root_unsupported\x18\xfb\x01 \x01(\bR\x18gnmiGetOnRootUnsupported\x12a\n" +
	"-packet_processing_aggregate_drops_unsupported\x18\xfc\x01 \x01(\bR)packetProcessingAggregateDropsUnsupported\x12H\n" +
	" fragment_total_drops_unsupported\x18\xfd\x01 \x01(\bR\x1dfragmentTotalDropsUnsupported\x12C\n" +
	"\x1ebgp_prefixset_req_routepol_ref\x18\xff\x01 \x01(\bR\x1abgpPrefixsetReqRoutepolRef\x12C\n" +
	"\x1eoper_status_for_ic_unsupported\x18\x80\x02 \x01(\bR\x1aoperStatusForIcUnsupported\x12/\n" +
	"\x13explicit_dco_config\x18\x81\x02 \x01(\bR\x11explicitDcoConfig\x12Y\n" +
	")verify_expected_breakout_supported_config\x18\x82\x02 \x01(\bR%verifyExpectedBreakoutSupportedConfig\x12;\n" +
	"\x19bgp_aspathset_unsupported\x18\x83\x02 \x01(\bR\x17bgpAspathsetUnsupported\x12:\n" +
	"\x19sr_igp_config_unsupported\x18\x84\x02 \x01(\bR\x16srIgpConfigUnsupported\x12o\n" +
	"5set_isis_auth_with_interface_authentication_container\x18\x85\x02 \x01(\bR/setIsisAuthWithInterfaceAuthenticationContainer\x12T\n" +
	"'gre_gue_tunnel_interface_oc_unsupported\x18\x86\x02 \x01(\bR\"greGueTunnelInterfaceOcUnsupported\x12>\n" +
	"\x1bload_interval_not_supported\x18\x87\x02 \x01(\bR\x18loadIntervalNotSupported\x12Z\n" +
	"*skip_optical_channel_output_power_interval\x18\x88\x02 \x01(\bR%skipOpticalChannelOutputPowerInterval\x12A\n" +
	"\x1cskip_transceiver_description\x18\x89\x02 \x01(\bR\x1askipTransceiverDescription\x12;\n" +
	"\x19containerz_oc_unsupported\x18\x8a\x02 \x01(\bR\x17containerzOcUnsupported\x12G\n" +
	" bgp_distance_oc_path_unsupported\x18\x8b\x02 \x01(\bR\x1cbgpDistanceOcPathUnsupported\x123\n" +
	"\x15isis_mpls_unsupported\x18\x8c\x02 \x01(\bR\x13isisMplsUnsupported\x12=\n" +
	"\x1aauto_negotiate_unsupported\x18\x8d\x02 \x01(\bR\x18autoNegotiateUnsupported\x127\n" +
	"\x17duplex_mode_unsupported\x18\x8e\x02 \x01(\bR\x15duplexModeUnsupported\x125\n" +
	"\x16port_speed_unsupported\x18\x8f\x02 \x01(\bR\x14portSpeedUnsupported\x12C\n" +
	"\x1ebgp_set_med_action_unsupported\x18\x90\x02 \x01(\bR\x1abgpSetMedActionUnsupportedJ\x04\bT\x10UJ\x04\b\t\x10\n" +
	"J\x04\b\x1c\x10\x1dJ\x04\b\x14\x10\x15J\x04\b&\x10'J\x04\b+\x10,J\x04\bZ\x10[J\x04\ba\x10bJ\x04\b7\x108J\x04\bY\x10ZJ\x04\b\x13\x10\x14J\x04\b$\x10%J\x04\b#\x10$J\x04\b(\x10)J\x04\bq\x10rJ\x06\b\x83\x01\x10\x84\x01J\x06\b\x8d\x01\x10\x8e\x01J\x06\b\xad\x01\x10\xae\x01J\x06\b\xea\x01\x10\xeb\x01J\x06\b\xfe\x01\x10\xff\x01J\x06\b\xe7\x01\x10\xe8\x01\x1a\xa0\x01\n" +
	"\x12PlatformExceptions\x12A\n" +
	"\bplatform\x18\x01 \x01(\v2%.openconfig.testing.Metadata.PlatformR\bplatform\x12G\n" +
	"\n" +
	"deviations\x18\x02 \x01(\v2'.openconfig.testing.Metadata.DeviationsR\n" +
	"deviations\"\xf8\x02\n" +
	"\aTestbed\x12\x17\n" +
	"\x13TESTBED_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vTESTBED_DUT\x10\x01\x12\x1a\n" +
	"\x16TESTBED_DUT_DUT_4LINKS\x10\x02\x12\x1a\n" +
	"\x16TESTBED_DUT_ATE_2LINKS\x10\x03\x12\x1a\n" +
	"\x16TESTBED_DUT_ATE_4LINKS\x10\x04\x12\x1e\n" +
	"\x1aTESTBED_DUT_ATE_9LINKS_LAG\x10\x05\x12\x1e\n" +
	"\x1aTESTBED_DUT_DUT_ATE_2LINKS\x10\x06\x12\x1a\n" +
	"\x16TESTBED_DUT_ATE_8LINKS\x10\a\x12\x15\n" +
	"\x11TESTBED_DUT_400ZR\x10\b\x12\x1a\n" +
	"\x16TESTBED_DUT_400ZR_PLUS\x10\t\x12!\n" +
	"\x1dTESTBED_DUT_400ZR_100G_4LINKS\x10\n" +
	"\x12!\n" +
	"\x1dTESTBED_DUT_400FR_100G_4LINKS\x10\v\x12\x1a\n" +
	"\x16TESTBED_DUT_ATE_5LINKS\x10\f\"m\n" +
	"\x04Tags\x12\x14\n" +
	"\x10TAGS_UNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10TAGS_AGGREGATION\x10\x01\x12\x18\n" +
	"\x14TAGS_DATACENTER_EDGE\x10\x02\x12\r\n" +
	"\tTAGS_EDGE\x10\x03\x12\x10\n" +
	"\fTAGS_TRANSIT\x10\x04b\x06proto3"

var (
	file_metadata_proto_rawDescOnce sync.Once
	file_metadata_proto_rawDescData []byte
)

func file_metadata_proto_rawDescGZIP() []byte {
	file_metadata_proto_rawDescOnce.Do(func() {
		file_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_metadata_proto_rawDesc), len(file_metadata_proto_rawDesc)))
	})
	return file_metadata_proto_rawDescData
}

var file_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_metadata_proto_goTypes = []any{
	(Metadata_Testbed)(0),               // 0: openconfig.testing.Metadata.Testbed
	(Metadata_Tags)(0),                  // 1: openconfig.testing.Metadata.Tags
	(*Metadata)(nil),                    // 2: openconfig.testing.Metadata
	(*Metadata_Platform)(nil),           // 3: openconfig.testing.Metadata.Platform
	(*Metadata_Deviations)(nil),         // 4: openconfig.testing.Metadata.Deviations
	(*Metadata_PlatformExceptions)(nil), // 5: openconfig.testing.Metadata.PlatformExceptions
	(proto.Device_Vendor)(0),            // 6: ondatra.Device.Vendor
}
var file_metadata_proto_depIdxs = []int32{
	0, // 0: openconfig.testing.Metadata.testbed:type_name -> openconfig.testing.Metadata.Testbed
	5, // 1: openconfig.testing.Metadata.platform_exceptions:type_name -> openconfig.testing.Metadata.PlatformExceptions
	1, // 2: openconfig.testing.Metadata.tags:type_name -> openconfig.testing.Metadata.Tags
	6, // 3: openconfig.testing.Metadata.Platform.vendor:type_name -> ondatra.Device.Vendor
	3, // 4: openconfig.testing.Metadata.PlatformExceptions.platform:type_name -> openconfig.testing.Metadata.Platform
	4, // 5: openconfig.testing.Metadata.PlatformExceptions.deviations:type_name -> openconfig.testing.Metadata.Deviations
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_metadata_proto_init() }
func file_metadata_proto_init() {
	if File_metadata_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_metadata_proto_rawDesc), len(file_metadata_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_metadata_proto_goTypes,
		DependencyIndexes: file_metadata_proto_depIdxs,
		EnumInfos:         file_metadata_proto_enumTypes,
		MessageInfos:      file_metadata_proto_msgTypes,
	}.Build()
	File_metadata_proto = out.File
	file_metadata_proto_goTypes = nil
	file_metadata_proto_depIdxs = nil
}
