// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ocpaths.proto defines a specification of OpenConfig path support or
// requirements of a networking entity.
//
// This specification is distinct from
// github.com/openconfig/featureprofiles/proto/feature.proto, which describes
// the relationship between featureprofiles tests and OC paths and is used to
// report test coverage of those paths.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: ocpaths.proto

package ocpaths

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OCPaths is the complete list of all OpenConfig paths associated with some
// entity (e.g. NOS, or path requirements list for a particular device role).
type OCPaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required OpenConfig paths for this entity.
	Ocpaths []*OCPath `protobuf:"bytes,1,rep,name=ocpaths,proto3" json:"ocpaths,omitempty"`
	// The semantic version of the OpenConfig public models release
	// (https://github.com/openconfig/public) associated with the list of
	// OpenConfig paths.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *OCPaths) Reset() {
	*x = OCPaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocpaths_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCPaths) ProtoMessage() {}

func (x *OCPaths) ProtoReflect() protoreflect.Message {
	mi := &file_ocpaths_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCPaths.ProtoReflect.Descriptor instead.
func (*OCPaths) Descriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{0}
}

func (x *OCPaths) GetOcpaths() []*OCPath {
	if x != nil {
		return x.Ocpaths
	}
	return nil
}

func (x *OCPaths) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// OCPath is an individual OpenConfig path path.
type OCPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flattened OC path without prefixes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies a limited portion of the OC model that a given path is needed to
	// support.
	OcpathConstraint *OCPathConstraint `protobuf:"bytes,2,opt,name=ocpath_constraint,json=ocpathConstraint,proto3" json:"ocpath_constraint,omitempty"`
	// Suffix for featureprofiles/feature/<featureprofileid> to which this OCPath
	// is associated.
	// The string must match openconfig.profiles.FeatureProfileID in
	// https://github.com/openconfig/featureprofiles/blob/main/proto/feature.proto.
	// This destination featureprofiles folder serves as a grouping of the paths
	// related to the tests which appear in this folder and subfolders the folder.
	Featureprofileid string `protobuf:"bytes,3,opt,name=featureprofileid,proto3" json:"featureprofileid,omitempty"`
	// A set of opaque tags that are used for this path. These tags can be used
	// to group paths according to use-case specific criteria.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *OCPath) Reset() {
	*x = OCPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocpaths_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCPath) ProtoMessage() {}

func (x *OCPath) ProtoReflect() protoreflect.Message {
	mi := &file_ocpaths_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCPath.ProtoReflect.Descriptor instead.
func (*OCPath) Descriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{1}
}

func (x *OCPath) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OCPath) GetOcpathConstraint() *OCPathConstraint {
	if x != nil {
		return x.OcpathConstraint
	}
	return nil
}

func (x *OCPath) GetFeatureprofileid() string {
	if x != nil {
		return x.Featureprofileid
	}
	return ""
}

func (x *OCPath) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// OCPathConstraint enumerates platform_types that are required to be supported
// for all /components/component paths. All OCPath.name which contain a
// /components/component path, must also set the oc-platform-type the path
// applies to. OCPathConstraint may be used for any other oc paths when a subset
// of types, enums or identities are required.
//
// For example, the path /components/component/state/software-version could have
// platform_type constraints of BIOS, BOOT_LOADER and OPERATING_SYSTEM
//
// In the future, additional types of constraints can be defined by adding more
// fields for each type of constraint
type OCPathConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Constraint:
	//
	//	*OCPathConstraint_PlatformType
	Constraint isOCPathConstraint_Constraint `protobuf_oneof:"constraint"`
}

func (x *OCPathConstraint) Reset() {
	*x = OCPathConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ocpaths_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OCPathConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCPathConstraint) ProtoMessage() {}

func (x *OCPathConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_ocpaths_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCPathConstraint.ProtoReflect.Descriptor instead.
func (*OCPathConstraint) Descriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{2}
}

func (m *OCPathConstraint) GetConstraint() isOCPathConstraint_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *OCPathConstraint) GetPlatformType() string {
	if x, ok := x.GetConstraint().(*OCPathConstraint_PlatformType); ok {
		return x.PlatformType
	}
	return ""
}

type isOCPathConstraint_Constraint interface {
	isOCPathConstraint_Constraint()
}

type OCPathConstraint_PlatformType struct {
	PlatformType string `protobuf:"bytes,1,opt,name=platform_type,json=platformType,proto3,oneof"`
}

func (*OCPathConstraint_PlatformType) isOCPathConstraint_Constraint() {}

var File_ocpaths_proto protoreflect.FileDescriptor

var file_ocpaths_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x63, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x59, 0x0a, 0x07, 0x4f, 0x43, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x63, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2e, 0x4f, 0x43, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x6f, 0x63, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaf,
	0x01, 0x0a, 0x06, 0x4f, 0x43, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x11, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x4f, 0x43,
	0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x10,
	0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x47, 0x0a, 0x10, 0x4f, 0x43, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ocpaths_proto_rawDescOnce sync.Once
	file_ocpaths_proto_rawDescData = file_ocpaths_proto_rawDesc
)

func file_ocpaths_proto_rawDescGZIP() []byte {
	file_ocpaths_proto_rawDescOnce.Do(func() {
		file_ocpaths_proto_rawDescData = protoimpl.X.CompressGZIP(file_ocpaths_proto_rawDescData)
	})
	return file_ocpaths_proto_rawDescData
}

var file_ocpaths_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ocpaths_proto_goTypes = []interface{}{
	(*OCPaths)(nil),          // 0: openconfig.ocpaths.OCPaths
	(*OCPath)(nil),           // 1: openconfig.ocpaths.OCPath
	(*OCPathConstraint)(nil), // 2: openconfig.ocpaths.OCPathConstraint
}
var file_ocpaths_proto_depIdxs = []int32{
	1, // 0: openconfig.ocpaths.OCPaths.ocpaths:type_name -> openconfig.ocpaths.OCPath
	2, // 1: openconfig.ocpaths.OCPath.ocpath_constraint:type_name -> openconfig.ocpaths.OCPathConstraint
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ocpaths_proto_init() }
func file_ocpaths_proto_init() {
	if File_ocpaths_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ocpaths_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCPaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocpaths_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ocpaths_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OCPathConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ocpaths_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*OCPathConstraint_PlatformType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ocpaths_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocpaths_proto_goTypes,
		DependencyIndexes: file_ocpaths_proto_depIdxs,
		MessageInfos:      file_ocpaths_proto_msgTypes,
	}.Build()
	File_ocpaths_proto = out.File
	file_ocpaths_proto_rawDesc = nil
	file_ocpaths_proto_goTypes = nil
	file_ocpaths_proto_depIdxs = nil
}
