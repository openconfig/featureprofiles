// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ocpaths.proto defines a specification of OpenConfig path support or
// requirements of a networking entity.
//
// This specification is distinct from
// github.com/openconfig/featureprofiles/proto/feature.proto, which describes
// the relationship between featureprofiles tests and OC paths and is used to
// report test coverage of those paths.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: ocpaths.proto

package ocpaths

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SubscribeMode, describes how updates are triggered for the request.
type GNMIRpc_SubscribeMode int32

const (
	GNMIRpc_UNSPECIFIED_SUBSCRIBE_MODE GNMIRpc_SubscribeMode = 0
	GNMIRpc_NO_READ_SUPPORT            GNMIRpc_SubscribeMode = 1 // No requirement / support for path.
	GNMIRpc_STREAM                     GNMIRpc_SubscribeMode = 2 // Values streamed by the target (Sec. 3.5.1.5.2).
	GNMIRpc_ONCE                       GNMIRpc_SubscribeMode = 3 // Values sent once-off by the target (Sec. 3.5.1.5.1).
	GNMIRpc_POLL                       GNMIRpc_SubscribeMode = 4 // Values sent in response to a poll request (Sec. 3.5.1.5.3).
)

// Enum value maps for GNMIRpc_SubscribeMode.
var (
	GNMIRpc_SubscribeMode_name = map[int32]string{
		0: "UNSPECIFIED_SUBSCRIBE_MODE",
		1: "NO_READ_SUPPORT",
		2: "STREAM",
		3: "ONCE",
		4: "POLL",
	}
	GNMIRpc_SubscribeMode_value = map[string]int32{
		"UNSPECIFIED_SUBSCRIBE_MODE": 0,
		"NO_READ_SUPPORT":            1,
		"STREAM":                     2,
		"ONCE":                       3,
		"POLL":                       4,
	}
)

func (x GNMIRpc_SubscribeMode) Enum() *GNMIRpc_SubscribeMode {
	p := new(GNMIRpc_SubscribeMode)
	*p = x
	return p
}

func (x GNMIRpc_SubscribeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GNMIRpc_SubscribeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ocpaths_proto_enumTypes[0].Descriptor()
}

func (GNMIRpc_SubscribeMode) Type() protoreflect.EnumType {
	return &file_ocpaths_proto_enumTypes[0]
}

func (x GNMIRpc_SubscribeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GNMIRpc_SubscribeMode.Descriptor instead.
func (GNMIRpc_SubscribeMode) EnumDescriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{3, 0}
}

// StreamMode is the mode of a streamed subscription, specifying how the
// target must return values for that subscription.
// Reference: gNMI Specification Section 3.5.1.3
type GNMIRpc_StreamMode int32

const (
	GNMIRpc_UNSPECIFIED_STREAM_MODE GNMIRpc_StreamMode = 0
	GNMIRpc_NO_STREAMING_SUPPORT    GNMIRpc_StreamMode = 1 // No requirement / support for streaming path.
	GNMIRpc_TARGET_DEFINED          GNMIRpc_StreamMode = 2 // The target selects for each element.
	GNMIRpc_ON_CHANGE               GNMIRpc_StreamMode = 3 // The target sends an update on element value change.
	GNMIRpc_SAMPLE                  GNMIRpc_StreamMode = 4 // The target samples values according to the interval.
)

// Enum value maps for GNMIRpc_StreamMode.
var (
	GNMIRpc_StreamMode_name = map[int32]string{
		0: "UNSPECIFIED_STREAM_MODE",
		1: "NO_STREAMING_SUPPORT",
		2: "TARGET_DEFINED",
		3: "ON_CHANGE",
		4: "SAMPLE",
	}
	GNMIRpc_StreamMode_value = map[string]int32{
		"UNSPECIFIED_STREAM_MODE": 0,
		"NO_STREAMING_SUPPORT":    1,
		"TARGET_DEFINED":          2,
		"ON_CHANGE":               3,
		"SAMPLE":                  4,
	}
)

func (x GNMIRpc_StreamMode) Enum() *GNMIRpc_StreamMode {
	p := new(GNMIRpc_StreamMode)
	*p = x
	return p
}

func (x GNMIRpc_StreamMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GNMIRpc_StreamMode) Descriptor() protoreflect.EnumDescriptor {
	return file_ocpaths_proto_enumTypes[1].Descriptor()
}

func (GNMIRpc_StreamMode) Type() protoreflect.EnumType {
	return &file_ocpaths_proto_enumTypes[1]
}

func (x GNMIRpc_StreamMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GNMIRpc_StreamMode.Descriptor instead.
func (GNMIRpc_StreamMode) EnumDescriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{3, 1}
}

// OCPaths is the complete list of all OpenConfig paths associated with some
// entity (e.g. NOS, or path requirements list for a particular device role).
type OCPaths struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required OpenConfig paths for this entity.
	Ocpaths []*OCPath `protobuf:"bytes,1,rep,name=ocpaths,proto3" json:"ocpaths,omitempty"`
	// The semantic version of the OpenConfig public models release
	// (https://github.com/openconfig/public) associated with the list of
	// OpenConfig paths.
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OCPaths) Reset() {
	*x = OCPaths{}
	mi := &file_ocpaths_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OCPaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCPaths) ProtoMessage() {}

func (x *OCPaths) ProtoReflect() protoreflect.Message {
	mi := &file_ocpaths_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCPaths.ProtoReflect.Descriptor instead.
func (*OCPaths) Descriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{0}
}

func (x *OCPaths) GetOcpaths() []*OCPath {
	if x != nil {
		return x.Ocpaths
	}
	return nil
}

func (x *OCPaths) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// OCPath is an individual OpenConfig path path.
type OCPath struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flattened OC path without prefixes.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies a limited portion of the OC model that a given path is needed to
	// support.
	OcpathConstraint *OCPathConstraint `protobuf:"bytes,2,opt,name=ocpath_constraint,json=ocpathConstraint,proto3" json:"ocpath_constraint,omitempty"`
	// Suffix for featureprofiles/feature/<featureprofileid> to which this OCPath
	// is associated.
	// The string must match openconfig.profiles.FeatureProfileID in
	// https://github.com/openconfig/featureprofiles/blob/main/proto/feature.proto.
	// This destination featureprofiles folder serves as a grouping of the paths
	// related to the tests which appear in this folder and subfolders the folder.
	Featureprofileid string `protobuf:"bytes,3,opt,name=featureprofileid,proto3" json:"featureprofileid,omitempty"`
	// A set of opaque tags that are used for this path. These tags can be used
	// to group paths according to use-case specific criteria.
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// GNMIRpc describes expected (or supported) behavior for a particular
	// Openconfig path.
	GnmiRpc       *GNMIRpc `protobuf:"bytes,5,opt,name=gnmi_rpc,json=gnmiRpc,proto3" json:"gnmi_rpc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OCPath) Reset() {
	*x = OCPath{}
	mi := &file_ocpaths_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OCPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCPath) ProtoMessage() {}

func (x *OCPath) ProtoReflect() protoreflect.Message {
	mi := &file_ocpaths_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCPath.ProtoReflect.Descriptor instead.
func (*OCPath) Descriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{1}
}

func (x *OCPath) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OCPath) GetOcpathConstraint() *OCPathConstraint {
	if x != nil {
		return x.OcpathConstraint
	}
	return nil
}

func (x *OCPath) GetFeatureprofileid() string {
	if x != nil {
		return x.Featureprofileid
	}
	return ""
}

func (x *OCPath) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OCPath) GetGnmiRpc() *GNMIRpc {
	if x != nil {
		return x.GnmiRpc
	}
	return nil
}

// OCPathConstraint enumerates platform_types that are required to be supported
// for all /components/component paths. All OCPath.name which contain a
// /components/component path, must also set the oc-platform-type the path
// applies to. OCPathConstraint may be used for any other oc paths when a subset
// of types, enums or identities are required.
//
// For example, the path /components/component/state/software-version could have
// platform_type constraints of BIOS, BOOT_LOADER and OPERATING_SYSTEM
//
// In the future, additional types of constraints can be defined by adding more
// fields for each type of constraint
type OCPathConstraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Constraint:
	//
	//	*OCPathConstraint_PlatformType
	Constraint    isOCPathConstraint_Constraint `protobuf_oneof:"constraint"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OCPathConstraint) Reset() {
	*x = OCPathConstraint{}
	mi := &file_ocpaths_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OCPathConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OCPathConstraint) ProtoMessage() {}

func (x *OCPathConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_ocpaths_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OCPathConstraint.ProtoReflect.Descriptor instead.
func (*OCPathConstraint) Descriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{2}
}

func (x *OCPathConstraint) GetConstraint() isOCPathConstraint_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *OCPathConstraint) GetPlatformType() string {
	if x != nil {
		if x, ok := x.Constraint.(*OCPathConstraint_PlatformType); ok {
			return x.PlatformType
		}
	}
	return ""
}

type isOCPathConstraint_Constraint interface {
	isOCPathConstraint_Constraint()
}

type OCPathConstraint_PlatformType struct {
	PlatformType string `protobuf:"bytes,1,opt,name=platform_type,json=platformType,proto3,oneof"`
}

func (*OCPathConstraint_PlatformType) isOCPathConstraint_Constraint() {}

// GNMIRpc describes expected (or supported) behavior for a particular
// Openconfig path.
type GNMIRpc struct {
	state      protoimpl.MessageState  `protogen:"open.v1"`
	Get        bool                    `protobuf:"varint,1,opt,name=get,proto3" json:"get,omitempty"`
	Set        bool                    `protobuf:"varint,2,opt,name=set,proto3" json:"set,omitempty"`
	Subscribe  bool                    `protobuf:"varint,3,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	SubMode    []GNMIRpc_SubscribeMode `protobuf:"varint,4,rep,packed,name=sub_mode,json=subMode,proto3,enum=openconfig.ocpaths.GNMIRpc_SubscribeMode" json:"sub_mode,omitempty"`
	StreamMode []GNMIRpc_StreamMode    `protobuf:"varint,5,rep,packed,name=stream_mode,json=streamMode,proto3,enum=openconfig.ocpaths.GNMIRpc_StreamMode" json:"stream_mode,omitempty"`
	// If listed as part of a requirement, sample_interval_nanoseconds is the
	// maximum allowable interval between updates.
	// If listed as part of the description of level of support, it should be the
	// smallest, recommended value.
	SampleIntervalNanoseconds uint64 `protobuf:"varint,6,opt,name=sample_interval_nanoseconds,json=sampleIntervalNanoseconds,proto3" json:"sample_interval_nanoseconds,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GNMIRpc) Reset() {
	*x = GNMIRpc{}
	mi := &file_ocpaths_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GNMIRpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNMIRpc) ProtoMessage() {}

func (x *GNMIRpc) ProtoReflect() protoreflect.Message {
	mi := &file_ocpaths_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNMIRpc.ProtoReflect.Descriptor instead.
func (*GNMIRpc) Descriptor() ([]byte, []int) {
	return file_ocpaths_proto_rawDescGZIP(), []int{3}
}

func (x *GNMIRpc) GetGet() bool {
	if x != nil {
		return x.Get
	}
	return false
}

func (x *GNMIRpc) GetSet() bool {
	if x != nil {
		return x.Set
	}
	return false
}

func (x *GNMIRpc) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

func (x *GNMIRpc) GetSubMode() []GNMIRpc_SubscribeMode {
	if x != nil {
		return x.SubMode
	}
	return nil
}

func (x *GNMIRpc) GetStreamMode() []GNMIRpc_StreamMode {
	if x != nil {
		return x.StreamMode
	}
	return nil
}

func (x *GNMIRpc) GetSampleIntervalNanoseconds() uint64 {
	if x != nil {
		return x.SampleIntervalNanoseconds
	}
	return 0
}

var File_ocpaths_proto protoreflect.FileDescriptor

var file_ocpaths_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x63, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x22, 0x59, 0x0a, 0x07, 0x4f, 0x43, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x34,
	0x0a, 0x07, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x63, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x2e, 0x4f, 0x43, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x6f, 0x63, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe7,
	0x01, 0x0a, 0x06, 0x4f, 0x43, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a,
	0x11, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x4f, 0x43,
	0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x10,
	0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x10, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x72, 0x70, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x47, 0x4e, 0x4d, 0x49, 0x52, 0x70, 0x63, 0x52,
	0x07, 0x67, 0x6e, 0x6d, 0x69, 0x52, 0x70, 0x63, 0x22, 0x47, 0x0a, 0x10, 0x4f, 0x43, 0x50, 0x61,
	0x74, 0x68, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x22, 0xf4, 0x03, 0x0a, 0x07, 0x47, 0x4e, 0x4d, 0x49, 0x52, 0x70, 0x63, 0x12, 0x10, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x65, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x44, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f,
	0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e, 0x47, 0x4e, 0x4d, 0x49, 0x52, 0x70, 0x63, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x2e,
	0x47, 0x4e, 0x4d, 0x49, 0x52, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e,
	0x0a, 0x1b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x19, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x64,
	0x0a, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f,
	0x4c, 0x4c, 0x10, 0x04, 0x22, 0x72, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x6f, 0x63, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ocpaths_proto_rawDescOnce sync.Once
	file_ocpaths_proto_rawDescData []byte
)

func file_ocpaths_proto_rawDescGZIP() []byte {
	file_ocpaths_proto_rawDescOnce.Do(func() {
		file_ocpaths_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ocpaths_proto_rawDesc), len(file_ocpaths_proto_rawDesc)))
	})
	return file_ocpaths_proto_rawDescData
}

var file_ocpaths_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ocpaths_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ocpaths_proto_goTypes = []any{
	(GNMIRpc_SubscribeMode)(0), // 0: openconfig.ocpaths.GNMIRpc.SubscribeMode
	(GNMIRpc_StreamMode)(0),    // 1: openconfig.ocpaths.GNMIRpc.StreamMode
	(*OCPaths)(nil),            // 2: openconfig.ocpaths.OCPaths
	(*OCPath)(nil),             // 3: openconfig.ocpaths.OCPath
	(*OCPathConstraint)(nil),   // 4: openconfig.ocpaths.OCPathConstraint
	(*GNMIRpc)(nil),            // 5: openconfig.ocpaths.GNMIRpc
}
var file_ocpaths_proto_depIdxs = []int32{
	3, // 0: openconfig.ocpaths.OCPaths.ocpaths:type_name -> openconfig.ocpaths.OCPath
	4, // 1: openconfig.ocpaths.OCPath.ocpath_constraint:type_name -> openconfig.ocpaths.OCPathConstraint
	5, // 2: openconfig.ocpaths.OCPath.gnmi_rpc:type_name -> openconfig.ocpaths.GNMIRpc
	0, // 3: openconfig.ocpaths.GNMIRpc.sub_mode:type_name -> openconfig.ocpaths.GNMIRpc.SubscribeMode
	1, // 4: openconfig.ocpaths.GNMIRpc.stream_mode:type_name -> openconfig.ocpaths.GNMIRpc.StreamMode
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ocpaths_proto_init() }
func file_ocpaths_proto_init() {
	if File_ocpaths_proto != nil {
		return
	}
	file_ocpaths_proto_msgTypes[2].OneofWrappers = []any{
		(*OCPathConstraint_PlatformType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ocpaths_proto_rawDesc), len(file_ocpaths_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ocpaths_proto_goTypes,
		DependencyIndexes: file_ocpaths_proto_depIdxs,
		EnumInfos:         file_ocpaths_proto_enumTypes,
		MessageInfos:      file_ocpaths_proto_msgTypes,
	}.Build()
	File_ocpaths_proto = out.File
	file_ocpaths_proto_goTypes = nil
	file_ocpaths_proto_depIdxs = nil
}
