// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Feature Profile - A low level feature, typically a networking protocol,
// supported by a vendor platform.
//
// Generally feature profiles are either baseline protocols (BGP base),
// additional optional features supported with the protocol (BGP Add path), or
// specific scale requirements (Full FIB support with BGP). A feature profile
// can be dependent on one or more other feature profiles.
//
// Example feature profile:
//
// feature_profile {
//   id {
//     name: 'bgp_base'
//     version: 1
//   }
//   openconfig_path:
//   '/network-instance/<name>/protocols/INSTALL_PROTOCOL_TYPE_BGP/...'
// }

//Comment for Staticcheck linter:
//lint:file-ignore U1000 Ignore all unused code, it's generated

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: feature.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// method_name specifies the name of the method that is
// being tested. The methods are from the gnmi service (e.g., Get).
type GNMIService_Method int32

const (
	GNMIService_MD_INVALID      GNMIService_Method = 0
	GNMIService_MD_GET          GNMIService_Method = 1 // gNMI.Get
	GNMIService_MD_CAPABILITIES GNMIService_Method = 2 // gNMI.Capabilities
	GNMIService_MD_SUBSCRIBE    GNMIService_Method = 3 // gNMI.Subscribe
	GNMIService_MD_SET          GNMIService_Method = 4 // gNMI.Set
)

// Enum value maps for GNMIService_Method.
var (
	GNMIService_Method_name = map[int32]string{
		0: "MD_INVALID",
		1: "MD_GET",
		2: "MD_CAPABILITIES",
		3: "MD_SUBSCRIBE",
		4: "MD_SET",
	}
	GNMIService_Method_value = map[string]int32{
		"MD_INVALID":      0,
		"MD_GET":          1,
		"MD_CAPABILITIES": 2,
		"MD_SUBSCRIBE":    3,
		"MD_SET":          4,
	}
)

func (x GNMIService_Method) Enum() *GNMIService_Method {
	p := new(GNMIService_Method)
	*p = x
	return p
}

func (x GNMIService_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GNMIService_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_proto_enumTypes[0].Descriptor()
}

func (GNMIService_Method) Type() protoreflect.EnumType {
	return &file_feature_proto_enumTypes[0]
}

func (x GNMIService_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GNMIService_Method) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GNMIService_Method(num)
	return nil
}

// Deprecated: Use GNMIService_Method.Descriptor instead.
func (GNMIService_Method) EnumDescriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{4, 0}
}

// method_name specifies the name of the gRIBI method that is
// being tested. The methods are the RPCs that are defined
// within gRIBI.
type GRIBIService_Method int32

const (
	GRIBIService_GR_INVALID GRIBIService_Method = 0
	GRIBIService_GR_MODIFY  GRIBIService_Method = 1 // gRIBI.Modify
	GRIBIService_GR_GET     GRIBIService_Method = 2 // gRIBI.Get
	GRIBIService_GR_FLUSH   GRIBIService_Method = 3 // gRIBI.Flush
)

// Enum value maps for GRIBIService_Method.
var (
	GRIBIService_Method_name = map[int32]string{
		0: "GR_INVALID",
		1: "GR_MODIFY",
		2: "GR_GET",
		3: "GR_FLUSH",
	}
	GRIBIService_Method_value = map[string]int32{
		"GR_INVALID": 0,
		"GR_MODIFY":  1,
		"GR_GET":     2,
		"GR_FLUSH":   3,
	}
)

func (x GRIBIService_Method) Enum() *GRIBIService_Method {
	p := new(GRIBIService_Method)
	*p = x
	return p
}

func (x GRIBIService_Method) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GRIBIService_Method) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_proto_enumTypes[1].Descriptor()
}

func (GRIBIService_Method) Type() protoreflect.EnumType {
	return &file_feature_proto_enumTypes[1]
}

func (x GRIBIService_Method) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GRIBIService_Method) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GRIBIService_Method(num)
	return nil
}

// Deprecated: Use GRIBIService_Method.Descriptor instead.
func (GRIBIService_Method) EnumDescriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{5, 0}
}

// The AFTs that are supported by gRIBI. A feature profile may
// cover a subset of AFTs within an RPC.
type GRIBIService_AFT int32

const (
	GRIBIService_GA_INVALID          GRIBIService_AFT = 0
	GRIBIService_GA_IPV4             GRIBIService_AFT = 1 // IPv4Entry
	GRIBIService_GA_IPV6             GRIBIService_AFT = 2 // IPv6Entry
	GRIBIService_GA_MPLS             GRIBIService_AFT = 3 // MPLSEntry
	GRIBIService_GA_POLICYFORWARDING GRIBIService_AFT = 4 // PolicyForwardingEntry
	GRIBIService_GA_NEXTHOP          GRIBIService_AFT = 5 // NextHop
	GRIBIService_GA_NEXTHOPGROUP     GRIBIService_AFT = 6 // NextHopGroup
)

// Enum value maps for GRIBIService_AFT.
var (
	GRIBIService_AFT_name = map[int32]string{
		0: "GA_INVALID",
		1: "GA_IPV4",
		2: "GA_IPV6",
		3: "GA_MPLS",
		4: "GA_POLICYFORWARDING",
		5: "GA_NEXTHOP",
		6: "GA_NEXTHOPGROUP",
	}
	GRIBIService_AFT_value = map[string]int32{
		"GA_INVALID":          0,
		"GA_IPV4":             1,
		"GA_IPV6":             2,
		"GA_MPLS":             3,
		"GA_POLICYFORWARDING": 4,
		"GA_NEXTHOP":          5,
		"GA_NEXTHOPGROUP":     6,
	}
)

func (x GRIBIService_AFT) Enum() *GRIBIService_AFT {
	p := new(GRIBIService_AFT)
	*p = x
	return p
}

func (x GRIBIService_AFT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GRIBIService_AFT) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_proto_enumTypes[2].Descriptor()
}

func (GRIBIService_AFT) Type() protoreflect.EnumType {
	return &file_feature_proto_enumTypes[2]
}

func (x GRIBIService_AFT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GRIBIService_AFT) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GRIBIService_AFT(num)
	return nil
}

// Deprecated: Use GRIBIService_AFT.Descriptor instead.
func (GRIBIService_AFT) EnumDescriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{5, 1}
}

type FeatureProfileID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name for the feature profile.
	//
	// Example: bgp_base
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Version number for this instantiation of the profile.
	Version *int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (x *FeatureProfileID) Reset() {
	*x = FeatureProfileID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureProfileID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureProfileID) ProtoMessage() {}

func (x *FeatureProfileID) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureProfileID.ProtoReflect.Descriptor instead.
func (*FeatureProfileID) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureProfileID) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FeatureProfileID) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

type TelemetryPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (x *TelemetryPath) Reset() {
	*x = TelemetryPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryPath) ProtoMessage() {}

func (x *TelemetryPath) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryPath.ProtoReflect.Descriptor instead.
func (*TelemetryPath) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryPath) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type ConfigPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (x *ConfigPath) Reset() {
	*x = ConfigPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigPath) ProtoMessage() {}

func (x *ConfigPath) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigPath.ProtoReflect.Descriptor instead.
func (*ConfigPath) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigPath) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

type GNOIService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service name for the GNOI endpoint
	//
	// Example: gnoi.bgp.BGP
	ServiceName *string `protobuf:"bytes,1,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
	// Method name for GNOI endpoint
	//
	// Example: ClearBGPNeighbor
	MethodName *string `protobuf:"bytes,2,opt,name=method_name,json=methodName" json:"method_name,omitempty"`
}

func (x *GNOIService) Reset() {
	*x = GNOIService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNOIService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNOIService) ProtoMessage() {}

func (x *GNOIService) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNOIService.ProtoReflect.Descriptor instead.
func (*GNOIService) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{3}
}

func (x *GNOIService) GetServiceName() string {
	if x != nil && x.ServiceName != nil {
		return *x.ServiceName
	}
	return ""
}

func (x *GNOIService) GetMethodName() string {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return ""
}

// GNMIService describes compliance with the gNMI service.
type GNMIService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The method that is covered within the gNMI protocol.
	MethodName *GNMIService_Method `protobuf:"varint,2,opt,name=method_name,json=methodName,enum=openconfig.profiles.GNMIService_Method" json:"method_name,omitempty"`
}

func (x *GNMIService) Reset() {
	*x = GNMIService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GNMIService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNMIService) ProtoMessage() {}

func (x *GNMIService) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNMIService.ProtoReflect.Descriptor instead.
func (*GNMIService) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{4}
}

func (x *GNMIService) GetMethodName() GNMIService_Method {
	if x != nil && x.MethodName != nil {
		return *x.MethodName
	}
	return GNMIService_MD_INVALID
}

// GRIBIService describes compliance with the gRIBI service.
type GRIBIService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The methods that are covered by the feature profile.
	Methods []GRIBIService_Method `protobuf:"varint,1,rep,name=methods,enum=openconfig.profiles.GRIBIService_Method" json:"methods,omitempty"`
	// The set of AFTs that are covered by the feature profile.
	Afts []GRIBIService_AFT `protobuf:"varint,2,rep,name=afts,enum=openconfig.profiles.GRIBIService_AFT" json:"afts,omitempty"`
}

func (x *GRIBIService) Reset() {
	*x = GRIBIService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRIBIService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRIBIService) ProtoMessage() {}

func (x *GRIBIService) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRIBIService.ProtoReflect.Descriptor instead.
func (*GRIBIService) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{5}
}

func (x *GRIBIService) GetMethods() []GRIBIService_Method {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *GRIBIService) GetAfts() []GRIBIService_AFT {
	if x != nil {
		return x.Afts
	}
	return nil
}

type FeatureProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the service profile.
	Id *FeatureProfileID `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// A list of configuration and state paths that compose the feature profile.
	ConfigPath []*ConfigPath `protobuf:"bytes,2,rep,name=config_path,json=configPath" json:"config_path,omitempty"`
	// A list of configuration and state paths that compose the feature profile.
	TelemetryPath []*TelemetryPath `protobuf:"bytes,3,rep,name=telemetry_path,json=telemetryPath" json:"telemetry_path,omitempty"`
	// A list of feature profiles this feature profile depends on.  For example,
	// A iBGP feature profile might depend on the BGP base feature profile.
	FeatureProfileDependency []*FeatureProfileID `protobuf:"bytes,4,rep,name=feature_profile_dependency,json=featureProfileDependency" json:"feature_profile_dependency,omitempty"`
	// A list of gNOI operational commands that compose the feature profile.
	GnoiService []*GNOIService `protobuf:"bytes,5,rep,name=gnoi_service,json=gnoiService" json:"gnoi_service,omitempty"`
	// A list of gNMI methods that compose the feature profile.
	GnmiService []*GNMIService `protobuf:"bytes,6,rep,name=gnmi_service,json=gnmiService" json:"gnmi_service,omitempty"`
	// A list of gRIBI Method + AFT combinations that compose the feature profile.
	GribiService []*GRIBIService `protobuf:"bytes,7,rep,name=gribi_service,json=gribiService" json:"gribi_service,omitempty"`
}

func (x *FeatureProfile) Reset() {
	*x = FeatureProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureProfile) ProtoMessage() {}

func (x *FeatureProfile) ProtoReflect() protoreflect.Message {
	mi := &file_feature_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureProfile.ProtoReflect.Descriptor instead.
func (*FeatureProfile) Descriptor() ([]byte, []int) {
	return file_feature_proto_rawDescGZIP(), []int{6}
}

func (x *FeatureProfile) GetId() *FeatureProfileID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *FeatureProfile) GetConfigPath() []*ConfigPath {
	if x != nil {
		return x.ConfigPath
	}
	return nil
}

func (x *FeatureProfile) GetTelemetryPath() []*TelemetryPath {
	if x != nil {
		return x.TelemetryPath
	}
	return nil
}

func (x *FeatureProfile) GetFeatureProfileDependency() []*FeatureProfileID {
	if x != nil {
		return x.FeatureProfileDependency
	}
	return nil
}

func (x *FeatureProfile) GetGnoiService() []*GNOIService {
	if x != nil {
		return x.GnoiService
	}
	return nil
}

func (x *FeatureProfile) GetGnmiService() []*GNMIService {
	if x != nil {
		return x.GnmiService
	}
	return nil
}

func (x *FeatureProfile) GetGribiService() []*GRIBIService {
	if x != nil {
		return x.GribiService
	}
	return nil
}

var File_feature_proto protoreflect.FileDescriptor

var file_feature_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x23, 0x0a, 0x0d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x20, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x51, 0x0a,
	0x0b, 0x47, 0x4e, 0x4f, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xb0, 0x01, 0x0a, 0x0b, 0x47, 0x4e, 0x4d, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x48, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x4e, 0x4d, 0x49,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x49, 0x45, 0x53, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x44, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x44, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x04, 0x22, 0xcc, 0x02, 0x0a, 0x0c, 0x47, 0x52, 0x49, 0x42, 0x49, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x52, 0x49, 0x42,
	0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x66, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x52, 0x49,
	0x42, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x46, 0x54, 0x52, 0x04, 0x61,
	0x66, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a,
	0x0a, 0x47, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x47, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x47, 0x52, 0x5f, 0x47, 0x45, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x5f, 0x46,
	0x4c, 0x55, 0x53, 0x48, 0x10, 0x03, 0x22, 0x7a, 0x0a, 0x03, 0x41, 0x46, 0x54, 0x12, 0x0e, 0x0a,
	0x0a, 0x47, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x41, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x41,
	0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x41, 0x5f, 0x4d, 0x50,
	0x4c, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x41, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x47, 0x41, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x41, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x06, 0x22, 0x8b, 0x04, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x49,
	0x0a, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x1a, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x52, 0x18, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x43,
	0x0a, 0x0c, 0x67, 0x6e, 0x6f, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x4e, 0x4f, 0x49, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x67, 0x6e, 0x6f, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x67, 0x6e, 0x6d, 0x69, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e,
	0x47, 0x4e, 0x4d, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0b, 0x67, 0x6e, 0x6d,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x67, 0x72, 0x69, 0x62,
	0x69, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x52, 0x49, 0x42, 0x49, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x69, 0x62, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_feature_proto_rawDescOnce sync.Once
	file_feature_proto_rawDescData = file_feature_proto_rawDesc
)

func file_feature_proto_rawDescGZIP() []byte {
	file_feature_proto_rawDescOnce.Do(func() {
		file_feature_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_proto_rawDescData)
	})
	return file_feature_proto_rawDescData
}

var file_feature_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_feature_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_feature_proto_goTypes = []interface{}{
	(GNMIService_Method)(0),  // 0: openconfig.profiles.GNMIService.Method
	(GRIBIService_Method)(0), // 1: openconfig.profiles.GRIBIService.Method
	(GRIBIService_AFT)(0),    // 2: openconfig.profiles.GRIBIService.AFT
	(*FeatureProfileID)(nil), // 3: openconfig.profiles.FeatureProfileID
	(*TelemetryPath)(nil),    // 4: openconfig.profiles.TelemetryPath
	(*ConfigPath)(nil),       // 5: openconfig.profiles.ConfigPath
	(*GNOIService)(nil),      // 6: openconfig.profiles.GNOIService
	(*GNMIService)(nil),      // 7: openconfig.profiles.GNMIService
	(*GRIBIService)(nil),     // 8: openconfig.profiles.GRIBIService
	(*FeatureProfile)(nil),   // 9: openconfig.profiles.FeatureProfile
}
var file_feature_proto_depIdxs = []int32{
	0,  // 0: openconfig.profiles.GNMIService.method_name:type_name -> openconfig.profiles.GNMIService.Method
	1,  // 1: openconfig.profiles.GRIBIService.methods:type_name -> openconfig.profiles.GRIBIService.Method
	2,  // 2: openconfig.profiles.GRIBIService.afts:type_name -> openconfig.profiles.GRIBIService.AFT
	3,  // 3: openconfig.profiles.FeatureProfile.id:type_name -> openconfig.profiles.FeatureProfileID
	5,  // 4: openconfig.profiles.FeatureProfile.config_path:type_name -> openconfig.profiles.ConfigPath
	4,  // 5: openconfig.profiles.FeatureProfile.telemetry_path:type_name -> openconfig.profiles.TelemetryPath
	3,  // 6: openconfig.profiles.FeatureProfile.feature_profile_dependency:type_name -> openconfig.profiles.FeatureProfileID
	6,  // 7: openconfig.profiles.FeatureProfile.gnoi_service:type_name -> openconfig.profiles.GNOIService
	7,  // 8: openconfig.profiles.FeatureProfile.gnmi_service:type_name -> openconfig.profiles.GNMIService
	8,  // 9: openconfig.profiles.FeatureProfile.gribi_service:type_name -> openconfig.profiles.GRIBIService
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_feature_proto_init() }
func file_feature_proto_init() {
	if File_feature_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feature_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureProfileID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNOIService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GNMIService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRIBIService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feature_proto_goTypes,
		DependencyIndexes: file_feature_proto_depIdxs,
		EnumInfos:         file_feature_proto_enumTypes,
		MessageInfos:      file_feature_proto_msgTypes,
	}.Build()
	File_feature_proto = out.File
	file_feature_proto_rawDesc = nil
	file_feature_proto_goTypes = nil
	file_feature_proto_depIdxs = nil
}
