// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// ocrps.proto defines a specification of OpenConfig RPC support or requirements
// of a networking entity.

syntax = "proto3";

package openconfig.ocrpcs;

// OCRPCs is the complete list of all OpenConfig RPCs associated with some
// entity (e.g. NOS, or RPC requirements list for a particular device role).
message OCRPCs {
  // Required OpenConfig RPC service support for this entity.
  //
  // The key of this map is the full name of the gRPC service.
  // Format: <package>.<service>
  // Example: gnoi.healthz.Healthz
  // Example: gnmi.gNMI
  map<string, OCRPCService> ocservices = 1;
}

// OCRPCService is the list of OpenConfig RPC methods supported or required that
// belong to the same OpenConfig RPC service (e.g. gnoi.healthz.Healthz,
// gnmi.gNMI).
message OCRPCService {
  // Full name of the gRPC method specification.
  // Format: <package>.<service>.<rpc>
  // Example: gnoi.healthz.Healthz.Get
  // Example: gnmi.gNMI.Subscribe
  repeated string method_name = 1;

  // The semantic version of the gRPC service.
  string version = 2;
}
