package main

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"regexp"
	"strconv"
	"strings"
	"text/template"

	mpb "github.com/openconfig/featureprofiles/proto/metadata_go_proto"
)

// markdownRE matches the heading line: `# XX-1.1: Foo Functional Test`
var markdownRE = regexp.MustCompile(`#(.*?):(.*)`)

// parseMarkdown reads metadata from README.md.
func parseMarkdown(r io.Reader) (*mpb.Metadata, error) {
	sc := bufio.NewScanner(r)
	if !sc.Scan() {
		if err := sc.Err(); err != nil {
			return nil, err
		}
		return nil, errors.New("missing markdown heading")
	}
	line := sc.Text()
	m := markdownRE.FindStringSubmatch(line)
	if len(m) < 3 {
		return nil, fmt.Errorf("cannot parse markdown: %s", line)
	}
	return &mpb.Metadata{
		PlanId:      strings.TrimSpace(m[1]),
		Description: strings.TrimSpace(m[2]),
	}, nil
}

// parseCode reads metadata from a source code.
func parseCode(r io.Reader) (*mpb.Metadata, error) {
	var md *mpb.Metadata
	sc := bufio.NewScanner(r)
	for sc.Scan() {
		if line := sc.Text(); line != "func init() {" {
			continue
		}
		var err error
		md, err = parseInit(sc)
		if err != nil {
			return nil, err
		}
		break
	}
	if err := sc.Err(); err != nil {
		return nil, err
	}
	if md == nil {
		return nil, errors.New("missing func init()")
	}
	return md, nil
}

// rundataRE matches a line like this: `  rundata.TestUUID = "..."`
var rundataRE = regexp.MustCompile(`\s+rundata\.(\w+) = (".*")`)

// parseInit parses the rundata from the body of func init().
func parseInit(sc *bufio.Scanner) (*mpb.Metadata, error) {
	md := new(mpb.Metadata)
	for sc.Scan() {
		line := sc.Text()
		if line == "}" {
			return md, nil
		}
		m := rundataRE.FindStringSubmatch(line)
		if len(m) < 3 {
			continue
		}
		k := m[1]
		v, err := strconv.Unquote(m[2])
		if err != nil {
			return nil, fmt.Errorf("cannot parse rundata line: %s: %w", line, err)
		}
		switch k {
		case "TestPlanID":
			md.PlanId = v
		case "TestDescription":
			md.Description = v
		case "TestUUID":
			md.Uuid = v
		}
	}
	return nil, errors.New("func init() was not terminated")
}

var tmpl = template.Must(template.New("rundata_test.go").Parse(
	`// Code generated by go run tools/addrundata; DO NOT EDIT.
package {{.Package}}

import "github.com/openconfig/featureprofiles/internal/rundata"

func init() {
{{range .Data}}	rundata.{{.Key}} = {{printf "%q\n" .Value}}{{end -}}
}
`))

// write generates a complete rundata_test.go to the writer.
func writeCode(w io.Writer, md *mpb.Metadata, pkg string) error {
	tmpl.Execute(w, &struct {
		Package string
		Data    []struct{ Key, Value string }
	}{
		Package: pkg,
		Data: []struct{ Key, Value string }{
			{"TestPlanID", md.PlanId},
			{"TestDescription", md.Description},
			{"TestUUID", md.Uuid},
		},
	})
	return nil
}
