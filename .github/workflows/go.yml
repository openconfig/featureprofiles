name: Go CI

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: "0 0 * * *"

jobs:
  test-and-build:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false  # We'll handle caching ourselves for more control

      - name: Cache Go modules and build
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('go.mod') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ hashFiles('go.mod') }}-

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get -y install libpcap-dev

      - name: Check go.mod and go.sum are tidy
        run: |
          go mod tidy
          if ! git diff --exit-code go.mod go.sum; then
            echo "go.mod or go.sum is not tidy. Run 'go mod tidy' locally."
            exit 1
          fi

      - name: Build
        run: go build -v ./...

      - name: Run tests with coverage
        run: go test -race -coverprofile=coverage.out -covermode=atomic $(go list ./... | grep -v /.*test.*)

      - name: Upload coverage to Coveralls
        uses: shogo82148/actions-goveralls@v1
        with:
          path-to-profile: coverage.out
        continue-on-error: true  # Don't fail the build if coverage upload fails

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: false

      - name: Cache Go modules and analysis tools
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/.cache/staticcheck
          key: ${{ runner.os }}-go-static-${{ hashFiles('go.mod') }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-static-${{ hashFiles('go.mod') }}-

      - name: Free additional disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache/CodeQL

      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get -y install libpcap-dev

      - name: Install analysis tools
        run: |
          go install golang.org/x/tools/cmd/goimports@v0.28.0
          go install github.com/mgechev/revive@v1.3.7
          go install honnef.co/go/tools/cmd/staticcheck@2024.1.1

      - name: Run go vet
        run: go vet ./...

      - name: Check gofmt
        run: |
          unformatted=$(gofmt -d -s .)
          if [ -n "$unformatted" ]; then
            echo "Code is not formatted with gofmt:"
            echo "$unformatted"
            exit 1
          fi

      - name: Check goimports
        run: |
          unimported=$(find . -name "*.go" -not -path "./vendor/*" -not -name "*.pb.go" -exec goimports -d {} \;)
          if [ -n "$unimported" ]; then
            echo "Code is not formatted with goimports:"
            echo "$unimported"
            exit 1
          fi

      - name: Run revive
        run: revive -config revive.toml ./...
        continue-on-error: true  # Make this non-blocking if you don't have revive.toml

      - name: Run staticcheck
        run: staticcheck ./...

  success:
    name: All checks passed
    runs-on: ubuntu-latest
    needs: [test-and-build, static-analysis]
    if: success()
    steps:
      - name: Success
        run: echo "All CI checks passed successfully!"
