// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v6.32.1
// source: binding.proto

package binding

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	proto "github.com/openconfig/ondatra/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A binding configuration.
type Binding struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Duts  []*Device              `protobuf:"bytes,1,rep,name=duts,proto3" json:"duts,omitempty"`
	Ates  []*Device              `protobuf:"bytes,2,rep,name=ates,proto3" json:"ates,omitempty"`
	// Dial options across all devices, unless overridden by the device.
	Options *Options `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// Enable dynamic solving of this binding.
	Dynamic bool `protobuf:"varint,4,opt,name=dynamic,proto3" json:"dynamic,omitempty"`
	// Links only need if dynamic solving is enabled.
	Links         []*Link `protobuf:"bytes,5,rep,name=links,proto3" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Binding) Reset() {
	*x = Binding{}
	mi := &file_binding_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binding) ProtoMessage() {}

func (x *Binding) ProtoReflect() protoreflect.Message {
	mi := &file_binding_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binding.ProtoReflect.Descriptor instead.
func (*Binding) Descriptor() ([]byte, []int) {
	return file_binding_proto_rawDescGZIP(), []int{0}
}

func (x *Binding) GetDuts() []*Device {
	if x != nil {
		return x.Duts
	}
	return nil
}

func (x *Binding) GetAtes() []*Device {
	if x != nil {
		return x.Ates
	}
	return nil
}

func (x *Binding) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Binding) GetDynamic() bool {
	if x != nil {
		return x.Dynamic
	}
	return false
}

func (x *Binding) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

// Config for resetting the device before the test run.
type Configs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Raw device config
	Cli [][]byte `protobuf:"bytes,1,rep,name=cli,proto3" json:"cli,omitempty"`
	// Path to file containing raw device config
	CliFile []string `protobuf:"bytes,2,rep,name=cli_file,json=cliFile,proto3" json:"cli_file,omitempty"`
	// Path to a file containing gNMI SetRequest as text-formatted proto.
	GnmiSetFile []string `protobuf:"bytes,3,rep,name=gnmi_set_file,json=gnmiSetFile,proto3" json:"gnmi_set_file,omitempty"`
	// Whether to flush gRIBI.  If true, this will send a FlushRequest for all
	// network instances and overriding the election ID.
	GribiFlush    bool `protobuf:"varint,4,opt,name=gribi_flush,json=gribiFlush,proto3" json:"gribi_flush,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Configs) Reset() {
	*x = Configs{}
	mi := &file_binding_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configs) ProtoMessage() {}

func (x *Configs) ProtoReflect() protoreflect.Message {
	mi := &file_binding_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configs.ProtoReflect.Descriptor instead.
func (*Configs) Descriptor() ([]byte, []int) {
	return file_binding_proto_rawDescGZIP(), []int{1}
}

func (x *Configs) GetCli() [][]byte {
	if x != nil {
		return x.Cli
	}
	return nil
}

func (x *Configs) GetCliFile() []string {
	if x != nil {
		return x.CliFile
	}
	return nil
}

func (x *Configs) GetGnmiSetFile() []string {
	if x != nil {
		return x.GnmiSetFile
	}
	return nil
}

func (x *Configs) GetGribiFlush() bool {
	if x != nil {
		return x.GribiFlush
	}
	return false
}

// A device binding.
type Device struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Device ID as it appears in the testbed.
	// Set this value if and only dynamic solving is disabled.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The actual device hostname to be used for the binding.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Dial options across all protocols of this device, unless
	// overrideen by individual protocols.
	Options *Options `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
	// Port bindings for this device.
	Ports []*Port `protobuf:"bytes,4,rep,name=ports,proto3" json:"ports,omitempty"`
	// Configs to apply to device after binding
	Config *Configs `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Dial options for SSH (DUT only).
	Ssh *Options `protobuf:"bytes,11,opt,name=ssh,proto3" json:"ssh,omitempty"`
	// Dial options for gNMI (DUT only).
	Gnmi *Options `protobuf:"bytes,12,opt,name=gnmi,proto3" json:"gnmi,omitempty"`
	// Dial options for gNOI (DUT only).
	Gnoi *Options `protobuf:"bytes,13,opt,name=gnoi,proto3" json:"gnoi,omitempty"`
	// Dial options for gNSI (DUT only).
	Gnsi *Options `protobuf:"bytes,14,opt,name=gnsi,proto3" json:"gnsi,omitempty"`
	// Dial options for gRIBI (DUT only).
	Gribi *Options `protobuf:"bytes,15,opt,name=gribi,proto3" json:"gribi,omitempty"`
	// Dial options for P4RT (DUT only).
	P4Rt *Options `protobuf:"bytes,16,opt,name=p4rt,proto3" json:"p4rt,omitempty"`
	// Dial options for IxNetwork (ATE only).
	Ixnetwork *Options `protobuf:"bytes,17,opt,name=ixnetwork,proto3" json:"ixnetwork,omitempty"`
	// Dial options for OTG Ixia-C (HW Only).
	Otg *Options `protobuf:"bytes,18,opt,name=otg,proto3" json:"otg,omitempty"`
	// Vendor of the device.
	Vendor proto.Device_Vendor `protobuf:"varint,19,opt,name=vendor,proto3,enum=ondatra.Device_Vendor" json:"vendor,omitempty"`
	// Hardware models of the device.
	HardwareModel string `protobuf:"bytes,20,opt,name=hardware_model,json=hardwareModel,proto3" json:"hardware_model,omitempty"`
	// Software version of the device.
	SoftwareVersion string `protobuf:"bytes,21,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_binding_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_binding_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_binding_proto_rawDescGZIP(), []int{2}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetOptions() *Options {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Device) GetPorts() []*Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *Device) GetConfig() *Configs {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Device) GetSsh() *Options {
	if x != nil {
		return x.Ssh
	}
	return nil
}

func (x *Device) GetGnmi() *Options {
	if x != nil {
		return x.Gnmi
	}
	return nil
}

func (x *Device) GetGnoi() *Options {
	if x != nil {
		return x.Gnoi
	}
	return nil
}

func (x *Device) GetGnsi() *Options {
	if x != nil {
		return x.Gnsi
	}
	return nil
}

func (x *Device) GetGribi() *Options {
	if x != nil {
		return x.Gribi
	}
	return nil
}

func (x *Device) GetP4Rt() *Options {
	if x != nil {
		return x.P4Rt
	}
	return nil
}

func (x *Device) GetIxnetwork() *Options {
	if x != nil {
		return x.Ixnetwork
	}
	return nil
}

func (x *Device) GetOtg() *Options {
	if x != nil {
		return x.Otg
	}
	return nil
}

func (x *Device) GetVendor() proto.Device_Vendor {
	if x != nil {
		return x.Vendor
	}
	return proto.Device_Vendor(0)
}

func (x *Device) GetHardwareModel() string {
	if x != nil {
		return x.HardwareModel
	}
	return ""
}

func (x *Device) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

// Dial options.
type Options struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// This is the dial target, typically formatted as "hostname:port".
	// If not set, it will use the device name and the default port for
	// the protocol.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// Use plain HTTP/2 and omit TLS (gRPC only).
	Insecure bool `protobuf:"varint,2,opt,name=insecure,proto3" json:"insecure,omitempty"`
	// When using TLS, skip certificate verification (gRPC and HTTP).
	SkipVerify bool `protobuf:"varint,3,opt,name=skip_verify,json=skipVerify,proto3" json:"skip_verify,omitempty"`
	// The username for authentication.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// The password for authentication.
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	// The session_id for ATE REST API session id
	SessionId int32 `protobuf:"varint,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// gRPC request timeout (second)
	Timeout int32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// gRPC dial option to set the maximum recv message size in bytes.
	MaxRecvMsgSize int32 `protobuf:"varint,8,opt,name=max_recv_msg_size,json=maxRecvMsgSize,proto3" json:"max_recv_msg_size,omitempty"`
	// When using TLS, enable mutual certificate verification (gRPC)
	MutualTls bool `protobuf:"varint,9,opt,name=mutual_tls,json=mutualTls,proto3" json:"mutual_tls,omitempty"`
	// Trust bundle file: a *.pem file that contains one or more certificates (root and intermediate CAs)
	TrustBundleFile string `protobuf:"bytes,10,opt,name=trust_bundle_file,json=trustBundleFile,proto3" json:"trust_bundle_file,omitempty"`
	// Certificate file path : a *.pem file that is signed by root or intermediate CA
	CertFile string `protobuf:"bytes,11,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	// Key file Path: a *.pem file that contains a private key
	KeyFile       string `protobuf:"bytes,12,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Options) Reset() {
	*x = Options{}
	mi := &file_binding_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_binding_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_binding_proto_rawDescGZIP(), []int{3}
}

func (x *Options) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Options) GetInsecure() bool {
	if x != nil {
		return x.Insecure
	}
	return false
}

func (x *Options) GetSkipVerify() bool {
	if x != nil {
		return x.SkipVerify
	}
	return false
}

func (x *Options) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Options) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Options) GetSessionId() int32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *Options) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Options) GetMaxRecvMsgSize() int32 {
	if x != nil {
		return x.MaxRecvMsgSize
	}
	return 0
}

func (x *Options) GetMutualTls() bool {
	if x != nil {
		return x.MutualTls
	}
	return false
}

func (x *Options) GetTrustBundleFile() string {
	if x != nil {
		return x.TrustBundleFile
	}
	return ""
}

func (x *Options) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *Options) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

// Port binding.
type Port struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port ID as it appears in the testbed.
	// Set this value if and only dynamic solving is disabled.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The actual port name to be used for the binding.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Speed of the port.
	Speed proto.Port_Speed `protobuf:"varint,3,opt,name=speed,proto3,enum=ondatra.Port_Speed" json:"speed,omitempty"`
	// PMD type of the port.
	Pmd           proto.Port_Pmd `protobuf:"varint,4,opt,name=pmd,proto3,enum=ondatra.Port_Pmd" json:"pmd,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Port) Reset() {
	*x = Port{}
	mi := &file_binding_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_binding_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_binding_proto_rawDescGZIP(), []int{4}
}

func (x *Port) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Port) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Port) GetSpeed() proto.Port_Speed {
	if x != nil {
		return x.Speed
	}
	return proto.Port_Speed(0)
}

func (x *Port) GetPmd() proto.Port_Pmd {
	if x != nil {
		return x.Pmd
	}
	return proto.Port_Pmd(0)
}

// Link between two ports.
// Links are only relevant if dynamic solving is enabled.
type Link struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             string                 `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"` // First port in the format "<device-name>:<port-name>".
	B             string                 `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"` // Second port in the format "<device-name>:<port-name>".
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_binding_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_binding_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_binding_proto_rawDescGZIP(), []int{5}
}

func (x *Link) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *Link) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

var File_binding_proto protoreflect.FileDescriptor

const file_binding_proto_rawDesc = "" +
	"\n" +
	"\rbinding.proto\x12\x12openconfig.testing\x1a1github.com/openconfig/ondatra/proto/testbed.proto\"\xea\x01\n" +
	"\aBinding\x12.\n" +
	"\x04duts\x18\x01 \x03(\v2\x1a.openconfig.testing.DeviceR\x04duts\x12.\n" +
	"\x04ates\x18\x02 \x03(\v2\x1a.openconfig.testing.DeviceR\x04ates\x125\n" +
	"\aoptions\x18\x03 \x01(\v2\x1b.openconfig.testing.OptionsR\aoptions\x12\x18\n" +
	"\adynamic\x18\x04 \x01(\bR\adynamic\x12.\n" +
	"\x05links\x18\x05 \x03(\v2\x18.openconfig.testing.LinkR\x05links\"{\n" +
	"\aConfigs\x12\x10\n" +
	"\x03cli\x18\x01 \x03(\fR\x03cli\x12\x19\n" +
	"\bcli_file\x18\x02 \x03(\tR\acliFile\x12\"\n" +
	"\rgnmi_set_file\x18\x03 \x03(\tR\vgnmiSetFile\x12\x1f\n" +
	"\vgribi_flush\x18\x04 \x01(\bR\n" +
	"gribiFlush\"\xda\x05\n" +
	"\x06Device\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x125\n" +
	"\aoptions\x18\x03 \x01(\v2\x1b.openconfig.testing.OptionsR\aoptions\x12.\n" +
	"\x05ports\x18\x04 \x03(\v2\x18.openconfig.testing.PortR\x05ports\x123\n" +
	"\x06config\x18\x05 \x01(\v2\x1b.openconfig.testing.ConfigsR\x06config\x12-\n" +
	"\x03ssh\x18\v \x01(\v2\x1b.openconfig.testing.OptionsR\x03ssh\x12/\n" +
	"\x04gnmi\x18\f \x01(\v2\x1b.openconfig.testing.OptionsR\x04gnmi\x12/\n" +
	"\x04gnoi\x18\r \x01(\v2\x1b.openconfig.testing.OptionsR\x04gnoi\x12/\n" +
	"\x04gnsi\x18\x0e \x01(\v2\x1b.openconfig.testing.OptionsR\x04gnsi\x121\n" +
	"\x05gribi\x18\x0f \x01(\v2\x1b.openconfig.testing.OptionsR\x05gribi\x12/\n" +
	"\x04p4rt\x18\x10 \x01(\v2\x1b.openconfig.testing.OptionsR\x04p4rt\x129\n" +
	"\tixnetwork\x18\x11 \x01(\v2\x1b.openconfig.testing.OptionsR\tixnetwork\x12-\n" +
	"\x03otg\x18\x12 \x01(\v2\x1b.openconfig.testing.OptionsR\x03otg\x12.\n" +
	"\x06vendor\x18\x13 \x01(\x0e2\x16.ondatra.Device.VendorR\x06vendor\x12%\n" +
	"\x0ehardware_model\x18\x14 \x01(\tR\rhardwareModel\x12)\n" +
	"\x10software_version\x18\x15 \x01(\tR\x0fsoftwareVersion\"\xfd\x02\n" +
	"\aOptions\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x1a\n" +
	"\binsecure\x18\x02 \x01(\bR\binsecure\x12\x1f\n" +
	"\vskip_verify\x18\x03 \x01(\bR\n" +
	"skipVerify\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x1d\n" +
	"\n" +
	"session_id\x18\x06 \x01(\x05R\tsessionId\x12\x18\n" +
	"\atimeout\x18\a \x01(\x05R\atimeout\x12)\n" +
	"\x11max_recv_msg_size\x18\b \x01(\x05R\x0emaxRecvMsgSize\x12\x1d\n" +
	"\n" +
	"mutual_tls\x18\t \x01(\bR\tmutualTls\x12*\n" +
	"\x11trust_bundle_file\x18\n" +
	" \x01(\tR\x0ftrustBundleFile\x12\x1b\n" +
	"\tcert_file\x18\v \x01(\tR\bcertFile\x12\x19\n" +
	"\bkey_file\x18\f \x01(\tR\akeyFile\"z\n" +
	"\x04Port\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12)\n" +
	"\x05speed\x18\x03 \x01(\x0e2\x13.ondatra.Port.SpeedR\x05speed\x12#\n" +
	"\x03pmd\x18\x04 \x01(\x0e2\x11.ondatra.Port.PmdR\x03pmd\"\"\n" +
	"\x04Link\x12\f\n" +
	"\x01a\x18\x01 \x01(\tR\x01a\x12\f\n" +
	"\x01b\x18\x02 \x01(\tR\x01bB@Z>github.com/openconfig/featureprofiles/topologies/proto/bindingb\x06proto3"

var (
	file_binding_proto_rawDescOnce sync.Once
	file_binding_proto_rawDescData []byte
)

func file_binding_proto_rawDescGZIP() []byte {
	file_binding_proto_rawDescOnce.Do(func() {
		file_binding_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_binding_proto_rawDesc), len(file_binding_proto_rawDesc)))
	})
	return file_binding_proto_rawDescData
}

var file_binding_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_binding_proto_goTypes = []any{
	(*Binding)(nil),          // 0: openconfig.testing.Binding
	(*Configs)(nil),          // 1: openconfig.testing.Configs
	(*Device)(nil),           // 2: openconfig.testing.Device
	(*Options)(nil),          // 3: openconfig.testing.Options
	(*Port)(nil),             // 4: openconfig.testing.Port
	(*Link)(nil),             // 5: openconfig.testing.Link
	(proto.Device_Vendor)(0), // 6: ondatra.Device.Vendor
	(proto.Port_Speed)(0),    // 7: ondatra.Port.Speed
	(proto.Port_Pmd)(0),      // 8: ondatra.Port.Pmd
}
var file_binding_proto_depIdxs = []int32{
	2,  // 0: openconfig.testing.Binding.duts:type_name -> openconfig.testing.Device
	2,  // 1: openconfig.testing.Binding.ates:type_name -> openconfig.testing.Device
	3,  // 2: openconfig.testing.Binding.options:type_name -> openconfig.testing.Options
	5,  // 3: openconfig.testing.Binding.links:type_name -> openconfig.testing.Link
	3,  // 4: openconfig.testing.Device.options:type_name -> openconfig.testing.Options
	4,  // 5: openconfig.testing.Device.ports:type_name -> openconfig.testing.Port
	1,  // 6: openconfig.testing.Device.config:type_name -> openconfig.testing.Configs
	3,  // 7: openconfig.testing.Device.ssh:type_name -> openconfig.testing.Options
	3,  // 8: openconfig.testing.Device.gnmi:type_name -> openconfig.testing.Options
	3,  // 9: openconfig.testing.Device.gnoi:type_name -> openconfig.testing.Options
	3,  // 10: openconfig.testing.Device.gnsi:type_name -> openconfig.testing.Options
	3,  // 11: openconfig.testing.Device.gribi:type_name -> openconfig.testing.Options
	3,  // 12: openconfig.testing.Device.p4rt:type_name -> openconfig.testing.Options
	3,  // 13: openconfig.testing.Device.ixnetwork:type_name -> openconfig.testing.Options
	3,  // 14: openconfig.testing.Device.otg:type_name -> openconfig.testing.Options
	6,  // 15: openconfig.testing.Device.vendor:type_name -> ondatra.Device.Vendor
	7,  // 16: openconfig.testing.Port.speed:type_name -> ondatra.Port.Speed
	8,  // 17: openconfig.testing.Port.pmd:type_name -> ondatra.Port.Pmd
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_binding_proto_init() }
func file_binding_proto_init() {
	if File_binding_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_binding_proto_rawDesc), len(file_binding_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_binding_proto_goTypes,
		DependencyIndexes: file_binding_proto_depIdxs,
		MessageInfos:      file_binding_proto_msgTypes,
	}.Build()
	File_binding_proto = out.File
	file_binding_proto_goTypes = nil
	file_binding_proto_depIdxs = nil
}
