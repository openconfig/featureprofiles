/*
Package oc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/sthesayi/go/pkg/mod/github.com/openconfig/ygot@v0.13.2/genutil/names.go
using the following YANG input files:
	- gnmi-collector-metadata.yang
	- public/release/models/acl/openconfig-acl.yang
	- public/release/models/acl/openconfig-packet-match.yang
	- public/release/models/aft/openconfig-aft.yang
	- public/release/models/ate/openconfig-ate-flow.yang
	- public/release/models/ate/openconfig-ate-intf.yang
	- public/release/models/bfd/openconfig-bfd.yang
	- public/release/models/bgp/openconfig-bgp-policy.yang
	- public/release/models/bgp/openconfig-bgp-types.yang
	- public/release/models/interfaces/openconfig-if-aggregate.yang
	- public/release/models/interfaces/openconfig-if-ethernet.yang
	- public/release/models/interfaces/openconfig-if-ip-ext.yang
	- public/release/models/interfaces/openconfig-if-ip.yang
	- public/release/models/interfaces/openconfig-interfaces.yang
	- public/release/models/isis/openconfig-isis.yang
	- public/release/models/lacp/openconfig-lacp.yang
	- public/release/models/lldp/openconfig-lldp-types.yang
	- public/release/models/lldp/openconfig-lldp.yang
	- public/release/models/local-routing/openconfig-local-routing.yang
	- public/release/models/mpls/openconfig-mpls-types.yang
	- public/release/models/multicast/openconfig-pim.yang
	- public/release/models/network-instance/openconfig-network-instance.yang
	- public/release/models/openconfig-extensions.yang
	- public/release/models/optical-transport/openconfig-transport-types.yang
	- public/release/models/ospf/openconfig-ospfv2.yang
	- public/release/models/platform/openconfig-platform-cpu.yang
	- public/release/models/platform/openconfig-platform-software.yang
	- public/release/models/platform/openconfig-platform-transceiver.yang
	- public/release/models/platform/openconfig-platform.yang
	- public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
	- public/release/models/policy/openconfig-policy-types.yang
	- public/release/models/qos/openconfig-qos-elements.yang
	- public/release/models/qos/openconfig-qos-interfaces.yang
	- public/release/models/qos/openconfig-qos-types.yang
	- public/release/models/qos/openconfig-qos.yang
	- public/release/models/rib/openconfig-rib-bgp.yang
	- public/release/models/segment-routing/openconfig-segment-routing-types.yang
	- public/release/models/system/openconfig-system.yang
	- public/release/models/types/openconfig-inet-types.yang
	- public/release/models/types/openconfig-types.yang
	- public/release/models/types/openconfig-yang-types.yang
	- public/release/models/vlan/openconfig-vlan.yang
	- public/third_party/ietf/iana-if-type.yang
	- public/third_party/ietf/ietf-inet-types.yang
	- public/third_party/ietf/ietf-interfaces.yang
	- public/third_party/ietf/ietf-yang-types.yang
Imported modules were sourced from:
	- public/release/models/...
	- public/third_party/ietf/...
*/
package oc

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/logging-options YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions struct {
	LogNeighborStateChanges *bool `path:"config/log-neighbor-state-changes" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/log-neighbor-state-changes" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions) IsYANGGoStruct() {}

// GetLogNeighborStateChanges retrieves the value of the leaf LogNeighborStateChanges from the NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogNeighborStateChanges is set, it can
// safely use t.GetLogNeighborStateChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogNeighborStateChanges == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions) GetLogNeighborStateChanges() bool {
	if t == nil || t.LogNeighborStateChanges == nil {
		return true
	}
	return *t.LogNeighborStateChanges
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_LoggingOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/route-reflector YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector struct {
	RouteReflectorClient    *bool                                                                               `path:"config/route-reflector-client" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/route-reflector-client" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	RouteReflectorClusterId NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union `path:"config/route-reflector-cluster-id" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/route-reflector-cluster-id" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector) IsYANGGoStruct() {}

// GetRouteReflectorClient retrieves the value of the leaf RouteReflectorClient from the NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteReflectorClient is set, it can
// safely use t.GetRouteReflectorClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteReflectorClient == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector) GetRouteReflectorClient() bool {
	if t == nil || t.RouteReflectorClient == nil {
		return false
	}
	return *t.RouteReflectorClient
}

// GetRouteReflectorClusterId retrieves the value of the leaf RouteReflectorClusterId from the NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteReflectorClusterId is set, it can
// safely use t.GetRouteReflectorClusterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteReflectorClusterId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector) GetRouteReflectorClusterId() NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector_RouteReflectorClusterId_Union {
	if t == nil || t.RouteReflectorClusterId == nil {
		return nil
	}
	return t.RouteReflectorClusterId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_RouteReflector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_PeerGroup_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/timers YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_Timers struct {
	ConnectRetry                 *float64 `path:"config/connect-retry" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/connect-retry" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	HoldTime                     *float64 `path:"config/hold-time" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/hold-time" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	KeepaliveInterval            *float64 `path:"config/keepalive-interval" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/keepalive-interval" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	MinimumAdvertisementInterval *float64 `path:"config/minimum-advertisement-interval" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/minimum-advertisement-interval" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_PeerGroup_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_Timers) IsYANGGoStruct() {}

// GetConnectRetry retrieves the value of the leaf ConnectRetry from the NetworkInstance_Protocol_Bgp_PeerGroup_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectRetry is set, it can
// safely use t.GetConnectRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectRetry == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Timers) GetConnectRetry() float64 {
	if t == nil || t.ConnectRetry == nil {
		return 30
	}
	return *t.ConnectRetry
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NetworkInstance_Protocol_Bgp_PeerGroup_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Timers) GetHoldTime() float64 {
	if t == nil || t.HoldTime == nil {
		return 90
	}
	return *t.HoldTime
}

// GetKeepaliveInterval retrieves the value of the leaf KeepaliveInterval from the NetworkInstance_Protocol_Bgp_PeerGroup_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepaliveInterval is set, it can
// safely use t.GetKeepaliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepaliveInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Timers) GetKeepaliveInterval() float64 {
	if t == nil || t.KeepaliveInterval == nil {
		return 30
	}
	return *t.KeepaliveInterval
}

// GetMinimumAdvertisementInterval retrieves the value of the leaf MinimumAdvertisementInterval from the NetworkInstance_Protocol_Bgp_PeerGroup_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAdvertisementInterval is set, it can
// safely use t.GetMinimumAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Timers) GetMinimumAdvertisementInterval() float64 {
	if t == nil || t.MinimumAdvertisementInterval == nil {
		return 30
	}
	return *t.MinimumAdvertisementInterval
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Timers) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_PeerGroup_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_PeerGroup_Transport represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/transport YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_Transport struct {
	LocalAddress *string `path:"config/local-address" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/local-address" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	MtuDiscovery *bool   `path:"config/mtu-discovery" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/mtu-discovery" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	PassiveMode  *bool   `path:"config/passive-mode" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/passive-mode" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	TcpMss       *uint16 `path:"config/tcp-mss" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/tcp-mss" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_PeerGroup_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_Transport) IsYANGGoStruct() {}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NetworkInstance_Protocol_Bgp_PeerGroup_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Transport) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetMtuDiscovery retrieves the value of the leaf MtuDiscovery from the NetworkInstance_Protocol_Bgp_PeerGroup_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MtuDiscovery is set, it can
// safely use t.GetMtuDiscovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MtuDiscovery == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Transport) GetMtuDiscovery() bool {
	if t == nil || t.MtuDiscovery == nil {
		return false
	}
	return *t.MtuDiscovery
}

// GetPassiveMode retrieves the value of the leaf PassiveMode from the NetworkInstance_Protocol_Bgp_PeerGroup_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PassiveMode is set, it can
// safely use t.GetPassiveMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PassiveMode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Transport) GetPassiveMode() bool {
	if t == nil || t.PassiveMode == nil {
		return false
	}
	return *t.PassiveMode
}

// GetTcpMss retrieves the value of the leaf TcpMss from the NetworkInstance_Protocol_Bgp_PeerGroup_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpMss is set, it can
// safely use t.GetTcpMss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpMss == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Transport) GetTcpMss() uint16 {
	if t == nil || t.TcpMss == nil {
		return 0
	}
	return *t.TcpMss
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Transport) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_PeerGroup_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths struct {
	Ebgp    *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp `path:"ebgp" module:"openconfig-network-instance"`
	Enabled *bool                                                         `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Ibgp    *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp `path:"ibgp" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) IsYANGGoStruct() {}

// GetOrCreateEbgp retrieves the value of the Ebgp field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) GetOrCreateEbgp() *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp {
	if t.Ebgp != nil {
		return t.Ebgp
	}
	t.Ebgp = &NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp{}
	return t.Ebgp
}

// GetOrCreateIbgp retrieves the value of the Ibgp field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) GetOrCreateIbgp() *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp {
	if t.Ibgp != nil {
		return t.Ibgp
	}
	t.Ibgp = &NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp{}
	return t.Ibgp
}

// GetEbgp returns the value of the Ebgp struct pointer
// from NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths. If the receiver or the field Ebgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) GetEbgp() *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp {
	if t != nil && t.Ebgp != nil {
		return t.Ebgp
	}
	return nil
}

// GetIbgp returns the value of the Ibgp struct pointer
// from NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths. If the receiver or the field Ibgp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) GetIbgp() *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp {
	if t != nil && t.Ibgp != nil {
		return t.Ibgp
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/ebgp YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp struct {
	AllowMultipleAs *bool   `path:"config/allow-multiple-as" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/allow-multiple-as" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	MaximumPaths    *uint32 `path:"config/maximum-paths" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/maximum-paths" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp) IsYANGGoStruct() {}

// GetAllowMultipleAs retrieves the value of the leaf AllowMultipleAs from the NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowMultipleAs is set, it can
// safely use t.GetAllowMultipleAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowMultipleAs == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp) GetAllowMultipleAs() bool {
	if t == nil || t.AllowMultipleAs == nil {
		return false
	}
	return *t.AllowMultipleAs
}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumPaths is set, it can
// safely use t.GetMaximumPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumPaths == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ebgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/peer-groups/peer-group/use-multiple-paths/ibgp YANG schema element.
type NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp struct {
	MaximumPaths *uint32 `path:"config/maximum-paths" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/maximum-paths" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp) IsYANGGoStruct() {}

// GetMaximumPaths retrieves the value of the leaf MaximumPaths from the NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumPaths is set, it can
// safely use t.GetMaximumPaths() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumPaths == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp) GetMaximumPaths() uint32 {
	if t == nil || t.MaximumPaths == nil {
		return 1
	}
	return *t.MaximumPaths
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_PeerGroup_UseMultiplePaths_Ibgp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib struct {
	AfiSafi      map[E_BgpTypes_AFI_SAFI_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi `path:"afi-safis/afi-safi" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrSet      map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet                   `path:"attr-sets/attr-set" module:"openconfig-network-instance/openconfig-network-instance"`
	Community    map[uint64]*NetworkInstance_Protocol_Bgp_Rib_Community                 `path:"communities/community" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunity map[uint64]*NetworkInstance_Protocol_Bgp_Rib_ExtCommunity              `path:"ext-communities/ext-community" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib) IsYANGGoStruct() {}

// NewAfiSafi creates a new entry in the AfiSafi list of the
// NetworkInstance_Protocol_Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib) NewAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi)
	}

	key := AfiSafiName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AfiSafi[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AfiSafi", key)
	}

	t.AfiSafi[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi{
		AfiSafiName: AfiSafiName,
	}

	return t.AfiSafi[key], nil
}

// RenameAfiSafi renames an entry in the list AfiSafi within
// the NetworkInstance_Protocol_Bgp_Rib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib) RenameAfiSafi(oldK, newK E_BgpTypes_AFI_SAFI_TYPE) error {
	if _, ok := t.AfiSafi[newK]; ok {
		return fmt.Errorf("key %v already exists in AfiSafi", newK)
	}

	e, ok := t.AfiSafi[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AfiSafi", oldK)
	}
	e.AfiSafiName = newK

	t.AfiSafi[newK] = e
	delete(t.AfiSafi, oldK)
	return nil
}

// GetOrCreateAfiSafi retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetOrCreateAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi {

	key := AfiSafiName

	if v, ok := t.AfiSafi[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAfiSafi(AfiSafiName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAfiSafi got unexpected error: %v", err))
	}
	return v
}

// GetAfiSafi retrieves the value with the specified key from
// the AfiSafi map field of NetworkInstance_Protocol_Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi {

	if t == nil {
		return nil
	}

	key := AfiSafiName

	if lm, ok := t.AfiSafi[key]; ok {
		return lm
	}
	return nil
}

// DeleteAfiSafi deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib) DeleteAfiSafi(AfiSafiName E_BgpTypes_AFI_SAFI_TYPE) {
	key := AfiSafiName

	delete(t.AfiSafi, key)
}

// AppendAfiSafi appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi struct to the
// list AfiSafi of NetworkInstance_Protocol_Bgp_Rib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib) AppendAfiSafi(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) error {
	key := v.AfiSafiName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AfiSafi == nil {
		t.AfiSafi = make(map[E_BgpTypes_AFI_SAFI_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi)
	}

	if _, ok := t.AfiSafi[key]; ok {
		return fmt.Errorf("duplicate key for list AfiSafi %v", key)
	}

	t.AfiSafi[key] = v
	return nil
}

// NewAttrSet creates a new entry in the AttrSet list of the
// NetworkInstance_Protocol_Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib) NewAttrSet(Index uint64) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AttrSet == nil {
		t.AttrSet = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AttrSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AttrSet", key)
	}

	t.AttrSet[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet{
		Index: &Index,
	}

	return t.AttrSet[key], nil
}

// RenameAttrSet renames an entry in the list AttrSet within
// the NetworkInstance_Protocol_Bgp_Rib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib) RenameAttrSet(oldK, newK uint64) error {
	if _, ok := t.AttrSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AttrSet", newK)
	}

	e, ok := t.AttrSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AttrSet", oldK)
	}
	e.Index = &newK

	t.AttrSet[newK] = e
	delete(t.AttrSet, oldK)
	return nil
}

// GetOrCreateAttrSet retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetOrCreateAttrSet(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet {

	key := Index

	if v, ok := t.AttrSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAttrSet(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAttrSet got unexpected error: %v", err))
	}
	return v
}

// GetAttrSet retrieves the value with the specified key from
// the AttrSet map field of NetworkInstance_Protocol_Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetAttrSet(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.AttrSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAttrSet deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib) DeleteAttrSet(Index uint64) {
	key := Index

	delete(t.AttrSet, key)
}

// AppendAttrSet appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet struct to the
// list AttrSet of NetworkInstance_Protocol_Bgp_Rib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib) AppendAttrSet(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AttrSet == nil {
		t.AttrSet = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet)
	}

	if _, ok := t.AttrSet[key]; ok {
		return fmt.Errorf("duplicate key for list AttrSet %v", key)
	}

	t.AttrSet[key] = v
	return nil
}

// NewCommunity creates a new entry in the Community list of the
// NetworkInstance_Protocol_Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib) NewCommunity(Index uint64) (*NetworkInstance_Protocol_Bgp_Rib_Community, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_Community)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Community[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Community", key)
	}

	t.Community[key] = &NetworkInstance_Protocol_Bgp_Rib_Community{
		Index: &Index,
	}

	return t.Community[key], nil
}

// RenameCommunity renames an entry in the list Community within
// the NetworkInstance_Protocol_Bgp_Rib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib) RenameCommunity(oldK, newK uint64) error {
	if _, ok := t.Community[newK]; ok {
		return fmt.Errorf("key %v already exists in Community", newK)
	}

	e, ok := t.Community[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Community", oldK)
	}
	e.Index = &newK

	t.Community[newK] = e
	delete(t.Community, oldK)
	return nil
}

// GetOrCreateCommunity retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetOrCreateCommunity(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_Community {

	key := Index

	if v, ok := t.Community[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunity(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunity got unexpected error: %v", err))
	}
	return v
}

// GetCommunity retrieves the value with the specified key from
// the Community map field of NetworkInstance_Protocol_Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetCommunity(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_Community {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Community[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunity deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib) DeleteCommunity(Index uint64) {
	key := Index

	delete(t.Community, key)
}

// AppendCommunity appends the supplied NetworkInstance_Protocol_Bgp_Rib_Community struct to the
// list Community of NetworkInstance_Protocol_Bgp_Rib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_Community already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib) AppendCommunity(v *NetworkInstance_Protocol_Bgp_Rib_Community) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_Community)
	}

	if _, ok := t.Community[key]; ok {
		return fmt.Errorf("duplicate key for list Community %v", key)
	}

	t.Community[key] = v
	return nil
}

// NewExtCommunity creates a new entry in the ExtCommunity list of the
// NetworkInstance_Protocol_Bgp_Rib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib) NewExtCommunity(Index uint64) (*NetworkInstance_Protocol_Bgp_Rib_ExtCommunity, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunity == nil {
		t.ExtCommunity = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_ExtCommunity)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExtCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExtCommunity", key)
	}

	t.ExtCommunity[key] = &NetworkInstance_Protocol_Bgp_Rib_ExtCommunity{
		Index: &Index,
	}

	return t.ExtCommunity[key], nil
}

// RenameExtCommunity renames an entry in the list ExtCommunity within
// the NetworkInstance_Protocol_Bgp_Rib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib) RenameExtCommunity(oldK, newK uint64) error {
	if _, ok := t.ExtCommunity[newK]; ok {
		return fmt.Errorf("key %v already exists in ExtCommunity", newK)
	}

	e, ok := t.ExtCommunity[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExtCommunity", oldK)
	}
	e.Index = &newK

	t.ExtCommunity[newK] = e
	delete(t.ExtCommunity, oldK)
	return nil
}

// GetOrCreateExtCommunity retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetOrCreateExtCommunity(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity {

	key := Index

	if v, ok := t.ExtCommunity[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtCommunity(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtCommunity got unexpected error: %v", err))
	}
	return v
}

// GetExtCommunity retrieves the value with the specified key from
// the ExtCommunity map field of NetworkInstance_Protocol_Bgp_Rib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib) GetExtCommunity(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.ExtCommunity[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtCommunity deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib) DeleteExtCommunity(Index uint64) {
	key := Index

	delete(t.ExtCommunity, key)
}

// AppendExtCommunity appends the supplied NetworkInstance_Protocol_Bgp_Rib_ExtCommunity struct to the
// list ExtCommunity of NetworkInstance_Protocol_Bgp_Rib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_ExtCommunity already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib) AppendExtCommunity(v *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunity == nil {
		t.ExtCommunity = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_ExtCommunity)
	}

	if _, ok := t.ExtCommunity[key]; ok {
		return fmt.Errorf("duplicate key for list ExtCommunity %v", key)
	}

	t.ExtCommunity[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi struct {
	AfiSafiName    E_BgpTypes_AFI_SAFI_TYPE                                 `path:"state/afi-safi-name|afi-safi-name" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"afi-safi-name" shadow-module:"openconfig-network-instance"`
	Ipv4SrtePolicy *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy `path:"ipv4-srte-policy" module:"openconfig-network-instance"`
	Ipv4Unicast    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast    `path:"ipv4-unicast" module:"openconfig-network-instance"`
	Ipv6SrtePolicy *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy `path:"ipv6-srte-policy" module:"openconfig-network-instance"`
	Ipv6Unicast    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast    `path:"ipv6-unicast" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi) IsYANGGoStruct() {}

// GetOrCreateIpv4SrtePolicy retrieves the value of the Ipv4SrtePolicy field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetOrCreateIpv4SrtePolicy() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy {
	if t.Ipv4SrtePolicy != nil {
		return t.Ipv4SrtePolicy
	}
	t.Ipv4SrtePolicy = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy{}
	return t.Ipv4SrtePolicy
}

// GetOrCreateIpv4Unicast retrieves the value of the Ipv4Unicast field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetOrCreateIpv4Unicast() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast {
	if t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	t.Ipv4Unicast = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast{}
	return t.Ipv4Unicast
}

// GetOrCreateIpv6SrtePolicy retrieves the value of the Ipv6SrtePolicy field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetOrCreateIpv6SrtePolicy() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy {
	if t.Ipv6SrtePolicy != nil {
		return t.Ipv6SrtePolicy
	}
	t.Ipv6SrtePolicy = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy{}
	return t.Ipv6SrtePolicy
}

// GetOrCreateIpv6Unicast retrieves the value of the Ipv6Unicast field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetOrCreateIpv6Unicast() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast {
	if t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	t.Ipv6Unicast = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast{}
	return t.Ipv6Unicast
}

// GetIpv4SrtePolicy returns the value of the Ipv4SrtePolicy struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi. If the receiver or the field Ipv4SrtePolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetIpv4SrtePolicy() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy {
	if t != nil && t.Ipv4SrtePolicy != nil {
		return t.Ipv4SrtePolicy
	}
	return nil
}

// GetIpv4Unicast returns the value of the Ipv4Unicast struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi. If the receiver or the field Ipv4Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetIpv4Unicast() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast {
	if t != nil && t.Ipv4Unicast != nil {
		return t.Ipv4Unicast
	}
	return nil
}

// GetIpv6SrtePolicy returns the value of the Ipv6SrtePolicy struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi. If the receiver or the field Ipv6SrtePolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetIpv6SrtePolicy() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy {
	if t != nil && t.Ipv6SrtePolicy != nil {
		return t.Ipv6SrtePolicy
	}
	return nil
}

// GetIpv6Unicast returns the value of the Ipv6Unicast struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi. If the receiver or the field Ipv6Unicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetIpv6Unicast() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast {
	if t != nil && t.Ipv6Unicast != nil {
		return t.Ipv6Unicast
	}
	return nil
}

// GetAfiSafiName retrieves the value of the leaf AfiSafiName from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiName is set, it can
// safely use t.GetAfiSafiName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiName == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) GetAfiSafiName() E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiName == 0 {
		return 0
	}
	return t.AfiSafiName
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi-safi-name": t.AfiSafiName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy struct {
	LocRib   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	Neighbor map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct {
	AttrIndex         *uint64                                                                                          `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                          `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                          `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                          `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                          `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                               `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                          `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                          `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                            `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor struct {
	AdjRibInPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	AdjRibInPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	AdjRibOutPost   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	AdjRibOutPre    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	NeighborAddress *string                                                                         `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"neighbor-address" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                                                         `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	BestPath          *bool                                                                                                           `path:"state/best-path" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                         `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                         `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                         `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                         `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                              `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                         `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                         `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                           `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BestPath is set, it can
// safely use t.GetBestPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BestPath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                                                        `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                        `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                        `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                        `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                        `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                             `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                        `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                        `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                          `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                                                          `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                          `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                          `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                          `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                          `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                               `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                          `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                          `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                            `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                                                         `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                         `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                         `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                         `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                         `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                              `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                         `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                         `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                           `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast struct {
	LocRib   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	Neighbor map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key struct {
	Prefix string                                                                         `path:"prefix"`
	Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union `path:"origin"`
	PathId uint32                                                                         `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) NewRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route{
		Prefix: &Prefix,
		Origin: Origin,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.Origin = newK.Origin
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) GetOrCreateRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) GetRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) DeleteRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key{
		Prefix: *v.Prefix,
		Origin: v.Origin,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct {
	AttrIndex         *uint64                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	Origin            NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union                `path:"state/origin|origin" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"origin" shadow-module:"openconfig-network-instance"`
	PathId            *uint32                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetOrigin retrieves the value of the leaf Origin from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetOrigin() NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"origin":  t.Origin,
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct {
	AdjRibInPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	AdjRibInPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	AdjRibOutPost   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	AdjRibOutPre    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	NeighborAddress *string                                                                      `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"neighbor-address" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	BestPath          *bool                                                                                                        `path:"state/best-path" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BestPath is set, it can
// safely use t.GetBestPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BestPath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                                                     `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                     `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                     `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                          `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                     `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                     `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                     `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                       `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv4-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv4Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct {
	LocRib   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	Neighbor map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct {
	AttrIndex         *uint64                                                                                          `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                          `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                          `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                          `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                          `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                               `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                          `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                          `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                            `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct {
	AdjRibInPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	AdjRibInPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	AdjRibOutPost   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	AdjRibOutPre    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	NeighborAddress *string                                                                         `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"neighbor-address" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                                                         `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	BestPath          *bool                                                                                                           `path:"state/best-path" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                         `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                         `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                         `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                         `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                              `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                         `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                         `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                           `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BestPath is set, it can
// safely use t.GetBestPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BestPath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                                                        `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                        `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                        `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                        `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                        `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                             `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                        `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                        `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                          `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                                                          `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                          `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                          `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                          `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                          `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                               `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                          `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                          `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                            `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key struct {
	PathId   uint32 `path:"path-id"`
	Endpoint string `path:"endpoint"`
	Color    uint32 `path:"color"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) NewRoute(PathId uint32, Endpoint string, Color uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route{
		PathId:   &PathId,
		Endpoint: &Endpoint,
		Color:    &Color,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.PathId = &newK.PathId
	e.Endpoint = &newK.Endpoint
	e.Color = &newK.Color

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) GetOrCreateRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(PathId, Endpoint, Color)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) GetRoute(PathId uint32, Endpoint string, Color uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) DeleteRoute(PathId uint32, Endpoint string, Color uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   PathId,
		Endpoint: Endpoint,
		Color:    Color,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) error {
	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key{
		PathId:   *v.PathId,
		Endpoint: *v.Endpoint,
		Color:    *v.Color,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                                                         `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                         `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                         `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                         `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                         `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                              `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                         `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                         `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                           `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
		"path-id":  *t.PathId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-srte-policy/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6SrtePolicy_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast struct {
	LocRib   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib              `path:"loc-rib" module:"openconfig-network-instance"`
	Neighbor map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) AppendNeighbor(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateLocRib retrieves the value of the LocRib field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetOrCreateLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib {
	if t.LocRib != nil {
		return t.LocRib
	}
	t.LocRib = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib{}
	return t.LocRib
}

// GetLocRib returns the value of the LocRib struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast. If the receiver or the field LocRib is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) GetLocRib() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib {
	if t != nil && t.LocRib != nil {
		return t.LocRib
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key struct {
	Prefix string                                                                         `path:"prefix"`
	Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union `path:"origin"`
	PathId uint32                                                                         `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) NewRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route{
		Prefix: &Prefix,
		Origin: Origin,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.Origin = newK.Origin
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) GetOrCreateRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, Origin, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) GetRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) DeleteRoute(Prefix string, Origin NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: Prefix,
		Origin: Origin,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key{
		Prefix: *v.Prefix,
		Origin: v.Origin,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct {
	AttrIndex         *uint64                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	Origin            NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union                `path:"state/origin|origin" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"origin" shadow-module:"openconfig-network-instance"`
	PathId            *uint32                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) IsYANGGoStruct() {}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetOrigin retrieves the value of the leaf Origin from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetOrigin() NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_Origin_Union {
	if t == nil || t.Origin == nil {
		return nil
	}
	return t.Origin
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛListKeyMap() (map[string]interface{}, error) {

	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"origin":  t.Origin,
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/loc-rib/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_LocRib_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct {
	AdjRibInPost    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost  `path:"adj-rib-in-post" module:"openconfig-network-instance"`
	AdjRibInPre     *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre   `path:"adj-rib-in-pre" module:"openconfig-network-instance"`
	AdjRibOutPost   *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost `path:"adj-rib-out-post" module:"openconfig-network-instance"`
	AdjRibOutPre    *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre  `path:"adj-rib-out-pre" module:"openconfig-network-instance"`
	NeighborAddress *string                                                                      `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"neighbor-address" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) IsYANGGoStruct() {}

// GetOrCreateAdjRibInPost retrieves the value of the AdjRibInPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost {
	if t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	t.AdjRibInPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost{}
	return t.AdjRibInPost
}

// GetOrCreateAdjRibInPre retrieves the value of the AdjRibInPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre {
	if t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	t.AdjRibInPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre{}
	return t.AdjRibInPre
}

// GetOrCreateAdjRibOutPost retrieves the value of the AdjRibOutPost field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost {
	if t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	t.AdjRibOutPost = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost{}
	return t.AdjRibOutPost
}

// GetOrCreateAdjRibOutPre retrieves the value of the AdjRibOutPre field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetOrCreateAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre {
	if t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	t.AdjRibOutPre = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre{}
	return t.AdjRibOutPre
}

// GetAdjRibInPost returns the value of the AdjRibInPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibInPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibInPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost {
	if t != nil && t.AdjRibInPost != nil {
		return t.AdjRibInPost
	}
	return nil
}

// GetAdjRibInPre returns the value of the AdjRibInPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibInPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibInPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre {
	if t != nil && t.AdjRibInPre != nil {
		return t.AdjRibInPre
	}
	return nil
}

// GetAdjRibOutPost returns the value of the AdjRibOutPost struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibOutPost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibOutPost() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost {
	if t != nil && t.AdjRibOutPost != nil {
		return t.AdjRibOutPost
	}
	return nil
}

// GetAdjRibOutPre returns the value of the AdjRibOutPre struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor. If the receiver or the field AdjRibOutPre is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetAdjRibOutPre() *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre {
	if t != nil && t.AdjRibOutPre != nil {
		return t.AdjRibOutPre
	}
	return nil
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct {
	AttrIndex         *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	BestPath          *bool                                                                                                        `path:"state/best-path" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetBestPath retrieves the value of the leaf BestPath from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BestPath is set, it can
// safely use t.GetBestPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BestPath == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetBestPath() bool {
	if t == nil || t.BestPath == nil {
		return false
	}
	return *t.BestPath
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct {
	AttrIndex         *uint64                                                                                                     `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                     `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                     `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                          `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                     `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                     `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                     `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                       `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-in-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibInPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) IsYANGGoStruct() {
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct {
	AttrIndex         *uint64                                                                                                       `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                       `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                       `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                            `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                       `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                       `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                       `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                         `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-post/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPost_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct {
	Route map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route `path:"routes/route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key represents the key for list Route of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key struct {
	Prefix string `path:"prefix"`
	PathId uint32 `path:"path-id"`
}

// NewRoute creates a new entry in the Route list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) NewRoute(Prefix string, PathId uint32) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route)
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Route[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Route", key)
	}

	t.Route[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route{
		Prefix: &Prefix,
		PathId: &PathId,
	}

	return t.Route[key], nil
}

// RenameRoute renames an entry in the list Route within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) RenameRoute(oldK, newK NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key) error {
	if _, ok := t.Route[newK]; ok {
		return fmt.Errorf("key %v already exists in Route", newK)
	}

	e, ok := t.Route[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Route", oldK)
	}
	e.Prefix = &newK.Prefix
	e.PathId = &newK.PathId

	t.Route[newK] = e
	delete(t.Route, oldK)
	return nil
}

// GetOrCreateRoute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) GetOrCreateRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route {

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if v, ok := t.Route[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRoute(Prefix, PathId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRoute got unexpected error: %v", err))
	}
	return v
}

// GetRoute retrieves the value with the specified key from
// the Route map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) GetRoute(Prefix string, PathId uint32) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	if lm, ok := t.Route[key]; ok {
		return lm
	}
	return nil
}

// DeleteRoute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) DeleteRoute(Prefix string, PathId uint32) {
	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: Prefix,
		PathId: PathId,
	}

	delete(t.Route, key)
}

// AppendRoute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct to the
// list Route of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) AppendRoute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) error {
	if v.Prefix == nil {
		return fmt.Errorf("invalid nil key for Prefix")
	}

	if v.PathId == nil {
		return fmt.Errorf("invalid nil key for PathId")
	}

	key := NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key{
		Prefix: *v.Prefix,
		PathId: *v.PathId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Route == nil {
		t.Route = make(map[NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_Key]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route)
	}

	if _, ok := t.Route[key]; ok {
		return fmt.Errorf("duplicate key for list Route %v", key)
	}

	t.Route[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct {
	AttrIndex         *uint64                                                                                                      `path:"state/attr-index" module:"openconfig-network-instance/openconfig-network-instance"`
	CommunityIndex    *uint64                                                                                                      `path:"state/community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	ExtCommunityIndex *uint64                                                                                                      `path:"state/ext-community-index" module:"openconfig-network-instance/openconfig-network-instance"`
	InvalidReason     E_RibBgpTypes_INVALID_ROUTE_REASON                                                                           `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	LastModified      *uint64                                                                                                      `path:"state/last-modified" module:"openconfig-network-instance/openconfig-network-instance"`
	PathId            *uint32                                                                                                      `path:"state/path-id|path-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"path-id" shadow-module:"openconfig-network-instance"`
	Prefix            *string                                                                                                      `path:"state/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"prefix" shadow-module:"openconfig-network-instance"`
	UnknownAttribute  map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute `path:"unknown-attributes/unknown-attribute" module:"openconfig-network-instance/openconfig-network-instance"`
	ValidRoute        *bool                                                                                                        `path:"state/valid-route" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) IsYANGGoStruct() {
}

// NewUnknownAttribute creates a new entry in the UnknownAttribute list of the
// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) NewUnknownAttribute(AttrType uint8) (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	key := AttrType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnknownAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnknownAttribute", key)
	}

	t.UnknownAttribute[key] = &NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute{
		AttrType: &AttrType,
	}

	return t.UnknownAttribute[key], nil
}

// RenameUnknownAttribute renames an entry in the list UnknownAttribute within
// the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) RenameUnknownAttribute(oldK, newK uint8) error {
	if _, ok := t.UnknownAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in UnknownAttribute", newK)
	}

	e, ok := t.UnknownAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnknownAttribute", oldK)
	}
	e.AttrType = &newK

	t.UnknownAttribute[newK] = e
	delete(t.UnknownAttribute, oldK)
	return nil
}

// GetOrCreateUnknownAttribute retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetOrCreateUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	key := AttrType

	if v, ok := t.UnknownAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnknownAttribute(AttrType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnknownAttribute got unexpected error: %v", err))
	}
	return v
}

// GetUnknownAttribute retrieves the value with the specified key from
// the UnknownAttribute map field of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetUnknownAttribute(AttrType uint8) *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute {

	if t == nil {
		return nil
	}

	key := AttrType

	if lm, ok := t.UnknownAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnknownAttribute deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) DeleteUnknownAttribute(AttrType uint8) {
	key := AttrType

	delete(t.UnknownAttribute, key)
}

// AppendUnknownAttribute appends the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct to the
// list UnknownAttribute of NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) AppendUnknownAttribute(v *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) error {
	if v.AttrType == nil {
		return fmt.Errorf("invalid nil key received for AttrType")
	}

	key := *v.AttrType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnknownAttribute == nil {
		t.UnknownAttribute = make(map[uint8]*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute)
	}

	if _, ok := t.UnknownAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list UnknownAttribute %v", key)
	}

	t.UnknownAttribute[key] = v
	return nil
}

// GetAttrIndex retrieves the value of the leaf AttrIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrIndex is set, it can
// safely use t.GetAttrIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetAttrIndex() uint64 {
	if t == nil || t.AttrIndex == nil {
		return 0
	}
	return *t.AttrIndex
}

// GetCommunityIndex retrieves the value of the leaf CommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityIndex is set, it can
// safely use t.GetCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetCommunityIndex() uint64 {
	if t == nil || t.CommunityIndex == nil {
		return 0
	}
	return *t.CommunityIndex
}

// GetExtCommunityIndex retrieves the value of the leaf ExtCommunityIndex from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityIndex is set, it can
// safely use t.GetExtCommunityIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetExtCommunityIndex() uint64 {
	if t == nil || t.ExtCommunityIndex == nil {
		return 0
	}
	return *t.ExtCommunityIndex
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetInvalidReason() E_RibBgpTypes_INVALID_ROUTE_REASON {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetLastModified retrieves the value of the leaf LastModified from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastModified is set, it can
// safely use t.GetLastModified() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastModified == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetLastModified() uint64 {
	if t == nil || t.LastModified == nil {
		return 0
	}
	return *t.LastModified
}

// GetPathId retrieves the value of the leaf PathId from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathId is set, it can
// safely use t.GetPathId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetPathId() uint32 {
	if t == nil || t.PathId == nil {
		return 0
	}
	return *t.PathId
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetValidRoute retrieves the value of the leaf ValidRoute from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidRoute is set, it can
// safely use t.GetValidRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidRoute == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) GetValidRoute() bool {
	if t == nil || t.ValidRoute == nil {
		return false
	}
	return *t.ValidRoute
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PathId == nil {
		return nil, fmt.Errorf("nil value for key PathId")
	}

	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"path-id": *t.PathId,
		"prefix":  *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/afi-safis/afi-safi/ipv6-unicast/neighbors/neighbor/adj-rib-out-pre/routes/route/unknown-attributes/unknown-attribute YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct {
	AttrLen    *uint16 `path:"state/attr-len" module:"openconfig-network-instance/openconfig-network-instance"`
	AttrType   *uint8  `path:"state/attr-type|attr-type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"attr-type" shadow-module:"openconfig-network-instance"`
	AttrValue  Binary  `path:"state/attr-value" module:"openconfig-network-instance/openconfig-network-instance"`
	Extended   *bool   `path:"state/extended" module:"openconfig-network-instance/openconfig-network-instance"`
	Optional   *bool   `path:"state/optional" module:"openconfig-network-instance/openconfig-network-instance"`
	Partial    *bool   `path:"state/partial" module:"openconfig-network-instance/openconfig-network-instance"`
	Transitive *bool   `path:"state/transitive" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) IsYANGGoStruct() {
}

// GetAttrLen retrieves the value of the leaf AttrLen from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrLen is set, it can
// safely use t.GetAttrLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrLen == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrLen() uint16 {
	if t == nil || t.AttrLen == nil {
		return 0
	}
	return *t.AttrLen
}

// GetAttrType retrieves the value of the leaf AttrType from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrType is set, it can
// safely use t.GetAttrType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrType() uint8 {
	if t == nil || t.AttrType == nil {
		return 0
	}
	return *t.AttrType
}

// GetAttrValue retrieves the value of the leaf AttrValue from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AttrValue is set, it can
// safely use t.GetAttrValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AttrValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetAttrValue() Binary {
	if t == nil || t.AttrValue == nil {
		return nil
	}
	return t.AttrValue
}

// GetExtended retrieves the value of the leaf Extended from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Extended is set, it can
// safely use t.GetExtended() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Extended == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetExtended() bool {
	if t == nil || t.Extended == nil {
		return false
	}
	return *t.Extended
}

// GetOptional retrieves the value of the leaf Optional from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Optional is set, it can
// safely use t.GetOptional() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Optional == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetOptional() bool {
	if t == nil || t.Optional == nil {
		return false
	}
	return *t.Optional
}

// GetPartial retrieves the value of the leaf Partial from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Partial is set, it can
// safely use t.GetPartial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Partial == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetPartial() bool {
	if t == nil || t.Partial == nil {
		return false
	}
	return *t.Partial
}

// GetTransitive retrieves the value of the leaf Transitive from the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Transitive is set, it can
// safely use t.GetTransitive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Transitive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) GetTransitive() bool {
	if t == nil || t.Transitive == nil {
		return false
	}
	return *t.Transitive
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AttrType == nil {
		return nil, fmt.Errorf("nil value for key AttrType")
	}

	return map[string]interface{}{
		"attr-type": *t.AttrType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AfiSafi_Ipv6Unicast_Neighbor_AdjRibOutPre_Route_UnknownAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet struct {
	Aggregator          *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator          `path:"aggregator" module:"openconfig-network-instance"`
	Aigp                *uint64                                                       `path:"state/aigp" module:"openconfig-network-instance/openconfig-network-instance"`
	AsSegment           []*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment         `path:"as-path/as-segment" module:"openconfig-network-instance/openconfig-network-instance"`
	As4Segment          []*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment        `path:"as4-path/as4-segment" module:"openconfig-network-instance/openconfig-network-instance"`
	AtomicAggregate     *bool                                                         `path:"state/atomic-aggregate" module:"openconfig-network-instance/openconfig-network-instance"`
	ClusterList         []string                                                      `path:"state/cluster-list" module:"openconfig-network-instance/openconfig-network-instance"`
	Index               *uint64                                                       `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"index" shadow-module:"openconfig-network-instance"`
	LocalPref           *uint32                                                       `path:"state/local-pref" module:"openconfig-network-instance/openconfig-network-instance"`
	Med                 *uint32                                                       `path:"state/med" module:"openconfig-network-instance/openconfig-network-instance"`
	NextHop             *string                                                       `path:"state/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	Origin              E_BgpTypes_BgpOriginAttrType                                  `path:"state/origin" module:"openconfig-network-instance/openconfig-network-instance"`
	OriginatorId        *string                                                       `path:"state/originator-id" module:"openconfig-network-instance/openconfig-network-instance"`
	TunnelEncapsulation *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation `path:"tunnel-encapsulation" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet) IsYANGGoStruct() {}

// GetOrCreateAggregator retrieves the value of the Aggregator field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrCreateAggregator() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator {
	if t.Aggregator != nil {
		return t.Aggregator
	}
	t.Aggregator = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator{}
	return t.Aggregator
}

// GetOrCreateTunnelEncapsulation retrieves the value of the TunnelEncapsulation field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrCreateTunnelEncapsulation() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation {
	if t.TunnelEncapsulation != nil {
		return t.TunnelEncapsulation
	}
	t.TunnelEncapsulation = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation{}
	return t.TunnelEncapsulation
}

// GetAggregator returns the value of the Aggregator struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the receiver or the field Aggregator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAggregator() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator {
	if t != nil && t.Aggregator != nil {
		return t.Aggregator
	}
	return nil
}

// GetTunnelEncapsulation returns the value of the TunnelEncapsulation struct pointer
// from NetworkInstance_Protocol_Bgp_Rib_AttrSet. If the receiver or the field TunnelEncapsulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetTunnelEncapsulation() *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation {
	if t != nil && t.TunnelEncapsulation != nil {
		return t.TunnelEncapsulation
	}
	return nil
}

// GetAigp retrieves the value of the leaf Aigp from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aigp is set, it can
// safely use t.GetAigp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aigp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAigp() uint64 {
	if t == nil || t.Aigp == nil {
		return 0
	}
	return *t.Aigp
}

// GetAtomicAggregate retrieves the value of the leaf AtomicAggregate from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AtomicAggregate is set, it can
// safely use t.GetAtomicAggregate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AtomicAggregate == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetAtomicAggregate() bool {
	if t == nil || t.AtomicAggregate == nil {
		return false
	}
	return *t.AtomicAggregate
}

// GetClusterList retrieves the value of the leaf ClusterList from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClusterList is set, it can
// safely use t.GetClusterList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClusterList == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetClusterList() []string {
	if t == nil || t.ClusterList == nil {
		return nil
	}
	return t.ClusterList
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLocalPref retrieves the value of the leaf LocalPref from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPref is set, it can
// safely use t.GetLocalPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPref == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetLocalPref() uint32 {
	if t == nil || t.LocalPref == nil {
		return 0
	}
	return *t.LocalPref
}

// GetMed retrieves the value of the leaf Med from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Med is set, it can
// safely use t.GetMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Med == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetMed() uint32 {
	if t == nil || t.Med == nil {
		return 0
	}
	return *t.Med
}

// GetNextHop retrieves the value of the leaf NextHop from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetOrigin retrieves the value of the leaf Origin from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Origin is set, it can
// safely use t.GetOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Origin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.Origin == 0 {
		return 0
	}
	return t.Origin
}

// GetOriginatorId retrieves the value of the leaf OriginatorId from the NetworkInstance_Protocol_Bgp_Rib_AttrSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorId is set, it can
// safely use t.GetOriginatorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) GetOriginatorId() string {
	if t == nil || t.OriginatorId == nil {
		return ""
	}
	return *t.OriginatorId
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/aggregator YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator struct {
	Address *string `path:"state/address" module:"openconfig-network-instance/openconfig-network-instance"`
	As      *uint32 `path:"state/as" module:"openconfig-network-instance/openconfig-network-instance"`
	As4     *uint32 `path:"state/as4" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAs retrieves the value of the leaf As from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As is set, it can
// safely use t.GetAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) GetAs() uint32 {
	if t == nil || t.As == nil {
		return 0
	}
	return *t.As
}

// GetAs4 retrieves the value of the leaf As4 from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As4 is set, it can
// safely use t.GetAs4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As4 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) GetAs4() uint32 {
	if t == nil || t.As4 == nil {
		return 0
	}
	return *t.As4
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_Aggregator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/as4-path/as4-segment YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment struct {
	Member []uint32                     `path:"state/member" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   E_BgpTypes_AsPathSegmentType `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) IsYANGGoStruct() {}

// GetMember retrieves the value of the leaf Member from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) GetMember() []uint32 {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) GetType() E_BgpTypes_AsPathSegmentType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_As4Segment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/as-path/as-segment YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment struct {
	Member []uint32                     `path:"state/member" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   E_BgpTypes_AsPathSegmentType `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) IsYANGGoStruct() {}

// GetMember retrieves the value of the leaf Member from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) GetMember() []uint32 {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) GetType() E_BgpTypes_AsPathSegmentType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_AsSegment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation struct {
	Tunnel map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel `path:"tunnels/tunnel" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) IsYANGGoStruct() {}

// NewTunnel creates a new entry in the Tunnel list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) NewTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel{
		Type: Type,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) RenameTunnel(oldK, newK E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.Type = newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) GetOrCreateTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel {

	key := Type

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) GetTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) DeleteTunnel(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE) {
	key := Type

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct to the
// list Tunnel of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) AppendTunnel(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct {
	Subtlv map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv `path:"subtlvs/subtlv" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE                                                                                        `path:"state/type|type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"type" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) IsYANGGoStruct() {}

// NewSubtlv creates a new entry in the Subtlv list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) NewSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subtlv == nil {
		t.Subtlv = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subtlv[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subtlv", key)
	}

	t.Subtlv[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv{
		Type: Type,
	}

	return t.Subtlv[key], nil
}

// RenameSubtlv renames an entry in the list Subtlv within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) RenameSubtlv(oldK, newK E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) error {
	if _, ok := t.Subtlv[newK]; ok {
		return fmt.Errorf("key %v already exists in Subtlv", newK)
	}

	e, ok := t.Subtlv[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subtlv", oldK)
	}
	e.Type = newK

	t.Subtlv[newK] = e
	delete(t.Subtlv, oldK)
	return nil
}

// GetOrCreateSubtlv retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetOrCreateSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv {

	key := Type

	if v, ok := t.Subtlv[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubtlv(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubtlv got unexpected error: %v", err))
	}
	return v
}

// GetSubtlv retrieves the value with the specified key from
// the Subtlv map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Subtlv[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubtlv deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) DeleteSubtlv(Type E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE) {
	key := Type

	delete(t.Subtlv, key)
}

// AppendSubtlv appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct to the
// list Subtlv of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) AppendSubtlv(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subtlv == nil {
		t.Subtlv = make(map[E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv)
	}

	if _, ok := t.Subtlv[key]; ok {
		return fmt.Errorf("duplicate key for list Subtlv %v", key)
	}

	t.Subtlv[key] = v
	return nil
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) GetType() E_RibBgpTypes_TUNNEL_ENCAPSULATION_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct {
	BindingSid     NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union           `path:"state/binding-sid" module:"openconfig-network-instance/openconfig-network-instance"`
	Colors         []uint32                                                                                              `path:"state/colors" module:"openconfig-network-instance/openconfig-network-instance"`
	Preference     *uint32                                                                                               `path:"state/preference" module:"openconfig-network-instance/openconfig-network-instance"`
	RemoteEndpoint map[string]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint `path:"remote-endpoints/remote-endpoint" module:"openconfig-network-instance/openconfig-network-instance"`
	SegmentList    map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList    `path:"segment-lists/segment-list" module:"openconfig-network-instance/openconfig-network-instance"`
	Type           E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE                                                        `path:"state/type|type" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"type" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) IsYANGGoStruct() {}

// NewRemoteEndpoint creates a new entry in the RemoteEndpoint list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) NewRemoteEndpoint(Endpoint string) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteEndpoint == nil {
		t.RemoteEndpoint = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint)
	}

	key := Endpoint

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteEndpoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteEndpoint", key)
	}

	t.RemoteEndpoint[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint{
		Endpoint: &Endpoint,
	}

	return t.RemoteEndpoint[key], nil
}

// RenameRemoteEndpoint renames an entry in the list RemoteEndpoint within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) RenameRemoteEndpoint(oldK, newK string) error {
	if _, ok := t.RemoteEndpoint[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteEndpoint", newK)
	}

	e, ok := t.RemoteEndpoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteEndpoint", oldK)
	}
	e.Endpoint = &newK

	t.RemoteEndpoint[newK] = e
	delete(t.RemoteEndpoint, oldK)
	return nil
}

// GetOrCreateRemoteEndpoint retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetOrCreateRemoteEndpoint(Endpoint string) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint {

	key := Endpoint

	if v, ok := t.RemoteEndpoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteEndpoint(Endpoint)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteEndpoint got unexpected error: %v", err))
	}
	return v
}

// GetRemoteEndpoint retrieves the value with the specified key from
// the RemoteEndpoint map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetRemoteEndpoint(Endpoint string) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint {

	if t == nil {
		return nil
	}

	key := Endpoint

	if lm, ok := t.RemoteEndpoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteEndpoint deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) DeleteRemoteEndpoint(Endpoint string) {
	key := Endpoint

	delete(t.RemoteEndpoint, key)
}

// AppendRemoteEndpoint appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct to the
// list RemoteEndpoint of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) AppendRemoteEndpoint(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) error {
	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key received for Endpoint")
	}

	key := *v.Endpoint

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteEndpoint == nil {
		t.RemoteEndpoint = make(map[string]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint)
	}

	if _, ok := t.RemoteEndpoint[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteEndpoint %v", key)
	}

	t.RemoteEndpoint[key] = v
	return nil
}

// NewSegmentList creates a new entry in the SegmentList list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) NewSegmentList(InstanceId uint64) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList)
	}

	key := InstanceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList{
		InstanceId: &InstanceId,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) RenameSegmentList(oldK, newK uint64) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.InstanceId = &newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetOrCreateSegmentList(InstanceId uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList {

	key := InstanceId

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(InstanceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetSegmentList(InstanceId uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList {

	if t == nil {
		return nil
	}

	key := InstanceId

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) DeleteSegmentList(InstanceId uint64) {
	key := InstanceId

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct to the
// list SegmentList of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) AppendSegmentList(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) error {
	if v.InstanceId == nil {
		return fmt.Errorf("invalid nil key received for InstanceId")
	}

	key := *v.InstanceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetBindingSid retrieves the value of the leaf BindingSid from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BindingSid is set, it can
// safely use t.GetBindingSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BindingSid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetBindingSid() NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_BindingSid_Union {
	if t == nil || t.BindingSid == nil {
		return nil
	}
	return t.BindingSid
}

// GetColors retrieves the value of the leaf Colors from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Colors is set, it can
// safely use t.GetColors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Colors == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetColors() []uint32 {
	if t == nil || t.Colors == nil {
		return nil
	}
	return t.Colors
}

// GetPreference retrieves the value of the leaf Preference from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 100
	}
	return *t.Preference
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) GetType() E_RibBgpTypes_TUNNEL_ENCAPSULATION_SUBTLV_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/remote-endpoints/remote-endpoint YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct {
	As       *uint32 `path:"state/as" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint *string `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) IsYANGGoStruct() {
}

// GetAs retrieves the value of the leaf As from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if As is set, it can
// safely use t.GetAs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.As == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) GetAs() uint32 {
	if t == nil || t.As == nil {
		return 0
	}
	return *t.As
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	return map[string]interface{}{
		"endpoint": *t.Endpoint,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_RemoteEndpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct {
	InstanceId *uint64                                                                                                    `path:"state/instance-id|instance-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"instance-id" shadow-module:"openconfig-network-instance"`
	Segment    map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment `path:"segments/segment" module:"openconfig-network-instance/openconfig-network-instance"`
	Weight     *uint32                                                                                                    `path:"state/weight" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) IsYANGGoStruct() {
}

// NewSegment creates a new entry in the Segment list of the
// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) NewSegment(Index uint64) (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Segment[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Segment", key)
	}

	t.Segment[key] = &NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment{
		Index: &Index,
	}

	return t.Segment[key], nil
}

// RenameSegment renames an entry in the list Segment within
// the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) RenameSegment(oldK, newK uint64) error {
	if _, ok := t.Segment[newK]; ok {
		return fmt.Errorf("key %v already exists in Segment", newK)
	}

	e, ok := t.Segment[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Segment", oldK)
	}
	e.Index = &newK

	t.Segment[newK] = e
	delete(t.Segment, oldK)
	return nil
}

// GetOrCreateSegment retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetOrCreateSegment(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment {

	key := Index

	if v, ok := t.Segment[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegment(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegment got unexpected error: %v", err))
	}
	return v
}

// GetSegment retrieves the value with the specified key from
// the Segment map field of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetSegment(Index uint64) *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Segment[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegment deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) DeleteSegment(Index uint64) {
	key := Index

	delete(t.Segment, key)
}

// AppendSegment appends the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct to the
// list Segment of NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) AppendSegment(v *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Segment == nil {
		t.Segment = make(map[uint64]*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment)
	}

	if _, ok := t.Segment[key]; ok {
		return fmt.Errorf("duplicate key for list Segment %v", key)
	}

	t.Segment[key] = v
	return nil
}

// GetInstanceId retrieves the value of the leaf InstanceId from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstanceId is set, it can
// safely use t.GetInstanceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstanceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetInstanceId() uint64 {
	if t == nil || t.InstanceId == nil {
		return 0
	}
	return *t.InstanceId
}

// GetWeight retrieves the value of the leaf Weight from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InstanceId == nil {
		return nil, fmt.Errorf("nil value for key InstanceId")
	}

	return map[string]interface{}{
		"instance-id": *t.InstanceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/attr-sets/attr-set/tunnel-encapsulation/tunnels/tunnel/subtlvs/subtlv/segment-lists/segment-list/segments/segment YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct {
	Index             *uint64                                                                                                  `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"index" shadow-module:"openconfig-network-instance"`
	LocalInterfaceId  *uint32                                                                                                  `path:"state/local-interface-id" module:"openconfig-network-instance/openconfig-network-instance"`
	LocalIpv4Address  *string                                                                                                  `path:"state/local-ipv4-address" module:"openconfig-network-instance/openconfig-network-instance"`
	LocalIpv6Address  *string                                                                                                  `path:"state/local-ipv6-address" module:"openconfig-network-instance/openconfig-network-instance"`
	MplsBos           *bool                                                                                                    `path:"state/mpls-bos" module:"openconfig-network-instance/openconfig-network-instance"`
	MplsTc            *uint8                                                                                                   `path:"state/mpls-tc" module:"openconfig-network-instance/openconfig-network-instance"`
	MplsTtl           *uint8                                                                                                   `path:"state/mpls-ttl" module:"openconfig-network-instance/openconfig-network-instance"`
	RemoteIpv4Address *string                                                                                                  `path:"state/remote-ipv4-address" module:"openconfig-network-instance/openconfig-network-instance"`
	RemoteIpv6Address *string                                                                                                  `path:"state/remote-ipv6-address" module:"openconfig-network-instance/openconfig-network-instance"`
	Sid               NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union `path:"state/sid" module:"openconfig-network-instance/openconfig-network-instance"`
	Type              E_Segment_Type                                                                                           `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetLocalInterfaceId retrieves the value of the leaf LocalInterfaceId from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalInterfaceId is set, it can
// safely use t.GetLocalInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalInterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalInterfaceId() uint32 {
	if t == nil || t.LocalInterfaceId == nil {
		return 0
	}
	return *t.LocalInterfaceId
}

// GetLocalIpv4Address retrieves the value of the leaf LocalIpv4Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpv4Address is set, it can
// safely use t.GetLocalIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpv4Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalIpv4Address() string {
	if t == nil || t.LocalIpv4Address == nil {
		return ""
	}
	return *t.LocalIpv4Address
}

// GetLocalIpv6Address retrieves the value of the leaf LocalIpv6Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpv6Address is set, it can
// safely use t.GetLocalIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpv6Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetLocalIpv6Address() string {
	if t == nil || t.LocalIpv6Address == nil {
		return ""
	}
	return *t.LocalIpv6Address
}

// GetMplsBos retrieves the value of the leaf MplsBos from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsBos is set, it can
// safely use t.GetMplsBos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsBos == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsBos() bool {
	if t == nil || t.MplsBos == nil {
		return false
	}
	return *t.MplsBos
}

// GetMplsTc retrieves the value of the leaf MplsTc from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTc is set, it can
// safely use t.GetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTc == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsTc() uint8 {
	if t == nil || t.MplsTc == nil {
		return 0
	}
	return *t.MplsTc
}

// GetMplsTtl retrieves the value of the leaf MplsTtl from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTtl is set, it can
// safely use t.GetMplsTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTtl == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetMplsTtl() uint8 {
	if t == nil || t.MplsTtl == nil {
		return 0
	}
	return *t.MplsTtl
}

// GetRemoteIpv4Address retrieves the value of the leaf RemoteIpv4Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpv4Address is set, it can
// safely use t.GetRemoteIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpv4Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetRemoteIpv4Address() string {
	if t == nil || t.RemoteIpv4Address == nil {
		return ""
	}
	return *t.RemoteIpv4Address
}

// GetRemoteIpv6Address retrieves the value of the leaf RemoteIpv6Address from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpv6Address is set, it can
// safely use t.GetRemoteIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpv6Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetRemoteIpv6Address() string {
	if t == nil || t.RemoteIpv6Address == nil {
		return ""
	}
	return *t.RemoteIpv6Address
}

// GetSid retrieves the value of the leaf Sid from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sid is set, it can
// safely use t.GetSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetSid() NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment_Sid_Union {
	if t == nil || t.Sid == nil {
		return nil
	}
	return t.Sid
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) GetType() E_Segment_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_AttrSet_TunnelEncapsulation_Tunnel_Subtlv_SegmentList_Segment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_Community represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/communities/community YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_Community struct {
	Community []NetworkInstance_Protocol_Bgp_Rib_Community_Community_Union `path:"state/community" module:"openconfig-network-instance/openconfig-network-instance"`
	Index     *uint64                                                      `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"index" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_Community) IsYANGGoStruct() {}

// GetCommunity retrieves the value of the leaf Community from the NetworkInstance_Protocol_Bgp_Rib_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Community is set, it can
// safely use t.GetCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Community == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) GetCommunity() []NetworkInstance_Protocol_Bgp_Rib_Community_Community_Union {
	if t == nil || t.Community == nil {
		return nil
	}
	return t.Community
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_Community struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Bgp_Rib_ExtCommunity represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/bgp/rib/ext-communities/ext-community YANG schema element.
type NetworkInstance_Protocol_Bgp_Rib_ExtCommunity struct {
	ExtCommunity []NetworkInstance_Protocol_Bgp_Rib_ExtCommunity_ExtCommunity_Union `path:"state/ext-community" module:"openconfig-network-instance/openconfig-network-instance"`
	Index        *uint64                                                            `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"index" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Bgp_Rib_ExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) IsYANGGoStruct() {}

// GetExtCommunity retrieves the value of the leaf ExtCommunity from the NetworkInstance_Protocol_Bgp_Rib_ExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunity is set, it can
// safely use t.GetExtCommunity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunity == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) GetExtCommunity() []NetworkInstance_Protocol_Bgp_Rib_ExtCommunity_ExtCommunity_Union {
	if t == nil || t.ExtCommunity == nil {
		return nil
	}
	return t.ExtCommunity
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Bgp_Rib_ExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Bgp_Rib_ExtCommunity struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Bgp_Rib_ExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Bgp_Rib_ExtCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp YANG schema element.
type NetworkInstance_Protocol_Igmp struct {
	Global    *NetworkInstance_Protocol_Igmp_Global               `path:"global" module:"openconfig-network-instance"`
	Interface map[string]*NetworkInstance_Protocol_Igmp_Interface `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Protocol_Igmp struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp) NewInterface(InterfaceId string) (*NetworkInstance_Protocol_Igmp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Igmp_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Protocol_Igmp_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Protocol_Igmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Protocol_Igmp_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Protocol_Igmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp) GetInterface(InterfaceId string) *NetworkInstance_Protocol_Igmp_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Protocol_Igmp_Interface struct to the
// list Interface of NetworkInstance_Protocol_Igmp. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp) AppendInterface(v *NetworkInstance_Protocol_Igmp_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Igmp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp) GetOrCreateGlobal() *NetworkInstance_Protocol_Igmp_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &NetworkInstance_Protocol_Igmp_Global{}
	return t.Global
}

// GetGlobal returns the value of the Global struct pointer
// from NetworkInstance_Protocol_Igmp. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp) GetGlobal() *NetworkInstance_Protocol_Igmp_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// NetworkInstance_Protocol_Igmp_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global YANG schema element.
type NetworkInstance_Protocol_Igmp_Global struct {
	Ssm *NetworkInstance_Protocol_Igmp_Global_Ssm `path:"ssm" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Global) IsYANGGoStruct() {}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Global) GetOrCreateSsm() *NetworkInstance_Protocol_Igmp_Global_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &NetworkInstance_Protocol_Igmp_Global_Ssm{}
	return t.Ssm
}

// GetSsm returns the value of the Ssm struct pointer
// from NetworkInstance_Protocol_Igmp_Global. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Global) GetSsm() *NetworkInstance_Protocol_Igmp_Global_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Global_Ssm represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm struct {
	Mapping map[string]*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping `path:"mappings/mapping" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Global_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Global_Ssm) IsYANGGoStruct() {}

// NewMapping creates a new entry in the Mapping list of the
// NetworkInstance_Protocol_Igmp_Global_Ssm struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) NewMapping(Source string) (*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mapping == nil {
		t.Mapping = make(map[string]*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping)
	}

	key := Source

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mapping[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mapping", key)
	}

	t.Mapping[key] = &NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping{
		Source: &Source,
	}

	return t.Mapping[key], nil
}

// RenameMapping renames an entry in the list Mapping within
// the NetworkInstance_Protocol_Igmp_Global_Ssm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) RenameMapping(oldK, newK string) error {
	if _, ok := t.Mapping[newK]; ok {
		return fmt.Errorf("key %v already exists in Mapping", newK)
	}

	e, ok := t.Mapping[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mapping", oldK)
	}
	e.Source = &newK

	t.Mapping[newK] = e
	delete(t.Mapping, oldK)
	return nil
}

// GetOrCreateMapping retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Global_Ssm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) GetOrCreateMapping(Source string) *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping {

	key := Source

	if v, ok := t.Mapping[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMapping(Source)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMapping got unexpected error: %v", err))
	}
	return v
}

// GetMapping retrieves the value with the specified key from
// the Mapping map field of NetworkInstance_Protocol_Igmp_Global_Ssm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) GetMapping(Source string) *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping {

	if t == nil {
		return nil
	}

	key := Source

	if lm, ok := t.Mapping[key]; ok {
		return lm
	}
	return nil
}

// DeleteMapping deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Global_Ssm. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) DeleteMapping(Source string) {
	key := Source

	delete(t.Mapping, key)
}

// AppendMapping appends the supplied NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping struct to the
// list Mapping of NetworkInstance_Protocol_Igmp_Global_Ssm. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) AppendMapping(v *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) error {
	if v.Source == nil {
		return fmt.Errorf("invalid nil key received for Source")
	}

	key := *v.Source

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mapping == nil {
		t.Mapping = make(map[string]*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping)
	}

	if _, ok := t.Mapping[key]; ok {
		return fmt.Errorf("duplicate key for list Mapping %v", key)
	}

	t.Mapping[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Global_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping struct {
	Source    *string `path:"config/source|source" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/source|source" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	SsmRanges *string `path:"config/ssm-ranges" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/ssm-ranges" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) IsYANGGoStruct() {}

// GetSource retrieves the value of the leaf Source from the NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// GetSsmRanges retrieves the value of the leaf SsmRanges from the NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmRanges is set, it can
// safely use t.GetSsmRanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmRanges == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) GetSsmRanges() string {
	if t == nil || t.SsmRanges == nil {
		return ""
	}
	return *t.SsmRanges
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Source == nil {
		return nil, fmt.Errorf("nil value for key Source")
	}

	return map[string]interface{}{
		"source": *t.Source,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface struct {
	Counters       *NetworkInstance_Protocol_Igmp_Interface_Counters                `path:"counters" module:"openconfig-network-instance"`
	Enabled        *bool                                                            `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	FilterPrefixes *string                                                          `path:"config/filter-prefixes" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/filter-prefixes" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Group          map[string]*NetworkInstance_Protocol_Igmp_Interface_Group        `path:"membership-groups/group" module:"openconfig-network-instance/openconfig-network-instance"`
	InterfaceId    *string                                                          `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/interface-id|interface-id" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	InterfaceRef   *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef            `path:"interface-ref" module:"openconfig-network-instance"`
	QueryExpires   *uint64                                                          `path:"state/query-expires" module:"openconfig-network-instance/openconfig-network-instance"`
	QueryInterval  *uint16                                                          `path:"config/query-interval" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/query-interval" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	StaticGroups   map[string]*NetworkInstance_Protocol_Igmp_Interface_StaticGroups `path:"static-membership-groups/static-groups" module:"openconfig-network-instance/openconfig-network-instance"`
	Version        *uint8                                                           `path:"config/version" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/version" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface) IsYANGGoStruct() {}

// NewGroup creates a new entry in the Group list of the
// NetworkInstance_Protocol_Igmp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp_Interface) NewGroup(Group string) (*NetworkInstance_Protocol_Igmp_Interface_Group, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_Group)
	}

	key := Group

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Group[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Group", key)
	}

	t.Group[key] = &NetworkInstance_Protocol_Igmp_Interface_Group{
		Group: &Group,
	}

	return t.Group[key], nil
}

// RenameGroup renames an entry in the list Group within
// the NetworkInstance_Protocol_Igmp_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp_Interface) RenameGroup(oldK, newK string) error {
	if _, ok := t.Group[newK]; ok {
		return fmt.Errorf("key %v already exists in Group", newK)
	}

	e, ok := t.Group[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Group", oldK)
	}
	e.Group = &newK

	t.Group[newK] = e
	delete(t.Group, oldK)
	return nil
}

// GetOrCreateGroup retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateGroup(Group string) *NetworkInstance_Protocol_Igmp_Interface_Group {

	key := Group

	if v, ok := t.Group[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGroup(Group)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGroup got unexpected error: %v", err))
	}
	return v
}

// GetGroup retrieves the value with the specified key from
// the Group map field of NetworkInstance_Protocol_Igmp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetGroup(Group string) *NetworkInstance_Protocol_Igmp_Interface_Group {

	if t == nil {
		return nil
	}

	key := Group

	if lm, ok := t.Group[key]; ok {
		return lm
	}
	return nil
}

// DeleteGroup deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp_Interface) DeleteGroup(Group string) {
	key := Group

	delete(t.Group, key)
}

// AppendGroup appends the supplied NetworkInstance_Protocol_Igmp_Interface_Group struct to the
// list Group of NetworkInstance_Protocol_Igmp_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Interface_Group already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp_Interface) AppendGroup(v *NetworkInstance_Protocol_Igmp_Interface_Group) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key received for Group")
	}

	key := *v.Group

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Group == nil {
		t.Group = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_Group)
	}

	if _, ok := t.Group[key]; ok {
		return fmt.Errorf("duplicate key for list Group %v", key)
	}

	t.Group[key] = v
	return nil
}

// NewStaticGroups creates a new entry in the StaticGroups list of the
// NetworkInstance_Protocol_Igmp_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Igmp_Interface) NewStaticGroups(StaticGroup string) (*NetworkInstance_Protocol_Igmp_Interface_StaticGroups, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticGroups == nil {
		t.StaticGroups = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_StaticGroups)
	}

	key := StaticGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticGroups[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticGroups", key)
	}

	t.StaticGroups[key] = &NetworkInstance_Protocol_Igmp_Interface_StaticGroups{
		StaticGroup: &StaticGroup,
	}

	return t.StaticGroups[key], nil
}

// RenameStaticGroups renames an entry in the list StaticGroups within
// the NetworkInstance_Protocol_Igmp_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Igmp_Interface) RenameStaticGroups(oldK, newK string) error {
	if _, ok := t.StaticGroups[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticGroups", newK)
	}

	e, ok := t.StaticGroups[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticGroups", oldK)
	}
	e.StaticGroup = &newK

	t.StaticGroups[newK] = e
	delete(t.StaticGroups, oldK)
	return nil
}

// GetOrCreateStaticGroups retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateStaticGroups(StaticGroup string) *NetworkInstance_Protocol_Igmp_Interface_StaticGroups {

	key := StaticGroup

	if v, ok := t.StaticGroups[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticGroups(StaticGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticGroups got unexpected error: %v", err))
	}
	return v
}

// GetStaticGroups retrieves the value with the specified key from
// the StaticGroups map field of NetworkInstance_Protocol_Igmp_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetStaticGroups(StaticGroup string) *NetworkInstance_Protocol_Igmp_Interface_StaticGroups {

	if t == nil {
		return nil
	}

	key := StaticGroup

	if lm, ok := t.StaticGroups[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticGroups deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Igmp_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Igmp_Interface) DeleteStaticGroups(StaticGroup string) {
	key := StaticGroup

	delete(t.StaticGroups, key)
}

// AppendStaticGroups appends the supplied NetworkInstance_Protocol_Igmp_Interface_StaticGroups struct to the
// list StaticGroups of NetworkInstance_Protocol_Igmp_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Igmp_Interface_StaticGroups already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Igmp_Interface) AppendStaticGroups(v *NetworkInstance_Protocol_Igmp_Interface_StaticGroups) error {
	if v.StaticGroup == nil {
		return fmt.Errorf("invalid nil key received for StaticGroup")
	}

	key := *v.StaticGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticGroups == nil {
		t.StaticGroups = make(map[string]*NetworkInstance_Protocol_Igmp_Interface_StaticGroups)
	}

	if _, ok := t.StaticGroups[key]; ok {
		return fmt.Errorf("duplicate key for list StaticGroups %v", key)
	}

	t.StaticGroups[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateCounters() *NetworkInstance_Protocol_Igmp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Protocol_Igmp_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Protocol_Igmp_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Protocol_Igmp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetCounters() *NetworkInstance_Protocol_Igmp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Protocol_Igmp_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetInterfaceRef() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetFilterPrefixes retrieves the value of the leaf FilterPrefixes from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FilterPrefixes is set, it can
// safely use t.GetFilterPrefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FilterPrefixes == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetFilterPrefixes() string {
	if t == nil || t.FilterPrefixes == nil {
		return ""
	}
	return *t.FilterPrefixes
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetQueryExpires retrieves the value of the leaf QueryExpires from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryExpires is set, it can
// safely use t.GetQueryExpires() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryExpires == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetQueryExpires() uint64 {
	if t == nil || t.QueryExpires == nil {
		return 0
	}
	return *t.QueryExpires
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetQueryInterval() uint16 {
	if t == nil || t.QueryInterval == nil {
		return 0
	}
	return *t.QueryInterval
}

// GetVersion retrieves the value of the leaf Version from the NetworkInstance_Protocol_Igmp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 0
	}
	return *t.Version
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Igmp_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Igmp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters struct {
	Queries *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries `path:"queries" module:"openconfig-network-instance"`
	Reports *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports `path:"reports" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters) IsYANGGoStruct() {}

// GetOrCreateQueries retrieves the value of the Queries field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetOrCreateQueries() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries {
	if t.Queries != nil {
		return t.Queries
	}
	t.Queries = &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries{}
	return t.Queries
}

// GetOrCreateReports retrieves the value of the Reports field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetOrCreateReports() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports {
	if t.Reports != nil {
		return t.Reports
	}
	t.Reports = &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports{}
	return t.Reports
}

// GetQueries returns the value of the Queries struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters. If the receiver or the field Queries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetQueries() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries {
	if t != nil && t.Queries != nil {
		return t.Queries
	}
	return nil
}

// GetReports returns the value of the Reports struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters. If the receiver or the field Reports is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) GetReports() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports {
	if t != nil && t.Reports != nil {
		return t.Reports
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries struct {
	Received *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received `path:"received" module:"openconfig-network-instance"`
	Sent     *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent     `path:"sent" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Queries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) IsYANGGoStruct() {}

// GetOrCreateReceived retrieves the value of the Received field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetOrCreateReceived() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received {
	if t.Received != nil {
		return t.Received
	}
	t.Received = &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received{}
	return t.Received
}

// GetOrCreateSent retrieves the value of the Sent field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetOrCreateSent() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent {
	if t.Sent != nil {
		return t.Sent
	}
	t.Sent = &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent{}
	return t.Sent
}

// GetReceived returns the value of the Received struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters_Queries. If the receiver or the field Received is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetReceived() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received {
	if t != nil && t.Received != nil {
		return t.Received
	}
	return nil
}

// GetSent returns the value of the Sent struct pointer
// from NetworkInstance_Protocol_Igmp_Interface_Counters_Queries. If the receiver or the field Sent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) GetSent() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent {
	if t != nil && t.Sent != nil {
		return t.Sent
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Queries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received struct {
	V1 *uint32 `path:"state/v1" module:"openconfig-network-instance/openconfig-network-instance"`
	V2 *uint32 `path:"state/v2" module:"openconfig-network-instance/openconfig-network-instance"`
	V3 *uint32 `path:"state/v3" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) IsYANGGoStruct() {}

// GetV1 retrieves the value of the leaf V1 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V1 is set, it can
// safely use t.GetV1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V1 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) GetV1() uint32 {
	if t == nil || t.V1 == nil {
		return 0
	}
	return *t.V1
}

// GetV2 retrieves the value of the leaf V2 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V2 is set, it can
// safely use t.GetV2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) GetV2() uint32 {
	if t == nil || t.V2 == nil {
		return 0
	}
	return *t.V2
}

// GetV3 retrieves the value of the leaf V3 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V3 is set, it can
// safely use t.GetV3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V3 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) GetV3() uint32 {
	if t == nil || t.V3 == nil {
		return 0
	}
	return *t.V3
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent struct {
	V1 *uint32 `path:"state/v1" module:"openconfig-network-instance/openconfig-network-instance"`
	V2 *uint32 `path:"state/v2" module:"openconfig-network-instance/openconfig-network-instance"`
	V3 *uint32 `path:"state/v3" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) IsYANGGoStruct() {}

// GetV1 retrieves the value of the leaf V1 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V1 is set, it can
// safely use t.GetV1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V1 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) GetV1() uint32 {
	if t == nil || t.V1 == nil {
		return 0
	}
	return *t.V1
}

// GetV2 retrieves the value of the leaf V2 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V2 is set, it can
// safely use t.GetV2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) GetV2() uint32 {
	if t == nil || t.V2 == nil {
		return 0
	}
	return *t.V2
}

// GetV3 retrieves the value of the leaf V3 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V3 is set, it can
// safely use t.GetV3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V3 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) GetV3() uint32 {
	if t == nil || t.V3 == nil {
		return 0
	}
	return *t.V3
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports struct {
	V1 *uint32 `path:"state/v1" module:"openconfig-network-instance/openconfig-network-instance"`
	V2 *uint32 `path:"state/v2" module:"openconfig-network-instance/openconfig-network-instance"`
	V3 *uint32 `path:"state/v3" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Counters_Reports implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) IsYANGGoStruct() {}

// GetV1 retrieves the value of the leaf V1 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Reports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V1 is set, it can
// safely use t.GetV1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V1 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) GetV1() uint32 {
	if t == nil || t.V1 == nil {
		return 0
	}
	return *t.V1
}

// GetV2 retrieves the value of the leaf V2 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Reports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V2 is set, it can
// safely use t.GetV2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V2 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) GetV2() uint32 {
	if t == nil || t.V2 == nil {
		return 0
	}
	return *t.V2
}

// GetV3 retrieves the value of the leaf V3 from the NetworkInstance_Protocol_Igmp_Interface_Counters_Reports
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V3 is set, it can
// safely use t.GetV3() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V3 == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) GetV3() uint32 {
	if t == nil || t.V3 == nil {
		return 0
	}
	return *t.V3
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Counters_Reports"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface_Group represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group struct {
	Group    *string `path:"state/group|group" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"group" shadow-module:"openconfig-network-instance"`
	Reporter *string `path:"state/reporter" module:"openconfig-network-instance/openconfig-network-instance"`
	Source   *string `path:"state/source" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_Group implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_Group) IsYANGGoStruct() {}

// GetGroup retrieves the value of the leaf Group from the NetworkInstance_Protocol_Igmp_Interface_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetReporter retrieves the value of the leaf Reporter from the NetworkInstance_Protocol_Igmp_Interface_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reporter is set, it can
// safely use t.GetReporter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reporter == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) GetReporter() string {
	if t == nil || t.Reporter == nil {
		return ""
	}
	return *t.Reporter
}

// GetSource retrieves the value of the leaf Source from the NetworkInstance_Protocol_Igmp_Interface_Group
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) GetSource() string {
	if t == nil || t.Source == nil {
		return ""
	}
	return *t.Source
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Igmp_Interface_Group struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"group": *t.Group,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_Group"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_Group) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRef struct {
	Interface    *string `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/interface" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/subinterface" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Igmp_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Protocol_Igmp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Protocol_Igmp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Igmp_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}
