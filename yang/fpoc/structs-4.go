/*
Package fpoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by /usr/local/google/home/sthesayi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - google-bgp-timers.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-if-tunnel.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-aaa.yang
  - public/release/models/system/openconfig-aaa-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package fpoc

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/router-information/tlvs/tlv/unknown-tlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv struct {
	Length *uint16 `path:"state/length" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   *uint16 `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	Value  Binary  `path:"state/value" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) GetType() uint16 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_RouterInformation_Tlv_UnknownTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering struct {
	Tlv []*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv `path:"tlvs/tlv" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv struct {
	Link          *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link          `path:"link" module:"openconfig-network-instance"`
	NodeAttribute *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute `path:"node-attribute" module:"openconfig-network-instance"`
	RouterAddress *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress `path:"router-address" module:"openconfig-network-instance"`
	Type          E_OspfTypes_OSPF_TE_LSA_TLV_TYPE                                                                      `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	UnknownTlv    *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv    `path:"unknown-tlv" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) IsYANGGoStruct() {
}

// GetOrCreateLink retrieves the value of the Link field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetOrCreateLink() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link {
	if t.Link != nil {
		return t.Link
	}
	t.Link = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link{}
	return t.Link
}

// GetOrCreateNodeAttribute retrieves the value of the NodeAttribute field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetOrCreateNodeAttribute() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute {
	if t.NodeAttribute != nil {
		return t.NodeAttribute
	}
	t.NodeAttribute = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute{}
	return t.NodeAttribute
}

// GetOrCreateRouterAddress retrieves the value of the RouterAddress field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetOrCreateRouterAddress() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress {
	if t.RouterAddress != nil {
		return t.RouterAddress
	}
	t.RouterAddress = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress{}
	return t.RouterAddress
}

// GetOrCreateUnknownTlv retrieves the value of the UnknownTlv field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetOrCreateUnknownTlv() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv {
	if t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	t.UnknownTlv = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv{}
	return t.UnknownTlv
}

// GetLink returns the value of the Link struct pointer
// from NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv. If the receiver or the field Link is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetLink() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link {
	if t != nil && t.Link != nil {
		return t.Link
	}
	return nil
}

// GetNodeAttribute returns the value of the NodeAttribute struct pointer
// from NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv. If the receiver or the field NodeAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetNodeAttribute() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute {
	if t != nil && t.NodeAttribute != nil {
		return t.NodeAttribute
	}
	return nil
}

// GetRouterAddress returns the value of the RouterAddress struct pointer
// from NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv. If the receiver or the field RouterAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetRouterAddress() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress {
	if t != nil && t.RouterAddress != nil {
		return t.RouterAddress
	}
	return nil
}

// GetUnknownTlv returns the value of the UnknownTlv struct pointer
// from NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv. If the receiver or the field UnknownTlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetUnknownTlv() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv {
	if t != nil && t.UnknownTlv != nil {
		return t.UnknownTlv
	}
	return nil
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) GetType() E_OspfTypes_OSPF_TE_LSA_TLV_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link struct {
	SubTlv []*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv `path:"sub-tlvs/sub-tlv" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv struct {
	AdminGroup                 map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup          `path:"administrative-groups/admin-group" module:"openconfig-network-instance/openconfig-network-instance"`
	LinkId                     *string                                                                                                                           `path:"state/link-id" module:"openconfig-network-instance/openconfig-network-instance"`
	LinkType                   E_Ospfv2_SubTlv_LinkType                                                                                                          `path:"state/link-type" module:"openconfig-network-instance/openconfig-network-instance"`
	LocalIpAddress             []string                                                                                                                          `path:"state/local-ip-address" module:"openconfig-network-instance/openconfig-network-instance"`
	MaximumBandwidth           Binary                                                                                                                            `path:"state/maximum-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
	MaximumReservableBandwidth Binary                                                                                                                            `path:"state/maximum-reservable-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
	Metric                     *uint32                                                                                                                           `path:"state/metric" module:"openconfig-network-instance/openconfig-network-instance"`
	RemoteIpAddress            []string                                                                                                                          `path:"state/remote-ip-address" module:"openconfig-network-instance/openconfig-network-instance"`
	Type                       NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union                     `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	UnknownSubtlv              *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv                 `path:"unknown-subtlv" module:"openconfig-network-instance"`
	UnknownType                *uint16                                                                                                                           `path:"state/unknown-type" module:"openconfig-network-instance/openconfig-network-instance"`
	UnknownValue               Binary                                                                                                                            `path:"state/unknown-value" module:"openconfig-network-instance/openconfig-network-instance"`
	UnreservedBandwidth        map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth `path:"unreserved-bandwidths/unreserved-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) IsYANGGoStruct() {
}

// NewAdminGroup creates a new entry in the AdminGroup list of the
// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) NewAdminGroup(BitIndex uint8) (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup)
	}

	key := BitIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AdminGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AdminGroup", key)
	}

	t.AdminGroup[key] = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup{
		BitIndex: &BitIndex,
	}

	return t.AdminGroup[key], nil
}

// RenameAdminGroup renames an entry in the list AdminGroup within
// the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) RenameAdminGroup(oldK, newK uint8) error {
	if _, ok := t.AdminGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in AdminGroup", newK)
	}

	e, ok := t.AdminGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AdminGroup", oldK)
	}
	e.BitIndex = &newK

	t.AdminGroup[newK] = e
	delete(t.AdminGroup, oldK)
	return nil
}

// GetOrCreateAdminGroup retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetOrCreateAdminGroup(BitIndex uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup {

	key := BitIndex

	if v, ok := t.AdminGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAdminGroup(BitIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAdminGroup got unexpected error: %v", err))
	}
	return v
}

// GetAdminGroup retrieves the value with the specified key from
// the AdminGroup map field of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetAdminGroup(BitIndex uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup {

	if t == nil {
		return nil
	}

	key := BitIndex

	if lm, ok := t.AdminGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteAdminGroup deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) DeleteAdminGroup(BitIndex uint8) {
	key := BitIndex

	delete(t.AdminGroup, key)
}

// AppendAdminGroup appends the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup struct to the
// list AdminGroup of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) AppendAdminGroup(v *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) error {
	if v.BitIndex == nil {
		return fmt.Errorf("invalid nil key received for BitIndex")
	}

	key := *v.BitIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AdminGroup == nil {
		t.AdminGroup = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup)
	}

	if _, ok := t.AdminGroup[key]; ok {
		return fmt.Errorf("duplicate key for list AdminGroup %v", key)
	}

	t.AdminGroup[key] = v
	return nil
}

// NewUnreservedBandwidth creates a new entry in the UnreservedBandwidth list of the
// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) NewUnreservedBandwidth(Priority uint8) (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnreservedBandwidth == nil {
		t.UnreservedBandwidth = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth)
	}

	key := Priority

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UnreservedBandwidth[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UnreservedBandwidth", key)
	}

	t.UnreservedBandwidth[key] = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth{
		Priority: &Priority,
	}

	return t.UnreservedBandwidth[key], nil
}

// RenameUnreservedBandwidth renames an entry in the list UnreservedBandwidth within
// the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) RenameUnreservedBandwidth(oldK, newK uint8) error {
	if _, ok := t.UnreservedBandwidth[newK]; ok {
		return fmt.Errorf("key %v already exists in UnreservedBandwidth", newK)
	}

	e, ok := t.UnreservedBandwidth[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UnreservedBandwidth", oldK)
	}
	e.Priority = &newK

	t.UnreservedBandwidth[newK] = e
	delete(t.UnreservedBandwidth, oldK)
	return nil
}

// GetOrCreateUnreservedBandwidth retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetOrCreateUnreservedBandwidth(Priority uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth {

	key := Priority

	if v, ok := t.UnreservedBandwidth[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUnreservedBandwidth(Priority)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUnreservedBandwidth got unexpected error: %v", err))
	}
	return v
}

// GetUnreservedBandwidth retrieves the value with the specified key from
// the UnreservedBandwidth map field of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetUnreservedBandwidth(Priority uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth {

	if t == nil {
		return nil
	}

	key := Priority

	if lm, ok := t.UnreservedBandwidth[key]; ok {
		return lm
	}
	return nil
}

// DeleteUnreservedBandwidth deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) DeleteUnreservedBandwidth(Priority uint8) {
	key := Priority

	delete(t.UnreservedBandwidth, key)
}

// AppendUnreservedBandwidth appends the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth struct to the
// list UnreservedBandwidth of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) AppendUnreservedBandwidth(v *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) error {
	if v.Priority == nil {
		return fmt.Errorf("invalid nil key received for Priority")
	}

	key := *v.Priority

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UnreservedBandwidth == nil {
		t.UnreservedBandwidth = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth)
	}

	if _, ok := t.UnreservedBandwidth[key]; ok {
		return fmt.Errorf("duplicate key for list UnreservedBandwidth %v", key)
	}

	t.UnreservedBandwidth[key] = v
	return nil
}

// GetOrCreateUnknownSubtlv retrieves the value of the UnknownSubtlv field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetOrCreateUnknownSubtlv() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv {
	if t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	t.UnknownSubtlv = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv{}
	return t.UnknownSubtlv
}

// GetUnknownSubtlv returns the value of the UnknownSubtlv struct pointer
// from NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv. If the receiver or the field UnknownSubtlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetUnknownSubtlv() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv {
	if t != nil && t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	return nil
}

// GetLinkId retrieves the value of the leaf LinkId from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkId is set, it can
// safely use t.GetLinkId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetLinkId() string {
	if t == nil || t.LinkId == nil {
		return ""
	}
	return *t.LinkId
}

// GetLinkType retrieves the value of the leaf LinkType from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkType is set, it can
// safely use t.GetLinkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetLinkType() E_Ospfv2_SubTlv_LinkType {
	if t == nil || t.LinkType == 0 {
		return 0
	}
	return t.LinkType
}

// GetLocalIpAddress retrieves the value of the leaf LocalIpAddress from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpAddress is set, it can
// safely use t.GetLocalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetLocalIpAddress() []string {
	if t == nil || t.LocalIpAddress == nil {
		return nil
	}
	return t.LocalIpAddress
}

// GetMaximumBandwidth retrieves the value of the leaf MaximumBandwidth from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumBandwidth is set, it can
// safely use t.GetMaximumBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumBandwidth == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetMaximumBandwidth() Binary {
	if t == nil || t.MaximumBandwidth == nil {
		return nil
	}
	return t.MaximumBandwidth
}

// GetMaximumReservableBandwidth retrieves the value of the leaf MaximumReservableBandwidth from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumReservableBandwidth is set, it can
// safely use t.GetMaximumReservableBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumReservableBandwidth == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetMaximumReservableBandwidth() Binary {
	if t == nil || t.MaximumReservableBandwidth == nil {
		return nil
	}
	return t.MaximumReservableBandwidth
}

// GetMetric retrieves the value of the leaf Metric from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetRemoteIpAddress() []string {
	if t == nil || t.RemoteIpAddress == nil {
		return nil
	}
	return t.RemoteIpAddress
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetType() NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// GetUnknownType retrieves the value of the leaf UnknownType from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownType is set, it can
// safely use t.GetUnknownType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetUnknownType() uint16 {
	if t == nil || t.UnknownType == nil {
		return 0
	}
	return *t.UnknownType
}

// GetUnknownValue retrieves the value of the leaf UnknownValue from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnknownValue is set, it can
// safely use t.GetUnknownValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnknownValue == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) GetUnknownValue() Binary {
	if t == nil || t.UnknownValue == nil {
		return nil
	}
	return t.UnknownValue
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/administrative-groups/admin-group YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup struct {
	BitIndex *uint8 `path:"state/bit-index|bit-index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"bit-index" shadow-module:"openconfig-network-instance"`
	Set      *bool  `path:"state/set" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) IsYANGGoStruct() {
}

// GetBitIndex retrieves the value of the leaf BitIndex from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitIndex is set, it can
// safely use t.GetBitIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) GetBitIndex() uint8 {
	if t == nil || t.BitIndex == nil {
		return 0
	}
	return *t.BitIndex
}

// GetSet retrieves the value of the leaf Set from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) GetSet() bool {
	if t == nil || t.Set == nil {
		return false
	}
	return *t.Set
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BitIndex == nil {
		return nil, fmt.Errorf("nil value for key BitIndex")
	}

	return map[string]interface{}{
		"bit-index": *t.BitIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_AdminGroup) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/unknown-subtlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv struct {
	Length *uint16 `path:"state/length" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   *uint16 `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	Value  Binary  `path:"state/value" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) GetType() uint16 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnknownSubtlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/link/sub-tlvs/sub-tlv/unreserved-bandwidths/unreserved-bandwidth YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth struct {
	Priority            *uint8 `path:"state/priority|priority" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"priority" shadow-module:"openconfig-network-instance"`
	UnreservedBandwidth Binary `path:"state/unreserved-bandwidth" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) IsYANGGoStruct() {
}

// GetPriority retrieves the value of the leaf Priority from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetUnreservedBandwidth retrieves the value of the leaf UnreservedBandwidth from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnreservedBandwidth is set, it can
// safely use t.GetUnreservedBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnreservedBandwidth == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) GetUnreservedBandwidth() Binary {
	if t == nil || t.UnreservedBandwidth == nil {
		return nil
	}
	return t.UnreservedBandwidth
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Priority == nil {
		return nil, fmt.Errorf("nil value for key Priority")
	}

	return map[string]interface{}{
		"priority": *t.Priority,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_Link_SubTlv_UnreservedBandwidth) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute struct {
	SubTlv []*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv `path:"sub-tlvs/sub-tlv" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute) IsYANGGoStruct() {
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv struct {
	LocalIpv4Addresses []string                                                                                                                   `path:"state/local-ipv4-addresses" module:"openconfig-network-instance/openconfig-network-instance"`
	LocalIpv6Addresses []string                                                                                                                   `path:"state/local-ipv6-addresses" module:"openconfig-network-instance/openconfig-network-instance"`
	Type               NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union     `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	UnknownSubtlv      *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv `path:"unknown-subtlv" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) IsYANGGoStruct() {
}

// GetOrCreateUnknownSubtlv retrieves the value of the UnknownSubtlv field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) GetOrCreateUnknownSubtlv() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv {
	if t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	t.UnknownSubtlv = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv{}
	return t.UnknownSubtlv
}

// GetUnknownSubtlv returns the value of the UnknownSubtlv struct pointer
// from NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv. If the receiver or the field UnknownSubtlv is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) GetUnknownSubtlv() *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv {
	if t != nil && t.UnknownSubtlv != nil {
		return t.UnknownSubtlv
	}
	return nil
}

// GetLocalIpv4Addresses retrieves the value of the leaf LocalIpv4Addresses from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpv4Addresses is set, it can
// safely use t.GetLocalIpv4Addresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpv4Addresses == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) GetLocalIpv4Addresses() []string {
	if t == nil || t.LocalIpv4Addresses == nil {
		return nil
	}
	return t.LocalIpv4Addresses
}

// GetLocalIpv6Addresses retrieves the value of the leaf LocalIpv6Addresses from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpv6Addresses is set, it can
// safely use t.GetLocalIpv6Addresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpv6Addresses == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) GetLocalIpv6Addresses() []string {
	if t == nil || t.LocalIpv6Addresses == nil {
		return nil
	}
	return t.LocalIpv6Addresses
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) GetType() NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_Type_Union {
	if t == nil || t.Type == nil {
		return nil
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/node-attribute/sub-tlvs/sub-tlv/unknown-subtlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv struct {
	Length *uint16 `path:"state/length" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   *uint16 `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	Value  Binary  `path:"state/value" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) GetType() uint16 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_NodeAttribute_SubTlv_UnknownSubtlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/router-address YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress struct {
	Address *string `path:"state/address" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_RouterAddress) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/traffic-engineering/tlvs/tlv/unknown-tlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv struct {
	Length *uint16 `path:"state/length" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   *uint16 `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	Value  Binary  `path:"state/value" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) GetType() uint16 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_TrafficEngineering_Tlv_UnknownTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/opaque-lsa/unknown-tlv YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv struct {
	Length *uint16 `path:"state/length" module:"openconfig-network-instance/openconfig-network-instance"`
	Type   *uint16 `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	Value  Binary  `path:"state/value" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) IsYANGGoStruct() {}

// GetLength retrieves the value of the leaf Length from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) GetLength() uint16 {
	if t == nil || t.Length == nil {
		return 0
	}
	return *t.Length
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) GetType() uint16 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) GetValue() Binary {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_OpaqueLsa_UnknownTlv) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa struct {
	LinkData         NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union           `path:"state/link-data" module:"openconfig-network-instance/openconfig-network-instance"`
	LinkId           *string                                                                                  `path:"state/link-id" module:"openconfig-network-instance/openconfig-network-instance"`
	Metric           *uint16                                                                                  `path:"state/metric" module:"openconfig-network-instance/openconfig-network-instance"`
	NumberLinks      *uint16                                                                                  `path:"state/number-links" module:"openconfig-network-instance/openconfig-network-instance"`
	NumberTosMetrics *uint16                                                                                  `path:"state/number-tos-metrics" module:"openconfig-network-instance/openconfig-network-instance"`
	Type             E_OspfTypes_ROUTER_LSA_TYPES                                                             `path:"state/type" module:"openconfig-network-instance/openconfig-network-instance"`
	TypeOfService    map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService `path:"types-of-service/type-of-service" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) IsYANGGoStruct() {}

// NewTypeOfService creates a new entry in the TypeOfService list of the
// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) NewTypeOfService(Tos uint8) (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService)
	}

	key := Tos

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeOfService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeOfService", key)
	}

	t.TypeOfService[key] = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService{
		Tos: &Tos,
	}

	return t.TypeOfService[key], nil
}

// RenameTypeOfService renames an entry in the list TypeOfService within
// the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) RenameTypeOfService(oldK, newK uint8) error {
	if _, ok := t.TypeOfService[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeOfService", newK)
	}

	e, ok := t.TypeOfService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeOfService", oldK)
	}
	e.Tos = &newK

	t.TypeOfService[newK] = e
	delete(t.TypeOfService, oldK)
	return nil
}

// GetOrCreateTypeOfService retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetOrCreateTypeOfService(Tos uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService {

	key := Tos

	if v, ok := t.TypeOfService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeOfService(Tos)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeOfService got unexpected error: %v", err))
	}
	return v
}

// GetTypeOfService retrieves the value with the specified key from
// the TypeOfService map field of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetTypeOfService(Tos uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService {

	if t == nil {
		return nil
	}

	key := Tos

	if lm, ok := t.TypeOfService[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeOfService deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) DeleteTypeOfService(Tos uint8) {
	key := Tos

	delete(t.TypeOfService, key)
}

// AppendTypeOfService appends the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService struct to the
// list TypeOfService of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) AppendTypeOfService(v *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) error {
	if v.Tos == nil {
		return fmt.Errorf("invalid nil key received for Tos")
	}

	key := *v.Tos

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService)
	}

	if _, ok := t.TypeOfService[key]; ok {
		return fmt.Errorf("duplicate key for list TypeOfService %v", key)
	}

	t.TypeOfService[key] = v
	return nil
}

// GetLinkData retrieves the value of the leaf LinkData from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkData is set, it can
// safely use t.GetLinkData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkData == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetLinkData() NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_LinkData_Union {
	if t == nil || t.LinkData == nil {
		return nil
	}
	return t.LinkData
}

// GetLinkId retrieves the value of the leaf LinkId from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkId is set, it can
// safely use t.GetLinkId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetLinkId() string {
	if t == nil || t.LinkId == nil {
		return ""
	}
	return *t.LinkId
}

// GetMetric retrieves the value of the leaf Metric from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNumberLinks retrieves the value of the leaf NumberLinks from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLinks is set, it can
// safely use t.GetNumberLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLinks == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetNumberLinks() uint16 {
	if t == nil || t.NumberLinks == nil {
		return 0
	}
	return *t.NumberLinks
}

// GetNumberTosMetrics retrieves the value of the leaf NumberTosMetrics from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberTosMetrics is set, it can
// safely use t.GetNumberTosMetrics() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberTosMetrics == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetNumberTosMetrics() uint16 {
	if t == nil || t.NumberTosMetrics == nil {
		return 0
	}
	return *t.NumberTosMetrics
}

// GetType retrieves the value of the leaf Type from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) GetType() E_OspfTypes_ROUTER_LSA_TYPES {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/router-lsa/types-of-service/type-of-service YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService struct {
	Metric *uint16 `path:"state/metric" module:"openconfig-network-instance/openconfig-network-instance"`
	Tos    *uint8  `path:"state/tos|tos" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"tos" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) IsYANGGoStruct() {
}

// GetMetric retrieves the value of the leaf Metric from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetTos retrieves the value of the leaf Tos from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tos is set, it can
// safely use t.GetTos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tos == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) GetTos() uint8 {
	if t == nil || t.Tos == nil {
		return 0
	}
	return *t.Tos
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tos == nil {
		return nil, fmt.Errorf("nil value for key Tos")
	}

	return map[string]interface{}{
		"tos": *t.Tos,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_RouterLsa_TypeOfService) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/summary-lsa YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa struct {
	NetworkMask   *uint8                                                                                    `path:"state/network-mask" module:"openconfig-network-instance/openconfig-network-instance"`
	TypeOfService map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService `path:"types-of-service/type-of-service" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) IsYANGGoStruct() {}

// NewTypeOfService creates a new entry in the TypeOfService list of the
// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) NewTypeOfService(Tos uint8) (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService)
	}

	key := Tos

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TypeOfService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TypeOfService", key)
	}

	t.TypeOfService[key] = &NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService{
		Tos: &Tos,
	}

	return t.TypeOfService[key], nil
}

// RenameTypeOfService renames an entry in the list TypeOfService within
// the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) RenameTypeOfService(oldK, newK uint8) error {
	if _, ok := t.TypeOfService[newK]; ok {
		return fmt.Errorf("key %v already exists in TypeOfService", newK)
	}

	e, ok := t.TypeOfService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TypeOfService", oldK)
	}
	e.Tos = &newK

	t.TypeOfService[newK] = e
	delete(t.TypeOfService, oldK)
	return nil
}

// GetOrCreateTypeOfService retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) GetOrCreateTypeOfService(Tos uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService {

	key := Tos

	if v, ok := t.TypeOfService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTypeOfService(Tos)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTypeOfService got unexpected error: %v", err))
	}
	return v
}

// GetTypeOfService retrieves the value with the specified key from
// the TypeOfService map field of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) GetTypeOfService(Tos uint8) *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService {

	if t == nil {
		return nil
	}

	key := Tos

	if lm, ok := t.TypeOfService[key]; ok {
		return lm
	}
	return nil
}

// DeleteTypeOfService deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) DeleteTypeOfService(Tos uint8) {
	key := Tos

	delete(t.TypeOfService, key)
}

// AppendTypeOfService appends the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService struct to the
// list TypeOfService of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) AppendTypeOfService(v *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) error {
	if v.Tos == nil {
		return fmt.Errorf("invalid nil key received for Tos")
	}

	key := *v.Tos

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TypeOfService == nil {
		t.TypeOfService = make(map[uint8]*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService)
	}

	if _, ok := t.TypeOfService[key]; ok {
		return fmt.Errorf("duplicate key for list TypeOfService %v", key)
	}

	t.TypeOfService[key] = v
	return nil
}

// GetNetworkMask retrieves the value of the leaf NetworkMask from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkMask is set, it can
// safely use t.GetNetworkMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkMask == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) GetNetworkMask() uint8 {
	if t == nil || t.NetworkMask == nil {
		return 0
	}
	return *t.NetworkMask
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/lsdb/lsa-types/lsa-type/lsas/lsa/summary-lsa/types-of-service/type-of-service YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService struct {
	Metric *uint16 `path:"state/metric" module:"openconfig-network-instance/openconfig-network-instance"`
	Tos    *uint8  `path:"state/tos|tos" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"tos" shadow-module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) IsYANGGoStruct() {
}

// GetMetric retrieves the value of the leaf Metric from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) GetMetric() uint16 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetTos retrieves the value of the leaf Tos from the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tos is set, it can
// safely use t.GetTos() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tos == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) GetTos() uint8 {
	if t == nil || t.Tos == nil {
		return 0
	}
	return *t.Tos
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Tos == nil {
		return nil, fmt.Errorf("nil value for key Tos")
	}

	return map[string]interface{}{
		"tos": *t.Tos,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService.
func (*NetworkInstance_Protocol_Ospfv2_Area_Lsdb_LsaType_Lsa_SummaryLsa_TypeOfService) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_Mpls represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/mpls YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_Mpls struct {
	TrafficEngineeringEnabled *bool `path:"config/traffic-engineering-enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/traffic-engineering-enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_Mpls) IsYANGGoStruct() {}

// GetTrafficEngineeringEnabled retrieves the value of the leaf TrafficEngineeringEnabled from the NetworkInstance_Protocol_Ospfv2_Area_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficEngineeringEnabled is set, it can
// safely use t.GetTrafficEngineeringEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficEngineeringEnabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Mpls) GetTrafficEngineeringEnabled() bool {
	if t == nil || t.TrafficEngineeringEnabled == nil {
		return false
	}
	return *t.TrafficEngineeringEnabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_Mpls.
func (*NetworkInstance_Protocol_Ospfv2_Area_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Area_VirtualLink represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/virtual-links/virtual-link YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_VirtualLink struct {
	AdjacencyState            E_OspfTypes_OSPF_NEIGHBOR_STATE `path:"state/adjacency-state" module:"openconfig-network-instance/openconfig-network-instance"`
	BackupDesignatedRouter    *string                         `path:"state/backup-designated-router" module:"openconfig-network-instance/openconfig-network-instance"`
	DeadTime                  *uint64                         `path:"state/dead-time" module:"openconfig-network-instance/openconfig-network-instance"`
	DesignatedRouter          *string                         `path:"state/designated-router" module:"openconfig-network-instance/openconfig-network-instance"`
	LastEstablishedTime       *uint64                         `path:"state/last-established-time" module:"openconfig-network-instance/openconfig-network-instance"`
	OptionalCapabilities      *string                         `path:"state/optional-capabilities" module:"openconfig-network-instance/openconfig-network-instance"`
	Priority                  *uint8                          `path:"state/priority" module:"openconfig-network-instance/openconfig-network-instance"`
	RemoteRouterId            *string                         `path:"config/remote-router-id|remote-router-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/remote-router-id|remote-router-id" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	RetransmissionQueueLength *uint32                         `path:"state/retransmission-queue-length" module:"openconfig-network-instance/openconfig-network-instance"`
	StateChanges              *uint32                         `path:"state/state-changes" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Area_VirtualLink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) IsYANGGoStruct() {}

// GetAdjacencyState retrieves the value of the leaf AdjacencyState from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdjacencyState is set, it can
// safely use t.GetAdjacencyState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdjacencyState == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetAdjacencyState() E_OspfTypes_OSPF_NEIGHBOR_STATE {
	if t == nil || t.AdjacencyState == 0 {
		return 0
	}
	return t.AdjacencyState
}

// GetBackupDesignatedRouter retrieves the value of the leaf BackupDesignatedRouter from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BackupDesignatedRouter is set, it can
// safely use t.GetBackupDesignatedRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BackupDesignatedRouter == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetBackupDesignatedRouter() string {
	if t == nil || t.BackupDesignatedRouter == nil {
		return ""
	}
	return *t.BackupDesignatedRouter
}

// GetDeadTime retrieves the value of the leaf DeadTime from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTime is set, it can
// safely use t.GetDeadTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetDeadTime() uint64 {
	if t == nil || t.DeadTime == nil {
		return 0
	}
	return *t.DeadTime
}

// GetDesignatedRouter retrieves the value of the leaf DesignatedRouter from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRouter is set, it can
// safely use t.GetDesignatedRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRouter == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetDesignatedRouter() string {
	if t == nil || t.DesignatedRouter == nil {
		return ""
	}
	return *t.DesignatedRouter
}

// GetLastEstablishedTime retrieves the value of the leaf LastEstablishedTime from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastEstablishedTime is set, it can
// safely use t.GetLastEstablishedTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastEstablishedTime == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetLastEstablishedTime() uint64 {
	if t == nil || t.LastEstablishedTime == nil {
		return 0
	}
	return *t.LastEstablishedTime
}

// GetOptionalCapabilities retrieves the value of the leaf OptionalCapabilities from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionalCapabilities is set, it can
// safely use t.GetOptionalCapabilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionalCapabilities == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetOptionalCapabilities() string {
	if t == nil || t.OptionalCapabilities == nil {
		return ""
	}
	return *t.OptionalCapabilities
}

// GetPriority retrieves the value of the leaf Priority from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRemoteRouterId retrieves the value of the leaf RemoteRouterId from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteRouterId is set, it can
// safely use t.GetRemoteRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteRouterId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetRemoteRouterId() string {
	if t == nil || t.RemoteRouterId == nil {
		return ""
	}
	return *t.RemoteRouterId
}

// GetRetransmissionQueueLength retrieves the value of the leaf RetransmissionQueueLength from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmissionQueueLength is set, it can
// safely use t.GetRetransmissionQueueLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmissionQueueLength == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetRetransmissionQueueLength() uint32 {
	if t == nil || t.RetransmissionQueueLength == nil {
		return 0
	}
	return *t.RetransmissionQueueLength
}

// GetStateChanges retrieves the value of the leaf StateChanges from the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StateChanges is set, it can
// safely use t.GetStateChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StateChanges == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) GetStateChanges() uint32 {
	if t == nil || t.StateChanges == nil {
		return 0
	}
	return *t.StateChanges
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Ospfv2_Area_VirtualLink struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RemoteRouterId == nil {
		return nil, fmt.Errorf("nil value for key RemoteRouterId")
	}

	return map[string]interface{}{
		"remote-router-id": *t.RemoteRouterId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Area_VirtualLink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Area_VirtualLink.
func (*NetworkInstance_Protocol_Ospfv2_Area_VirtualLink) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global struct {
	GracefulRestart            *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart                                                                                      `path:"graceful-restart" module:"openconfig-network-instance"`
	HideTransitOnlyNetworks    *bool                                                                                                                                        `path:"config/hide-transit-only-networks" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/hide-transit-only-networks" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	IgpShortcuts               *bool                                                                                                                                        `path:"config/igp-shortcuts" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/igp-shortcuts" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	InterAreaPropagationPolicy map[NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key]*NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy `path:"inter-area-propagation-policies/inter-area-propagation-policy" module:"openconfig-network-instance/openconfig-network-instance"`
	LogAdjacencyChanges        *bool                                                                                                                                        `path:"config/log-adjacency-changes" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/log-adjacency-changes" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Mpls                       *NetworkInstance_Protocol_Ospfv2_Global_Mpls                                                                                                 `path:"mpls" module:"openconfig-network-instance"`
	RouterId                   *string                                                                                                                                      `path:"config/router-id" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/router-id" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	SummaryRouteCostMode       E_Ospfv2_Global_SummaryRouteCostMode                                                                                                         `path:"config/summary-route-cost-mode" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/summary-route-cost-mode" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Timers                     *NetworkInstance_Protocol_Ospfv2_Global_Timers                                                                                               `path:"timers" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global) IsYANGGoStruct() {}

// NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key represents the key for list InterAreaPropagationPolicy of element /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global.
type NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key struct {
	SrcArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union `path:"src-area"`
	DstArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union `path:"dst-area"`
}

// NewInterAreaPropagationPolicy creates a new entry in the InterAreaPropagationPolicy list of the
// NetworkInstance_Protocol_Ospfv2_Global struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Ospfv2_Global) NewInterAreaPropagationPolicy(SrcArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, DstArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union) (*NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key]*NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy)
	}

	key := NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.InterAreaPropagationPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list InterAreaPropagationPolicy", key)
	}

	t.InterAreaPropagationPolicy[key] = &NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	return t.InterAreaPropagationPolicy[key], nil
}

// RenameInterAreaPropagationPolicy renames an entry in the list InterAreaPropagationPolicy within
// the NetworkInstance_Protocol_Ospfv2_Global struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Ospfv2_Global) RenameInterAreaPropagationPolicy(oldK, newK NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key) error {
	if _, ok := t.InterAreaPropagationPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in InterAreaPropagationPolicy", newK)
	}

	e, ok := t.InterAreaPropagationPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in InterAreaPropagationPolicy", oldK)
	}
	e.SrcArea = newK.SrcArea
	e.DstArea = newK.DstArea

	t.InterAreaPropagationPolicy[newK] = e
	delete(t.InterAreaPropagationPolicy, oldK)
	return nil
}

// GetOrCreateInterAreaPropagationPolicy retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetOrCreateInterAreaPropagationPolicy(SrcArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, DstArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union) *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy {

	key := NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	if v, ok := t.InterAreaPropagationPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterAreaPropagationPolicy(SrcArea, DstArea)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterAreaPropagationPolicy got unexpected error: %v", err))
	}
	return v
}

// GetInterAreaPropagationPolicy retrieves the value with the specified key from
// the InterAreaPropagationPolicy map field of NetworkInstance_Protocol_Ospfv2_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetInterAreaPropagationPolicy(SrcArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, DstArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union) *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy {

	if t == nil {
		return nil
	}

	key := NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	if lm, ok := t.InterAreaPropagationPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterAreaPropagationPolicy deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Ospfv2_Global. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Ospfv2_Global) DeleteInterAreaPropagationPolicy(SrcArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, DstArea NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union) {
	key := NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key{
		SrcArea: SrcArea,
		DstArea: DstArea,
	}

	delete(t.InterAreaPropagationPolicy, key)
}

// AppendInterAreaPropagationPolicy appends the supplied NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy struct to the
// list InterAreaPropagationPolicy of NetworkInstance_Protocol_Ospfv2_Global. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Ospfv2_Global) AppendInterAreaPropagationPolicy(v *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) error {
	key := NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key{
		SrcArea: v.SrcArea,
		DstArea: v.DstArea,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.InterAreaPropagationPolicy == nil {
		t.InterAreaPropagationPolicy = make(map[NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy_Key]*NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy)
	}

	if _, ok := t.InterAreaPropagationPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list InterAreaPropagationPolicy %v", key)
	}

	t.InterAreaPropagationPolicy[key] = v
	return nil
}

// GetOrCreateGracefulRestart retrieves the value of the GracefulRestart field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetOrCreateGracefulRestart() *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart {
	if t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	t.GracefulRestart = &NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart{}
	return t.GracefulRestart
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetOrCreateMpls() *NetworkInstance_Protocol_Ospfv2_Global_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NetworkInstance_Protocol_Ospfv2_Global_Mpls{}
	return t.Mpls
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetOrCreateTimers() *NetworkInstance_Protocol_Ospfv2_Global_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NetworkInstance_Protocol_Ospfv2_Global_Timers{}
	return t.Timers
}

// GetGracefulRestart returns the value of the GracefulRestart struct pointer
// from NetworkInstance_Protocol_Ospfv2_Global. If the receiver or the field GracefulRestart is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetGracefulRestart() *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart {
	if t != nil && t.GracefulRestart != nil {
		return t.GracefulRestart
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from NetworkInstance_Protocol_Ospfv2_Global. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetMpls() *NetworkInstance_Protocol_Ospfv2_Global_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NetworkInstance_Protocol_Ospfv2_Global. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetTimers() *NetworkInstance_Protocol_Ospfv2_Global_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetHideTransitOnlyNetworks retrieves the value of the leaf HideTransitOnlyNetworks from the NetworkInstance_Protocol_Ospfv2_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HideTransitOnlyNetworks is set, it can
// safely use t.GetHideTransitOnlyNetworks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HideTransitOnlyNetworks == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetHideTransitOnlyNetworks() bool {
	if t == nil || t.HideTransitOnlyNetworks == nil {
		return false
	}
	return *t.HideTransitOnlyNetworks
}

// GetIgpShortcuts retrieves the value of the leaf IgpShortcuts from the NetworkInstance_Protocol_Ospfv2_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgpShortcuts is set, it can
// safely use t.GetIgpShortcuts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgpShortcuts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetIgpShortcuts() bool {
	if t == nil || t.IgpShortcuts == nil {
		return false
	}
	return *t.IgpShortcuts
}

// GetLogAdjacencyChanges retrieves the value of the leaf LogAdjacencyChanges from the NetworkInstance_Protocol_Ospfv2_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogAdjacencyChanges is set, it can
// safely use t.GetLogAdjacencyChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogAdjacencyChanges == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetLogAdjacencyChanges() bool {
	if t == nil || t.LogAdjacencyChanges == nil {
		return false
	}
	return *t.LogAdjacencyChanges
}

// GetRouterId retrieves the value of the leaf RouterId from the NetworkInstance_Protocol_Ospfv2_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterId is set, it can
// safely use t.GetRouterId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetRouterId() string {
	if t == nil || t.RouterId == nil {
		return ""
	}
	return *t.RouterId
}

// GetSummaryRouteCostMode retrieves the value of the leaf SummaryRouteCostMode from the NetworkInstance_Protocol_Ospfv2_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummaryRouteCostMode is set, it can
// safely use t.GetSummaryRouteCostMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummaryRouteCostMode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global) GetSummaryRouteCostMode() E_Ospfv2_Global_SummaryRouteCostMode {
	if t == nil || t.SummaryRouteCostMode == 0 {
		return Ospfv2_Global_SummaryRouteCostMode_RFC2328_COMPATIBLE
	}
	return t.SummaryRouteCostMode
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global.
func (*NetworkInstance_Protocol_Ospfv2_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/graceful-restart YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart struct {
	Enabled    *bool `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	HelperOnly *bool `path:"config/helper-only" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/helper-only" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelperOnly retrieves the value of the leaf HelperOnly from the NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperOnly is set, it can
// safely use t.GetHelperOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperOnly == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart) GetHelperOnly() bool {
	if t == nil || t.HelperOnly == nil {
		return false
	}
	return *t.HelperOnly
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart.
func (*NetworkInstance_Protocol_Ospfv2_Global_GracefulRestart) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/inter-area-propagation-policies/inter-area-propagation-policy YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy struct {
	DefaultImportPolicy E_RoutingPolicy_DefaultPolicyType                     `path:"config/default-import-policy" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/default-import-policy" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	DstArea             NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union `path:"config/dst-area|dst-area" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/dst-area|dst-area" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ImportPolicy        []string                                              `path:"config/import-policy" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/import-policy" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	SrcArea             NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union `path:"config/src-area|src-area" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/src-area|src-area" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) IsYANGGoStruct() {}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultImportPolicy is set, it can
// safely use t.GetDefaultImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetDstArea retrieves the value of the leaf DstArea from the NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstArea is set, it can
// safely use t.GetDstArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstArea == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) GetDstArea() NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union {
	if t == nil || t.DstArea == nil {
		return nil
	}
	return t.DstArea
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetSrcArea retrieves the value of the leaf SrcArea from the NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcArea is set, it can
// safely use t.GetSrcArea() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcArea == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) GetSrcArea() NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union {
	if t == nil || t.SrcArea == nil {
		return nil
	}
	return t.SrcArea
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"dst-area": t.DstArea,
		"src-area": t.SrcArea,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy.
func (*NetworkInstance_Protocol_Ospfv2_Global_InterAreaPropagationPolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_Mpls represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_Mpls struct {
	IgpLdpSync                   *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync `path:"igp-ldp-sync" module:"openconfig-network-instance"`
	TrafficEngineeringExtensions *bool                                                   `path:"config/traffic-engineering-extensions" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/traffic-engineering-extensions" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_Mpls) IsYANGGoStruct() {}

// GetOrCreateIgpLdpSync retrieves the value of the IgpLdpSync field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls) GetOrCreateIgpLdpSync() *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync {
	if t.IgpLdpSync != nil {
		return t.IgpLdpSync
	}
	t.IgpLdpSync = &NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync{}
	return t.IgpLdpSync
}

// GetIgpLdpSync returns the value of the IgpLdpSync struct pointer
// from NetworkInstance_Protocol_Ospfv2_Global_Mpls. If the receiver or the field IgpLdpSync is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls) GetIgpLdpSync() *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync {
	if t != nil && t.IgpLdpSync != nil {
		return t.IgpLdpSync
	}
	return nil
}

// GetTrafficEngineeringExtensions retrieves the value of the leaf TrafficEngineeringExtensions from the NetworkInstance_Protocol_Ospfv2_Global_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficEngineeringExtensions is set, it can
// safely use t.GetTrafficEngineeringExtensions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficEngineeringExtensions == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls) GetTrafficEngineeringExtensions() bool {
	if t == nil || t.TrafficEngineeringExtensions == nil {
		return false
	}
	return *t.TrafficEngineeringExtensions
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_Mpls.
func (*NetworkInstance_Protocol_Ospfv2_Global_Mpls) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/mpls/igp-ldp-sync YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync struct {
	Enabled            *bool   `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	PostSessionUpDelay *uint32 `path:"config/post-session-up-delay" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/post-session-up-delay" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetPostSessionUpDelay retrieves the value of the leaf PostSessionUpDelay from the NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PostSessionUpDelay is set, it can
// safely use t.GetPostSessionUpDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PostSessionUpDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) GetPostSessionUpDelay() uint32 {
	if t == nil || t.PostSessionUpDelay == nil {
		return 0
	}
	return *t.PostSessionUpDelay
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync.
func (*NetworkInstance_Protocol_Ospfv2_Global_Mpls_IgpLdpSync) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_Timers struct {
	LsaGeneration *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration `path:"lsa-generation" module:"openconfig-network-instance"`
	MaxMetric     *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric     `path:"max-metric" module:"openconfig-network-instance"`
	Spf           *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf           `path:"spf" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers) IsYANGGoStruct() {}

// GetOrCreateLsaGeneration retrieves the value of the LsaGeneration field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) GetOrCreateLsaGeneration() *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration {
	if t.LsaGeneration != nil {
		return t.LsaGeneration
	}
	t.LsaGeneration = &NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration{}
	return t.LsaGeneration
}

// GetOrCreateMaxMetric retrieves the value of the MaxMetric field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) GetOrCreateMaxMetric() *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric {
	if t.MaxMetric != nil {
		return t.MaxMetric
	}
	t.MaxMetric = &NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric{}
	return t.MaxMetric
}

// GetOrCreateSpf retrieves the value of the Spf field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) GetOrCreateSpf() *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf {
	if t.Spf != nil {
		return t.Spf
	}
	t.Spf = &NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf{}
	return t.Spf
}

// GetLsaGeneration returns the value of the LsaGeneration struct pointer
// from NetworkInstance_Protocol_Ospfv2_Global_Timers. If the receiver or the field LsaGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) GetLsaGeneration() *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration {
	if t != nil && t.LsaGeneration != nil {
		return t.LsaGeneration
	}
	return nil
}

// GetMaxMetric returns the value of the MaxMetric struct pointer
// from NetworkInstance_Protocol_Ospfv2_Global_Timers. If the receiver or the field MaxMetric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) GetMaxMetric() *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric {
	if t != nil && t.MaxMetric != nil {
		return t.MaxMetric
	}
	return nil
}

// GetSpf returns the value of the Spf struct pointer
// from NetworkInstance_Protocol_Ospfv2_Global_Timers. If the receiver or the field Spf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) GetSpf() *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf {
	if t != nil && t.Spf != nil {
		return t.Spf
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_Timers.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/lsa-generation YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration struct {
	InitialDelay *uint32                          `path:"config/initial-delay" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/initial-delay" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	MaximumDelay *uint32                          `path:"config/maximum-delay" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/maximum-delay" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	TimerType    E_Ospfv2_LsaGeneration_TimerType `path:"state/timer-type" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) IsYANGGoStruct() {}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetMaximumDelay retrieves the value of the leaf MaximumDelay from the NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDelay is set, it can
// safely use t.GetMaximumDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) GetMaximumDelay() uint32 {
	if t == nil || t.MaximumDelay == nil {
		return 0
	}
	return *t.MaximumDelay
}

// GetTimerType retrieves the value of the leaf TimerType from the NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimerType is set, it can
// safely use t.GetTimerType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimerType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) GetTimerType() E_Ospfv2_LsaGeneration_TimerType {
	if t == nil || t.TimerType == 0 {
		return 0
	}
	return t.TimerType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers_LsaGeneration) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/max-metric YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric struct {
	Include []E_OspfTypes_MAX_METRIC_INCLUDE `path:"config/include" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/include" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Set     *bool                            `path:"config/set" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/set" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Timeout *uint64                          `path:"config/timeout" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/timeout" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Trigger []E_OspfTypes_MAX_METRIC_TRIGGER `path:"config/trigger" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/trigger" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) IsYANGGoStruct() {}

// GetInclude retrieves the value of the leaf Include from the NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Include is set, it can
// safely use t.GetInclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Include == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) GetInclude() []E_OspfTypes_MAX_METRIC_INCLUDE {
	if t == nil || t.Include == nil {
		return nil
	}
	return t.Include
}

// GetSet retrieves the value of the leaf Set from the NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Set is set, it can
// safely use t.GetSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Set == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) GetSet() bool {
	if t == nil || t.Set == nil {
		return false
	}
	return *t.Set
}

// GetTimeout retrieves the value of the leaf Timeout from the NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) GetTimeout() uint64 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// GetTrigger retrieves the value of the leaf Trigger from the NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Trigger is set, it can
// safely use t.GetTrigger() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Trigger == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) GetTrigger() []E_OspfTypes_MAX_METRIC_TRIGGER {
	if t == nil || t.Trigger == nil {
		return nil
	}
	return t.Trigger
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers_MaxMetric) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/global/timers/spf YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf struct {
	InitialDelay *uint32                          `path:"config/initial-delay" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/initial-delay" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	MaximumDelay *uint32                          `path:"config/maximum-delay" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/maximum-delay" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	TimerType    E_Ospfv2_LsaGeneration_TimerType `path:"state/timer-type" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) IsYANGGoStruct() {}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetMaximumDelay retrieves the value of the leaf MaximumDelay from the NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumDelay is set, it can
// safely use t.GetMaximumDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumDelay == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) GetMaximumDelay() uint32 {
	if t == nil || t.MaximumDelay == nil {
		return 0
	}
	return *t.MaximumDelay
}

// GetTimerType retrieves the value of the leaf TimerType from the NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimerType is set, it can
// safely use t.GetTimerType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimerType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) GetTimerType() E_Ospfv2_LsaGeneration_TimerType {
	if t == nil || t.TimerType == 0 {
		return 0
	}
	return t.TimerType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf.
func (*NetworkInstance_Protocol_Ospfv2_Global_Timers_Spf) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pcep represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep YANG schema element.
type NetworkInstance_Protocol_Pcep struct {
	PathComputationServer map[string]*NetworkInstance_Protocol_Pcep_PathComputationServer `path:"path-computation-servers/path-computation-server" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pcep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pcep) IsYANGGoStruct() {}

// NewPathComputationServer creates a new entry in the PathComputationServer list of the
// NetworkInstance_Protocol_Pcep struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pcep) NewPathComputationServer(PceServerAddress string) (*NetworkInstance_Protocol_Pcep_PathComputationServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathComputationServer == nil {
		t.PathComputationServer = make(map[string]*NetworkInstance_Protocol_Pcep_PathComputationServer)
	}

	key := PceServerAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PathComputationServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PathComputationServer", key)
	}

	t.PathComputationServer[key] = &NetworkInstance_Protocol_Pcep_PathComputationServer{
		PceServerAddress: &PceServerAddress,
	}

	return t.PathComputationServer[key], nil
}

// RenamePathComputationServer renames an entry in the list PathComputationServer within
// the NetworkInstance_Protocol_Pcep struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pcep) RenamePathComputationServer(oldK, newK string) error {
	if _, ok := t.PathComputationServer[newK]; ok {
		return fmt.Errorf("key %v already exists in PathComputationServer", newK)
	}

	e, ok := t.PathComputationServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PathComputationServer", oldK)
	}
	e.PceServerAddress = &newK

	t.PathComputationServer[newK] = e
	delete(t.PathComputationServer, oldK)
	return nil
}

// GetOrCreatePathComputationServer retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pcep. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pcep) GetOrCreatePathComputationServer(PceServerAddress string) *NetworkInstance_Protocol_Pcep_PathComputationServer {

	key := PceServerAddress

	if v, ok := t.PathComputationServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPathComputationServer(PceServerAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePathComputationServer got unexpected error: %v", err))
	}
	return v
}

// GetPathComputationServer retrieves the value with the specified key from
// the PathComputationServer map field of NetworkInstance_Protocol_Pcep. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pcep) GetPathComputationServer(PceServerAddress string) *NetworkInstance_Protocol_Pcep_PathComputationServer {

	if t == nil {
		return nil
	}

	key := PceServerAddress

	if lm, ok := t.PathComputationServer[key]; ok {
		return lm
	}
	return nil
}

// DeletePathComputationServer deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pcep. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pcep) DeletePathComputationServer(PceServerAddress string) {
	key := PceServerAddress

	delete(t.PathComputationServer, key)
}

// AppendPathComputationServer appends the supplied NetworkInstance_Protocol_Pcep_PathComputationServer struct to the
// list PathComputationServer of NetworkInstance_Protocol_Pcep. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pcep_PathComputationServer already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pcep) AppendPathComputationServer(v *NetworkInstance_Protocol_Pcep_PathComputationServer) error {
	if v.PceServerAddress == nil {
		return fmt.Errorf("invalid nil key received for PceServerAddress")
	}

	key := *v.PceServerAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PathComputationServer == nil {
		t.PathComputationServer = make(map[string]*NetworkInstance_Protocol_Pcep_PathComputationServer)
	}

	if _, ok := t.PathComputationServer[key]; ok {
		return fmt.Errorf("duplicate key for list PathComputationServer %v", key)
	}

	t.PathComputationServer[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pcep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pcep) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pcep.
func (*NetworkInstance_Protocol_Pcep) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pcep_PathComputationServer represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer struct {
	Authentication         *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication `path:"authentication" module:"openconfig-network-instance"`
	Id                     *string                                                             `path:"config/id" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/id" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	PceInitiatedCapability *bool                                                               `path:"config/pce-initiated-capability" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/pce-initiated-capability" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	PceServerAddress       *string                                                             `path:"config/pce-server-address|pce-server-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/pce-server-address|pce-server-address" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	PceType                E_Pcep_PceModeType                                                  `path:"config/pce-type" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/pce-type" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Port                   *uint16                                                             `path:"config/port" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/port" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Preference             *uint8                                                              `path:"config/preference" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/preference" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	ReportLocalLsp         *bool                                                               `path:"config/report-local-lsp" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/report-local-lsp" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	SourceAddress          *string                                                             `path:"config/source-address" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/source-address" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	SrSupport              *bool                                                               `path:"config/sr-support" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/sr-support" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Timers                 *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers         `path:"timers" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pcep_PathComputationServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer) IsYANGGoStruct() {}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetOrCreateAuthentication() *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication{}
	return t.Authentication
}

// GetOrCreateTimers retrieves the value of the Timers field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetOrCreateTimers() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers {
	if t.Timers != nil {
		return t.Timers
	}
	t.Timers = &NetworkInstance_Protocol_Pcep_PathComputationServer_Timers{}
	return t.Timers
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NetworkInstance_Protocol_Pcep_PathComputationServer. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetAuthentication() *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetTimers returns the value of the Timers struct pointer
// from NetworkInstance_Protocol_Pcep_PathComputationServer. If the receiver or the field Timers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetTimers() *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers {
	if t != nil && t.Timers != nil {
		return t.Timers
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetPceInitiatedCapability retrieves the value of the leaf PceInitiatedCapability from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceInitiatedCapability is set, it can
// safely use t.GetPceInitiatedCapability() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceInitiatedCapability == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetPceInitiatedCapability() bool {
	if t == nil || t.PceInitiatedCapability == nil {
		return false
	}
	return *t.PceInitiatedCapability
}

// GetPceServerAddress retrieves the value of the leaf PceServerAddress from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceServerAddress is set, it can
// safely use t.GetPceServerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceServerAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetPceServerAddress() string {
	if t == nil || t.PceServerAddress == nil {
		return ""
	}
	return *t.PceServerAddress
}

// GetPceType retrieves the value of the leaf PceType from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PceType is set, it can
// safely use t.GetPceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PceType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetPceType() E_Pcep_PceModeType {
	if t == nil || t.PceType == 0 {
		return 0
	}
	return t.PceType
}

// GetPort retrieves the value of the leaf Port from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 4189
	}
	return *t.Port
}

// GetPreference retrieves the value of the leaf Preference from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetPreference() uint8 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetReportLocalLsp retrieves the value of the leaf ReportLocalLsp from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReportLocalLsp is set, it can
// safely use t.GetReportLocalLsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReportLocalLsp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetReportLocalLsp() bool {
	if t == nil || t.ReportLocalLsp == nil {
		return false
	}
	return *t.ReportLocalLsp
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSrSupport retrieves the value of the leaf SrSupport from the NetworkInstance_Protocol_Pcep_PathComputationServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrSupport is set, it can
// safely use t.GetSrSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrSupport == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) GetSrSupport() bool {
	if t == nil || t.SrSupport == nil {
		return false
	}
	return *t.SrSupport
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pcep_PathComputationServer struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PceServerAddress == nil {
		return nil, fmt.Errorf("nil value for key PceServerAddress")
	}

	return map[string]interface{}{
		"pce-server-address": *t.PceServerAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pcep_PathComputationServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pcep_PathComputationServer.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/authentication YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication struct {
	AuthenticationKey *string `path:"config/authentication-key" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/authentication-key" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Enable            *bool   `path:"config/enable" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enable" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Keychain          *string `path:"config/keychain" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/keychain" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) IsYANGGoStruct() {}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetEnable retrieves the value of the leaf Enable from the NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetKeychain retrieves the value of the leaf Keychain from the NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keychain is set, it can
// safely use t.GetKeychain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keychain == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) GetKeychain() string {
	if t == nil || t.Keychain == nil {
		return ""
	}
	return *t.Keychain
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer_Authentication) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pcep_PathComputationServer_Timers represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pcep/path-computation-servers/path-computation-server/timers YANG schema element.
type NetworkInstance_Protocol_Pcep_PathComputationServer_Timers struct {
	DeadTimer                   *uint8  `path:"config/dead-timer" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/dead-timer" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Keepalive                   *uint8  `path:"config/keepalive" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/keepalive" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	RedelegationTimeoutInterval *uint16 `path:"config/redelegation-timeout-interval" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/redelegation-timeout-interval" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	StateTimeoutInterval        *uint16 `path:"config/state-timeout-interval" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/state-timeout-interval" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pcep_PathComputationServer_Timers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) IsYANGGoStruct() {}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetDeadTimer() uint8 {
	if t == nil || t.DeadTimer == nil {
		return 120
	}
	return *t.DeadTimer
}

// GetKeepalive retrieves the value of the leaf Keepalive from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Keepalive is set, it can
// safely use t.GetKeepalive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Keepalive == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetKeepalive() uint8 {
	if t == nil || t.Keepalive == nil {
		return 30
	}
	return *t.Keepalive
}

// GetRedelegationTimeoutInterval retrieves the value of the leaf RedelegationTimeoutInterval from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RedelegationTimeoutInterval is set, it can
// safely use t.GetRedelegationTimeoutInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RedelegationTimeoutInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetRedelegationTimeoutInterval() uint16 {
	if t == nil || t.RedelegationTimeoutInterval == nil {
		return 0
	}
	return *t.RedelegationTimeoutInterval
}

// GetStateTimeoutInterval retrieves the value of the leaf StateTimeoutInterval from the NetworkInstance_Protocol_Pcep_PathComputationServer_Timers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StateTimeoutInterval is set, it can
// safely use t.GetStateTimeoutInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StateTimeoutInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) GetStateTimeoutInterval() uint16 {
	if t == nil || t.StateTimeoutInterval == nil {
		return 0
	}
	return *t.StateTimeoutInterval
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pcep_PathComputationServer_Timers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pcep_PathComputationServer_Timers.
func (*NetworkInstance_Protocol_Pcep_PathComputationServer_Timers) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim YANG schema element.
type NetworkInstance_Protocol_Pim struct {
	Global    *NetworkInstance_Protocol_Pim_Global               `path:"global" module:"openconfig-network-instance"`
	Interface map[string]*NetworkInstance_Protocol_Pim_Interface `path:"interfaces/interface" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// NetworkInstance_Protocol_Pim struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim) NewInterface(InterfaceId string) (*NetworkInstance_Protocol_Pim_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Pim_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &NetworkInstance_Protocol_Pim_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the NetworkInstance_Protocol_Pim struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim) GetOrCreateInterface(InterfaceId string) *NetworkInstance_Protocol_Pim_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of NetworkInstance_Protocol_Pim. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim) GetInterface(InterfaceId string) *NetworkInstance_Protocol_Pim_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied NetworkInstance_Protocol_Pim_Interface struct to the
// list Interface of NetworkInstance_Protocol_Pim. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Interface already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim) AppendInterface(v *NetworkInstance_Protocol_Pim_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*NetworkInstance_Protocol_Pim_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim) GetOrCreateGlobal() *NetworkInstance_Protocol_Pim_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &NetworkInstance_Protocol_Pim_Global{}
	return t.Global
}

// GetGlobal returns the value of the Global struct pointer
// from NetworkInstance_Protocol_Pim. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim) GetGlobal() *NetworkInstance_Protocol_Pim_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim.
func (*NetworkInstance_Protocol_Pim) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global YANG schema element.
type NetworkInstance_Protocol_Pim_Global struct {
	Counters        *NetworkInstance_Protocol_Pim_Global_Counters                   `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	MaximumGroups   *uint32                                                         `path:"config/maximum-groups" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/maximum-groups" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	NeighborCount   *uint8                                                          `path:"state/neighbor-count" module:"openconfig-network-instance/openconfig-network-instance"`
	RendezvousPoint map[string]*NetworkInstance_Protocol_Pim_Global_RendezvousPoint `path:"rendezvous-points/rendezvous-point" module:"openconfig-network-instance/openconfig-network-instance"`
	Source          map[string]*NetworkInstance_Protocol_Pim_Global_Source          `path:"sources-joined/source" module:"openconfig-network-instance/openconfig-network-instance"`
	Ssm             *NetworkInstance_Protocol_Pim_Global_Ssm                        `path:"ssm" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global) IsYANGGoStruct() {}

// NewRendezvousPoint creates a new entry in the RendezvousPoint list of the
// NetworkInstance_Protocol_Pim_Global struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim_Global) NewRendezvousPoint(Address string) (*NetworkInstance_Protocol_Pim_Global_RendezvousPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*NetworkInstance_Protocol_Pim_Global_RendezvousPoint)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RendezvousPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RendezvousPoint", key)
	}

	t.RendezvousPoint[key] = &NetworkInstance_Protocol_Pim_Global_RendezvousPoint{
		Address: &Address,
	}

	return t.RendezvousPoint[key], nil
}

// RenameRendezvousPoint renames an entry in the list RendezvousPoint within
// the NetworkInstance_Protocol_Pim_Global struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim_Global) RenameRendezvousPoint(oldK, newK string) error {
	if _, ok := t.RendezvousPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in RendezvousPoint", newK)
	}

	e, ok := t.RendezvousPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RendezvousPoint", oldK)
	}
	e.Address = &newK

	t.RendezvousPoint[newK] = e
	delete(t.RendezvousPoint, oldK)
	return nil
}

// GetOrCreateRendezvousPoint retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateRendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPoint {

	key := Address

	if v, ok := t.RendezvousPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRendezvousPoint(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRendezvousPoint got unexpected error: %v", err))
	}
	return v
}

// GetRendezvousPoint retrieves the value with the specified key from
// the RendezvousPoint map field of NetworkInstance_Protocol_Pim_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetRendezvousPoint(Address string) *NetworkInstance_Protocol_Pim_Global_RendezvousPoint {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.RendezvousPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteRendezvousPoint deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim_Global) DeleteRendezvousPoint(Address string) {
	key := Address

	delete(t.RendezvousPoint, key)
}

// AppendRendezvousPoint appends the supplied NetworkInstance_Protocol_Pim_Global_RendezvousPoint struct to the
// list RendezvousPoint of NetworkInstance_Protocol_Pim_Global. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Global_RendezvousPoint already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim_Global) AppendRendezvousPoint(v *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RendezvousPoint == nil {
		t.RendezvousPoint = make(map[string]*NetworkInstance_Protocol_Pim_Global_RendezvousPoint)
	}

	if _, ok := t.RendezvousPoint[key]; ok {
		return fmt.Errorf("duplicate key for list RendezvousPoint %v", key)
	}

	t.RendezvousPoint[key] = v
	return nil
}

// NewSource creates a new entry in the Source list of the
// NetworkInstance_Protocol_Pim_Global struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim_Global) NewSource(Address string) (*NetworkInstance_Protocol_Pim_Global_Source, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NetworkInstance_Protocol_Pim_Global_Source)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Source[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Source", key)
	}

	t.Source[key] = &NetworkInstance_Protocol_Pim_Global_Source{
		Address: &Address,
	}

	return t.Source[key], nil
}

// RenameSource renames an entry in the list Source within
// the NetworkInstance_Protocol_Pim_Global struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim_Global) RenameSource(oldK, newK string) error {
	if _, ok := t.Source[newK]; ok {
		return fmt.Errorf("key %v already exists in Source", newK)
	}

	e, ok := t.Source[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Source", oldK)
	}
	e.Address = &newK

	t.Source[newK] = e
	delete(t.Source, oldK)
	return nil
}

// GetOrCreateSource retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateSource(Address string) *NetworkInstance_Protocol_Pim_Global_Source {

	key := Address

	if v, ok := t.Source[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSource(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSource got unexpected error: %v", err))
	}
	return v
}

// GetSource retrieves the value with the specified key from
// the Source map field of NetworkInstance_Protocol_Pim_Global. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetSource(Address string) *NetworkInstance_Protocol_Pim_Global_Source {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Source[key]; ok {
		return lm
	}
	return nil
}

// DeleteSource deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Global. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim_Global) DeleteSource(Address string) {
	key := Address

	delete(t.Source, key)
}

// AppendSource appends the supplied NetworkInstance_Protocol_Pim_Global_Source struct to the
// list Source of NetworkInstance_Protocol_Pim_Global. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Global_Source already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim_Global) AppendSource(v *NetworkInstance_Protocol_Pim_Global_Source) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Source == nil {
		t.Source = make(map[string]*NetworkInstance_Protocol_Pim_Global_Source)
	}

	if _, ok := t.Source[key]; ok {
		return fmt.Errorf("duplicate key for list Source %v", key)
	}

	t.Source[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateCounters() *NetworkInstance_Protocol_Pim_Global_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Protocol_Pim_Global_Counters{}
	return t.Counters
}

// GetOrCreateSsm retrieves the value of the Ssm field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Global) GetOrCreateSsm() *NetworkInstance_Protocol_Pim_Global_Ssm {
	if t.Ssm != nil {
		return t.Ssm
	}
	t.Ssm = &NetworkInstance_Protocol_Pim_Global_Ssm{}
	return t.Ssm
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Protocol_Pim_Global. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetCounters() *NetworkInstance_Protocol_Pim_Global_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetSsm returns the value of the Ssm struct pointer
// from NetworkInstance_Protocol_Pim_Global. If the receiver or the field Ssm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Global) GetSsm() *NetworkInstance_Protocol_Pim_Global_Ssm {
	if t != nil && t.Ssm != nil {
		return t.Ssm
	}
	return nil
}

// GetMaximumGroups retrieves the value of the leaf MaximumGroups from the NetworkInstance_Protocol_Pim_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumGroups is set, it can
// safely use t.GetMaximumGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumGroups == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global) GetMaximumGroups() uint32 {
	if t == nil || t.MaximumGroups == nil {
		return 0
	}
	return *t.MaximumGroups
}

// GetNeighborCount retrieves the value of the leaf NeighborCount from the NetworkInstance_Protocol_Pim_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborCount is set, it can
// safely use t.GetNeighborCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborCount == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global) GetNeighborCount() uint8 {
	if t == nil || t.NeighborCount == nil {
		return 0
	}
	return *t.NeighborCount
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global.
func (*NetworkInstance_Protocol_Pim_Global) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Counters struct {
	BootstrapMessages *uint32 `path:"bootstrap-messages" module:"openconfig-network-instance"`
	HelloMessages     *uint32 `path:"hello-messages" module:"openconfig-network-instance"`
	JoinPruneMessages *uint32 `path:"join-prune-messages" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_Counters) IsYANGGoStruct() {}

// GetBootstrapMessages retrieves the value of the leaf BootstrapMessages from the NetworkInstance_Protocol_Pim_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootstrapMessages is set, it can
// safely use t.GetBootstrapMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootstrapMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) GetBootstrapMessages() uint32 {
	if t == nil || t.BootstrapMessages == nil {
		return 0
	}
	return *t.BootstrapMessages
}

// GetHelloMessages retrieves the value of the leaf HelloMessages from the NetworkInstance_Protocol_Pim_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMessages is set, it can
// safely use t.GetHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) GetHelloMessages() uint32 {
	if t == nil || t.HelloMessages == nil {
		return 0
	}
	return *t.HelloMessages
}

// GetJoinPruneMessages retrieves the value of the leaf JoinPruneMessages from the NetworkInstance_Protocol_Pim_Global_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPruneMessages is set, it can
// safely use t.GetJoinPruneMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPruneMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) GetJoinPruneMessages() uint32 {
	if t == nil || t.JoinPruneMessages == nil {
		return 0
	}
	return *t.JoinPruneMessages
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_Counters.
func (*NetworkInstance_Protocol_Pim_Global_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_RendezvousPoint represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/rendezvous-points/rendezvous-point YANG schema element.
type NetworkInstance_Protocol_Pim_Global_RendezvousPoint struct {
	Address         *string `path:"config/address|address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/address|address" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	MulticastGroups *string `path:"config/multicast-groups" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/multicast-groups" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_RendezvousPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_RendezvousPoint) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Protocol_Pim_Global_RendezvousPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMulticastGroups retrieves the value of the leaf MulticastGroups from the NetworkInstance_Protocol_Pim_Global_RendezvousPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastGroups is set, it can
// safely use t.GetMulticastGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastGroups == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) GetMulticastGroups() string {
	if t == nil || t.MulticastGroups == nil {
		return ""
	}
	return *t.MulticastGroups
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Global_RendezvousPoint struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_RendezvousPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_RendezvousPoint.
func (*NetworkInstance_Protocol_Pim_Global_RendezvousPoint) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_Source represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/sources-joined/source YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Source struct {
	Address             *string `path:"state/address|address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"address" shadow-module:"openconfig-network-instance"`
	Group               *string `path:"state/group" module:"openconfig-network-instance/openconfig-network-instance"`
	UpstreamInterfaceId *string `path:"state/upstream-interface-id" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_Source) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NetworkInstance_Protocol_Pim_Global_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Source) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetGroup retrieves the value of the leaf Group from the NetworkInstance_Protocol_Pim_Global_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Source) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetUpstreamInterfaceId retrieves the value of the leaf UpstreamInterfaceId from the NetworkInstance_Protocol_Pim_Global_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpstreamInterfaceId is set, it can
// safely use t.GetUpstreamInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpstreamInterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Source) GetUpstreamInterfaceId() string {
	if t == nil || t.UpstreamInterfaceId == nil {
		return ""
	}
	return *t.UpstreamInterfaceId
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Global_Source struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Global_Source) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Source) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_Source.
func (*NetworkInstance_Protocol_Pim_Global_Source) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Global_Ssm represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/global/ssm YANG schema element.
type NetworkInstance_Protocol_Pim_Global_Ssm struct {
	SsmRanges *string `path:"config/ssm-ranges" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/ssm-ranges" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Global_Ssm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Global_Ssm) IsYANGGoStruct() {}

// GetSsmRanges retrieves the value of the leaf SsmRanges from the NetworkInstance_Protocol_Pim_Global_Ssm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmRanges is set, it can
// safely use t.GetSsmRanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmRanges == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) GetSsmRanges() string {
	if t == nil || t.SsmRanges == nil {
		return ""
	}
	return *t.SsmRanges
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Global_Ssm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Global_Ssm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Global_Ssm.
func (*NetworkInstance_Protocol_Pim_Global_Ssm) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Pim_Interface struct {
	BorderRouter      *bool                                                       `path:"config/border-router" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/border-router" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	BsrBorder         *bool                                                       `path:"config/bsr-border" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/bsr-border" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Counters          *NetworkInstance_Protocol_Pim_Interface_Counters            `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	DeadTimer         *uint16                                                     `path:"config/dead-timer" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/dead-timer" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	DrPriority        *uint32                                                     `path:"config/dr-priority" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/dr-priority" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	EnableBfd         *NetworkInstance_Protocol_Pim_Interface_EnableBfd           `path:"enable-bfd" module:"openconfig-network-instance"`
	Enabled           *bool                                                       `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	HelloInterval     *uint8                                                      `path:"config/hello-interval" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/hello-interval" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	InterfaceId       *string                                                     `path:"config/interface-id|interface-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/interface-id|interface-id" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	InterfaceRef      *NetworkInstance_Protocol_Pim_Interface_InterfaceRef        `path:"interface-ref" module:"openconfig-network-instance"`
	JoinPruneInterval *uint8                                                      `path:"config/join-prune-interval" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/join-prune-interval" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	MaximumGroups     *uint32                                                     `path:"config/maximum-groups" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/maximum-groups" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Mode              E_PimTypes_PIM_MODE                                         `path:"config/mode" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/mode" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Neighbor          map[string]*NetworkInstance_Protocol_Pim_Interface_Neighbor `path:"neighbors/neighbor" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface) IsYANGGoStruct() {}

// NewNeighbor creates a new entry in the Neighbor list of the
// NetworkInstance_Protocol_Pim_Interface struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Pim_Interface) NewNeighbor(NeighborAddress string) (*NetworkInstance_Protocol_Pim_Interface_Neighbor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Pim_Interface_Neighbor)
	}

	key := NeighborAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Neighbor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Neighbor", key)
	}

	t.Neighbor[key] = &NetworkInstance_Protocol_Pim_Interface_Neighbor{
		NeighborAddress: &NeighborAddress,
	}

	return t.Neighbor[key], nil
}

// RenameNeighbor renames an entry in the list Neighbor within
// the NetworkInstance_Protocol_Pim_Interface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Pim_Interface) RenameNeighbor(oldK, newK string) error {
	if _, ok := t.Neighbor[newK]; ok {
		return fmt.Errorf("key %v already exists in Neighbor", newK)
	}

	e, ok := t.Neighbor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Neighbor", oldK)
	}
	e.NeighborAddress = &newK

	t.Neighbor[newK] = e
	delete(t.Neighbor, oldK)
	return nil
}

// GetOrCreateNeighbor retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Interface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_Neighbor {

	key := NeighborAddress

	if v, ok := t.Neighbor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighbor(NeighborAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighbor got unexpected error: %v", err))
	}
	return v
}

// GetNeighbor retrieves the value with the specified key from
// the Neighbor map field of NetworkInstance_Protocol_Pim_Interface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetNeighbor(NeighborAddress string) *NetworkInstance_Protocol_Pim_Interface_Neighbor {

	if t == nil {
		return nil
	}

	key := NeighborAddress

	if lm, ok := t.Neighbor[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighbor deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Pim_Interface. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Pim_Interface) DeleteNeighbor(NeighborAddress string) {
	key := NeighborAddress

	delete(t.Neighbor, key)
}

// AppendNeighbor appends the supplied NetworkInstance_Protocol_Pim_Interface_Neighbor struct to the
// list Neighbor of NetworkInstance_Protocol_Pim_Interface. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Pim_Interface_Neighbor already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Pim_Interface) AppendNeighbor(v *NetworkInstance_Protocol_Pim_Interface_Neighbor) error {
	if v.NeighborAddress == nil {
		return fmt.Errorf("invalid nil key received for NeighborAddress")
	}

	key := *v.NeighborAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Neighbor == nil {
		t.Neighbor = make(map[string]*NetworkInstance_Protocol_Pim_Interface_Neighbor)
	}

	if _, ok := t.Neighbor[key]; ok {
		return fmt.Errorf("duplicate key for list Neighbor %v", key)
	}

	t.Neighbor[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateCounters() *NetworkInstance_Protocol_Pim_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_Protocol_Pim_Interface_Counters{}
	return t.Counters
}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateEnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &NetworkInstance_Protocol_Pim_Interface_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Pim_Interface) GetOrCreateInterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Protocol_Pim_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_Protocol_Pim_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetCounters() *NetworkInstance_Protocol_Pim_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from NetworkInstance_Protocol_Pim_Interface. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetEnableBfd() *NetworkInstance_Protocol_Pim_Interface_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Protocol_Pim_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Pim_Interface) GetInterfaceRef() *NetworkInstance_Protocol_Pim_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetBorderRouter retrieves the value of the leaf BorderRouter from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BorderRouter is set, it can
// safely use t.GetBorderRouter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BorderRouter == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetBorderRouter() bool {
	if t == nil || t.BorderRouter == nil {
		return false
	}
	return *t.BorderRouter
}

// GetBsrBorder retrieves the value of the leaf BsrBorder from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BsrBorder is set, it can
// safely use t.GetBsrBorder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BsrBorder == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetBsrBorder() bool {
	if t == nil || t.BsrBorder == nil {
		return false
	}
	return *t.BsrBorder
}

// GetDeadTimer retrieves the value of the leaf DeadTimer from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeadTimer is set, it can
// safely use t.GetDeadTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeadTimer == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetDeadTimer() uint16 {
	if t == nil || t.DeadTimer == nil {
		return 0
	}
	return *t.DeadTimer
}

// GetDrPriority retrieves the value of the leaf DrPriority from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DrPriority is set, it can
// safely use t.GetDrPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DrPriority == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetDrPriority() uint32 {
	if t == nil || t.DrPriority == nil {
		return 0
	}
	return *t.DrPriority
}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetHelloInterval() uint8 {
	if t == nil || t.HelloInterval == nil {
		return 0
	}
	return *t.HelloInterval
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetJoinPruneInterval retrieves the value of the leaf JoinPruneInterval from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPruneInterval is set, it can
// safely use t.GetJoinPruneInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPruneInterval == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetJoinPruneInterval() uint8 {
	if t == nil || t.JoinPruneInterval == nil {
		return 0
	}
	return *t.JoinPruneInterval
}

// GetMaximumGroups retrieves the value of the leaf MaximumGroups from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumGroups is set, it can
// safely use t.GetMaximumGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumGroups == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetMaximumGroups() uint32 {
	if t == nil || t.MaximumGroups == nil {
		return 0
	}
	return *t.MaximumGroups
}

// GetMode retrieves the value of the leaf Mode from the NetworkInstance_Protocol_Pim_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface) GetMode() E_PimTypes_PIM_MODE {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Interface struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface.
func (*NetworkInstance_Protocol_Pim_Interface) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_Counters represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Counters struct {
	BootstrapMessages *uint32 `path:"bootstrap-messages" module:"openconfig-network-instance"`
	HelloMessages     *uint32 `path:"hello-messages" module:"openconfig-network-instance"`
	JoinPruneMessages *uint32 `path:"join-prune-messages" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_Counters) IsYANGGoStruct() {}

// GetBootstrapMessages retrieves the value of the leaf BootstrapMessages from the NetworkInstance_Protocol_Pim_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootstrapMessages is set, it can
// safely use t.GetBootstrapMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootstrapMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) GetBootstrapMessages() uint32 {
	if t == nil || t.BootstrapMessages == nil {
		return 0
	}
	return *t.BootstrapMessages
}

// GetHelloMessages retrieves the value of the leaf HelloMessages from the NetworkInstance_Protocol_Pim_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloMessages is set, it can
// safely use t.GetHelloMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) GetHelloMessages() uint32 {
	if t == nil || t.HelloMessages == nil {
		return 0
	}
	return *t.HelloMessages
}

// GetJoinPruneMessages retrieves the value of the leaf JoinPruneMessages from the NetworkInstance_Protocol_Pim_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if JoinPruneMessages is set, it can
// safely use t.GetJoinPruneMessages() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.JoinPruneMessages == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) GetJoinPruneMessages() uint32 {
	if t == nil || t.JoinPruneMessages == nil {
		return 0
	}
	return *t.JoinPruneMessages
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_Counters.
func (*NetworkInstance_Protocol_Pim_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_EnableBfd represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_EnableBfd struct {
	Enabled *bool `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_EnableBfd) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Pim_Interface_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_EnableBfd.
func (*NetworkInstance_Protocol_Pim_Interface_EnableBfd) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_InterfaceRef struct {
	Interface    *string `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/interface" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/subinterface" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Protocol_Pim_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Protocol_Pim_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_InterfaceRef.
func (*NetworkInstance_Protocol_Pim_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Pim_Interface_Neighbor represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/pim/interfaces/interface/neighbors/neighbor YANG schema element.
type NetworkInstance_Protocol_Pim_Interface_Neighbor struct {
	DrAddress           *string             `path:"state/dr-address" module:"openconfig-network-instance/openconfig-network-instance"`
	Mode                E_PimTypes_PIM_MODE `path:"state/mode" module:"openconfig-network-instance/openconfig-network-instance"`
	NeighborAddress     *string             `path:"state/neighbor-address|neighbor-address" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"neighbor-address" shadow-module:"openconfig-network-instance"`
	NeighborEstablished *uint64             `path:"state/neighbor-established" module:"openconfig-network-instance/openconfig-network-instance"`
	NeighborExpires     *uint64             `path:"state/neighbor-expires" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Pim_Interface_Neighbor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Pim_Interface_Neighbor) IsYANGGoStruct() {}

// GetDrAddress retrieves the value of the leaf DrAddress from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DrAddress is set, it can
// safely use t.GetDrAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DrAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetDrAddress() string {
	if t == nil || t.DrAddress == nil {
		return ""
	}
	return *t.DrAddress
}

// GetMode retrieves the value of the leaf Mode from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetMode() E_PimTypes_PIM_MODE {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetNeighborAddress retrieves the value of the leaf NeighborAddress from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborAddress is set, it can
// safely use t.GetNeighborAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetNeighborAddress() string {
	if t == nil || t.NeighborAddress == nil {
		return ""
	}
	return *t.NeighborAddress
}

// GetNeighborEstablished retrieves the value of the leaf NeighborEstablished from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborEstablished is set, it can
// safely use t.GetNeighborEstablished() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborEstablished == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetNeighborEstablished() uint64 {
	if t == nil || t.NeighborEstablished == nil {
		return 0
	}
	return *t.NeighborEstablished
}

// GetNeighborExpires retrieves the value of the leaf NeighborExpires from the NetworkInstance_Protocol_Pim_Interface_Neighbor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborExpires is set, it can
// safely use t.GetNeighborExpires() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborExpires == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) GetNeighborExpires() uint64 {
	if t == nil || t.NeighborExpires == nil {
		return 0
	}
	return *t.NeighborExpires
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Pim_Interface_Neighbor struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.NeighborAddress == nil {
		return nil, fmt.Errorf("nil value for key NeighborAddress")
	}

	return map[string]interface{}{
		"neighbor-address": *t.NeighborAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Pim_Interface_Neighbor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Pim_Interface_Neighbor.
func (*NetworkInstance_Protocol_Pim_Interface_Neighbor) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static YANG schema element.
type NetworkInstance_Protocol_Static struct {
	Description *string                                             `path:"config/description" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/description" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	NextHop     map[string]*NetworkInstance_Protocol_Static_NextHop `path:"next-hops/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	Prefix      *string                                             `path:"config/prefix|prefix" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/prefix|prefix" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	SetTag      NetworkInstance_Protocol_Static_SetTag_Union        `path:"config/set-tag" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/set-tag" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// NetworkInstance_Protocol_Static struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_Protocol_Static) NewNextHop(Index string) (*NetworkInstance_Protocol_Static_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NetworkInstance_Protocol_Static_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NetworkInstance_Protocol_Static_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NetworkInstance_Protocol_Static struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_Protocol_Static) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NetworkInstance_Protocol_Static. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_Protocol_Static) GetOrCreateNextHop(Index string) *NetworkInstance_Protocol_Static_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NetworkInstance_Protocol_Static. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_Protocol_Static) GetNextHop(Index string) *NetworkInstance_Protocol_Static_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NetworkInstance_Protocol_Static. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_Protocol_Static) DeleteNextHop(Index string) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NetworkInstance_Protocol_Static_NextHop struct to the
// list NextHop of NetworkInstance_Protocol_Static. If the key value(s) specified in
// the supplied NetworkInstance_Protocol_Static_NextHop already exist in the list, an error is
// returned.
func (t *NetworkInstance_Protocol_Static) AppendNextHop(v *NetworkInstance_Protocol_Static_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NetworkInstance_Protocol_Static_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NetworkInstance_Protocol_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrefix retrieves the value of the leaf Prefix from the NetworkInstance_Protocol_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// GetSetTag retrieves the value of the leaf SetTag from the NetworkInstance_Protocol_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetTag is set, it can
// safely use t.GetSetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetTag == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static) GetSetTag() NetworkInstance_Protocol_Static_SetTag_Union {
	if t == nil || t.SetTag == nil {
		return nil
	}
	return t.SetTag
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Static struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Static) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Prefix == nil {
		return nil, fmt.Errorf("nil value for key Prefix")
	}

	return map[string]interface{}{
		"prefix": *t.Prefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static.
func (*NetworkInstance_Protocol_Static) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static_NextHop represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop YANG schema element.
type NetworkInstance_Protocol_Static_NextHop struct {
	EnableBfd    *NetworkInstance_Protocol_Static_NextHop_EnableBfd    `path:"enable-bfd" module:"openconfig-network-instance"`
	Index        *string                                               `path:"config/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/index|index" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	InterfaceRef *NetworkInstance_Protocol_Static_NextHop_InterfaceRef `path:"interface-ref" module:"openconfig-network-instance"`
	Metric       *uint32                                               `path:"config/metric" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/metric" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	NextHop      NetworkInstance_Protocol_Static_NextHop_NextHop_Union `path:"config/next-hop" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/next-hop" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Preference   *uint32                                               `path:"config/preference" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/preference" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Recurse      *bool                                                 `path:"config/recurse" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/recurse" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static_NextHop) IsYANGGoStruct() {}

// GetOrCreateEnableBfd retrieves the value of the EnableBfd field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Static_NextHop) GetOrCreateEnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfd {
	if t.EnableBfd != nil {
		return t.EnableBfd
	}
	t.EnableBfd = &NetworkInstance_Protocol_Static_NextHop_EnableBfd{}
	return t.EnableBfd
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_Protocol_Static_NextHop) GetOrCreateInterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_Protocol_Static_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetEnableBfd returns the value of the EnableBfd struct pointer
// from NetworkInstance_Protocol_Static_NextHop. If the receiver or the field EnableBfd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Static_NextHop) GetEnableBfd() *NetworkInstance_Protocol_Static_NextHop_EnableBfd {
	if t != nil && t.EnableBfd != nil {
		return t.EnableBfd
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_Protocol_Static_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_Protocol_Static_NextHop) GetInterfaceRef() *NetworkInstance_Protocol_Static_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetIndex() string {
	if t == nil || t.Index == nil {
		return ""
	}
	return *t.Index
}

// GetMetric retrieves the value of the leaf Metric from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Metric is set, it can
// safely use t.GetMetric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Metric == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetMetric() uint32 {
	if t == nil || t.Metric == nil {
		return 0
	}
	return *t.Metric
}

// GetNextHop retrieves the value of the leaf NextHop from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetNextHop() NetworkInstance_Protocol_Static_NextHop_NextHop_Union {
	if t == nil || t.NextHop == nil {
		return nil
	}
	return t.NextHop
}

// GetPreference retrieves the value of the leaf Preference from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetRecurse retrieves the value of the leaf Recurse from the NetworkInstance_Protocol_Static_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Recurse is set, it can
// safely use t.GetRecurse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Recurse == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop) GetRecurse() bool {
	if t == nil || t.Recurse == nil {
		return false
	}
	return *t.Recurse
}

// ΛListKeyMap returns the keys of the NetworkInstance_Protocol_Static_NextHop struct, which is a YANG list entry.
func (t *NetworkInstance_Protocol_Static_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static_NextHop.
func (*NetworkInstance_Protocol_Static_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static_NextHop_EnableBfd represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/enable-bfd YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_EnableBfd struct {
	Enabled *bool `path:"config/enabled" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/enabled" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static_NextHop_EnableBfd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static_NextHop_EnableBfd) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the NetworkInstance_Protocol_Static_NextHop_EnableBfd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static_NextHop_EnableBfd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static_NextHop_EnableBfd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static_NextHop_EnableBfd.
func (*NetworkInstance_Protocol_Static_NextHop_EnableBfd) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Protocol_Static_NextHop_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/static-routes/static/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Protocol_Static_NextHop_InterfaceRef struct {
	Interface    *string `path:"config/interface" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/interface" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/subinterface" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Protocol_Static_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Protocol_Static_NextHop_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Protocol_Static_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_Protocol_Static_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Protocol_Static_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Protocol_Static_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Protocol_Static_NextHop_InterfaceRef.
func (*NetworkInstance_Protocol_Static_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_RouteLimit represents the /openconfig-network-instance/network-instances/network-instance/route-limits/route-limit YANG schema element.
type NetworkInstance_RouteLimit struct {
	Afi               E_Types_ADDRESS_FAMILY `path:"config/afi|afi" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/afi|afi" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	AlarmThreshold    *uint32                `path:"config/alarm-threshold" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/alarm-threshold" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	InstalledRoutes   *uint32                `path:"state/installed-routes" module:"openconfig-network-instance/openconfig-network-instance"`
	Maximum           *uint32                `path:"config/maximum" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/maximum" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	ThresholdExceeded *bool                  `path:"state/threshold-exceeded" module:"openconfig-network-instance/openconfig-network-instance"`
	WarningOnly       *bool                  `path:"config/warning-only" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/warning-only" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_RouteLimit implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_RouteLimit) IsYANGGoStruct() {}

// GetAfi retrieves the value of the leaf Afi from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Afi is set, it can
// safely use t.GetAfi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Afi == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetAfi() E_Types_ADDRESS_FAMILY {
	if t == nil || t.Afi == 0 {
		return 0
	}
	return t.Afi
}

// GetAlarmThreshold retrieves the value of the leaf AlarmThreshold from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmThreshold is set, it can
// safely use t.GetAlarmThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmThreshold == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetAlarmThreshold() uint32 {
	if t == nil || t.AlarmThreshold == nil {
		return 0
	}
	return *t.AlarmThreshold
}

// GetInstalledRoutes retrieves the value of the leaf InstalledRoutes from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstalledRoutes is set, it can
// safely use t.GetInstalledRoutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstalledRoutes == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetInstalledRoutes() uint32 {
	if t == nil || t.InstalledRoutes == nil {
		return 0
	}
	return *t.InstalledRoutes
}

// GetMaximum retrieves the value of the leaf Maximum from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetThresholdExceeded retrieves the value of the leaf ThresholdExceeded from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ThresholdExceeded is set, it can
// safely use t.GetThresholdExceeded() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ThresholdExceeded == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetThresholdExceeded() bool {
	if t == nil || t.ThresholdExceeded == nil {
		return false
	}
	return *t.ThresholdExceeded
}

// GetWarningOnly retrieves the value of the leaf WarningOnly from the NetworkInstance_RouteLimit
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WarningOnly is set, it can
// safely use t.GetWarningOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WarningOnly == nil' before retrieving the leaf's value.
func (t *NetworkInstance_RouteLimit) GetWarningOnly() bool {
	if t == nil || t.WarningOnly == nil {
		return false
	}
	return *t.WarningOnly
}

// ΛListKeyMap returns the keys of the NetworkInstance_RouteLimit struct, which is a YANG list entry.
func (t *NetworkInstance_RouteLimit) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"afi": t.Afi,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_RouteLimit) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_RouteLimit"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_RouteLimit) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_RouteLimit) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_RouteLimit.
func (*NetworkInstance_RouteLimit) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting represents the /openconfig-network-instance/network-instances/network-instance/segment-routing YANG schema element.
type NetworkInstance_SegmentRouting struct {
	Srgb     map[string]*NetworkInstance_SegmentRouting_Srgb                                          `path:"srgbs/srgb" module:"openconfig-network-instance/openconfig-network-instance"`
	Srlb     map[string]*NetworkInstance_SegmentRouting_Srlb                                          `path:"srlbs/srlb" module:"openconfig-network-instance/openconfig-network-instance"`
	TePolicy map[NetworkInstance_SegmentRouting_TePolicy_Key]*NetworkInstance_SegmentRouting_TePolicy `path:"te-policies/te-policy" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting) IsYANGGoStruct() {}

// NetworkInstance_SegmentRouting_TePolicy_Key represents the key for list TePolicy of element /openconfig-network-instance/network-instances/network-instance/segment-routing.
type NetworkInstance_SegmentRouting_TePolicy_Key struct {
	Color    uint32 `path:"color"`
	Endpoint string `path:"endpoint"`
}

// NewSrgb creates a new entry in the Srgb list of the
// NetworkInstance_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting) NewSrgb(LocalId string) (*NetworkInstance_SegmentRouting_Srgb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srgb == nil {
		t.Srgb = make(map[string]*NetworkInstance_SegmentRouting_Srgb)
	}

	key := LocalId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srgb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srgb", key)
	}

	t.Srgb[key] = &NetworkInstance_SegmentRouting_Srgb{
		LocalId: &LocalId,
	}

	return t.Srgb[key], nil
}

// RenameSrgb renames an entry in the list Srgb within
// the NetworkInstance_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting) RenameSrgb(oldK, newK string) error {
	if _, ok := t.Srgb[newK]; ok {
		return fmt.Errorf("key %v already exists in Srgb", newK)
	}

	e, ok := t.Srgb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srgb", oldK)
	}
	e.LocalId = &newK

	t.Srgb[newK] = e
	delete(t.Srgb, oldK)
	return nil
}

// GetOrCreateSrgb retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting) GetOrCreateSrgb(LocalId string) *NetworkInstance_SegmentRouting_Srgb {

	key := LocalId

	if v, ok := t.Srgb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrgb(LocalId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrgb got unexpected error: %v", err))
	}
	return v
}

// GetSrgb retrieves the value with the specified key from
// the Srgb map field of NetworkInstance_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting) GetSrgb(LocalId string) *NetworkInstance_SegmentRouting_Srgb {

	if t == nil {
		return nil
	}

	key := LocalId

	if lm, ok := t.Srgb[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrgb deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting) DeleteSrgb(LocalId string) {
	key := LocalId

	delete(t.Srgb, key)
}

// AppendSrgb appends the supplied NetworkInstance_SegmentRouting_Srgb struct to the
// list Srgb of NetworkInstance_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_Srgb already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting) AppendSrgb(v *NetworkInstance_SegmentRouting_Srgb) error {
	if v.LocalId == nil {
		return fmt.Errorf("invalid nil key received for LocalId")
	}

	key := *v.LocalId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srgb == nil {
		t.Srgb = make(map[string]*NetworkInstance_SegmentRouting_Srgb)
	}

	if _, ok := t.Srgb[key]; ok {
		return fmt.Errorf("duplicate key for list Srgb %v", key)
	}

	t.Srgb[key] = v
	return nil
}

// NewSrlb creates a new entry in the Srlb list of the
// NetworkInstance_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting) NewSrlb(LocalId string) (*NetworkInstance_SegmentRouting_Srlb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlb == nil {
		t.Srlb = make(map[string]*NetworkInstance_SegmentRouting_Srlb)
	}

	key := LocalId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Srlb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Srlb", key)
	}

	t.Srlb[key] = &NetworkInstance_SegmentRouting_Srlb{
		LocalId: &LocalId,
	}

	return t.Srlb[key], nil
}

// RenameSrlb renames an entry in the list Srlb within
// the NetworkInstance_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting) RenameSrlb(oldK, newK string) error {
	if _, ok := t.Srlb[newK]; ok {
		return fmt.Errorf("key %v already exists in Srlb", newK)
	}

	e, ok := t.Srlb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Srlb", oldK)
	}
	e.LocalId = &newK

	t.Srlb[newK] = e
	delete(t.Srlb, oldK)
	return nil
}

// GetOrCreateSrlb retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting) GetOrCreateSrlb(LocalId string) *NetworkInstance_SegmentRouting_Srlb {

	key := LocalId

	if v, ok := t.Srlb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSrlb(LocalId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSrlb got unexpected error: %v", err))
	}
	return v
}

// GetSrlb retrieves the value with the specified key from
// the Srlb map field of NetworkInstance_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting) GetSrlb(LocalId string) *NetworkInstance_SegmentRouting_Srlb {

	if t == nil {
		return nil
	}

	key := LocalId

	if lm, ok := t.Srlb[key]; ok {
		return lm
	}
	return nil
}

// DeleteSrlb deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting) DeleteSrlb(LocalId string) {
	key := LocalId

	delete(t.Srlb, key)
}

// AppendSrlb appends the supplied NetworkInstance_SegmentRouting_Srlb struct to the
// list Srlb of NetworkInstance_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_Srlb already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting) AppendSrlb(v *NetworkInstance_SegmentRouting_Srlb) error {
	if v.LocalId == nil {
		return fmt.Errorf("invalid nil key received for LocalId")
	}

	key := *v.LocalId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Srlb == nil {
		t.Srlb = make(map[string]*NetworkInstance_SegmentRouting_Srlb)
	}

	if _, ok := t.Srlb[key]; ok {
		return fmt.Errorf("duplicate key for list Srlb %v", key)
	}

	t.Srlb[key] = v
	return nil
}

// NewTePolicy creates a new entry in the TePolicy list of the
// NetworkInstance_SegmentRouting struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting) NewTePolicy(Color uint32, Endpoint string) (*NetworkInstance_SegmentRouting_TePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TePolicy == nil {
		t.TePolicy = make(map[NetworkInstance_SegmentRouting_TePolicy_Key]*NetworkInstance_SegmentRouting_TePolicy)
	}

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TePolicy", key)
	}

	t.TePolicy[key] = &NetworkInstance_SegmentRouting_TePolicy{
		Color:    &Color,
		Endpoint: &Endpoint,
	}

	return t.TePolicy[key], nil
}

// RenameTePolicy renames an entry in the list TePolicy within
// the NetworkInstance_SegmentRouting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting) RenameTePolicy(oldK, newK NetworkInstance_SegmentRouting_TePolicy_Key) error {
	if _, ok := t.TePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in TePolicy", newK)
	}

	e, ok := t.TePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TePolicy", oldK)
	}
	e.Color = &newK.Color
	e.Endpoint = &newK.Endpoint

	t.TePolicy[newK] = e
	delete(t.TePolicy, oldK)
	return nil
}

// GetOrCreateTePolicy retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting) GetOrCreateTePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicy {

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	if v, ok := t.TePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTePolicy(Color, Endpoint)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTePolicy got unexpected error: %v", err))
	}
	return v
}

// GetTePolicy retrieves the value with the specified key from
// the TePolicy map field of NetworkInstance_SegmentRouting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting) GetTePolicy(Color uint32, Endpoint string) *NetworkInstance_SegmentRouting_TePolicy {

	if t == nil {
		return nil
	}

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	if lm, ok := t.TePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteTePolicy deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting) DeleteTePolicy(Color uint32, Endpoint string) {
	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    Color,
		Endpoint: Endpoint,
	}

	delete(t.TePolicy, key)
}

// AppendTePolicy appends the supplied NetworkInstance_SegmentRouting_TePolicy struct to the
// list TePolicy of NetworkInstance_SegmentRouting. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting) AppendTePolicy(v *NetworkInstance_SegmentRouting_TePolicy) error {
	if v.Color == nil {
		return fmt.Errorf("invalid nil key for Color")
	}

	if v.Endpoint == nil {
		return fmt.Errorf("invalid nil key for Endpoint")
	}

	key := NetworkInstance_SegmentRouting_TePolicy_Key{
		Color:    *v.Color,
		Endpoint: *v.Endpoint,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TePolicy == nil {
		t.TePolicy = make(map[NetworkInstance_SegmentRouting_TePolicy_Key]*NetworkInstance_SegmentRouting_TePolicy)
	}

	if _, ok := t.TePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list TePolicy %v", key)
	}

	t.TePolicy[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting.
func (*NetworkInstance_SegmentRouting) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_Srgb represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srgbs/srgb YANG schema element.
type NetworkInstance_SegmentRouting_Srgb struct {
	DataplaneType   E_SegmentRoutingTypes_SrDataplaneType `path:"config/dataplane-type" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/dataplane-type" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Ipv6Prefixes    []string                              `path:"config/ipv6-prefixes" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/ipv6-prefixes" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	LocalId         *string                               `path:"config/local-id|local-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/local-id|local-id" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	MplsLabelBlocks []string                              `path:"config/mpls-label-blocks" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/mpls-label-blocks" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Size            *uint32                               `path:"state/size" module:"openconfig-network-instance/openconfig-network-instance"`
	Used            *uint32                               `path:"state/used" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_Srgb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_Srgb) IsYANGGoStruct() {}

// GetDataplaneType retrieves the value of the leaf DataplaneType from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataplaneType is set, it can
// safely use t.GetDataplaneType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataplaneType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetDataplaneType() E_SegmentRoutingTypes_SrDataplaneType {
	if t == nil || t.DataplaneType == 0 {
		return 0
	}
	return t.DataplaneType
}

// GetIpv6Prefixes retrieves the value of the leaf Ipv6Prefixes from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefixes is set, it can
// safely use t.GetIpv6Prefixes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefixes == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetIpv6Prefixes() []string {
	if t == nil || t.Ipv6Prefixes == nil {
		return nil
	}
	return t.Ipv6Prefixes
}

// GetLocalId retrieves the value of the leaf LocalId from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalId is set, it can
// safely use t.GetLocalId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetLocalId() string {
	if t == nil || t.LocalId == nil {
		return ""
	}
	return *t.LocalId
}

// GetMplsLabelBlocks retrieves the value of the leaf MplsLabelBlocks from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabelBlocks is set, it can
// safely use t.GetMplsLabelBlocks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabelBlocks == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetMplsLabelBlocks() []string {
	if t == nil || t.MplsLabelBlocks == nil {
		return nil
	}
	return t.MplsLabelBlocks
}

// GetSize retrieves the value of the leaf Size from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// GetUsed retrieves the value of the leaf Used from the NetworkInstance_SegmentRouting_Srgb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srgb) GetUsed() uint32 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_Srgb struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_Srgb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalId == nil {
		return nil, fmt.Errorf("nil value for key LocalId")
	}

	return map[string]interface{}{
		"local-id": *t.LocalId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srgb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_Srgb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srgb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_Srgb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_Srgb.
func (*NetworkInstance_SegmentRouting_Srgb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_Srlb represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/srlbs/srlb YANG schema element.
type NetworkInstance_SegmentRouting_Srlb struct {
	DataplaneType  E_SegmentRoutingTypes_SrDataplaneType `path:"config/dataplane-type" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/dataplane-type" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Ipv6Prefix     *string                               `path:"config/ipv6-prefix" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/ipv6-prefix" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	LocalId        *string                               `path:"config/local-id|local-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/local-id|local-id" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	MplsLabelBlock *string                               `path:"config/mpls-label-block" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/mpls-label-block" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_Srlb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_Srlb) IsYANGGoStruct() {}

// GetDataplaneType retrieves the value of the leaf DataplaneType from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataplaneType is set, it can
// safely use t.GetDataplaneType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataplaneType == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetDataplaneType() E_SegmentRoutingTypes_SrDataplaneType {
	if t == nil || t.DataplaneType == 0 {
		return 0
	}
	return t.DataplaneType
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetLocalId retrieves the value of the leaf LocalId from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalId is set, it can
// safely use t.GetLocalId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetLocalId() string {
	if t == nil || t.LocalId == nil {
		return ""
	}
	return *t.LocalId
}

// GetMplsLabelBlock retrieves the value of the leaf MplsLabelBlock from the NetworkInstance_SegmentRouting_Srlb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsLabelBlock is set, it can
// safely use t.GetMplsLabelBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsLabelBlock == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_Srlb) GetMplsLabelBlock() string {
	if t == nil || t.MplsLabelBlock == nil {
		return ""
	}
	return *t.MplsLabelBlock
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_Srlb struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_Srlb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LocalId == nil {
		return nil, fmt.Errorf("nil value for key LocalId")
	}

	return map[string]interface{}{
		"local-id": *t.LocalId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srlb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_Srlb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_Srlb) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_Srlb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_Srlb.
func (*NetworkInstance_SegmentRouting_Srlb) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy struct {
	Active            *bool                                                                                                                `path:"state/active" module:"openconfig-network-instance/openconfig-network-instance"`
	ActiveSince       *uint64                                                                                                              `path:"state/active-since" module:"openconfig-network-instance/openconfig-network-instance"`
	ActiveTransitions *uint64                                                                                                              `path:"state/active-transitions" module:"openconfig-network-instance/openconfig-network-instance"`
	Bsid              NetworkInstance_SegmentRouting_TePolicy_Bsid_Union                                                                   `path:"state/bsid" module:"openconfig-network-instance/openconfig-network-instance"`
	CandidatePath     map[NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath `path:"candidate-paths/candidate-path" module:"openconfig-network-instance/openconfig-network-instance"`
	Color             *uint32                                                                                                              `path:"state/color|color" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"color" shadow-module:"openconfig-network-instance"`
	Counters          *NetworkInstance_SegmentRouting_TePolicy_Counters                                                                    `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	Endpoint          *string                                                                                                              `path:"state/endpoint|endpoint" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"endpoint" shadow-module:"openconfig-network-instance"`
	Name              *string                                                                                                              `path:"state/name" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy) IsYANGGoStruct() {}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key represents the key for list CandidatePath of element /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key struct {
	ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType `path:"protocol-origin"`
	OriginatorAsn  uint32                                 `path:"originator-asn"`
	OriginatorAddr string                                 `path:"originator-addr"`
	Discriminator  uint32                                 `path:"discriminator"`
}

// NewCandidatePath creates a new entry in the CandidatePath list of the
// NetworkInstance_SegmentRouting_TePolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy) NewCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath)
	}

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CandidatePath[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CandidatePath", key)
	}

	t.CandidatePath[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  &OriginatorAsn,
		OriginatorAddr: &OriginatorAddr,
		Discriminator:  &Discriminator,
	}

	return t.CandidatePath[key], nil
}

// RenameCandidatePath renames an entry in the list CandidatePath within
// the NetworkInstance_SegmentRouting_TePolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy) RenameCandidatePath(oldK, newK NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key) error {
	if _, ok := t.CandidatePath[newK]; ok {
		return fmt.Errorf("key %v already exists in CandidatePath", newK)
	}

	e, ok := t.CandidatePath[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CandidatePath", oldK)
	}
	e.ProtocolOrigin = newK.ProtocolOrigin
	e.OriginatorAsn = &newK.OriginatorAsn
	e.OriginatorAddr = &newK.OriginatorAddr
	e.Discriminator = &newK.Discriminator

	t.CandidatePath[newK] = e
	delete(t.CandidatePath, oldK)
	return nil
}

// GetOrCreateCandidatePath retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetOrCreateCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath {

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	if v, ok := t.CandidatePath[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCandidatePath(ProtocolOrigin, OriginatorAsn, OriginatorAddr, Discriminator)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCandidatePath got unexpected error: %v", err))
	}
	return v
}

// GetCandidatePath retrieves the value with the specified key from
// the CandidatePath map field of NetworkInstance_SegmentRouting_TePolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath {

	if t == nil {
		return nil
	}

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	if lm, ok := t.CandidatePath[key]; ok {
		return lm
	}
	return nil
}

// DeleteCandidatePath deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy) DeleteCandidatePath(ProtocolOrigin E_SegmentRoutingTypes_SrteProtocolType, OriginatorAsn uint32, OriginatorAddr string, Discriminator uint32) {
	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: ProtocolOrigin,
		OriginatorAsn:  OriginatorAsn,
		OriginatorAddr: OriginatorAddr,
		Discriminator:  Discriminator,
	}

	delete(t.CandidatePath, key)
}

// AppendCandidatePath appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct to the
// list CandidatePath of NetworkInstance_SegmentRouting_TePolicy. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy) AppendCandidatePath(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) error {
	if v.OriginatorAsn == nil {
		return fmt.Errorf("invalid nil key for OriginatorAsn")
	}

	if v.OriginatorAddr == nil {
		return fmt.Errorf("invalid nil key for OriginatorAddr")
	}

	if v.Discriminator == nil {
		return fmt.Errorf("invalid nil key for Discriminator")
	}

	key := NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key{
		ProtocolOrigin: v.ProtocolOrigin,
		OriginatorAsn:  *v.OriginatorAsn,
		OriginatorAddr: *v.OriginatorAddr,
		Discriminator:  *v.Discriminator,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CandidatePath == nil {
		t.CandidatePath = make(map[NetworkInstance_SegmentRouting_TePolicy_CandidatePath_Key]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath)
	}

	if _, ok := t.CandidatePath[key]; ok {
		return fmt.Errorf("duplicate key for list CandidatePath %v", key)
	}

	t.CandidatePath[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetOrCreateCounters() *NetworkInstance_SegmentRouting_TePolicy_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_SegmentRouting_TePolicy_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_SegmentRouting_TePolicy. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetCounters() *NetworkInstance_SegmentRouting_TePolicy_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetActive retrieves the value of the leaf Active from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetActiveSince retrieves the value of the leaf ActiveSince from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSince is set, it can
// safely use t.GetActiveSince() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSince == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetActiveSince() uint64 {
	if t == nil || t.ActiveSince == nil {
		return 0
	}
	return *t.ActiveSince
}

// GetActiveTransitions retrieves the value of the leaf ActiveTransitions from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTransitions is set, it can
// safely use t.GetActiveTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTransitions == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetActiveTransitions() uint64 {
	if t == nil || t.ActiveTransitions == nil {
		return 0
	}
	return *t.ActiveTransitions
}

// GetBsid retrieves the value of the leaf Bsid from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bsid is set, it can
// safely use t.GetBsid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bsid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetBsid() NetworkInstance_SegmentRouting_TePolicy_Bsid_Union {
	if t == nil || t.Bsid == nil {
		return nil
	}
	return t.Bsid
}

// GetColor retrieves the value of the leaf Color from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Color is set, it can
// safely use t.GetColor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Color == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetColor() uint32 {
	if t == nil || t.Color == nil {
		return 0
	}
	return *t.Color
}

// GetEndpoint retrieves the value of the leaf Endpoint from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Endpoint is set, it can
// safely use t.GetEndpoint() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Endpoint == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetEndpoint() string {
	if t == nil || t.Endpoint == nil {
		return ""
	}
	return *t.Endpoint
}

// GetName retrieves the value of the leaf Name from the NetworkInstance_SegmentRouting_TePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Color == nil {
		return nil, fmt.Errorf("nil value for key Color")
	}

	if t.Endpoint == nil {
		return nil, fmt.Errorf("nil value for key Endpoint")
	}

	return map[string]interface{}{
		"color":    *t.Color,
		"endpoint": *t.Endpoint,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy.
func (*NetworkInstance_SegmentRouting_TePolicy) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct {
	Active            *bool                                                                         `path:"state/active" module:"openconfig-network-instance/openconfig-network-instance"`
	ActiveSince       *uint64                                                                       `path:"state/active-since" module:"openconfig-network-instance/openconfig-network-instance"`
	ActiveTransitions *uint64                                                                       `path:"state/active-transitions" module:"openconfig-network-instance/openconfig-network-instance"`
	Discriminator     *uint32                                                                       `path:"state/discriminator|discriminator" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"discriminator" shadow-module:"openconfig-network-instance"`
	Enlp              E_SegmentRoutingTypes_EnlpType                                                `path:"state/enlp" module:"openconfig-network-instance/openconfig-network-instance"`
	Name              *string                                                                       `path:"state/name" module:"openconfig-network-instance/openconfig-network-instance"`
	OriginatorAddr    *string                                                                       `path:"state/originator-addr|originator-addr" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"originator-addr" shadow-module:"openconfig-network-instance"`
	OriginatorAsn     *uint32                                                                       `path:"state/originator-asn|originator-asn" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"originator-asn" shadow-module:"openconfig-network-instance"`
	Preference        *uint32                                                                       `path:"state/preference" module:"openconfig-network-instance/openconfig-network-instance"`
	ProtocolOrigin    E_SegmentRoutingTypes_SrteProtocolType                                        `path:"state/protocol-origin|protocol-origin" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"protocol-origin" shadow-module:"openconfig-network-instance"`
	SegmentList       map[uint32]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList `path:"segment-lists/segment-list" module:"openconfig-network-instance/openconfig-network-instance"`
	Valid             *bool                                                                         `path:"state/valid" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath) IsYANGGoStruct() {}

// NewSegmentList creates a new entry in the SegmentList list of the
// NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) NewSegmentList(Id uint32) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SegmentList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SegmentList", key)
	}

	t.SegmentList[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList{
		Id: &Id,
	}

	return t.SegmentList[key], nil
}

// RenameSegmentList renames an entry in the list SegmentList within
// the NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) RenameSegmentList(oldK, newK uint32) error {
	if _, ok := t.SegmentList[newK]; ok {
		return fmt.Errorf("key %v already exists in SegmentList", newK)
	}

	e, ok := t.SegmentList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SegmentList", oldK)
	}
	e.Id = &newK

	t.SegmentList[newK] = e
	delete(t.SegmentList, oldK)
	return nil
}

// GetOrCreateSegmentList retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetOrCreateSegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList {

	key := Id

	if v, ok := t.SegmentList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSegmentList(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSegmentList got unexpected error: %v", err))
	}
	return v
}

// GetSegmentList retrieves the value with the specified key from
// the SegmentList map field of NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetSegmentList(Id uint32) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.SegmentList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSegmentList deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) DeleteSegmentList(Id uint32) {
	key := Id

	delete(t.SegmentList, key)
}

// AppendSegmentList appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct to the
// list SegmentList of NetworkInstance_SegmentRouting_TePolicy_CandidatePath. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) AppendSegmentList(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SegmentList == nil {
		t.SegmentList = make(map[uint32]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList)
	}

	if _, ok := t.SegmentList[key]; ok {
		return fmt.Errorf("duplicate key for list SegmentList %v", key)
	}

	t.SegmentList[key] = v
	return nil
}

// GetActive retrieves the value of the leaf Active from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetActiveSince retrieves the value of the leaf ActiveSince from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveSince is set, it can
// safely use t.GetActiveSince() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveSince == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetActiveSince() uint64 {
	if t == nil || t.ActiveSince == nil {
		return 0
	}
	return *t.ActiveSince
}

// GetActiveTransitions retrieves the value of the leaf ActiveTransitions from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveTransitions is set, it can
// safely use t.GetActiveTransitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveTransitions == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetActiveTransitions() uint64 {
	if t == nil || t.ActiveTransitions == nil {
		return 0
	}
	return *t.ActiveTransitions
}

// GetDiscriminator retrieves the value of the leaf Discriminator from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Discriminator is set, it can
// safely use t.GetDiscriminator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Discriminator == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetDiscriminator() uint32 {
	if t == nil || t.Discriminator == nil {
		return 0
	}
	return *t.Discriminator
}

// GetEnlp retrieves the value of the leaf Enlp from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enlp is set, it can
// safely use t.GetEnlp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enlp == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetEnlp() E_SegmentRoutingTypes_EnlpType {
	if t == nil || t.Enlp == 0 {
		return 0
	}
	return t.Enlp
}

// GetName retrieves the value of the leaf Name from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOriginatorAddr retrieves the value of the leaf OriginatorAddr from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorAddr is set, it can
// safely use t.GetOriginatorAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorAddr == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetOriginatorAddr() string {
	if t == nil || t.OriginatorAddr == nil {
		return ""
	}
	return *t.OriginatorAddr
}

// GetOriginatorAsn retrieves the value of the leaf OriginatorAsn from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatorAsn is set, it can
// safely use t.GetOriginatorAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatorAsn == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetOriginatorAsn() uint32 {
	if t == nil || t.OriginatorAsn == nil {
		return 0
	}
	return *t.OriginatorAsn
}

// GetPreference retrieves the value of the leaf Preference from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 0
	}
	return *t.Preference
}

// GetProtocolOrigin retrieves the value of the leaf ProtocolOrigin from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolOrigin is set, it can
// safely use t.GetProtocolOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolOrigin == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetProtocolOrigin() E_SegmentRoutingTypes_SrteProtocolType {
	if t == nil || t.ProtocolOrigin == 0 {
		return 0
	}
	return t.ProtocolOrigin
}

// GetValid retrieves the value of the leaf Valid from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Discriminator == nil {
		return nil, fmt.Errorf("nil value for key Discriminator")
	}

	if t.OriginatorAddr == nil {
		return nil, fmt.Errorf("nil value for key OriginatorAddr")
	}

	if t.OriginatorAsn == nil {
		return nil, fmt.Errorf("nil value for key OriginatorAsn")
	}

	return map[string]interface{}{
		"discriminator":   *t.Discriminator,
		"originator-addr": *t.OriginatorAddr,
		"originator-asn":  *t.OriginatorAsn,
		"protocol-origin": t.ProtocolOrigin,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct {
	Counters      *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters           `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	Id            *uint32                                                                               `path:"state/id|id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"id" shadow-module:"openconfig-network-instance"`
	InvalidReason E_SegmentRoutingTypes_SrteInvalidSlReason                                             `path:"state/invalid-reason" module:"openconfig-network-instance/openconfig-network-instance"`
	NextHop       map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop `path:"next-hops/next-hop" module:"openconfig-network-instance/openconfig-network-instance"`
	Sid           map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid     `path:"sids/sid" module:"openconfig-network-instance/openconfig-network-instance"`
	Valid         *bool                                                                                 `path:"state/valid" module:"openconfig-network-instance/openconfig-network-instance"`
	Weight        *uint32                                                                               `path:"state/weight" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) NewNextHop(Index uint64) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop{
		Index: &Index,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) RenameNextHop(oldK, newK uint64) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.Index = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetOrCreateNextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop {

	key := Index

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetNextHop(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) DeleteNextHop(Index uint64) {
	key := Index

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop struct to the
// list NextHop of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) AppendNextHop(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// NewSid creates a new entry in the Sid list of the
// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The keys of the list are populated from the input
// arguments.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) NewSid(Index uint64) (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sid == nil {
		t.Sid = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Sid[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Sid", key)
	}

	t.Sid[key] = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid{
		Index: &Index,
	}

	return t.Sid[key], nil
}

// RenameSid renames an entry in the list Sid within
// the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) RenameSid(oldK, newK uint64) error {
	if _, ok := t.Sid[newK]; ok {
		return fmt.Errorf("key %v already exists in Sid", newK)
	}

	e, ok := t.Sid[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Sid", oldK)
	}
	e.Index = &newK

	t.Sid[newK] = e
	delete(t.Sid, oldK)
	return nil
}

// GetOrCreateSid retrieves the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetOrCreateSid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid {

	key := Index

	if v, ok := t.Sid[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSid(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSid got unexpected error: %v", err))
	}
	return v
}

// GetSid retrieves the value with the specified key from
// the Sid map field of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetSid(Index uint64) *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Sid[key]; ok {
		return lm
	}
	return nil
}

// DeleteSid deletes the value with the specified keys from
// the receiver NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If there is no such element, the function
// is a no-op.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) DeleteSid(Index uint64) {
	key := Index

	delete(t.Sid, key)
}

// AppendSid appends the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid struct to the
// list Sid of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the key value(s) specified in
// the supplied NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid already exist in the list, an error is
// returned.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) AppendSid(v *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) error {
	if v.Index == nil {
		return fmt.Errorf("invalid nil key received for Index")
	}

	key := *v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Sid == nil {
		t.Sid = make(map[uint64]*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid)
	}

	if _, ok := t.Sid[key]; ok {
		return fmt.Errorf("duplicate key for list Sid %v", key)
	}

	t.Sid[key] = v
	return nil
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetOrCreateCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetInvalidReason retrieves the value of the leaf InvalidReason from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidReason is set, it can
// safely use t.GetInvalidReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidReason == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetInvalidReason() E_SegmentRoutingTypes_SrteInvalidSlReason {
	if t == nil || t.InvalidReason == 0 {
		return 0
	}
	return t.InvalidReason
}

// GetValid retrieves the value of the leaf Valid from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// GetWeight retrieves the value of the leaf Weight from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters struct {
	OutLabeledOctets *uint64 `path:"out-labeled-octets" module:"openconfig-network-instance"`
	OutLabeledPkts   *uint64 `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	OutOctets        *uint64 `path:"out-octets" module:"openconfig-network-instance"`
	OutPkts          *uint64 `path:"out-pkts" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) IsYANGGoStruct() {}

// GetOutLabeledOctets retrieves the value of the leaf OutLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledOctets is set, it can
// safely use t.GetOutLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutLabeledOctets() uint64 {
	if t == nil || t.OutLabeledOctets == nil {
		return 0
	}
	return *t.OutLabeledOctets
}

// GetOutLabeledPkts retrieves the value of the leaf OutLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledPkts is set, it can
// safely use t.GetOutLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutLabeledPkts() uint64 {
	if t == nil || t.OutLabeledPkts == nil {
		return 0
	}
	return *t.OutLabeledPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop struct {
	Counters             *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters                    `path:"state/counters" module:"openconfig-network-instance/openconfig-network-instance"`
	DecapsulateHeader    E_AftTypes_EncapsulationHeaderType                                                                     `path:"state/decapsulate-header" module:"openconfig-network-instance/openconfig-network-instance"`
	EncapsulateHeader    E_AftTypes_EncapsulationHeaderType                                                                     `path:"state/encapsulate-header" module:"openconfig-network-instance/openconfig-network-instance"`
	Index                *uint64                                                                                                `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"index" shadow-module:"openconfig-network-instance"`
	InterfaceRef         *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef                `path:"interface-ref" module:"openconfig-network-instance"`
	IpAddress            *string                                                                                                `path:"state/ip-address" module:"openconfig-network-instance/openconfig-network-instance"`
	MacAddress           *string                                                                                                `path:"state/mac-address" module:"openconfig-network-instance/openconfig-network-instance"`
	OriginProtocol       E_PolicyTypes_INSTALL_PROTOCOL_TYPE                                                                    `path:"state/origin-protocol" module:"openconfig-network-instance/openconfig-network-instance"`
	PopTopLabel          *bool                                                                                                  `path:"state/pop-top-label" module:"openconfig-network-instance/openconfig-network-instance"`
	ProgrammedIndex      *uint64                                                                                                `path:"state/programmed-index" module:"openconfig-network-instance/openconfig-network-instance"`
	PushedMplsLabelStack []NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union `path:"state/pushed-mpls-label-stack" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetOrCreateCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetOrCreateInterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef{}
	return t.InterfaceRef
}

// GetCounters returns the value of the Counters struct pointer
// from NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetCounters() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetInterfaceRef() *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetDecapsulateHeader retrieves the value of the leaf DecapsulateHeader from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DecapsulateHeader is set, it can
// safely use t.GetDecapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DecapsulateHeader == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetDecapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.DecapsulateHeader == 0 {
		return 0
	}
	return t.DecapsulateHeader
}

// GetEncapsulateHeader retrieves the value of the leaf EncapsulateHeader from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulateHeader is set, it can
// safely use t.GetEncapsulateHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulateHeader == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetEncapsulateHeader() E_AftTypes_EncapsulationHeaderType {
	if t == nil || t.EncapsulateHeader == 0 {
		return 0
	}
	return t.EncapsulateHeader
}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetOriginProtocol retrieves the value of the leaf OriginProtocol from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginProtocol is set, it can
// safely use t.GetOriginProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginProtocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetOriginProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.OriginProtocol == 0 {
		return 0
	}
	return t.OriginProtocol
}

// GetPopTopLabel retrieves the value of the leaf PopTopLabel from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PopTopLabel is set, it can
// safely use t.GetPopTopLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PopTopLabel == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetPopTopLabel() bool {
	if t == nil || t.PopTopLabel == nil {
		return false
	}
	return *t.PopTopLabel
}

// GetProgrammedIndex retrieves the value of the leaf ProgrammedIndex from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProgrammedIndex is set, it can
// safely use t.GetProgrammedIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProgrammedIndex == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetProgrammedIndex() uint64 {
	if t == nil || t.ProgrammedIndex == nil {
		return 0
	}
	return *t.ProgrammedIndex
}

// GetPushedMplsLabelStack retrieves the value of the leaf PushedMplsLabelStack from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PushedMplsLabelStack is set, it can
// safely use t.GetPushedMplsLabelStack() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PushedMplsLabelStack == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) GetPushedMplsLabelStack() []NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_PushedMplsLabelStack_Union {
	if t == nil || t.PushedMplsLabelStack == nil {
		return nil
	}
	return t.PushedMplsLabelStack
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters struct {
	OutLabeledOctets *uint64 `path:"out-labeled-octets" module:"openconfig-network-instance"`
	OutLabeledPkts   *uint64 `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	OutOctets        *uint64 `path:"out-octets" module:"openconfig-network-instance"`
	OutPkts          *uint64 `path:"out-pkts" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) IsYANGGoStruct() {
}

// GetOutLabeledOctets retrieves the value of the leaf OutLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledOctets is set, it can
// safely use t.GetOutLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutLabeledOctets() uint64 {
	if t == nil || t.OutLabeledOctets == nil {
		return 0
	}
	return *t.OutLabeledOctets
}

// GetOutLabeledPkts retrieves the value of the leaf OutLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledPkts is set, it can
// safely use t.GetOutLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutLabeledPkts() uint64 {
	if t == nil || t.OutLabeledPkts == nil {
		return 0
	}
	return *t.OutLabeledPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef struct {
	Interface    *string `path:"state/interface" module:"openconfig-network-instance/openconfig-network-instance"`
	Subinterface *uint32 `path:"state/subinterface" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) IsYANGGoStruct() {
}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_NextHop_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/candidate-paths/candidate-path/segment-lists/segment-list/sids/sid YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid struct {
	Index   *uint64                                                                           `path:"state/index|index" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"index" shadow-module:"openconfig-network-instance"`
	MplsTc  *uint8                                                                            `path:"state/mpls-tc" module:"openconfig-network-instance/openconfig-network-instance"`
	MplsTtl *uint8                                                                            `path:"state/mpls-ttl" module:"openconfig-network-instance/openconfig-network-instance"`
	Value   NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union `path:"state/value" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetIndex() uint64 {
	if t == nil || t.Index == nil {
		return 0
	}
	return *t.Index
}

// GetMplsTc retrieves the value of the leaf MplsTc from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTc is set, it can
// safely use t.GetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTc == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetMplsTc() uint8 {
	if t == nil || t.MplsTc == nil {
		return 0
	}
	return *t.MplsTc
}

// GetMplsTtl retrieves the value of the leaf MplsTtl from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTtl is set, it can
// safely use t.GetMplsTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTtl == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetMplsTtl() uint8 {
	if t == nil || t.MplsTtl == nil {
		return 0
	}
	return *t.MplsTtl
}

// GetValue retrieves the value of the leaf Value from the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) GetValue() NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid_Value_Union {
	if t == nil || t.Value == nil {
		return nil
	}
	return t.Value
}

// ΛListKeyMap returns the keys of the NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid struct, which is a YANG list entry.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Index == nil {
		return nil, fmt.Errorf("nil value for key Index")
	}

	return map[string]interface{}{
		"index": *t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid.
func (*NetworkInstance_SegmentRouting_TePolicy_CandidatePath_SegmentList_Sid) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_SegmentRouting_TePolicy_Counters represents the /openconfig-network-instance/network-instances/network-instance/segment-routing/te-policies/te-policy/state/counters YANG schema element.
type NetworkInstance_SegmentRouting_TePolicy_Counters struct {
	InLabeledOctets  *uint64 `path:"in-labeled-octets" module:"openconfig-network-instance"`
	InLabeledPkts    *uint64 `path:"in-labeled-pkts" module:"openconfig-network-instance"`
	InOctets         *uint64 `path:"in-octets" module:"openconfig-network-instance"`
	InPkts           *uint64 `path:"in-pkts" module:"openconfig-network-instance"`
	OutLabeledOctets *uint64 `path:"out-labeled-octets" module:"openconfig-network-instance"`
	OutLabeledPkts   *uint64 `path:"out-labeled-pkts" module:"openconfig-network-instance"`
	OutOctets        *uint64 `path:"out-octets" module:"openconfig-network-instance"`
	OutPkts          *uint64 `path:"out-pkts" module:"openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_SegmentRouting_TePolicy_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_SegmentRouting_TePolicy_Counters) IsYANGGoStruct() {}

// GetInLabeledOctets retrieves the value of the leaf InLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLabeledOctets is set, it can
// safely use t.GetInLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInLabeledOctets() uint64 {
	if t == nil || t.InLabeledOctets == nil {
		return 0
	}
	return *t.InLabeledOctets
}

// GetInLabeledPkts retrieves the value of the leaf InLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InLabeledPkts is set, it can
// safely use t.GetInLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInLabeledPkts() uint64 {
	if t == nil || t.InLabeledPkts == nil {
		return 0
	}
	return *t.InLabeledPkts
}

// GetInOctets retrieves the value of the leaf InOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InOctets is set, it can
// safely use t.GetInOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInOctets() uint64 {
	if t == nil || t.InOctets == nil {
		return 0
	}
	return *t.InOctets
}

// GetInPkts retrieves the value of the leaf InPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InPkts is set, it can
// safely use t.GetInPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetInPkts() uint64 {
	if t == nil || t.InPkts == nil {
		return 0
	}
	return *t.InPkts
}

// GetOutLabeledOctets retrieves the value of the leaf OutLabeledOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledOctets is set, it can
// safely use t.GetOutLabeledOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutLabeledOctets() uint64 {
	if t == nil || t.OutLabeledOctets == nil {
		return 0
	}
	return *t.OutLabeledOctets
}

// GetOutLabeledPkts retrieves the value of the leaf OutLabeledPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutLabeledPkts is set, it can
// safely use t.GetOutLabeledPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutLabeledPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutLabeledPkts() uint64 {
	if t == nil || t.OutLabeledPkts == nil {
		return 0
	}
	return *t.OutLabeledPkts
}

// GetOutOctets retrieves the value of the leaf OutOctets from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutOctets is set, it can
// safely use t.GetOutOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutOctets == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutOctets() uint64 {
	if t == nil || t.OutOctets == nil {
		return 0
	}
	return *t.OutOctets
}

// GetOutPkts retrieves the value of the leaf OutPkts from the NetworkInstance_SegmentRouting_TePolicy_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutPkts is set, it can
// safely use t.GetOutPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutPkts == nil' before retrieving the leaf's value.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) GetOutPkts() uint64 {
	if t == nil || t.OutPkts == nil {
		return 0
	}
	return *t.OutPkts
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_SegmentRouting_TePolicy_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_SegmentRouting_TePolicy_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_SegmentRouting_TePolicy_Counters.
func (*NetworkInstance_SegmentRouting_TePolicy_Counters) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Table represents the /openconfig-network-instance/network-instances/network-instance/tables/table YANG schema element.
type NetworkInstance_Table struct {
	AddressFamily E_Types_ADDRESS_FAMILY              `path:"config/address-family|address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/address-family|address-family" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	Protocol      E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"config/protocol|protocol" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/protocol|protocol" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Table implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Table) IsYANGGoStruct() {}

// GetAddressFamily retrieves the value of the leaf AddressFamily from the NetworkInstance_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressFamily is set, it can
// safely use t.GetAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Table) GetAddressFamily() E_Types_ADDRESS_FAMILY {
	if t == nil || t.AddressFamily == 0 {
		return 0
	}
	return t.AddressFamily
}

// GetProtocol retrieves the value of the leaf Protocol from the NetworkInstance_Table
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Table) GetProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.Protocol == 0 {
		return 0
	}
	return t.Protocol
}

// ΛListKeyMap returns the keys of the NetworkInstance_Table struct, which is a YANG list entry.
func (t *NetworkInstance_Table) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"address-family": t.AddressFamily,
		"protocol":       t.Protocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Table) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Table"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Table) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Table) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Table.
func (*NetworkInstance_Table) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_TableConnection represents the /openconfig-network-instance/network-instances/network-instance/table-connections/table-connection YANG schema element.
type NetworkInstance_TableConnection struct {
	AddressFamily            E_Types_ADDRESS_FAMILY              `path:"config/address-family|address-family" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/address-family|address-family" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	DefaultImportPolicy      E_RoutingPolicy_DefaultPolicyType   `path:"config/default-import-policy" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/default-import-policy" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	DisableMetricPropagation *bool                               `path:"config/disable-metric-propagation" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/disable-metric-propagation" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	DstProtocol              E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"config/dst-protocol|dst-protocol" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/dst-protocol|dst-protocol" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
	ImportPolicy             []string                            `path:"config/import-policy" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/import-policy" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	SrcProtocol              E_PolicyTypes_INSTALL_PROTOCOL_TYPE `path:"config/src-protocol|src-protocol" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/src-protocol|src-protocol" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_TableConnection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_TableConnection) IsYANGGoStruct() {}

// GetAddressFamily retrieves the value of the leaf AddressFamily from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressFamily is set, it can
// safely use t.GetAddressFamily() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressFamily == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetAddressFamily() E_Types_ADDRESS_FAMILY {
	if t == nil || t.AddressFamily == 0 {
		return 0
	}
	return t.AddressFamily
}

// GetDefaultImportPolicy retrieves the value of the leaf DefaultImportPolicy from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultImportPolicy is set, it can
// safely use t.GetDefaultImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetDefaultImportPolicy() E_RoutingPolicy_DefaultPolicyType {
	if t == nil || t.DefaultImportPolicy == 0 {
		return RoutingPolicy_DefaultPolicyType_REJECT_ROUTE
	}
	return t.DefaultImportPolicy
}

// GetDisableMetricPropagation retrieves the value of the leaf DisableMetricPropagation from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DisableMetricPropagation is set, it can
// safely use t.GetDisableMetricPropagation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DisableMetricPropagation == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetDisableMetricPropagation() bool {
	if t == nil || t.DisableMetricPropagation == nil {
		return false
	}
	return *t.DisableMetricPropagation
}

// GetDstProtocol retrieves the value of the leaf DstProtocol from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstProtocol is set, it can
// safely use t.GetDstProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstProtocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetDstProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.DstProtocol == 0 {
		return 0
	}
	return t.DstProtocol
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetImportPolicy() []string {
	if t == nil || t.ImportPolicy == nil {
		return nil
	}
	return t.ImportPolicy
}

// GetSrcProtocol retrieves the value of the leaf SrcProtocol from the NetworkInstance_TableConnection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SrcProtocol is set, it can
// safely use t.GetSrcProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SrcProtocol == nil' before retrieving the leaf's value.
func (t *NetworkInstance_TableConnection) GetSrcProtocol() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.SrcProtocol == 0 {
		return 0
	}
	return t.SrcProtocol
}

// ΛListKeyMap returns the keys of the NetworkInstance_TableConnection struct, which is a YANG list entry.
func (t *NetworkInstance_TableConnection) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"address-family": t.AddressFamily,
		"dst-protocol":   t.DstProtocol,
		"src-protocol":   t.SrcProtocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_TableConnection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_TableConnection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_TableConnection) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_TableConnection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_TableConnection.
func (*NetworkInstance_TableConnection) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Vlan represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan YANG schema element.
type NetworkInstance_Vlan struct {
	Member []*NetworkInstance_Vlan_Member `path:"members/member" module:"openconfig-network-instance/openconfig-network-instance"`
	Name   *string                        `path:"config/name" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/name" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	Status E_Vlan_Vlan_Status             `path:"config/status" module:"openconfig-network-instance/openconfig-network-instance" shadow-path:"state/status" shadow-module:"openconfig-network-instance/openconfig-network-instance"`
	VlanId *uint16                        `path:"config/vlan-id|vlan-id" module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance" shadow-path:"state/vlan-id|vlan-id" shadow-module:"openconfig-network-instance/openconfig-network-instance|openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Vlan) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStatus retrieves the value of the leaf Status from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Status is set, it can
// safely use t.GetStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Status == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetStatus() E_Vlan_Vlan_Status {
	if t == nil || t.Status == 0 {
		return Vlan_Vlan_Status_ACTIVE
	}
	return t.Status
}

// GetVlanId retrieves the value of the leaf VlanId from the NetworkInstance_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// ΛListKeyMap returns the keys of the NetworkInstance_Vlan struct, which is a YANG list entry.
func (t *NetworkInstance_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Vlan.
func (*NetworkInstance_Vlan) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// NetworkInstance_Vlan_Member represents the /openconfig-network-instance/network-instances/network-instance/vlans/vlan/members/member YANG schema element.
type NetworkInstance_Vlan_Member struct {
	Interface *string `path:"state/interface" module:"openconfig-network-instance/openconfig-network-instance"`
}

// IsYANGGoStruct ensures that NetworkInstance_Vlan_Member implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NetworkInstance_Vlan_Member) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the NetworkInstance_Vlan_Member
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *NetworkInstance_Vlan_Member) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan_Member) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NetworkInstance_Vlan_Member"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NetworkInstance_Vlan_Member) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NetworkInstance_Vlan_Member) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NetworkInstance_Vlan_Member.
func (*NetworkInstance_Vlan_Member) ΛBelongingModule() string {
	return "openconfig-network-instance"
}

// Qos represents the /openconfig-qos/qos YANG schema element.
type Qos struct {
	BufferAllocationProfile map[string]*Qos_BufferAllocationProfile `path:"buffer-allocation-profiles/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos"`
	Classifier              map[string]*Qos_Classifier              `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	ForwardingGroup         map[string]*Qos_ForwardingGroup         `path:"forwarding-groups/forwarding-group" module:"openconfig-qos/openconfig-qos"`
	Interface               map[string]*Qos_Interface               `path:"interfaces/interface" module:"openconfig-qos/openconfig-qos"`
	Queue                   map[string]*Qos_Queue                   `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	QueueManagementProfile  map[string]*Qos_QueueManagementProfile  `path:"queue-management-profiles/queue-management-profile" module:"openconfig-qos/openconfig-qos"`
	SchedulerPolicy         map[string]*Qos_SchedulerPolicy         `path:"scheduler-policies/scheduler-policy" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos) IsYANGGoStruct() {}

// NewBufferAllocationProfile creates a new entry in the BufferAllocationProfile list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewBufferAllocationProfile(Name string) (*Qos_BufferAllocationProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*Qos_BufferAllocationProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BufferAllocationProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BufferAllocationProfile", key)
	}

	t.BufferAllocationProfile[key] = &Qos_BufferAllocationProfile{
		Name: &Name,
	}

	return t.BufferAllocationProfile[key], nil
}

// RenameBufferAllocationProfile renames an entry in the list BufferAllocationProfile within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameBufferAllocationProfile(oldK, newK string) error {
	if _, ok := t.BufferAllocationProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in BufferAllocationProfile", newK)
	}

	e, ok := t.BufferAllocationProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BufferAllocationProfile", oldK)
	}
	e.Name = &newK

	t.BufferAllocationProfile[newK] = e
	delete(t.BufferAllocationProfile, oldK)
	return nil
}

// GetOrCreateBufferAllocationProfile retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateBufferAllocationProfile(Name string) *Qos_BufferAllocationProfile {

	key := Name

	if v, ok := t.BufferAllocationProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBufferAllocationProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBufferAllocationProfile got unexpected error: %v", err))
	}
	return v
}

// GetBufferAllocationProfile retrieves the value with the specified key from
// the BufferAllocationProfile map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetBufferAllocationProfile(Name string) *Qos_BufferAllocationProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.BufferAllocationProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteBufferAllocationProfile deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteBufferAllocationProfile(Name string) {
	key := Name

	delete(t.BufferAllocationProfile, key)
}

// AppendBufferAllocationProfile appends the supplied Qos_BufferAllocationProfile struct to the
// list BufferAllocationProfile of Qos. If the key value(s) specified in
// the supplied Qos_BufferAllocationProfile already exist in the list, an error is
// returned.
func (t *Qos) AppendBufferAllocationProfile(v *Qos_BufferAllocationProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BufferAllocationProfile == nil {
		t.BufferAllocationProfile = make(map[string]*Qos_BufferAllocationProfile)
	}

	if _, ok := t.BufferAllocationProfile[key]; ok {
		return fmt.Errorf("duplicate key for list BufferAllocationProfile %v", key)
	}

	t.BufferAllocationProfile[key] = v
	return nil
}

// NewClassifier creates a new entry in the Classifier list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewClassifier(Name string) (*Qos_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Classifier{
		Name: &Name,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameClassifier(oldK, newK string) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Name = &newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateClassifier(Name string) *Qos_Classifier {

	key := Name

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetClassifier(Name string) *Qos_Classifier {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteClassifier(Name string) {
	key := Name

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Classifier struct to the
// list Classifier of Qos. If the key value(s) specified in
// the supplied Qos_Classifier already exist in the list, an error is
// returned.
func (t *Qos) AppendClassifier(v *Qos_Classifier) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[string]*Qos_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewForwardingGroup creates a new entry in the ForwardingGroup list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewForwardingGroup(Name string) (*Qos_ForwardingGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ForwardingGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ForwardingGroup", key)
	}

	t.ForwardingGroup[key] = &Qos_ForwardingGroup{
		Name: &Name,
	}

	return t.ForwardingGroup[key], nil
}

// RenameForwardingGroup renames an entry in the list ForwardingGroup within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameForwardingGroup(oldK, newK string) error {
	if _, ok := t.ForwardingGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ForwardingGroup", newK)
	}

	e, ok := t.ForwardingGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ForwardingGroup", oldK)
	}
	e.Name = &newK

	t.ForwardingGroup[newK] = e
	delete(t.ForwardingGroup, oldK)
	return nil
}

// GetOrCreateForwardingGroup retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateForwardingGroup(Name string) *Qos_ForwardingGroup {

	key := Name

	if v, ok := t.ForwardingGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewForwardingGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateForwardingGroup got unexpected error: %v", err))
	}
	return v
}

// GetForwardingGroup retrieves the value with the specified key from
// the ForwardingGroup map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetForwardingGroup(Name string) *Qos_ForwardingGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ForwardingGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteForwardingGroup deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteForwardingGroup(Name string) {
	key := Name

	delete(t.ForwardingGroup, key)
}

// AppendForwardingGroup appends the supplied Qos_ForwardingGroup struct to the
// list ForwardingGroup of Qos. If the key value(s) specified in
// the supplied Qos_ForwardingGroup already exist in the list, an error is
// returned.
func (t *Qos) AppendForwardingGroup(v *Qos_ForwardingGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ForwardingGroup == nil {
		t.ForwardingGroup = make(map[string]*Qos_ForwardingGroup)
	}

	if _, ok := t.ForwardingGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ForwardingGroup %v", key)
	}

	t.ForwardingGroup[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewInterface(InterfaceId string) (*Qos_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}

	key := InterfaceId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Qos_Interface{
		InterfaceId: &InterfaceId,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.InterfaceId = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateInterface(InterfaceId string) *Qos_Interface {

	key := InterfaceId

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(InterfaceId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetInterface(InterfaceId string) *Qos_Interface {

	if t == nil {
		return nil
	}

	key := InterfaceId

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteInterface(InterfaceId string) {
	key := InterfaceId

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Qos_Interface struct to the
// list Interface of Qos. If the key value(s) specified in
// the supplied Qos_Interface already exist in the list, an error is
// returned.
func (t *Qos) AppendInterface(v *Qos_Interface) error {
	if v.InterfaceId == nil {
		return fmt.Errorf("invalid nil key received for InterfaceId")
	}

	key := *v.InterfaceId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Qos_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewQueue(Name string) (*Qos_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateQueue(Name string) *Qos_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetQueue(Name string) *Qos_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Queue struct to the
// list Queue of Qos. If the key value(s) specified in
// the supplied Qos_Queue already exist in the list, an error is
// returned.
func (t *Qos) AppendQueue(v *Qos_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewQueueManagementProfile creates a new entry in the QueueManagementProfile list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewQueueManagementProfile(Name string) (*Qos_QueueManagementProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*Qos_QueueManagementProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.QueueManagementProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list QueueManagementProfile", key)
	}

	t.QueueManagementProfile[key] = &Qos_QueueManagementProfile{
		Name: &Name,
	}

	return t.QueueManagementProfile[key], nil
}

// RenameQueueManagementProfile renames an entry in the list QueueManagementProfile within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameQueueManagementProfile(oldK, newK string) error {
	if _, ok := t.QueueManagementProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in QueueManagementProfile", newK)
	}

	e, ok := t.QueueManagementProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in QueueManagementProfile", oldK)
	}
	e.Name = &newK

	t.QueueManagementProfile[newK] = e
	delete(t.QueueManagementProfile, oldK)
	return nil
}

// GetOrCreateQueueManagementProfile retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateQueueManagementProfile(Name string) *Qos_QueueManagementProfile {

	key := Name

	if v, ok := t.QueueManagementProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueueManagementProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueueManagementProfile got unexpected error: %v", err))
	}
	return v
}

// GetQueueManagementProfile retrieves the value with the specified key from
// the QueueManagementProfile map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetQueueManagementProfile(Name string) *Qos_QueueManagementProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.QueueManagementProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueueManagementProfile deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteQueueManagementProfile(Name string) {
	key := Name

	delete(t.QueueManagementProfile, key)
}

// AppendQueueManagementProfile appends the supplied Qos_QueueManagementProfile struct to the
// list QueueManagementProfile of Qos. If the key value(s) specified in
// the supplied Qos_QueueManagementProfile already exist in the list, an error is
// returned.
func (t *Qos) AppendQueueManagementProfile(v *Qos_QueueManagementProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.QueueManagementProfile == nil {
		t.QueueManagementProfile = make(map[string]*Qos_QueueManagementProfile)
	}

	if _, ok := t.QueueManagementProfile[key]; ok {
		return fmt.Errorf("duplicate key for list QueueManagementProfile %v", key)
	}

	t.QueueManagementProfile[key] = v
	return nil
}

// NewSchedulerPolicy creates a new entry in the SchedulerPolicy list of the
// Qos struct. The keys of the list are populated from the input
// arguments.
func (t *Qos) NewSchedulerPolicy(Name string) (*Qos_SchedulerPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SchedulerPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SchedulerPolicy", key)
	}

	t.SchedulerPolicy[key] = &Qos_SchedulerPolicy{
		Name: &Name,
	}

	return t.SchedulerPolicy[key], nil
}

// RenameSchedulerPolicy renames an entry in the list SchedulerPolicy within
// the Qos struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos) RenameSchedulerPolicy(oldK, newK string) error {
	if _, ok := t.SchedulerPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in SchedulerPolicy", newK)
	}

	e, ok := t.SchedulerPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SchedulerPolicy", oldK)
	}
	e.Name = &newK

	t.SchedulerPolicy[newK] = e
	delete(t.SchedulerPolicy, oldK)
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value with the specified keys from
// the receiver Qos. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos) GetOrCreateSchedulerPolicy(Name string) *Qos_SchedulerPolicy {

	key := Name

	if v, ok := t.SchedulerPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedulerPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedulerPolicy got unexpected error: %v", err))
	}
	return v
}

// GetSchedulerPolicy retrieves the value with the specified key from
// the SchedulerPolicy map field of Qos. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos) GetSchedulerPolicy(Name string) *Qos_SchedulerPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SchedulerPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedulerPolicy deletes the value with the specified keys from
// the receiver Qos. If there is no such element, the function
// is a no-op.
func (t *Qos) DeleteSchedulerPolicy(Name string) {
	key := Name

	delete(t.SchedulerPolicy, key)
}

// AppendSchedulerPolicy appends the supplied Qos_SchedulerPolicy struct to the
// list SchedulerPolicy of Qos. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy already exist in the list, an error is
// returned.
func (t *Qos) AppendSchedulerPolicy(v *Qos_SchedulerPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SchedulerPolicy == nil {
		t.SchedulerPolicy = make(map[string]*Qos_SchedulerPolicy)
	}

	if _, ok := t.SchedulerPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list SchedulerPolicy %v", key)
	}

	t.SchedulerPolicy[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos.
func (*Qos) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_BufferAllocationProfile represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile YANG schema element.
type Qos_BufferAllocationProfile struct {
	Name  *string                                       `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Queue map[string]*Qos_BufferAllocationProfile_Queue `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_BufferAllocationProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_BufferAllocationProfile) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Qos_BufferAllocationProfile struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_BufferAllocationProfile) NewQueue(Name string) (*Qos_BufferAllocationProfile_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_BufferAllocationProfile_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_BufferAllocationProfile_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_BufferAllocationProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_BufferAllocationProfile) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_BufferAllocationProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_BufferAllocationProfile) GetOrCreateQueue(Name string) *Qos_BufferAllocationProfile_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_BufferAllocationProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_BufferAllocationProfile) GetQueue(Name string) *Qos_BufferAllocationProfile_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_BufferAllocationProfile. If there is no such element, the function
// is a no-op.
func (t *Qos_BufferAllocationProfile) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_BufferAllocationProfile_Queue struct to the
// list Queue of Qos_BufferAllocationProfile. If the key value(s) specified in
// the supplied Qos_BufferAllocationProfile_Queue already exist in the list, an error is
// returned.
func (t *Qos_BufferAllocationProfile) AppendQueue(v *Qos_BufferAllocationProfile_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_BufferAllocationProfile_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_BufferAllocationProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Qos_BufferAllocationProfile struct, which is a YANG list entry.
func (t *Qos_BufferAllocationProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_BufferAllocationProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_BufferAllocationProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_BufferAllocationProfile.
func (*Qos_BufferAllocationProfile) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_BufferAllocationProfile_Queue represents the /openconfig-qos/qos/buffer-allocation-profiles/buffer-allocation-profile/queues/queue YANG schema element.
type Qos_BufferAllocationProfile_Queue struct {
	DedicatedBuffer           *uint64                        `path:"config/dedicated-buffer" module:"openconfig-qos/openconfig-qos" shadow-path:"state/dedicated-buffer" shadow-module:"openconfig-qos/openconfig-qos"`
	DynamicLimitScalingFactor *int32                         `path:"config/dynamic-limit-scaling-factor" module:"openconfig-qos/openconfig-qos" shadow-path:"state/dynamic-limit-scaling-factor" shadow-module:"openconfig-qos/openconfig-qos"`
	Name                      *string                        `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	SharedBufferLimitType     E_Qos_SHARED_BUFFER_LIMIT_TYPE `path:"config/shared-buffer-limit-type" module:"openconfig-qos/openconfig-qos" shadow-path:"state/shared-buffer-limit-type" shadow-module:"openconfig-qos/openconfig-qos"`
	StaticSharedBufferLimit   *uint32                        `path:"config/static-shared-buffer-limit" module:"openconfig-qos/openconfig-qos" shadow-path:"state/static-shared-buffer-limit" shadow-module:"openconfig-qos/openconfig-qos"`
	UseSharedBuffer           *bool                          `path:"config/use-shared-buffer" module:"openconfig-qos/openconfig-qos" shadow-path:"state/use-shared-buffer" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_BufferAllocationProfile_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_BufferAllocationProfile_Queue) IsYANGGoStruct() {}

// GetDedicatedBuffer retrieves the value of the leaf DedicatedBuffer from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DedicatedBuffer is set, it can
// safely use t.GetDedicatedBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DedicatedBuffer == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDedicatedBuffer() uint64 {
	if t == nil || t.DedicatedBuffer == nil {
		return 0
	}
	return *t.DedicatedBuffer
}

// GetDynamicLimitScalingFactor retrieves the value of the leaf DynamicLimitScalingFactor from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLimitScalingFactor is set, it can
// safely use t.GetDynamicLimitScalingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLimitScalingFactor == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetDynamicLimitScalingFactor() int32 {
	if t == nil || t.DynamicLimitScalingFactor == nil {
		return 0
	}
	return *t.DynamicLimitScalingFactor
}

// GetName retrieves the value of the leaf Name from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSharedBufferLimitType retrieves the value of the leaf SharedBufferLimitType from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SharedBufferLimitType is set, it can
// safely use t.GetSharedBufferLimitType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SharedBufferLimitType == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetSharedBufferLimitType() E_Qos_SHARED_BUFFER_LIMIT_TYPE {
	if t == nil || t.SharedBufferLimitType == 0 {
		return 0
	}
	return t.SharedBufferLimitType
}

// GetStaticSharedBufferLimit retrieves the value of the leaf StaticSharedBufferLimit from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StaticSharedBufferLimit is set, it can
// safely use t.GetStaticSharedBufferLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StaticSharedBufferLimit == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetStaticSharedBufferLimit() uint32 {
	if t == nil || t.StaticSharedBufferLimit == nil {
		return 0
	}
	return *t.StaticSharedBufferLimit
}

// GetUseSharedBuffer retrieves the value of the leaf UseSharedBuffer from the Qos_BufferAllocationProfile_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseSharedBuffer is set, it can
// safely use t.GetUseSharedBuffer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseSharedBuffer == nil' before retrieving the leaf's value.
func (t *Qos_BufferAllocationProfile_Queue) GetUseSharedBuffer() bool {
	if t == nil || t.UseSharedBuffer == nil {
		return false
	}
	return *t.UseSharedBuffer
}

// ΛListKeyMap returns the keys of the Qos_BufferAllocationProfile_Queue struct, which is a YANG list entry.
func (t *Qos_BufferAllocationProfile_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_BufferAllocationProfile_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_BufferAllocationProfile_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_BufferAllocationProfile_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_BufferAllocationProfile_Queue.
func (*Qos_BufferAllocationProfile_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier represents the /openconfig-qos/qos/classifiers/classifier YANG schema element.
type Qos_Classifier struct {
	Name *string                         `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Term map[string]*Qos_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	Type E_Qos_Qos_Classifier_Type       `path:"config/type" module:"openconfig-qos/openconfig-qos" shadow-path:"state/type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Classifier) NewTerm(Id string) (*Qos_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Classifier) GetOrCreateTerm(Id string) *Qos_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Classifier) GetTerm(Id string) *Qos_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Classifier_Term struct to the
// list Term of Qos_Classifier. If the key value(s) specified in
// the supplied Qos_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Classifier) AppendTerm(v *Qos_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Classifier) GetType() E_Qos_Qos_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Qos_Classifier struct, which is a YANG list entry.
func (t *Qos_Classifier) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier.
func (*Qos_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term represents the /openconfig-qos/qos/classifiers/classifier/terms/term YANG schema element.
type Qos_Classifier_Term struct {
	Actions    *Qos_Classifier_Term_Actions    `path:"actions" module:"openconfig-qos"`
	Conditions *Qos_Classifier_Term_Conditions `path:"conditions" module:"openconfig-qos"`
	Id         *string                         `path:"config/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/id|id" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateActions() *Qos_Classifier_Term_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &Qos_Classifier_Term_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term) GetOrCreateConditions() *Qos_Classifier_Term_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &Qos_Classifier_Term_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetActions() *Qos_Classifier_Term_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from Qos_Classifier_Term. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term) GetConditions() *Qos_Classifier_Term_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the Qos_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// ΛListKeyMap returns the keys of the Qos_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term.
func (*Qos_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Actions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions YANG schema element.
type Qos_Classifier_Term_Actions struct {
	Remark      *Qos_Classifier_Term_Actions_Remark `path:"remark" module:"openconfig-qos"`
	TargetGroup *string                             `path:"config/target-group" module:"openconfig-qos/openconfig-qos" shadow-path:"state/target-group" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions) IsYANGGoStruct() {}

// GetOrCreateRemark retrieves the value of the Remark field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Actions) GetOrCreateRemark() *Qos_Classifier_Term_Actions_Remark {
	if t.Remark != nil {
		return t.Remark
	}
	t.Remark = &Qos_Classifier_Term_Actions_Remark{}
	return t.Remark
}

// GetRemark returns the value of the Remark struct pointer
// from Qos_Classifier_Term_Actions. If the receiver or the field Remark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Actions) GetRemark() *Qos_Classifier_Term_Actions_Remark {
	if t != nil && t.Remark != nil {
		return t.Remark
	}
	return nil
}

// GetTargetGroup retrieves the value of the leaf TargetGroup from the Qos_Classifier_Term_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TargetGroup is set, it can
// safely use t.GetTargetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TargetGroup == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions) GetTargetGroup() string {
	if t == nil || t.TargetGroup == nil {
		return ""
	}
	return *t.TargetGroup
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Actions.
func (*Qos_Classifier_Term_Actions) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Actions_Remark represents the /openconfig-qos/qos/classifiers/classifier/terms/term/actions/remark YANG schema element.
type Qos_Classifier_Term_Actions_Remark struct {
	SetDot1P  *uint8 `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Actions_Remark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Actions_Remark) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_Classifier_Term_Actions_Remark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Actions_Remark) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions_Remark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Actions_Remark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Actions_Remark) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Actions_Remark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Actions_Remark.
func (*Qos_Classifier_Term_Actions_Remark) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions YANG schema element.
type Qos_Classifier_Term_Conditions struct {
	Ipv4      *Qos_Classifier_Term_Conditions_Ipv4      `path:"ipv4" module:"openconfig-qos"`
	Ipv6      *Qos_Classifier_Term_Conditions_Ipv6      `path:"ipv6" module:"openconfig-qos"`
	L2        *Qos_Classifier_Term_Conditions_L2        `path:"l2" module:"openconfig-qos"`
	Mpls      *Qos_Classifier_Term_Conditions_Mpls      `path:"mpls" module:"openconfig-qos"`
	Transport *Qos_Classifier_Term_Conditions_Transport `path:"transport" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &Qos_Classifier_Term_Conditions_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &Qos_Classifier_Term_Conditions_Ipv6{}
	return t.Ipv6
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateL2() *Qos_Classifier_Term_Conditions_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &Qos_Classifier_Term_Conditions_L2{}
	return t.L2
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &Qos_Classifier_Term_Conditions_Mpls{}
	return t.Mpls
}

// GetOrCreateTransport retrieves the value of the Transport field
// or returns the existing field if it already exists.
func (t *Qos_Classifier_Term_Conditions) GetOrCreateTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t.Transport != nil {
		return t.Transport
	}
	t.Transport = &Qos_Classifier_Term_Conditions_Transport{}
	return t.Transport
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv4() *Qos_Classifier_Term_Conditions_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetIpv6() *Qos_Classifier_Term_Conditions_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetL2() *Qos_Classifier_Term_Conditions_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetMpls() *Qos_Classifier_Term_Conditions_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetTransport returns the value of the Transport struct pointer
// from Qos_Classifier_Term_Conditions. If the receiver or the field Transport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Classifier_Term_Conditions) GetTransport() *Qos_Classifier_Term_Conditions_Transport {
	if t != nil && t.Transport != nil {
		return t.Transport
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions.
func (*Qos_Classifier_Term_Conditions) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv4 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv4 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv4 struct {
	DestinationAddress *string                                            `path:"config/destination-address" module:"openconfig-qos/openconfig-qos" shadow-path:"state/destination-address" shadow-module:"openconfig-qos/openconfig-qos"`
	Dscp               *uint8                                             `path:"config/dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	DscpSet            []uint8                                            `path:"config/dscp-set" module:"openconfig-qos/openconfig-qos" shadow-path:"state/dscp-set" shadow-module:"openconfig-qos/openconfig-qos"`
	HopLimit           *uint8                                             `path:"config/hop-limit" module:"openconfig-qos/openconfig-qos" shadow-path:"state/hop-limit" shadow-module:"openconfig-qos/openconfig-qos"`
	Protocol           Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union `path:"config/protocol" module:"openconfig-qos/openconfig-qos" shadow-path:"state/protocol" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceAddress      *string                                            `path:"config/source-address" module:"openconfig-qos/openconfig-qos" shadow-path:"state/source-address" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv4) IsYANGGoStruct() {}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDscp retrieves the value of the leaf Dscp from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetProtocol retrieves the value of the leaf Protocol from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetProtocol() Qos_Classifier_Term_Conditions_Ipv4_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Qos_Classifier_Term_Conditions_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv4) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv4) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv4.
func (*Qos_Classifier_Term_Conditions_Ipv4) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Ipv6 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/ipv6 YANG schema element.
type Qos_Classifier_Term_Conditions_Ipv6 struct {
	DestinationAddress   *string                                            `path:"config/destination-address" module:"openconfig-qos/openconfig-qos" shadow-path:"state/destination-address" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationFlowLabel *uint32                                            `path:"config/destination-flow-label" module:"openconfig-qos/openconfig-qos" shadow-path:"state/destination-flow-label" shadow-module:"openconfig-qos/openconfig-qos"`
	Dscp                 *uint8                                             `path:"config/dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	DscpSet              []uint8                                            `path:"config/dscp-set" module:"openconfig-qos/openconfig-qos" shadow-path:"state/dscp-set" shadow-module:"openconfig-qos/openconfig-qos"`
	HopLimit             *uint8                                             `path:"config/hop-limit" module:"openconfig-qos/openconfig-qos" shadow-path:"state/hop-limit" shadow-module:"openconfig-qos/openconfig-qos"`
	Protocol             Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union `path:"config/protocol" module:"openconfig-qos/openconfig-qos" shadow-path:"state/protocol" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceAddress        *string                                            `path:"config/source-address" module:"openconfig-qos/openconfig-qos" shadow-path:"state/source-address" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceFlowLabel      *uint32                                            `path:"config/source-flow-label" module:"openconfig-qos/openconfig-qos" shadow-path:"state/source-flow-label" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Ipv6) IsYANGGoStruct() {}

// GetDestinationAddress retrieves the value of the leaf DestinationAddress from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationAddress is set, it can
// safely use t.GetDestinationAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationAddress() string {
	if t == nil || t.DestinationAddress == nil {
		return ""
	}
	return *t.DestinationAddress
}

// GetDestinationFlowLabel retrieves the value of the leaf DestinationFlowLabel from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationFlowLabel is set, it can
// safely use t.GetDestinationFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationFlowLabel == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDestinationFlowLabel() uint32 {
	if t == nil || t.DestinationFlowLabel == nil {
		return 0
	}
	return *t.DestinationFlowLabel
}

// GetDscp retrieves the value of the leaf Dscp from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetDscpSet retrieves the value of the leaf DscpSet from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DscpSet is set, it can
// safely use t.GetDscpSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DscpSet == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetDscpSet() []uint8 {
	if t == nil || t.DscpSet == nil {
		return nil
	}
	return t.DscpSet
}

// GetHopLimit retrieves the value of the leaf HopLimit from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopLimit is set, it can
// safely use t.GetHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopLimit == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetHopLimit() uint8 {
	if t == nil || t.HopLimit == nil {
		return 0
	}
	return *t.HopLimit
}

// GetProtocol retrieves the value of the leaf Protocol from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetProtocol() Qos_Classifier_Term_Conditions_Ipv6_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourceFlowLabel retrieves the value of the leaf SourceFlowLabel from the Qos_Classifier_Term_Conditions_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceFlowLabel is set, it can
// safely use t.GetSourceFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceFlowLabel == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Ipv6) GetSourceFlowLabel() uint32 {
	if t == nil || t.SourceFlowLabel == nil {
		return 0
	}
	return *t.SourceFlowLabel
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Ipv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Ipv6.
func (*Qos_Classifier_Term_Conditions_Ipv6) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_L2 represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/l2 YANG schema element.
type Qos_Classifier_Term_Conditions_L2 struct {
	DestinationMac     *string                                           `path:"config/destination-mac" module:"openconfig-qos/openconfig-qos" shadow-path:"state/destination-mac" shadow-module:"openconfig-qos/openconfig-qos"`
	DestinationMacMask *string                                           `path:"config/destination-mac-mask" module:"openconfig-qos/openconfig-qos" shadow-path:"state/destination-mac-mask" shadow-module:"openconfig-qos/openconfig-qos"`
	Ethertype          Qos_Classifier_Term_Conditions_L2_Ethertype_Union `path:"config/ethertype" module:"openconfig-qos/openconfig-qos" shadow-path:"state/ethertype" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceMac          *string                                           `path:"config/source-mac" module:"openconfig-qos/openconfig-qos" shadow-path:"state/source-mac" shadow-module:"openconfig-qos/openconfig-qos"`
	SourceMacMask      *string                                           `path:"config/source-mac-mask" module:"openconfig-qos/openconfig-qos" shadow-path:"state/source-mac-mask" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_L2) IsYANGGoStruct() {}

// GetDestinationMac retrieves the value of the leaf DestinationMac from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMac is set, it can
// safely use t.GetDestinationMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMac == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetDestinationMac() string {
	if t == nil || t.DestinationMac == nil {
		return ""
	}
	return *t.DestinationMac
}

// GetDestinationMacMask retrieves the value of the leaf DestinationMacMask from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationMacMask is set, it can
// safely use t.GetDestinationMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationMacMask == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetDestinationMacMask() string {
	if t == nil || t.DestinationMacMask == nil {
		return ""
	}
	return *t.DestinationMacMask
}

// GetEthertype retrieves the value of the leaf Ethertype from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ethertype is set, it can
// safely use t.GetEthertype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ethertype == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetEthertype() Qos_Classifier_Term_Conditions_L2_Ethertype_Union {
	if t == nil || t.Ethertype == nil {
		return nil
	}
	return t.Ethertype
}

// GetSourceMac retrieves the value of the leaf SourceMac from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// GetSourceMacMask retrieves the value of the leaf SourceMacMask from the Qos_Classifier_Term_Conditions_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMacMask is set, it can
// safely use t.GetSourceMacMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMacMask == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_L2) GetSourceMacMask() string {
	if t == nil || t.SourceMacMask == nil {
		return ""
	}
	return *t.SourceMacMask
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_L2) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_L2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_L2.
func (*Qos_Classifier_Term_Conditions_L2) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Mpls represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/mpls YANG schema element.
type Qos_Classifier_Term_Conditions_Mpls struct {
	EndLabelValue   Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union   `path:"config/end-label-value" module:"openconfig-qos/openconfig-qos" shadow-path:"state/end-label-value" shadow-module:"openconfig-qos/openconfig-qos"`
	StartLabelValue Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union `path:"config/start-label-value" module:"openconfig-qos/openconfig-qos" shadow-path:"state/start-label-value" shadow-module:"openconfig-qos/openconfig-qos"`
	TrafficClass    *uint8                                                    `path:"config/traffic-class" module:"openconfig-qos/openconfig-qos" shadow-path:"state/traffic-class" shadow-module:"openconfig-qos/openconfig-qos"`
	TtlValue        *uint8                                                    `path:"config/ttl-value" module:"openconfig-qos/openconfig-qos" shadow-path:"state/ttl-value" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Mpls) IsYANGGoStruct() {}

// GetEndLabelValue retrieves the value of the leaf EndLabelValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndLabelValue is set, it can
// safely use t.GetEndLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndLabelValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetEndLabelValue() Qos_Classifier_Term_Conditions_Mpls_EndLabelValue_Union {
	if t == nil || t.EndLabelValue == nil {
		return nil
	}
	return t.EndLabelValue
}

// GetStartLabelValue retrieves the value of the leaf StartLabelValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartLabelValue is set, it can
// safely use t.GetStartLabelValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartLabelValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetStartLabelValue() Qos_Classifier_Term_Conditions_Mpls_StartLabelValue_Union {
	if t == nil || t.StartLabelValue == nil {
		return nil
	}
	return t.StartLabelValue
}

// GetTrafficClass retrieves the value of the leaf TrafficClass from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrafficClass is set, it can
// safely use t.GetTrafficClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrafficClass == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetTrafficClass() uint8 {
	if t == nil || t.TrafficClass == nil {
		return 0
	}
	return *t.TrafficClass
}

// GetTtlValue retrieves the value of the leaf TtlValue from the Qos_Classifier_Term_Conditions_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlValue is set, it can
// safely use t.GetTtlValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlValue == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Mpls) GetTtlValue() uint8 {
	if t == nil || t.TtlValue == nil {
		return 0
	}
	return *t.TtlValue
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Mpls) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Mpls.
func (*Qos_Classifier_Term_Conditions_Mpls) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Classifier_Term_Conditions_Transport represents the /openconfig-qos/qos/classifiers/classifier/terms/term/conditions/transport YANG schema element.
type Qos_Classifier_Term_Conditions_Transport struct {
	DestinationPort Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union `path:"config/destination-port" module:"openconfig-qos/openconfig-qos" shadow-path:"state/destination-port" shadow-module:"openconfig-qos/openconfig-qos"`
	SourcePort      Qos_Classifier_Term_Conditions_Transport_SourcePort_Union      `path:"config/source-port" module:"openconfig-qos/openconfig-qos" shadow-path:"state/source-port" shadow-module:"openconfig-qos/openconfig-qos"`
	TcpFlags        []E_PacketMatchTypes_TCP_FLAGS                                 `path:"config/tcp-flags" module:"openconfig-qos/openconfig-qos" shadow-path:"state/tcp-flags" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Classifier_Term_Conditions_Transport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Classifier_Term_Conditions_Transport) IsYANGGoStruct() {}

// GetDestinationPort retrieves the value of the leaf DestinationPort from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationPort is set, it can
// safely use t.GetDestinationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationPort == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetDestinationPort() Qos_Classifier_Term_Conditions_Transport_DestinationPort_Union {
	if t == nil || t.DestinationPort == nil {
		return nil
	}
	return t.DestinationPort
}

// GetSourcePort retrieves the value of the leaf SourcePort from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetSourcePort() Qos_Classifier_Term_Conditions_Transport_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// GetTcpFlags retrieves the value of the leaf TcpFlags from the Qos_Classifier_Term_Conditions_Transport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpFlags is set, it can
// safely use t.GetTcpFlags() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpFlags == nil' before retrieving the leaf's value.
func (t *Qos_Classifier_Term_Conditions_Transport) GetTcpFlags() []E_PacketMatchTypes_TCP_FLAGS {
	if t == nil || t.TcpFlags == nil {
		return nil
	}
	return t.TcpFlags
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Transport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Classifier_Term_Conditions_Transport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Classifier_Term_Conditions_Transport) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Classifier_Term_Conditions_Transport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Classifier_Term_Conditions_Transport.
func (*Qos_Classifier_Term_Conditions_Transport) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_ForwardingGroup represents the /openconfig-qos/qos/forwarding-groups/forwarding-group YANG schema element.
type Qos_ForwardingGroup struct {
	FabricPriority       *uint8  `path:"config/fabric-priority" module:"openconfig-qos/openconfig-qos" shadow-path:"state/fabric-priority" shadow-module:"openconfig-qos/openconfig-qos"`
	MulticastOutputQueue *string `path:"config/multicast-output-queue" module:"openconfig-qos/openconfig-qos" shadow-path:"state/multicast-output-queue" shadow-module:"openconfig-qos/openconfig-qos"`
	Name                 *string `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	OutputQueue          *string `path:"config/output-queue" module:"openconfig-qos/openconfig-qos" shadow-path:"state/output-queue" shadow-module:"openconfig-qos/openconfig-qos"`
	UnicastOutputQueue   *string `path:"config/unicast-output-queue" module:"openconfig-qos/openconfig-qos" shadow-path:"state/unicast-output-queue" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_ForwardingGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_ForwardingGroup) IsYANGGoStruct() {}

// GetFabricPriority retrieves the value of the leaf FabricPriority from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FabricPriority is set, it can
// safely use t.GetFabricPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FabricPriority == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetFabricPriority() uint8 {
	if t == nil || t.FabricPriority == nil {
		return 0
	}
	return *t.FabricPriority
}

// GetMulticastOutputQueue retrieves the value of the leaf MulticastOutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastOutputQueue is set, it can
// safely use t.GetMulticastOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastOutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetMulticastOutputQueue() string {
	if t == nil || t.MulticastOutputQueue == nil {
		return ""
	}
	return *t.MulticastOutputQueue
}

// GetName retrieves the value of the leaf Name from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOutputQueue retrieves the value of the leaf OutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputQueue is set, it can
// safely use t.GetOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetOutputQueue() string {
	if t == nil || t.OutputQueue == nil {
		return ""
	}
	return *t.OutputQueue
}

// GetUnicastOutputQueue retrieves the value of the leaf UnicastOutputQueue from the Qos_ForwardingGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastOutputQueue is set, it can
// safely use t.GetUnicastOutputQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastOutputQueue == nil' before retrieving the leaf's value.
func (t *Qos_ForwardingGroup) GetUnicastOutputQueue() string {
	if t == nil || t.UnicastOutputQueue == nil {
		return ""
	}
	return *t.UnicastOutputQueue
}

// ΛListKeyMap returns the keys of the Qos_ForwardingGroup struct, which is a YANG list entry.
func (t *Qos_ForwardingGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_ForwardingGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_ForwardingGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_ForwardingGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_ForwardingGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_ForwardingGroup.
func (*Qos_ForwardingGroup) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface represents the /openconfig-qos/qos/interfaces/interface YANG schema element.
type Qos_Interface struct {
	Input        *Qos_Interface_Input        `path:"input" module:"openconfig-qos"`
	InterfaceId  *string                     `path:"config/interface-id|interface-id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/interface-id|interface-id" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	InterfaceRef *Qos_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-qos"`
	Output       *Qos_Interface_Output       `path:"output" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface) IsYANGGoStruct() {}

// GetOrCreateInput retrieves the value of the Input field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInput() *Qos_Interface_Input {
	if t.Input != nil {
		return t.Input
	}
	t.Input = &Qos_Interface_Input{}
	return t.Input
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateInterfaceRef() *Qos_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Qos_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_Interface) GetOrCreateOutput() *Qos_Interface_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_Interface_Output{}
	return t.Output
}

// GetInput returns the value of the Input struct pointer
// from Qos_Interface. If the receiver or the field Input is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInput() *Qos_Interface_Input {
	if t != nil && t.Input != nil {
		return t.Input
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Qos_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetInterfaceRef() *Qos_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_Interface. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface) GetOutput() *Qos_Interface_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the Qos_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *Qos_Interface) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// ΛListKeyMap returns the keys of the Qos_Interface struct, which is a YANG list entry.
func (t *Qos_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceId == nil {
		return nil, fmt.Errorf("nil value for key InterfaceId")
	}

	return map[string]interface{}{
		"interface-id": *t.InterfaceId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface.
func (*Qos_Interface) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input represents the /openconfig-qos/qos/interfaces/interface/input YANG schema element.
type Qos_Interface_Input struct {
	BufferAllocationProfile          *string                                                         `path:"config/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Classifier                       map[E_Qos_Input_Classifier_Type]*Qos_Interface_Input_Classifier `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	MulticastBufferAllocationProfile *string                                                         `path:"config/multicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/multicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Queue                            map[string]*Qos_Interface_Input_Queue                           `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	SchedulerPolicy                  *Qos_Interface_Input_SchedulerPolicy                            `path:"scheduler-policy" module:"openconfig-qos"`
	UnicastBufferAllocationProfile   *string                                                         `path:"config/unicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/unicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	VoqInterface                     map[string]*Qos_Interface_Input_VoqInterface                    `path:"virtual-output-queues/voq-interface" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewClassifier(Type E_Qos_Input_Classifier_Type) (*Qos_Interface_Input_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Qos_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Input_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameClassifier(oldK, newK E_Qos_Input_Classifier_Type) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Type = newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateClassifier(Type E_Qos_Input_Classifier_Type) *Qos_Interface_Input_Classifier {

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetClassifier(Type E_Qos_Input_Classifier_Type) *Qos_Interface_Input_Classifier {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteClassifier(Type E_Qos_Input_Classifier_Type) {
	key := Type

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Interface_Input_Classifier struct to the
// list Classifier of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_Classifier already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendClassifier(v *Qos_Interface_Input_Classifier) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Qos_Input_Classifier_Type]*Qos_Interface_Input_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewQueue(Name string) (*Qos_Interface_Input_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateQueue(Name string) *Qos_Interface_Input_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetQueue(Name string) *Qos_Interface_Input_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Input_Queue struct to the
// list Queue of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendQueue(v *Qos_Interface_Input_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// NewVoqInterface creates a new entry in the VoqInterface list of the
// Qos_Interface_Input struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input) NewVoqInterface(Name string) (*Qos_Interface_Input_VoqInterface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VoqInterface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VoqInterface", key)
	}

	t.VoqInterface[key] = &Qos_Interface_Input_VoqInterface{
		Name: &Name,
	}

	return t.VoqInterface[key], nil
}

// RenameVoqInterface renames an entry in the list VoqInterface within
// the Qos_Interface_Input struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input) RenameVoqInterface(oldK, newK string) error {
	if _, ok := t.VoqInterface[newK]; ok {
		return fmt.Errorf("key %v already exists in VoqInterface", newK)
	}

	e, ok := t.VoqInterface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VoqInterface", oldK)
	}
	e.Name = &newK

	t.VoqInterface[newK] = e
	delete(t.VoqInterface, oldK)
	return nil
}

// GetOrCreateVoqInterface retrieves the value with the specified keys from
// the receiver Qos_Interface_Input. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input) GetOrCreateVoqInterface(Name string) *Qos_Interface_Input_VoqInterface {

	key := Name

	if v, ok := t.VoqInterface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVoqInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVoqInterface got unexpected error: %v", err))
	}
	return v
}

// GetVoqInterface retrieves the value with the specified key from
// the VoqInterface map field of Qos_Interface_Input. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input) GetVoqInterface(Name string) *Qos_Interface_Input_VoqInterface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.VoqInterface[key]; ok {
		return lm
	}
	return nil
}

// DeleteVoqInterface deletes the value with the specified keys from
// the receiver Qos_Interface_Input. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input) DeleteVoqInterface(Name string) {
	key := Name

	delete(t.VoqInterface, key)
}

// AppendVoqInterface appends the supplied Qos_Interface_Input_VoqInterface struct to the
// list VoqInterface of Qos_Interface_Input. If the key value(s) specified in
// the supplied Qos_Interface_Input_VoqInterface already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input) AppendVoqInterface(v *Qos_Interface_Input_VoqInterface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VoqInterface == nil {
		t.VoqInterface = make(map[string]*Qos_Interface_Input_VoqInterface)
	}

	if _, ok := t.VoqInterface[key]; ok {
		return fmt.Errorf("duplicate key for list VoqInterface %v", key)
	}

	t.VoqInterface[key] = v
	return nil
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Input) GetOrCreateSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Input_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Input. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Input) GetSchedulerPolicy() *Qos_Interface_Input_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetBufferAllocationProfile retrieves the value of the leaf BufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocationProfile is set, it can
// safely use t.GetBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetBufferAllocationProfile() string {
	if t == nil || t.BufferAllocationProfile == nil {
		return ""
	}
	return *t.BufferAllocationProfile
}

// GetMulticastBufferAllocationProfile retrieves the value of the leaf MulticastBufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastBufferAllocationProfile is set, it can
// safely use t.GetMulticastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetMulticastBufferAllocationProfile() string {
	if t == nil || t.MulticastBufferAllocationProfile == nil {
		return ""
	}
	return *t.MulticastBufferAllocationProfile
}

// GetUnicastBufferAllocationProfile retrieves the value of the leaf UnicastBufferAllocationProfile from the Qos_Interface_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastBufferAllocationProfile is set, it can
// safely use t.GetUnicastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input) GetUnicastBufferAllocationProfile() string {
	if t == nil || t.UnicastBufferAllocationProfile == nil {
		return ""
	}
	return *t.UnicastBufferAllocationProfile
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input.
func (*Qos_Interface_Input) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Classifier represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier YANG schema element.
type Qos_Interface_Input_Classifier struct {
	Name *string                                         `path:"config/name" module:"openconfig-qos/openconfig-qos" shadow-path:"state/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Term map[string]*Qos_Interface_Input_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	Type E_Qos_Input_Classifier_Type                     `path:"config/type|type" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/type|type" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Input_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_Classifier) NewTerm(Id string) (*Qos_Interface_Input_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Input_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Interface_Input_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_Classifier) GetOrCreateTerm(Id string) *Qos_Interface_Input_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Input_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_Classifier) GetTerm(Id string) *Qos_Interface_Input_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Interface_Input_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Interface_Input_Classifier_Term struct to the
// list Term of Qos_Interface_Input_Classifier. If the key value(s) specified in
// the supplied Qos_Interface_Input_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_Classifier) AppendTerm(v *Qos_Interface_Input_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Input_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Interface_Input_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier) GetType() E_Qos_Input_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Classifier.
func (*Qos_Interface_Input_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/input/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Input_Classifier_Term struct {
	Id             *string `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"id" shadow-module:"openconfig-qos"`
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-qos/openconfig-qos"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Classifier_Term) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Qos_Interface_Input_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Classifier_Term) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Classifier_Term.
func (*Qos_Interface_Input_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_Queue represents the /openconfig-qos/qos/interfaces/interface/input/queues/queue YANG schema element.
type Qos_Interface_Input_Queue struct {
	AvgQueueLen            *uint64 `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	DroppedPkts            *uint64 `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	MaxQueueLen            *uint64 `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	Name                   *string `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	QueueManagementProfile *string `path:"config/queue-management-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/queue-management-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	TransmitOctets         *uint64 `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	TransmitPkts           *uint64 `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueManagementProfile retrieves the value of the leaf QueueManagementProfile from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueManagementProfile is set, it can
// safely use t.GetQueueManagementProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueManagementProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetQueueManagementProfile() string {
	if t == nil || t.QueueManagementProfile == nil {
		return ""
	}
	return *t.QueueManagementProfile
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Input_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_Queue.
func (*Qos_Interface_Input_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy YANG schema element.
type Qos_Interface_Input_SchedulerPolicy struct {
	Name      *string                                                   `path:"config/name" module:"openconfig-qos/openconfig-qos" shadow-path:"state/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Scheduler map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Input_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Input_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Input_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_Interface_Input_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Input_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_Interface_Input_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_Interface_Input_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_Interface_Input_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_Interface_Input_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_Interface_Input_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_SchedulerPolicy) AppendScheduler(v *Qos_Interface_Input_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Input_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_SchedulerPolicy.
func (*Qos_Interface_Input_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/input/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Input_SchedulerPolicy_Scheduler struct {
	ConformingOctets *uint64 `path:"state/conforming-octets" module:"openconfig-qos/openconfig-qos"`
	ConformingPkts   *uint64 `path:"state/conforming-pkts" module:"openconfig-qos/openconfig-qos"`
	ExceedingOctets  *uint64 `path:"state/exceeding-octets" module:"openconfig-qos/openconfig-qos"`
	ExceedingPkts    *uint64 `path:"state/exceeding-pkts" module:"openconfig-qos/openconfig-qos"`
	Sequence         *uint32 `path:"state/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"sequence" shadow-module:"openconfig-qos"`
	ViolatingOctets  *uint64 `path:"state/violating-octets" module:"openconfig-qos/openconfig-qos"`
	ViolatingPkts    *uint64 `path:"state/violating-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// GetConformingOctets retrieves the value of the leaf ConformingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingOctets is set, it can
// safely use t.GetConformingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetConformingOctets() uint64 {
	if t == nil || t.ConformingOctets == nil {
		return 0
	}
	return *t.ConformingOctets
}

// GetConformingPkts retrieves the value of the leaf ConformingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingPkts is set, it can
// safely use t.GetConformingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetConformingPkts() uint64 {
	if t == nil || t.ConformingPkts == nil {
		return 0
	}
	return *t.ConformingPkts
}

// GetExceedingOctets retrieves the value of the leaf ExceedingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingOctets is set, it can
// safely use t.GetExceedingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetExceedingOctets() uint64 {
	if t == nil || t.ExceedingOctets == nil {
		return 0
	}
	return *t.ExceedingOctets
}

// GetExceedingPkts retrieves the value of the leaf ExceedingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingPkts is set, it can
// safely use t.GetExceedingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetExceedingPkts() uint64 {
	if t == nil || t.ExceedingPkts == nil {
		return 0
	}
	return *t.ExceedingPkts
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetViolatingOctets retrieves the value of the leaf ViolatingOctets from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingOctets is set, it can
// safely use t.GetViolatingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetViolatingOctets() uint64 {
	if t == nil || t.ViolatingOctets == nil {
		return 0
	}
	return *t.ViolatingOctets
}

// GetViolatingPkts retrieves the value of the leaf ViolatingPkts from the Qos_Interface_Input_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingPkts is set, it can
// safely use t.GetViolatingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) GetViolatingPkts() uint64 {
	if t == nil || t.ViolatingPkts == nil {
		return 0
	}
	return *t.ViolatingPkts
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_SchedulerPolicy_Scheduler.
func (*Qos_Interface_Input_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_VoqInterface represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface YANG schema element.
type Qos_Interface_Input_VoqInterface struct {
	Name  *string                                            `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Queue map[string]*Qos_Interface_Input_VoqInterface_Queue `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Input_VoqInterface struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Input_VoqInterface) NewQueue(Name string) (*Qos_Interface_Input_VoqInterface_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Input_VoqInterface_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Input_VoqInterface struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Input_VoqInterface) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Input_VoqInterface. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Input_VoqInterface) GetOrCreateQueue(Name string) *Qos_Interface_Input_VoqInterface_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Input_VoqInterface. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Input_VoqInterface) GetQueue(Name string) *Qos_Interface_Input_VoqInterface_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Input_VoqInterface. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Input_VoqInterface) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Input_VoqInterface_Queue struct to the
// list Queue of Qos_Interface_Input_VoqInterface. If the key value(s) specified in
// the supplied Qos_Interface_Input_VoqInterface_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Input_VoqInterface) AppendQueue(v *Qos_Interface_Input_VoqInterface_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Input_VoqInterface_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_VoqInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_VoqInterface.
func (*Qos_Interface_Input_VoqInterface) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Input_VoqInterface_Queue represents the /openconfig-qos/qos/interfaces/interface/input/virtual-output-queues/voq-interface/queues/queue YANG schema element.
type Qos_Interface_Input_VoqInterface_Queue struct {
	AvgQueueLen    *uint64 `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	DroppedPkts    *uint64 `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	MaxQueueLen    *uint64 `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	Name           *string `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	TransmitOctets *uint64 `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	TransmitPkts   *uint64 `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Input_VoqInterface_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Input_VoqInterface_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Input_VoqInterface_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Input_VoqInterface_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// ΛListKeyMap returns the keys of the Qos_Interface_Input_VoqInterface_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Input_VoqInterface_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Input_VoqInterface_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Input_VoqInterface_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Input_VoqInterface_Queue.
func (*Qos_Interface_Input_VoqInterface_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_InterfaceRef represents the /openconfig-qos/qos/interfaces/interface/interface-ref YANG schema element.
type Qos_Interface_InterfaceRef struct {
	Interface    *string `path:"config/interface" module:"openconfig-qos/openconfig-qos" shadow-path:"state/interface" shadow-module:"openconfig-qos/openconfig-qos"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-qos/openconfig-qos" shadow-path:"state/subinterface" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Qos_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Qos_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_InterfaceRef.
func (*Qos_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output represents the /openconfig-qos/qos/interfaces/interface/output YANG schema element.
type Qos_Interface_Output struct {
	BufferAllocationProfile          *string                                                          `path:"config/buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Classifier                       map[E_Qos_Input_Classifier_Type]*Qos_Interface_Output_Classifier `path:"classifiers/classifier" module:"openconfig-qos/openconfig-qos"`
	InterfaceRef                     *Qos_Interface_Output_InterfaceRef                               `path:"interface-ref" module:"openconfig-qos"`
	MulticastBufferAllocationProfile *string                                                          `path:"config/multicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/multicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	Queue                            map[string]*Qos_Interface_Output_Queue                           `path:"queues/queue" module:"openconfig-qos/openconfig-qos"`
	SchedulerPolicy                  *Qos_Interface_Output_SchedulerPolicy                            `path:"scheduler-policy" module:"openconfig-qos"`
	UnicastBufferAllocationProfile   *string                                                          `path:"config/unicast-buffer-allocation-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/unicast-buffer-allocation-profile" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output) IsYANGGoStruct() {}

// NewClassifier creates a new entry in the Classifier list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewClassifier(Type E_Qos_Input_Classifier_Type) (*Qos_Interface_Output_Classifier, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Qos_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}

	key := Type

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Classifier[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Classifier", key)
	}

	t.Classifier[key] = &Qos_Interface_Output_Classifier{
		Type: Type,
	}

	return t.Classifier[key], nil
}

// RenameClassifier renames an entry in the list Classifier within
// the Qos_Interface_Output struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output) RenameClassifier(oldK, newK E_Qos_Input_Classifier_Type) error {
	if _, ok := t.Classifier[newK]; ok {
		return fmt.Errorf("key %v already exists in Classifier", newK)
	}

	e, ok := t.Classifier[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Classifier", oldK)
	}
	e.Type = newK

	t.Classifier[newK] = e
	delete(t.Classifier, oldK)
	return nil
}

// GetOrCreateClassifier retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateClassifier(Type E_Qos_Input_Classifier_Type) *Qos_Interface_Output_Classifier {

	key := Type

	if v, ok := t.Classifier[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClassifier(Type)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClassifier got unexpected error: %v", err))
	}
	return v
}

// GetClassifier retrieves the value with the specified key from
// the Classifier map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetClassifier(Type E_Qos_Input_Classifier_Type) *Qos_Interface_Output_Classifier {

	if t == nil {
		return nil
	}

	key := Type

	if lm, ok := t.Classifier[key]; ok {
		return lm
	}
	return nil
}

// DeleteClassifier deletes the value with the specified keys from
// the receiver Qos_Interface_Output. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output) DeleteClassifier(Type E_Qos_Input_Classifier_Type) {
	key := Type

	delete(t.Classifier, key)
}

// AppendClassifier appends the supplied Qos_Interface_Output_Classifier struct to the
// list Classifier of Qos_Interface_Output. If the key value(s) specified in
// the supplied Qos_Interface_Output_Classifier already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output) AppendClassifier(v *Qos_Interface_Output_Classifier) error {
	key := v.Type

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Classifier == nil {
		t.Classifier = make(map[E_Qos_Input_Classifier_Type]*Qos_Interface_Output_Classifier)
	}

	if _, ok := t.Classifier[key]; ok {
		return fmt.Errorf("duplicate key for list Classifier %v", key)
	}

	t.Classifier[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// Qos_Interface_Output struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output) NewQueue(Name string) (*Qos_Interface_Output_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &Qos_Interface_Output_Queue{
		Name: &Name,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the Qos_Interface_Output struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output) RenameQueue(oldK, newK string) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Name = &newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver Qos_Interface_Output. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output) GetOrCreateQueue(Name string) *Qos_Interface_Output_Queue {

	key := Name

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of Qos_Interface_Output. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output) GetQueue(Name string) *Qos_Interface_Output_Queue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver Qos_Interface_Output. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output) DeleteQueue(Name string) {
	key := Name

	delete(t.Queue, key)
}

// AppendQueue appends the supplied Qos_Interface_Output_Queue struct to the
// list Queue of Qos_Interface_Output. If the key value(s) specified in
// the supplied Qos_Interface_Output_Queue already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output) AppendQueue(v *Qos_Interface_Output_Queue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[string]*Qos_Interface_Output_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Output) GetOrCreateInterfaceRef() *Qos_Interface_Output_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &Qos_Interface_Output_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *Qos_Interface_Output) GetOrCreateSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &Qos_Interface_Output_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from Qos_Interface_Output. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Output) GetInterfaceRef() *Qos_Interface_Output_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from Qos_Interface_Output. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_Interface_Output) GetSchedulerPolicy() *Qos_Interface_Output_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetBufferAllocationProfile retrieves the value of the leaf BufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BufferAllocationProfile is set, it can
// safely use t.GetBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetBufferAllocationProfile() string {
	if t == nil || t.BufferAllocationProfile == nil {
		return ""
	}
	return *t.BufferAllocationProfile
}

// GetMulticastBufferAllocationProfile retrieves the value of the leaf MulticastBufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MulticastBufferAllocationProfile is set, it can
// safely use t.GetMulticastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MulticastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetMulticastBufferAllocationProfile() string {
	if t == nil || t.MulticastBufferAllocationProfile == nil {
		return ""
	}
	return *t.MulticastBufferAllocationProfile
}

// GetUnicastBufferAllocationProfile retrieves the value of the leaf UnicastBufferAllocationProfile from the Qos_Interface_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnicastBufferAllocationProfile is set, it can
// safely use t.GetUnicastBufferAllocationProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnicastBufferAllocationProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output) GetUnicastBufferAllocationProfile() string {
	if t == nil || t.UnicastBufferAllocationProfile == nil {
		return ""
	}
	return *t.UnicastBufferAllocationProfile
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output.
func (*Qos_Interface_Output) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Classifier represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier YANG schema element.
type Qos_Interface_Output_Classifier struct {
	Name *string                                          `path:"config/name" module:"openconfig-qos/openconfig-qos" shadow-path:"state/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Term map[string]*Qos_Interface_Output_Classifier_Term `path:"terms/term" module:"openconfig-qos/openconfig-qos"`
	Type E_Qos_Input_Classifier_Type                      `path:"config/type|type" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/type|type" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier) IsYANGGoStruct() {}

// NewTerm creates a new entry in the Term list of the
// Qos_Interface_Output_Classifier struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_Classifier) NewTerm(Id string) (*Qos_Interface_Output_Classifier_Term, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Term[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Term", key)
	}

	t.Term[key] = &Qos_Interface_Output_Classifier_Term{
		Id: &Id,
	}

	return t.Term[key], nil
}

// RenameTerm renames an entry in the list Term within
// the Qos_Interface_Output_Classifier struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output_Classifier) RenameTerm(oldK, newK string) error {
	if _, ok := t.Term[newK]; ok {
		return fmt.Errorf("key %v already exists in Term", newK)
	}

	e, ok := t.Term[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Term", oldK)
	}
	e.Id = &newK

	t.Term[newK] = e
	delete(t.Term, oldK)
	return nil
}

// GetOrCreateTerm retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_Classifier. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_Classifier) GetOrCreateTerm(Id string) *Qos_Interface_Output_Classifier_Term {

	key := Id

	if v, ok := t.Term[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTerm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTerm got unexpected error: %v", err))
	}
	return v
}

// GetTerm retrieves the value with the specified key from
// the Term map field of Qos_Interface_Output_Classifier. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_Classifier) GetTerm(Id string) *Qos_Interface_Output_Classifier_Term {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Term[key]; ok {
		return lm
	}
	return nil
}

// DeleteTerm deletes the value with the specified keys from
// the receiver Qos_Interface_Output_Classifier. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output_Classifier) DeleteTerm(Id string) {
	key := Id

	delete(t.Term, key)
}

// AppendTerm appends the supplied Qos_Interface_Output_Classifier_Term struct to the
// list Term of Qos_Interface_Output_Classifier. If the key value(s) specified in
// the supplied Qos_Interface_Output_Classifier_Term already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output_Classifier) AppendTerm(v *Qos_Interface_Output_Classifier_Term) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Term == nil {
		t.Term = make(map[string]*Qos_Interface_Output_Classifier_Term)
	}

	if _, ok := t.Term[key]; ok {
		return fmt.Errorf("duplicate key for list Term %v", key)
	}

	t.Term[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the Qos_Interface_Output_Classifier
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier) GetType() E_Qos_Input_Classifier_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"type": t.Type,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Classifier.
func (*Qos_Interface_Output_Classifier) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Classifier_Term represents the /openconfig-qos/qos/interfaces/interface/output/classifiers/classifier/terms/term YANG schema element.
type Qos_Interface_Output_Classifier_Term struct {
	Id             *string `path:"state/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"id" shadow-module:"openconfig-qos"`
	MatchedOctets  *uint64 `path:"state/matched-octets" module:"openconfig-qos/openconfig-qos"`
	MatchedPackets *uint64 `path:"state/matched-packets" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Classifier_Term implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Classifier_Term) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetMatchedOctets retrieves the value of the leaf MatchedOctets from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedOctets is set, it can
// safely use t.GetMatchedOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetMatchedOctets() uint64 {
	if t == nil || t.MatchedOctets == nil {
		return 0
	}
	return *t.MatchedOctets
}

// GetMatchedPackets retrieves the value of the leaf MatchedPackets from the Qos_Interface_Output_Classifier_Term
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchedPackets is set, it can
// safely use t.GetMatchedPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchedPackets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Classifier_Term) GetMatchedPackets() uint64 {
	if t == nil || t.MatchedPackets == nil {
		return 0
	}
	return *t.MatchedPackets
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Classifier_Term struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Classifier_Term) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier_Term) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Classifier_Term"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Classifier_Term) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Classifier_Term) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Classifier_Term.
func (*Qos_Interface_Output_Classifier_Term) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_InterfaceRef represents the /openconfig-qos/qos/interfaces/interface/output/interface-ref YANG schema element.
type Qos_Interface_Output_InterfaceRef struct {
	Interface    *string `path:"config/interface" module:"openconfig-qos/openconfig-qos" shadow-path:"state/interface" shadow-module:"openconfig-qos/openconfig-qos"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-qos/openconfig-qos" shadow-path:"state/subinterface" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the Qos_Interface_Output_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the Qos_Interface_Output_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_InterfaceRef.
func (*Qos_Interface_Output_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_Queue represents the /openconfig-qos/qos/interfaces/interface/output/queues/queue YANG schema element.
type Qos_Interface_Output_Queue struct {
	AvgQueueLen            *uint64 `path:"state/avg-queue-len" module:"openconfig-qos/openconfig-qos"`
	DroppedPkts            *uint64 `path:"state/dropped-pkts" module:"openconfig-qos/openconfig-qos"`
	MaxQueueLen            *uint64 `path:"state/max-queue-len" module:"openconfig-qos/openconfig-qos"`
	Name                   *string `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	QueueManagementProfile *string `path:"config/queue-management-profile" module:"openconfig-qos/openconfig-qos" shadow-path:"state/queue-management-profile" shadow-module:"openconfig-qos/openconfig-qos"`
	TransmitOctets         *uint64 `path:"state/transmit-octets" module:"openconfig-qos/openconfig-qos"`
	TransmitPkts           *uint64 `path:"state/transmit-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_Queue) IsYANGGoStruct() {}

// GetAvgQueueLen retrieves the value of the leaf AvgQueueLen from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgQueueLen is set, it can
// safely use t.GetAvgQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetAvgQueueLen() uint64 {
	if t == nil || t.AvgQueueLen == nil {
		return 0
	}
	return *t.AvgQueueLen
}

// GetDroppedPkts retrieves the value of the leaf DroppedPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DroppedPkts is set, it can
// safely use t.GetDroppedPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DroppedPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetDroppedPkts() uint64 {
	if t == nil || t.DroppedPkts == nil {
		return 0
	}
	return *t.DroppedPkts
}

// GetMaxQueueLen retrieves the value of the leaf MaxQueueLen from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueLen is set, it can
// safely use t.GetMaxQueueLen() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueLen == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetMaxQueueLen() uint64 {
	if t == nil || t.MaxQueueLen == nil {
		return 0
	}
	return *t.MaxQueueLen
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetQueueManagementProfile retrieves the value of the leaf QueueManagementProfile from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueManagementProfile is set, it can
// safely use t.GetQueueManagementProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueManagementProfile == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetQueueManagementProfile() string {
	if t == nil || t.QueueManagementProfile == nil {
		return ""
	}
	return *t.QueueManagementProfile
}

// GetTransmitOctets retrieves the value of the leaf TransmitOctets from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitOctets is set, it can
// safely use t.GetTransmitOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetTransmitOctets() uint64 {
	if t == nil || t.TransmitOctets == nil {
		return 0
	}
	return *t.TransmitOctets
}

// GetTransmitPkts retrieves the value of the leaf TransmitPkts from the Qos_Interface_Output_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitPkts is set, it can
// safely use t.GetTransmitPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_Queue) GetTransmitPkts() uint64 {
	if t == nil || t.TransmitPkts == nil {
		return 0
	}
	return *t.TransmitPkts
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_Queue struct, which is a YANG list entry.
func (t *Qos_Interface_Output_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_Queue.
func (*Qos_Interface_Output_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_SchedulerPolicy represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy YANG schema element.
type Qos_Interface_Output_SchedulerPolicy struct {
	Name      *string                                                    `path:"config/name" module:"openconfig-qos/openconfig-qos" shadow-path:"state/name" shadow-module:"openconfig-qos/openconfig-qos"`
	Scheduler map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_Interface_Output_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_Interface_Output_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_Interface_Output_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_Interface_Output_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_Interface_Output_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_Interface_Output_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_Interface_Output_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_Interface_Output_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_Interface_Output_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_Interface_Output_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_Interface_Output_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_Interface_Output_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_Interface_Output_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_Interface_Output_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_Interface_Output_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_Interface_Output_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_Interface_Output_SchedulerPolicy) AppendScheduler(v *Qos_Interface_Output_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_Interface_Output_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_Interface_Output_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_SchedulerPolicy.
func (*Qos_Interface_Output_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Interface_Output_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/interfaces/interface/output/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_Interface_Output_SchedulerPolicy_Scheduler struct {
	ConformingOctets *uint64 `path:"state/conforming-octets" module:"openconfig-qos/openconfig-qos"`
	ConformingPkts   *uint64 `path:"state/conforming-pkts" module:"openconfig-qos/openconfig-qos"`
	ExceedingOctets  *uint64 `path:"state/exceeding-octets" module:"openconfig-qos/openconfig-qos"`
	ExceedingPkts    *uint64 `path:"state/exceeding-pkts" module:"openconfig-qos/openconfig-qos"`
	Sequence         *uint32 `path:"state/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"sequence" shadow-module:"openconfig-qos"`
	ViolatingOctets  *uint64 `path:"state/violating-octets" module:"openconfig-qos/openconfig-qos"`
	ViolatingPkts    *uint64 `path:"state/violating-pkts" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Interface_Output_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Interface_Output_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// GetConformingOctets retrieves the value of the leaf ConformingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingOctets is set, it can
// safely use t.GetConformingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetConformingOctets() uint64 {
	if t == nil || t.ConformingOctets == nil {
		return 0
	}
	return *t.ConformingOctets
}

// GetConformingPkts retrieves the value of the leaf ConformingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConformingPkts is set, it can
// safely use t.GetConformingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConformingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetConformingPkts() uint64 {
	if t == nil || t.ConformingPkts == nil {
		return 0
	}
	return *t.ConformingPkts
}

// GetExceedingOctets retrieves the value of the leaf ExceedingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingOctets is set, it can
// safely use t.GetExceedingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetExceedingOctets() uint64 {
	if t == nil || t.ExceedingOctets == nil {
		return 0
	}
	return *t.ExceedingOctets
}

// GetExceedingPkts retrieves the value of the leaf ExceedingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedingPkts is set, it can
// safely use t.GetExceedingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetExceedingPkts() uint64 {
	if t == nil || t.ExceedingPkts == nil {
		return 0
	}
	return *t.ExceedingPkts
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetViolatingOctets retrieves the value of the leaf ViolatingOctets from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingOctets is set, it can
// safely use t.GetViolatingOctets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingOctets == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetViolatingOctets() uint64 {
	if t == nil || t.ViolatingOctets == nil {
		return 0
	}
	return *t.ViolatingOctets
}

// GetViolatingPkts retrieves the value of the leaf ViolatingPkts from the Qos_Interface_Output_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViolatingPkts is set, it can
// safely use t.GetViolatingPkts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViolatingPkts == nil' before retrieving the leaf's value.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) GetViolatingPkts() uint64 {
	if t == nil || t.ViolatingPkts == nil {
		return 0
	}
	return *t.ViolatingPkts
}

// ΛListKeyMap returns the keys of the Qos_Interface_Output_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Interface_Output_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Interface_Output_SchedulerPolicy_Scheduler.
func (*Qos_Interface_Output_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_Queue represents the /openconfig-qos/qos/queues/queue YANG schema element.
type Qos_Queue struct {
	Name *string `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_Queue) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the Qos_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_Queue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Qos_Queue struct, which is a YANG list entry.
func (t *Qos_Queue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_Queue) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_Queue) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_Queue.
func (*Qos_Queue) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile YANG schema element.
type Qos_QueueManagementProfile struct {
	Name *string                          `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Red  *Qos_QueueManagementProfile_Red  `path:"red" module:"openconfig-qos"`
	Wred *Qos_QueueManagementProfile_Wred `path:"wred" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile) IsYANGGoStruct() {}

// GetOrCreateRed retrieves the value of the Red field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile) GetOrCreateRed() *Qos_QueueManagementProfile_Red {
	if t.Red != nil {
		return t.Red
	}
	t.Red = &Qos_QueueManagementProfile_Red{}
	return t.Red
}

// GetOrCreateWred retrieves the value of the Wred field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile) GetOrCreateWred() *Qos_QueueManagementProfile_Wred {
	if t.Wred != nil {
		return t.Wred
	}
	t.Wred = &Qos_QueueManagementProfile_Wred{}
	return t.Wred
}

// GetRed returns the value of the Red struct pointer
// from Qos_QueueManagementProfile. If the receiver or the field Red is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile) GetRed() *Qos_QueueManagementProfile_Red {
	if t != nil && t.Red != nil {
		return t.Red
	}
	return nil
}

// GetWred returns the value of the Wred struct pointer
// from Qos_QueueManagementProfile. If the receiver or the field Wred is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile) GetWred() *Qos_QueueManagementProfile_Wred {
	if t != nil && t.Wred != nil {
		return t.Wred
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_QueueManagementProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Qos_QueueManagementProfile struct, which is a YANG list entry.
func (t *Qos_QueueManagementProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile.
func (*Qos_QueueManagementProfile) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Red represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red YANG schema element.
type Qos_QueueManagementProfile_Red struct {
	Uniform *Qos_QueueManagementProfile_Red_Uniform `path:"uniform" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Red implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Red) IsYANGGoStruct() {}

// GetOrCreateUniform retrieves the value of the Uniform field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile_Red) GetOrCreateUniform() *Qos_QueueManagementProfile_Red_Uniform {
	if t.Uniform != nil {
		return t.Uniform
	}
	t.Uniform = &Qos_QueueManagementProfile_Red_Uniform{}
	return t.Uniform
}

// GetUniform returns the value of the Uniform struct pointer
// from Qos_QueueManagementProfile_Red. If the receiver or the field Uniform is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile_Red) GetUniform() *Qos_QueueManagementProfile_Red_Uniform {
	if t != nil && t.Uniform != nil {
		return t.Uniform
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Red"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Red) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Red.
func (*Qos_QueueManagementProfile_Red) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Red_Uniform represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/red/uniform YANG schema element.
type Qos_QueueManagementProfile_Red_Uniform struct {
	Drop         *bool   `path:"config/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"state/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	EnableEcn    *bool   `path:"config/enable-ecn" module:"openconfig-qos/openconfig-qos" shadow-path:"state/enable-ecn" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxThreshold *uint64 `path:"config/max-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"state/max-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
	MinThreshold *uint64 `path:"config/min-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"state/min-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Red_Uniform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Red_Uniform) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetEnableEcn retrieves the value of the leaf EnableEcn from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableEcn is set, it can
// safely use t.GetEnableEcn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableEcn == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetEnableEcn() bool {
	if t == nil || t.EnableEcn == nil {
		return false
	}
	return *t.EnableEcn
}

// GetMaxThreshold retrieves the value of the leaf MaxThreshold from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThreshold is set, it can
// safely use t.GetMaxThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMaxThreshold() uint64 {
	if t == nil || t.MaxThreshold == nil {
		return 0
	}
	return *t.MaxThreshold
}

// GetMinThreshold retrieves the value of the leaf MinThreshold from the Qos_QueueManagementProfile_Red_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshold is set, it can
// safely use t.GetMinThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Red_Uniform) GetMinThreshold() uint64 {
	if t == nil || t.MinThreshold == nil {
		return 0
	}
	return *t.MinThreshold
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red_Uniform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Red_Uniform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Red_Uniform) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Red_Uniform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Red_Uniform.
func (*Qos_QueueManagementProfile_Red_Uniform) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Wred represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred YANG schema element.
type Qos_QueueManagementProfile_Wred struct {
	Uniform *Qos_QueueManagementProfile_Wred_Uniform `path:"uniform" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Wred implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Wred) IsYANGGoStruct() {}

// GetOrCreateUniform retrieves the value of the Uniform field
// or returns the existing field if it already exists.
func (t *Qos_QueueManagementProfile_Wred) GetOrCreateUniform() *Qos_QueueManagementProfile_Wred_Uniform {
	if t.Uniform != nil {
		return t.Uniform
	}
	t.Uniform = &Qos_QueueManagementProfile_Wred_Uniform{}
	return t.Uniform
}

// GetUniform returns the value of the Uniform struct pointer
// from Qos_QueueManagementProfile_Wred. If the receiver or the field Uniform is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_QueueManagementProfile_Wred) GetUniform() *Qos_QueueManagementProfile_Wred_Uniform {
	if t != nil && t.Uniform != nil {
		return t.Uniform
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Wred"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Wred) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Wred.
func (*Qos_QueueManagementProfile_Wred) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_QueueManagementProfile_Wred_Uniform represents the /openconfig-qos/qos/queue-management-profiles/queue-management-profile/wred/uniform YANG schema element.
type Qos_QueueManagementProfile_Wred_Uniform struct {
	Drop                      *bool   `path:"config/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"state/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	EnableEcn                 *bool   `path:"config/enable-ecn" module:"openconfig-qos/openconfig-qos" shadow-path:"state/enable-ecn" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxDropProbabilityPercent *uint8  `path:"config/max-drop-probability-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"state/max-drop-probability-percent" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxThreshold              *uint64 `path:"config/max-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"state/max-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
	MinThreshold              *uint64 `path:"config/min-threshold" module:"openconfig-qos/openconfig-qos" shadow-path:"state/min-threshold" shadow-module:"openconfig-qos/openconfig-qos"`
	Weight                    *uint32 `path:"config/weight" module:"openconfig-qos/openconfig-qos" shadow-path:"state/weight" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_QueueManagementProfile_Wred_Uniform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_QueueManagementProfile_Wred_Uniform) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetEnableEcn retrieves the value of the leaf EnableEcn from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableEcn is set, it can
// safely use t.GetEnableEcn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableEcn == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetEnableEcn() bool {
	if t == nil || t.EnableEcn == nil {
		return false
	}
	return *t.EnableEcn
}

// GetMaxDropProbabilityPercent retrieves the value of the leaf MaxDropProbabilityPercent from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxDropProbabilityPercent is set, it can
// safely use t.GetMaxDropProbabilityPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxDropProbabilityPercent == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxDropProbabilityPercent() uint8 {
	if t == nil || t.MaxDropProbabilityPercent == nil {
		return 0
	}
	return *t.MaxDropProbabilityPercent
}

// GetMaxThreshold retrieves the value of the leaf MaxThreshold from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxThreshold is set, it can
// safely use t.GetMaxThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMaxThreshold() uint64 {
	if t == nil || t.MaxThreshold == nil {
		return 0
	}
	return *t.MaxThreshold
}

// GetMinThreshold retrieves the value of the leaf MinThreshold from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshold is set, it can
// safely use t.GetMinThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshold == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetMinThreshold() uint64 {
	if t == nil || t.MinThreshold == nil {
		return 0
	}
	return *t.MinThreshold
}

// GetWeight retrieves the value of the leaf Weight from the Qos_QueueManagementProfile_Wred_Uniform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *Qos_QueueManagementProfile_Wred_Uniform) GetWeight() uint32 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred_Uniform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_QueueManagementProfile_Wred_Uniform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_QueueManagementProfile_Wred_Uniform) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_QueueManagementProfile_Wred_Uniform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_QueueManagementProfile_Wred_Uniform.
func (*Qos_QueueManagementProfile_Wred_Uniform) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy YANG schema element.
type Qos_SchedulerPolicy struct {
	Name      *string                                   `path:"config/name|name" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/name|name" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	Scheduler map[uint32]*Qos_SchedulerPolicy_Scheduler `path:"schedulers/scheduler" module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy) IsYANGGoStruct() {}

// NewScheduler creates a new entry in the Scheduler list of the
// Qos_SchedulerPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy) NewScheduler(Sequence uint32) (*Qos_SchedulerPolicy_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}

	key := Sequence

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &Qos_SchedulerPolicy_Scheduler{
		Sequence: &Sequence,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the Qos_SchedulerPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_SchedulerPolicy) RenameScheduler(oldK, newK uint32) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.Sequence = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy) GetOrCreateScheduler(Sequence uint32) *Qos_SchedulerPolicy_Scheduler {

	key := Sequence

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(Sequence)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of Qos_SchedulerPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy) GetScheduler(Sequence uint32) *Qos_SchedulerPolicy_Scheduler {

	if t == nil {
		return nil
	}

	key := Sequence

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver Qos_SchedulerPolicy. If there is no such element, the function
// is a no-op.
func (t *Qos_SchedulerPolicy) DeleteScheduler(Sequence uint32) {
	key := Sequence

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied Qos_SchedulerPolicy_Scheduler struct to the
// list Scheduler of Qos_SchedulerPolicy. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy_Scheduler already exist in the list, an error is
// returned.
func (t *Qos_SchedulerPolicy) AppendScheduler(v *Qos_SchedulerPolicy_Scheduler) error {
	if v.Sequence == nil {
		return fmt.Errorf("invalid nil key received for Sequence")
	}

	key := *v.Sequence

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[uint32]*Qos_SchedulerPolicy_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy.
func (*Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler YANG schema element.
type Qos_SchedulerPolicy_Scheduler struct {
	Input             map[string]*Qos_SchedulerPolicy_Scheduler_Input  `path:"inputs/input" module:"openconfig-qos/openconfig-qos"`
	OneRateTwoColor   *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor   `path:"one-rate-two-color" module:"openconfig-qos"`
	Output            *Qos_SchedulerPolicy_Scheduler_Output            `path:"output" module:"openconfig-qos"`
	Priority          E_Qos_Scheduler_Priority                         `path:"config/priority" module:"openconfig-qos/openconfig-qos" shadow-path:"state/priority" shadow-module:"openconfig-qos/openconfig-qos"`
	Sequence          *uint32                                          `path:"config/sequence|sequence" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/sequence|sequence" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	TwoRateThreeColor *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor `path:"two-rate-three-color" module:"openconfig-qos"`
	Type              E_QosTypes_QOS_SCHEDULER_TYPE                    `path:"config/type" module:"openconfig-qos/openconfig-qos" shadow-path:"state/type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler) IsYANGGoStruct() {}

// NewInput creates a new entry in the Input list of the
// Qos_SchedulerPolicy_Scheduler struct. The keys of the list are populated from the input
// arguments.
func (t *Qos_SchedulerPolicy_Scheduler) NewInput(Id string) (*Qos_SchedulerPolicy_Scheduler_Input, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Input[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Input", key)
	}

	t.Input[key] = &Qos_SchedulerPolicy_Scheduler_Input{
		Id: &Id,
	}

	return t.Input[key], nil
}

// RenameInput renames an entry in the list Input within
// the Qos_SchedulerPolicy_Scheduler struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Qos_SchedulerPolicy_Scheduler) RenameInput(oldK, newK string) error {
	if _, ok := t.Input[newK]; ok {
		return fmt.Errorf("key %v already exists in Input", newK)
	}

	e, ok := t.Input[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Input", oldK)
	}
	e.Id = &newK

	t.Input[newK] = e
	delete(t.Input, oldK)
	return nil
}

// GetOrCreateInput retrieves the value with the specified keys from
// the receiver Qos_SchedulerPolicy_Scheduler. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateInput(Id string) *Qos_SchedulerPolicy_Scheduler_Input {

	key := Id

	if v, ok := t.Input[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInput(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInput got unexpected error: %v", err))
	}
	return v
}

// GetInput retrieves the value with the specified key from
// the Input map field of Qos_SchedulerPolicy_Scheduler. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetInput(Id string) *Qos_SchedulerPolicy_Scheduler_Input {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Input[key]; ok {
		return lm
	}
	return nil
}

// DeleteInput deletes the value with the specified keys from
// the receiver Qos_SchedulerPolicy_Scheduler. If there is no such element, the function
// is a no-op.
func (t *Qos_SchedulerPolicy_Scheduler) DeleteInput(Id string) {
	key := Id

	delete(t.Input, key)
}

// AppendInput appends the supplied Qos_SchedulerPolicy_Scheduler_Input struct to the
// list Input of Qos_SchedulerPolicy_Scheduler. If the key value(s) specified in
// the supplied Qos_SchedulerPolicy_Scheduler_Input already exist in the list, an error is
// returned.
func (t *Qos_SchedulerPolicy_Scheduler) AppendInput(v *Qos_SchedulerPolicy_Scheduler_Input) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Input == nil {
		t.Input = make(map[string]*Qos_SchedulerPolicy_Scheduler_Input)
	}

	if _, ok := t.Input[key]; ok {
		return fmt.Errorf("duplicate key for list Input %v", key)
	}

	t.Input[key] = v
	return nil
}

// GetOrCreateOneRateTwoColor retrieves the value of the OneRateTwoColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	t.OneRateTwoColor = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor{}
	return t.OneRateTwoColor
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &Qos_SchedulerPolicy_Scheduler_Output{}
	return t.Output
}

// GetOrCreateTwoRateThreeColor retrieves the value of the TwoRateThreeColor field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler) GetOrCreateTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	t.TwoRateThreeColor = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor{}
	return t.TwoRateThreeColor
}

// GetOneRateTwoColor returns the value of the OneRateTwoColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field OneRateTwoColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOneRateTwoColor() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor {
	if t != nil && t.OneRateTwoColor != nil {
		return t.OneRateTwoColor
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetOutput() *Qos_SchedulerPolicy_Scheduler_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetTwoRateThreeColor returns the value of the TwoRateThreeColor struct pointer
// from Qos_SchedulerPolicy_Scheduler. If the receiver or the field TwoRateThreeColor is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler) GetTwoRateThreeColor() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor {
	if t != nil && t.TwoRateThreeColor != nil {
		return t.TwoRateThreeColor
	}
	return nil
}

// GetPriority retrieves the value of the leaf Priority from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetPriority() E_Qos_Scheduler_Priority {
	if t == nil || t.Priority == 0 {
		return 0
	}
	return t.Priority
}

// GetSequence retrieves the value of the leaf Sequence from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetSequence() uint32 {
	if t == nil || t.Sequence == nil {
		return 0
	}
	return *t.Sequence
}

// GetType retrieves the value of the leaf Type from the Qos_SchedulerPolicy_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler) GetType() E_QosTypes_QOS_SCHEDULER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Sequence == nil {
		return nil, fmt.Errorf("nil value for key Sequence")
	}

	return map[string]interface{}{
		"sequence": *t.Sequence,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler.
func (*Qos_SchedulerPolicy_Scheduler) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_Input represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/inputs/input YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Input struct {
	Id        *string               `path:"config/id|id" module:"openconfig-qos/openconfig-qos|openconfig-qos" shadow-path:"state/id|id" shadow-module:"openconfig-qos/openconfig-qos|openconfig-qos"`
	InputType E_Qos_Input_InputType `path:"config/input-type" module:"openconfig-qos/openconfig-qos" shadow-path:"state/input-type" shadow-module:"openconfig-qos/openconfig-qos"`
	Queue     *string               `path:"config/queue" module:"openconfig-qos/openconfig-qos" shadow-path:"state/queue" shadow-module:"openconfig-qos/openconfig-qos"`
	Weight    *uint64               `path:"config/weight" module:"openconfig-qos/openconfig-qos" shadow-path:"state/weight" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Input) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetInputType retrieves the value of the leaf InputType from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputType is set, it can
// safely use t.GetInputType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputType == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetInputType() E_Qos_Input_InputType {
	if t == nil || t.InputType == 0 {
		return 0
	}
	return t.InputType
}

// GetQueue retrieves the value of the leaf Queue from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetQueue() string {
	if t == nil || t.Queue == nil {
		return ""
	}
	return *t.Queue
}

// GetWeight retrieves the value of the leaf Weight from the Qos_SchedulerPolicy_Scheduler_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Input) GetWeight() uint64 {
	if t == nil || t.Weight == nil {
		return 0
	}
	return *t.Weight
}

// ΛListKeyMap returns the keys of the Qos_SchedulerPolicy_Scheduler_Input struct, which is a YANG list entry.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Input) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Input) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_Input.
func (*Qos_SchedulerPolicy_Scheduler_Input) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor struct {
	Bc                   *uint32                                                      `path:"config/bc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/bc" shadow-module:"openconfig-qos/openconfig-qos"`
	Cir                  *uint64                                                      `path:"config/cir" module:"openconfig-qos/openconfig-qos" shadow-path:"state/cir" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPct               *uint8                                                       `path:"config/cir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"state/cir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPctRemaining      *uint8                                                       `path:"config/cir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"state/cir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ConformAction        *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ExceedAction         *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	MaxQueueDepthBytes   *uint32                                                      `path:"config/max-queue-depth-bytes" module:"openconfig-qos/openconfig-qos" shadow-path:"state/max-queue-depth-bytes" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxQueueDepthPackets *uint32                                                      `path:"config/max-queue-depth-packets" module:"openconfig-qos/openconfig-qos" shadow-path:"state/max-queue-depth-packets" shadow-module:"openconfig-qos/openconfig-qos"`
	MaxQueueDepthPercent *uint8                                                       `path:"config/max-queue-depth-percent" module:"openconfig-qos/openconfig-qos" shadow-path:"state/max-queue-depth-percent" shadow-module:"openconfig-qos/openconfig-qos"`
	QueuingBehavior      E_QosTypes_QueueBehavior                                     `path:"config/queuing-behavior" module:"openconfig-qos/openconfig-qos" shadow-path:"state/queuing-behavior" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction{}
	return t.ExceedAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_OneRateTwoColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetBc retrieves the value of the leaf Bc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bc is set, it can
// safely use t.GetBc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetBc() uint32 {
	if t == nil || t.Bc == nil {
		return 0
	}
	return *t.Bc
}

// GetCir retrieves the value of the leaf Cir from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCir() uint64 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetCirPct retrieves the value of the leaf CirPct from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPct is set, it can
// safely use t.GetCirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCirPct() uint8 {
	if t == nil || t.CirPct == nil {
		return 0
	}
	return *t.CirPct
}

// GetCirPctRemaining retrieves the value of the leaf CirPctRemaining from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPctRemaining is set, it can
// safely use t.GetCirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetCirPctRemaining() uint8 {
	if t == nil || t.CirPctRemaining == nil {
		return 0
	}
	return *t.CirPctRemaining
}

// GetMaxQueueDepthBytes retrieves the value of the leaf MaxQueueDepthBytes from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthBytes is set, it can
// safely use t.GetMaxQueueDepthBytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthBytes == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthBytes() uint32 {
	if t == nil || t.MaxQueueDepthBytes == nil {
		return 0
	}
	return *t.MaxQueueDepthBytes
}

// GetMaxQueueDepthPackets retrieves the value of the leaf MaxQueueDepthPackets from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthPackets is set, it can
// safely use t.GetMaxQueueDepthPackets() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthPackets == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthPackets() uint32 {
	if t == nil || t.MaxQueueDepthPackets == nil {
		return 0
	}
	return *t.MaxQueueDepthPackets
}

// GetMaxQueueDepthPercent retrieves the value of the leaf MaxQueueDepthPercent from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxQueueDepthPercent is set, it can
// safely use t.GetMaxQueueDepthPercent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxQueueDepthPercent == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetMaxQueueDepthPercent() uint8 {
	if t == nil || t.MaxQueueDepthPercent == nil {
		return 0
	}
	return *t.MaxQueueDepthPercent
}

// GetQueuingBehavior retrieves the value of the leaf QueuingBehavior from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingBehavior is set, it can
// safely use t.GetQueuingBehavior() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingBehavior == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) GetQueuingBehavior() E_QosTypes_QueueBehavior {
	if t == nil || t.QueuingBehavior == 0 {
		return 0
	}
	return t.QueuingBehavior
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction struct {
	SetDot1P  *uint8 `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ConformAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/one-rate-two-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction struct {
	Drop      *bool  `path:"config/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"state/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_OneRateTwoColor_ExceedAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_Output represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/output YANG schema element.
type Qos_SchedulerPolicy_Scheduler_Output struct {
	ChildScheduler *string                 `path:"config/child-scheduler" module:"openconfig-qos/openconfig-qos" shadow-path:"state/child-scheduler" shadow-module:"openconfig-qos/openconfig-qos"`
	OutputFwdGroup *string                 `path:"config/output-fwd-group" module:"openconfig-qos/openconfig-qos" shadow-path:"state/output-fwd-group" shadow-module:"openconfig-qos/openconfig-qos"`
	OutputType     E_Qos_Output_OutputType `path:"config/output-type" module:"openconfig-qos/openconfig-qos" shadow-path:"state/output-type" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_Output) IsYANGGoStruct() {}

// GetChildScheduler retrieves the value of the leaf ChildScheduler from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ChildScheduler is set, it can
// safely use t.GetChildScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ChildScheduler == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetChildScheduler() string {
	if t == nil || t.ChildScheduler == nil {
		return ""
	}
	return *t.ChildScheduler
}

// GetOutputFwdGroup retrieves the value of the leaf OutputFwdGroup from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputFwdGroup is set, it can
// safely use t.GetOutputFwdGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputFwdGroup == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputFwdGroup() string {
	if t == nil || t.OutputFwdGroup == nil {
		return ""
	}
	return *t.OutputFwdGroup
}

// GetOutputType retrieves the value of the leaf OutputType from the Qos_SchedulerPolicy_Scheduler_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutputType is set, it can
// safely use t.GetOutputType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutputType == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_Output) GetOutputType() E_Qos_Output_OutputType {
	if t == nil || t.OutputType == 0 {
		return 0
	}
	return t.OutputType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_Output) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_Output.
func (*Qos_SchedulerPolicy_Scheduler_Output) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor struct {
	Bc              *uint32                                                        `path:"config/bc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/bc" shadow-module:"openconfig-qos/openconfig-qos"`
	Be              *uint32                                                        `path:"config/be" module:"openconfig-qos/openconfig-qos" shadow-path:"state/be" shadow-module:"openconfig-qos/openconfig-qos"`
	Cir             *uint64                                                        `path:"config/cir" module:"openconfig-qos/openconfig-qos" shadow-path:"state/cir" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPct          *uint8                                                         `path:"config/cir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"state/cir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	CirPctRemaining *uint8                                                         `path:"config/cir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"state/cir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ConformAction   *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction `path:"conform-action" module:"openconfig-qos"`
	ExceedAction    *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction  `path:"exceed-action" module:"openconfig-qos"`
	Pir             *uint64                                                        `path:"config/pir" module:"openconfig-qos/openconfig-qos" shadow-path:"state/pir" shadow-module:"openconfig-qos/openconfig-qos"`
	PirPct          *uint8                                                         `path:"config/pir-pct" module:"openconfig-qos/openconfig-qos" shadow-path:"state/pir-pct" shadow-module:"openconfig-qos/openconfig-qos"`
	PirPctRemaining *uint8                                                         `path:"config/pir-pct-remaining" module:"openconfig-qos/openconfig-qos" shadow-path:"state/pir-pct-remaining" shadow-module:"openconfig-qos/openconfig-qos"`
	ViolateAction   *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction `path:"violate-action" module:"openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) IsYANGGoStruct() {}

// GetOrCreateConformAction retrieves the value of the ConformAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t.ConformAction != nil {
		return t.ConformAction
	}
	t.ConformAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction{}
	return t.ConformAction
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateViolateAction retrieves the value of the ViolateAction field
// or returns the existing field if it already exists.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetOrCreateViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t.ViolateAction != nil {
		return t.ViolateAction
	}
	t.ViolateAction = &Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction{}
	return t.ViolateAction
}

// GetConformAction returns the value of the ConformAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ConformAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetConformAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction {
	if t != nil && t.ConformAction != nil {
		return t.ConformAction
	}
	return nil
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetExceedAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetViolateAction returns the value of the ViolateAction struct pointer
// from Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor. If the receiver or the field ViolateAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetViolateAction() *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction {
	if t != nil && t.ViolateAction != nil {
		return t.ViolateAction
	}
	return nil
}

// GetBc retrieves the value of the leaf Bc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bc is set, it can
// safely use t.GetBc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBc() uint32 {
	if t == nil || t.Bc == nil {
		return 0
	}
	return *t.Bc
}

// GetBe retrieves the value of the leaf Be from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Be is set, it can
// safely use t.GetBe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Be == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetBe() uint32 {
	if t == nil || t.Be == nil {
		return 0
	}
	return *t.Be
}

// GetCir retrieves the value of the leaf Cir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCir() uint64 {
	if t == nil || t.Cir == nil {
		return 0
	}
	return *t.Cir
}

// GetCirPct retrieves the value of the leaf CirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPct is set, it can
// safely use t.GetCirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPct() uint8 {
	if t == nil || t.CirPct == nil {
		return 0
	}
	return *t.CirPct
}

// GetCirPctRemaining retrieves the value of the leaf CirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPctRemaining is set, it can
// safely use t.GetCirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetCirPctRemaining() uint8 {
	if t == nil || t.CirPctRemaining == nil {
		return 0
	}
	return *t.CirPctRemaining
}

// GetPir retrieves the value of the leaf Pir from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPir() uint64 {
	if t == nil || t.Pir == nil {
		return 0
	}
	return *t.Pir
}

// GetPirPct retrieves the value of the leaf PirPct from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPct is set, it can
// safely use t.GetPirPct() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPct == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPct() uint8 {
	if t == nil || t.PirPct == nil {
		return 0
	}
	return *t.PirPct
}

// GetPirPctRemaining retrieves the value of the leaf PirPctRemaining from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirPctRemaining is set, it can
// safely use t.GetPirPctRemaining() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirPctRemaining == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) GetPirPctRemaining() uint8 {
	if t == nil || t.PirPctRemaining == nil {
		return 0
	}
	return *t.PirPctRemaining
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/conform-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction struct {
	SetDot1P  *uint8 `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) IsYANGGoStruct() {}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ConformAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/exceed-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction struct {
	Drop      *bool  `path:"config/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"state/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ExceedAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction represents the /openconfig-qos/qos/scheduler-policies/scheduler-policy/schedulers/scheduler/two-rate-three-color/violate-action YANG schema element.
type Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction struct {
	Drop      *bool  `path:"config/drop" module:"openconfig-qos/openconfig-qos" shadow-path:"state/drop" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDot1P  *uint8 `path:"config/set-dot1p" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dot1p" shadow-module:"openconfig-qos/openconfig-qos"`
	SetDscp   *uint8 `path:"config/set-dscp" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-dscp" shadow-module:"openconfig-qos/openconfig-qos"`
	SetMplsTc *uint8 `path:"config/set-mpls-tc" module:"openconfig-qos/openconfig-qos" shadow-path:"state/set-mpls-tc" shadow-module:"openconfig-qos/openconfig-qos"`
}

// IsYANGGoStruct ensures that Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) IsYANGGoStruct() {}

// GetDrop retrieves the value of the leaf Drop from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetDrop() bool {
	if t == nil || t.Drop == nil {
		return false
	}
	return *t.Drop
}

// GetSetDot1P retrieves the value of the leaf SetDot1P from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDot1P is set, it can
// safely use t.GetSetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDot1P == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDot1P() uint8 {
	if t == nil || t.SetDot1P == nil {
		return 0
	}
	return *t.SetDot1P
}

// GetSetDscp retrieves the value of the leaf SetDscp from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetDscp is set, it can
// safely use t.GetSetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetDscp == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetDscp() uint8 {
	if t == nil || t.SetDscp == nil {
		return 0
	}
	return *t.SetDscp
}

// GetSetMplsTc retrieves the value of the leaf SetMplsTc from the Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMplsTc is set, it can
// safely use t.GetSetMplsTc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMplsTc == nil' before retrieving the leaf's value.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) GetSetMplsTc() uint8 {
	if t == nil || t.SetMplsTc == nil {
		return 0
	}
	return *t.SetMplsTc
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction.
func (*Qos_SchedulerPolicy_Scheduler_TwoRateThreeColor_ViolateAction) ΛBelongingModule() string {
	return "openconfig-qos"
}

// RelayAgent represents the /openconfig-relay-agent/relay-agent YANG schema element.
type RelayAgent struct {
	Dhcp   *RelayAgent_Dhcp   `path:"dhcp" module:"openconfig-relay-agent"`
	Dhcpv6 *RelayAgent_Dhcpv6 `path:"dhcpv6" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent) IsYANGGoStruct() {}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *RelayAgent) GetOrCreateDhcp() *RelayAgent_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &RelayAgent_Dhcp{}
	return t.Dhcp
}

// GetOrCreateDhcpv6 retrieves the value of the Dhcpv6 field
// or returns the existing field if it already exists.
func (t *RelayAgent) GetOrCreateDhcpv6() *RelayAgent_Dhcpv6 {
	if t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	t.Dhcpv6 = &RelayAgent_Dhcpv6{}
	return t.Dhcpv6
}

// GetDhcp returns the value of the Dhcp struct pointer
// from RelayAgent. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent) GetDhcp() *RelayAgent_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetDhcpv6 returns the value of the Dhcpv6 struct pointer
// from RelayAgent. If the receiver or the field Dhcpv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent) GetDhcpv6() *RelayAgent_Dhcpv6 {
	if t != nil && t.Dhcpv6 != nil {
		return t.Dhcpv6
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent.
func (*RelayAgent) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp represents the /openconfig-relay-agent/relay-agent/dhcp YANG schema element.
type RelayAgent_Dhcp struct {
	AgentInformationOption *RelayAgent_Dhcp_AgentInformationOption `path:"agent-information-option" module:"openconfig-relay-agent"`
	EnableRelayAgent       *bool                                   `path:"config/enable-relay-agent" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable-relay-agent" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Interface              map[string]*RelayAgent_Dhcp_Interface   `path:"interfaces/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// RelayAgent_Dhcp struct. The keys of the list are populated from the input
// arguments.
func (t *RelayAgent_Dhcp) NewInterface(Id string) (*RelayAgent_Dhcp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcp_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &RelayAgent_Dhcp_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the RelayAgent_Dhcp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RelayAgent_Dhcp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver RelayAgent_Dhcp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RelayAgent_Dhcp) GetOrCreateInterface(Id string) *RelayAgent_Dhcp_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of RelayAgent_Dhcp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RelayAgent_Dhcp) GetInterface(Id string) *RelayAgent_Dhcp_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver RelayAgent_Dhcp. If there is no such element, the function
// is a no-op.
func (t *RelayAgent_Dhcp) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied RelayAgent_Dhcp_Interface struct to the
// list Interface of RelayAgent_Dhcp. If the key value(s) specified in
// the supplied RelayAgent_Dhcp_Interface already exist in the list, an error is
// returned.
func (t *RelayAgent_Dhcp) AppendInterface(v *RelayAgent_Dhcp_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateAgentInformationOption retrieves the value of the AgentInformationOption field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp) GetOrCreateAgentInformationOption() *RelayAgent_Dhcp_AgentInformationOption {
	if t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	t.AgentInformationOption = &RelayAgent_Dhcp_AgentInformationOption{}
	return t.AgentInformationOption
}

// GetAgentInformationOption returns the value of the AgentInformationOption struct pointer
// from RelayAgent_Dhcp. If the receiver or the field AgentInformationOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp) GetAgentInformationOption() *RelayAgent_Dhcp_AgentInformationOption {
	if t != nil && t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	return nil
}

// GetEnableRelayAgent retrieves the value of the leaf EnableRelayAgent from the RelayAgent_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRelayAgent is set, it can
// safely use t.GetEnableRelayAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRelayAgent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp) GetEnableRelayAgent() bool {
	if t == nil || t.EnableRelayAgent == nil {
		return false
	}
	return *t.EnableRelayAgent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp.
func (*RelayAgent_Dhcp) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_AgentInformationOption represents the /openconfig-relay-agent/relay-agent/dhcp/agent-information-option YANG schema element.
type RelayAgent_Dhcp_AgentInformationOption struct {
	Enable *bool `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_AgentInformationOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_AgentInformationOption) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_AgentInformationOption) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_AgentInformationOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_AgentInformationOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_AgentInformationOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_AgentInformationOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_AgentInformationOption.
func (*RelayAgent_Dhcp_AgentInformationOption) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface YANG schema element.
type RelayAgent_Dhcp_Interface struct {
	AgentInformationOption *RelayAgent_Dhcp_Interface_AgentInformationOption `path:"agent-information-option" module:"openconfig-relay-agent"`
	Counters               *RelayAgent_Dhcp_Interface_Counters               `path:"state/counters" module:"openconfig-relay-agent/openconfig-relay-agent"`
	Enable                 *bool                                             `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	HelperAddress          []string                                          `path:"config/helper-address" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/helper-address" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Id                     *string                                           `path:"config/id|id" module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent" shadow-path:"state/id|id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent"`
	InterfaceRef           *RelayAgent_Dhcp_Interface_InterfaceRef           `path:"interface-ref" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface) IsYANGGoStruct() {}

// GetOrCreateAgentInformationOption retrieves the value of the AgentInformationOption field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateAgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOption {
	if t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	t.AgentInformationOption = &RelayAgent_Dhcp_Interface_AgentInformationOption{}
	return t.AgentInformationOption
}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateCounters() *RelayAgent_Dhcp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &RelayAgent_Dhcp_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcp_Interface) GetOrCreateInterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &RelayAgent_Dhcp_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetAgentInformationOption returns the value of the AgentInformationOption struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field AgentInformationOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetAgentInformationOption() *RelayAgent_Dhcp_Interface_AgentInformationOption {
	if t != nil && t.AgentInformationOption != nil {
		return t.AgentInformationOption
	}
	return nil
}

// GetCounters returns the value of the Counters struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetCounters() *RelayAgent_Dhcp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from RelayAgent_Dhcp_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcp_Interface) GetInterfaceRef() *RelayAgent_Dhcp_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetHelperAddress retrieves the value of the leaf HelperAddress from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperAddress is set, it can
// safely use t.GetHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperAddress == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetHelperAddress() []string {
	if t == nil || t.HelperAddress == nil {
		return nil
	}
	return t.HelperAddress
}

// GetId retrieves the value of the leaf Id from the RelayAgent_Dhcp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// ΛListKeyMap returns the keys of the RelayAgent_Dhcp_Interface struct, which is a YANG list entry.
func (t *RelayAgent_Dhcp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface.
func (*RelayAgent_Dhcp_Interface) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_AgentInformationOption represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/agent-information-option YANG schema element.
type RelayAgent_Dhcp_Interface_AgentInformationOption struct {
	CircuitId     *string `path:"config/circuit-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/circuit-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Enable        *bool   `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	RemoteId      *string `path:"config/remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentCircuitId *string `path:"state/sent-circuit-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentRemoteId  *string `path:"state/sent-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_AgentInformationOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_AgentInformationOption) IsYANGGoStruct() {}

// GetCircuitId retrieves the value of the leaf CircuitId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetCircuitId() string {
	if t == nil || t.CircuitId == nil {
		return ""
	}
	return *t.CircuitId
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRemoteId retrieves the value of the leaf RemoteId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetSentCircuitId retrieves the value of the leaf SentCircuitId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentCircuitId is set, it can
// safely use t.GetSentCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentCircuitId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetSentCircuitId() string {
	if t == nil || t.SentCircuitId == nil {
		return ""
	}
	return *t.SentCircuitId
}

// GetSentRemoteId retrieves the value of the leaf SentRemoteId from the RelayAgent_Dhcp_Interface_AgentInformationOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentRemoteId is set, it can
// safely use t.GetSentRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) GetSentRemoteId() string {
	if t == nil || t.SentRemoteId == nil {
		return ""
	}
	return *t.SentRemoteId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_AgentInformationOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_AgentInformationOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_AgentInformationOption.
func (*RelayAgent_Dhcp_Interface_AgentInformationOption) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_Counters represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcp_Interface_Counters struct {
	BootreplySent        *uint64 `path:"bootreply-sent" module:"openconfig-relay-agent"`
	BootrequestReceived  *uint64 `path:"bootrequest-received" module:"openconfig-relay-agent"`
	BootrequestSent      *uint64 `path:"bootrequest-sent" module:"openconfig-relay-agent"`
	DhcpAckSent          *uint64 `path:"dhcp-ack-sent" module:"openconfig-relay-agent"`
	DhcpDeclineReceived  *uint64 `path:"dhcp-decline-received" module:"openconfig-relay-agent"`
	DhcpDiscoverReceived *uint64 `path:"dhcp-discover-received" module:"openconfig-relay-agent"`
	DhcpInformReceived   *uint64 `path:"dhcp-inform-received" module:"openconfig-relay-agent"`
	DhcpNackSent         *uint64 `path:"dhcp-nack-sent" module:"openconfig-relay-agent"`
	DhcpOfferSent        *uint64 `path:"dhcp-offer-sent" module:"openconfig-relay-agent"`
	DhcpReleaseReceived  *uint64 `path:"dhcp-release-received" module:"openconfig-relay-agent"`
	DhcpRequestReceived  *uint64 `path:"dhcp-request-received" module:"openconfig-relay-agent"`
	InvalidOpcode        *uint64 `path:"invalid-opcode" module:"openconfig-relay-agent"`
	InvalidOptions       *uint64 `path:"invalid-options" module:"openconfig-relay-agent"`
	TotalDropped         *uint64 `path:"total-dropped" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_Counters) IsYANGGoStruct() {}

// GetBootreplySent retrieves the value of the leaf BootreplySent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootreplySent is set, it can
// safely use t.GetBootreplySent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootreplySent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootreplySent() uint64 {
	if t == nil || t.BootreplySent == nil {
		return 0
	}
	return *t.BootreplySent
}

// GetBootrequestReceived retrieves the value of the leaf BootrequestReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootrequestReceived is set, it can
// safely use t.GetBootrequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootrequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootrequestReceived() uint64 {
	if t == nil || t.BootrequestReceived == nil {
		return 0
	}
	return *t.BootrequestReceived
}

// GetBootrequestSent retrieves the value of the leaf BootrequestSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootrequestSent is set, it can
// safely use t.GetBootrequestSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootrequestSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetBootrequestSent() uint64 {
	if t == nil || t.BootrequestSent == nil {
		return 0
	}
	return *t.BootrequestSent
}

// GetDhcpAckSent retrieves the value of the leaf DhcpAckSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpAckSent is set, it can
// safely use t.GetDhcpAckSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpAckSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpAckSent() uint64 {
	if t == nil || t.DhcpAckSent == nil {
		return 0
	}
	return *t.DhcpAckSent
}

// GetDhcpDeclineReceived retrieves the value of the leaf DhcpDeclineReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpDeclineReceived is set, it can
// safely use t.GetDhcpDeclineReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpDeclineReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpDeclineReceived() uint64 {
	if t == nil || t.DhcpDeclineReceived == nil {
		return 0
	}
	return *t.DhcpDeclineReceived
}

// GetDhcpDiscoverReceived retrieves the value of the leaf DhcpDiscoverReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpDiscoverReceived is set, it can
// safely use t.GetDhcpDiscoverReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpDiscoverReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpDiscoverReceived() uint64 {
	if t == nil || t.DhcpDiscoverReceived == nil {
		return 0
	}
	return *t.DhcpDiscoverReceived
}

// GetDhcpInformReceived retrieves the value of the leaf DhcpInformReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpInformReceived is set, it can
// safely use t.GetDhcpInformReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpInformReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpInformReceived() uint64 {
	if t == nil || t.DhcpInformReceived == nil {
		return 0
	}
	return *t.DhcpInformReceived
}

// GetDhcpNackSent retrieves the value of the leaf DhcpNackSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpNackSent is set, it can
// safely use t.GetDhcpNackSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpNackSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpNackSent() uint64 {
	if t == nil || t.DhcpNackSent == nil {
		return 0
	}
	return *t.DhcpNackSent
}

// GetDhcpOfferSent retrieves the value of the leaf DhcpOfferSent from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpOfferSent is set, it can
// safely use t.GetDhcpOfferSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpOfferSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpOfferSent() uint64 {
	if t == nil || t.DhcpOfferSent == nil {
		return 0
	}
	return *t.DhcpOfferSent
}

// GetDhcpReleaseReceived retrieves the value of the leaf DhcpReleaseReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpReleaseReceived is set, it can
// safely use t.GetDhcpReleaseReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpReleaseReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpReleaseReceived() uint64 {
	if t == nil || t.DhcpReleaseReceived == nil {
		return 0
	}
	return *t.DhcpReleaseReceived
}

// GetDhcpRequestReceived retrieves the value of the leaf DhcpRequestReceived from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpRequestReceived is set, it can
// safely use t.GetDhcpRequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpRequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetDhcpRequestReceived() uint64 {
	if t == nil || t.DhcpRequestReceived == nil {
		return 0
	}
	return *t.DhcpRequestReceived
}

// GetInvalidOpcode retrieves the value of the leaf InvalidOpcode from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOpcode is set, it can
// safely use t.GetInvalidOpcode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOpcode == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetInvalidOpcode() uint64 {
	if t == nil || t.InvalidOpcode == nil {
		return 0
	}
	return *t.InvalidOpcode
}

// GetInvalidOptions retrieves the value of the leaf InvalidOptions from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOptions is set, it can
// safely use t.GetInvalidOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOptions == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetInvalidOptions() uint64 {
	if t == nil || t.InvalidOptions == nil {
		return 0
	}
	return *t.InvalidOptions
}

// GetTotalDropped retrieves the value of the leaf TotalDropped from the RelayAgent_Dhcp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalDropped is set, it can
// safely use t.GetTotalDropped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalDropped == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_Counters) GetTotalDropped() uint64 {
	if t == nil || t.TotalDropped == nil {
		return 0
	}
	return *t.TotalDropped
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_Counters.
func (*RelayAgent_Dhcp_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcp_Interface_InterfaceRef represents the /openconfig-relay-agent/relay-agent/dhcp/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcp_Interface_InterfaceRef struct {
	Interface    *string `path:"config/interface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/interface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/subinterface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcp_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcp_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RelayAgent_Dhcp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RelayAgent_Dhcp_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcp_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcp_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcp_Interface_InterfaceRef.
func (*RelayAgent_Dhcp_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6 represents the /openconfig-relay-agent/relay-agent/dhcpv6 YANG schema element.
type RelayAgent_Dhcpv6 struct {
	EnableRelayAgent *bool                                   `path:"config/enable-relay-agent" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable-relay-agent" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Interface        map[string]*RelayAgent_Dhcpv6_Interface `path:"interfaces/interface" module:"openconfig-relay-agent/openconfig-relay-agent"`
	Options          *RelayAgent_Dhcpv6_Options              `path:"options" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// RelayAgent_Dhcpv6 struct. The keys of the list are populated from the input
// arguments.
func (t *RelayAgent_Dhcpv6) NewInterface(Id string) (*RelayAgent_Dhcpv6_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcpv6_Interface)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &RelayAgent_Dhcpv6_Interface{
		Id: &Id,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the RelayAgent_Dhcpv6 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RelayAgent_Dhcpv6) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Id = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver RelayAgent_Dhcpv6. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RelayAgent_Dhcpv6) GetOrCreateInterface(Id string) *RelayAgent_Dhcpv6_Interface {

	key := Id

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of RelayAgent_Dhcpv6. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RelayAgent_Dhcpv6) GetInterface(Id string) *RelayAgent_Dhcpv6_Interface {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver RelayAgent_Dhcpv6. If there is no such element, the function
// is a no-op.
func (t *RelayAgent_Dhcpv6) DeleteInterface(Id string) {
	key := Id

	delete(t.Interface, key)
}

// AppendInterface appends the supplied RelayAgent_Dhcpv6_Interface struct to the
// list Interface of RelayAgent_Dhcpv6. If the key value(s) specified in
// the supplied RelayAgent_Dhcpv6_Interface already exist in the list, an error is
// returned.
func (t *RelayAgent_Dhcpv6) AppendInterface(v *RelayAgent_Dhcpv6_Interface) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*RelayAgent_Dhcpv6_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6) GetOrCreateOptions() *RelayAgent_Dhcpv6_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &RelayAgent_Dhcpv6_Options{}
	return t.Options
}

// GetOptions returns the value of the Options struct pointer
// from RelayAgent_Dhcpv6. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6) GetOptions() *RelayAgent_Dhcpv6_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetEnableRelayAgent retrieves the value of the leaf EnableRelayAgent from the RelayAgent_Dhcpv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRelayAgent is set, it can
// safely use t.GetEnableRelayAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRelayAgent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6) GetEnableRelayAgent() bool {
	if t == nil || t.EnableRelayAgent == nil {
		return false
	}
	return *t.EnableRelayAgent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6.
func (*RelayAgent_Dhcpv6) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface YANG schema element.
type RelayAgent_Dhcpv6_Interface struct {
	Counters      *RelayAgent_Dhcpv6_Interface_Counters     `path:"state/counters" module:"openconfig-relay-agent/openconfig-relay-agent"`
	Enable        *bool                                     `path:"config/enable" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	HelperAddress []string                                  `path:"config/helper-address" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/helper-address" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Id            *string                                   `path:"config/id|id" module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent" shadow-path:"state/id|id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent|openconfig-relay-agent"`
	InterfaceRef  *RelayAgent_Dhcpv6_Interface_InterfaceRef `path:"interface-ref" module:"openconfig-relay-agent"`
	Options       *RelayAgent_Dhcpv6_Interface_Options      `path:"options" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateCounters() *RelayAgent_Dhcpv6_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &RelayAgent_Dhcpv6_Interface_Counters{}
	return t.Counters
}

// GetOrCreateInterfaceRef retrieves the value of the InterfaceRef field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateInterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRef {
	if t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	t.InterfaceRef = &RelayAgent_Dhcpv6_Interface_InterfaceRef{}
	return t.InterfaceRef
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *RelayAgent_Dhcpv6_Interface) GetOrCreateOptions() *RelayAgent_Dhcpv6_Interface_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &RelayAgent_Dhcpv6_Interface_Options{}
	return t.Options
}

// GetCounters returns the value of the Counters struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetCounters() *RelayAgent_Dhcpv6_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetInterfaceRef returns the value of the InterfaceRef struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field InterfaceRef is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetInterfaceRef() *RelayAgent_Dhcpv6_Interface_InterfaceRef {
	if t != nil && t.InterfaceRef != nil {
		return t.InterfaceRef
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from RelayAgent_Dhcpv6_Interface. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RelayAgent_Dhcpv6_Interface) GetOptions() *RelayAgent_Dhcpv6_Interface_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetEnable retrieves the value of the leaf Enable from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetHelperAddress retrieves the value of the leaf HelperAddress from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelperAddress is set, it can
// safely use t.GetHelperAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelperAddress == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetHelperAddress() []string {
	if t == nil || t.HelperAddress == nil {
		return nil
	}
	return t.HelperAddress
}

// GetId retrieves the value of the leaf Id from the RelayAgent_Dhcpv6_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// ΛListKeyMap returns the keys of the RelayAgent_Dhcpv6_Interface struct, which is a YANG list entry.
func (t *RelayAgent_Dhcpv6_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface.
func (*RelayAgent_Dhcpv6_Interface) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_Counters represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/state/counters YANG schema element.
type RelayAgent_Dhcpv6_Interface_Counters struct {
	Dhcpv6AdverstiseSent      *uint64 `path:"dhcpv6-adverstise-sent" module:"openconfig-relay-agent"`
	Dhcpv6ConfirmReceived     *uint64 `path:"dhcpv6-confirm-received" module:"openconfig-relay-agent"`
	Dhcpv6DeclineReceived     *uint64 `path:"dhcpv6-decline-received" module:"openconfig-relay-agent"`
	Dhcpv6InfoRequestReceived *uint64 `path:"dhcpv6-info-request-received" module:"openconfig-relay-agent"`
	Dhcpv6RebindReceived      *uint64 `path:"dhcpv6-rebind-received" module:"openconfig-relay-agent"`
	Dhcpv6ReconfigureSent     *uint64 `path:"dhcpv6-reconfigure-sent" module:"openconfig-relay-agent"`
	Dhcpv6RelayForwSent       *uint64 `path:"dhcpv6-relay-forw-sent" module:"openconfig-relay-agent"`
	Dhcpv6RelayReplyReceived  *uint64 `path:"dhcpv6-relay-reply-received" module:"openconfig-relay-agent"`
	Dhcpv6ReleaseReceived     *uint64 `path:"dhcpv6-release-received" module:"openconfig-relay-agent"`
	Dhcpv6ReplySent           *uint64 `path:"dhcpv6-reply-sent" module:"openconfig-relay-agent"`
	Dhcpv6RequestReceived     *uint64 `path:"dhcpv6-request-received" module:"openconfig-relay-agent"`
	Dhcpv6SolicitReceived     *uint64 `path:"dhcpv6-solicit-received" module:"openconfig-relay-agent"`
	InvalidOpcode             *uint64 `path:"invalid-opcode" module:"openconfig-relay-agent"`
	InvalidOptions            *uint64 `path:"invalid-options" module:"openconfig-relay-agent"`
	TotalDropped              *uint64 `path:"total-dropped" module:"openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_Counters) IsYANGGoStruct() {}

// GetDhcpv6AdverstiseSent retrieves the value of the leaf Dhcpv6AdverstiseSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6AdverstiseSent is set, it can
// safely use t.GetDhcpv6AdverstiseSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6AdverstiseSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6AdverstiseSent() uint64 {
	if t == nil || t.Dhcpv6AdverstiseSent == nil {
		return 0
	}
	return *t.Dhcpv6AdverstiseSent
}

// GetDhcpv6ConfirmReceived retrieves the value of the leaf Dhcpv6ConfirmReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ConfirmReceived is set, it can
// safely use t.GetDhcpv6ConfirmReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ConfirmReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ConfirmReceived() uint64 {
	if t == nil || t.Dhcpv6ConfirmReceived == nil {
		return 0
	}
	return *t.Dhcpv6ConfirmReceived
}

// GetDhcpv6DeclineReceived retrieves the value of the leaf Dhcpv6DeclineReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6DeclineReceived is set, it can
// safely use t.GetDhcpv6DeclineReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6DeclineReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6DeclineReceived() uint64 {
	if t == nil || t.Dhcpv6DeclineReceived == nil {
		return 0
	}
	return *t.Dhcpv6DeclineReceived
}

// GetDhcpv6InfoRequestReceived retrieves the value of the leaf Dhcpv6InfoRequestReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6InfoRequestReceived is set, it can
// safely use t.GetDhcpv6InfoRequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6InfoRequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6InfoRequestReceived() uint64 {
	if t == nil || t.Dhcpv6InfoRequestReceived == nil {
		return 0
	}
	return *t.Dhcpv6InfoRequestReceived
}

// GetDhcpv6RebindReceived retrieves the value of the leaf Dhcpv6RebindReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RebindReceived is set, it can
// safely use t.GetDhcpv6RebindReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RebindReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RebindReceived() uint64 {
	if t == nil || t.Dhcpv6RebindReceived == nil {
		return 0
	}
	return *t.Dhcpv6RebindReceived
}

// GetDhcpv6ReconfigureSent retrieves the value of the leaf Dhcpv6ReconfigureSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReconfigureSent is set, it can
// safely use t.GetDhcpv6ReconfigureSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReconfigureSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReconfigureSent() uint64 {
	if t == nil || t.Dhcpv6ReconfigureSent == nil {
		return 0
	}
	return *t.Dhcpv6ReconfigureSent
}

// GetDhcpv6RelayForwSent retrieves the value of the leaf Dhcpv6RelayForwSent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RelayForwSent is set, it can
// safely use t.GetDhcpv6RelayForwSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RelayForwSent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RelayForwSent() uint64 {
	if t == nil || t.Dhcpv6RelayForwSent == nil {
		return 0
	}
	return *t.Dhcpv6RelayForwSent
}

// GetDhcpv6RelayReplyReceived retrieves the value of the leaf Dhcpv6RelayReplyReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RelayReplyReceived is set, it can
// safely use t.GetDhcpv6RelayReplyReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RelayReplyReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RelayReplyReceived() uint64 {
	if t == nil || t.Dhcpv6RelayReplyReceived == nil {
		return 0
	}
	return *t.Dhcpv6RelayReplyReceived
}

// GetDhcpv6ReleaseReceived retrieves the value of the leaf Dhcpv6ReleaseReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReleaseReceived is set, it can
// safely use t.GetDhcpv6ReleaseReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReleaseReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReleaseReceived() uint64 {
	if t == nil || t.Dhcpv6ReleaseReceived == nil {
		return 0
	}
	return *t.Dhcpv6ReleaseReceived
}

// GetDhcpv6ReplySent retrieves the value of the leaf Dhcpv6ReplySent from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6ReplySent is set, it can
// safely use t.GetDhcpv6ReplySent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6ReplySent == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6ReplySent() uint64 {
	if t == nil || t.Dhcpv6ReplySent == nil {
		return 0
	}
	return *t.Dhcpv6ReplySent
}

// GetDhcpv6RequestReceived retrieves the value of the leaf Dhcpv6RequestReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6RequestReceived is set, it can
// safely use t.GetDhcpv6RequestReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6RequestReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6RequestReceived() uint64 {
	if t == nil || t.Dhcpv6RequestReceived == nil {
		return 0
	}
	return *t.Dhcpv6RequestReceived
}

// GetDhcpv6SolicitReceived retrieves the value of the leaf Dhcpv6SolicitReceived from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcpv6SolicitReceived is set, it can
// safely use t.GetDhcpv6SolicitReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcpv6SolicitReceived == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetDhcpv6SolicitReceived() uint64 {
	if t == nil || t.Dhcpv6SolicitReceived == nil {
		return 0
	}
	return *t.Dhcpv6SolicitReceived
}

// GetInvalidOpcode retrieves the value of the leaf InvalidOpcode from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOpcode is set, it can
// safely use t.GetInvalidOpcode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOpcode == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetInvalidOpcode() uint64 {
	if t == nil || t.InvalidOpcode == nil {
		return 0
	}
	return *t.InvalidOpcode
}

// GetInvalidOptions retrieves the value of the leaf InvalidOptions from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InvalidOptions is set, it can
// safely use t.GetInvalidOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InvalidOptions == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetInvalidOptions() uint64 {
	if t == nil || t.InvalidOptions == nil {
		return 0
	}
	return *t.InvalidOptions
}

// GetTotalDropped retrieves the value of the leaf TotalDropped from the RelayAgent_Dhcpv6_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalDropped is set, it can
// safely use t.GetTotalDropped() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalDropped == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Counters) GetTotalDropped() uint64 {
	if t == nil || t.TotalDropped == nil {
		return 0
	}
	return *t.TotalDropped
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_Counters.
func (*RelayAgent_Dhcpv6_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_InterfaceRef represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/interface-ref YANG schema element.
type RelayAgent_Dhcpv6_Interface_InterfaceRef struct {
	Interface    *string `path:"config/interface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/interface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/subinterface" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_InterfaceRef implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_InterfaceRef) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RelayAgent_Dhcpv6_Interface_InterfaceRef
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_InterfaceRef"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_InterfaceRef) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_InterfaceRef.
func (*RelayAgent_Dhcpv6_Interface_InterfaceRef) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Interface_Options represents the /openconfig-relay-agent/relay-agent/dhcpv6/interfaces/interface/options YANG schema element.
type RelayAgent_Dhcpv6_Interface_Options struct {
	EnableInterfaceId *bool   `path:"config/enable-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable-interface-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	EnableRemoteId    *bool   `path:"config/enable-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable-remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	InterfaceId       *string `path:"config/interface-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/interface-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	RemoteId          *string `path:"config/remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentInterfaceId   *string `path:"state/sent-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
	SentRemoteId      *string `path:"state/sent-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Interface_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Interface_Options) IsYANGGoStruct() {}

// GetEnableInterfaceId retrieves the value of the leaf EnableInterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableInterfaceId is set, it can
// safely use t.GetEnableInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetEnableInterfaceId() bool {
	if t == nil || t.EnableInterfaceId == nil {
		return false
	}
	return *t.EnableInterfaceId
}

// GetEnableRemoteId retrieves the value of the leaf EnableRemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRemoteId is set, it can
// safely use t.GetEnableRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetEnableRemoteId() bool {
	if t == nil || t.EnableRemoteId == nil {
		return false
	}
	return *t.EnableRemoteId
}

// GetInterfaceId retrieves the value of the leaf InterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceId is set, it can
// safely use t.GetInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetInterfaceId() string {
	if t == nil || t.InterfaceId == nil {
		return ""
	}
	return *t.InterfaceId
}

// GetRemoteId retrieves the value of the leaf RemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetRemoteId() string {
	if t == nil || t.RemoteId == nil {
		return ""
	}
	return *t.RemoteId
}

// GetSentInterfaceId retrieves the value of the leaf SentInterfaceId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentInterfaceId is set, it can
// safely use t.GetSentInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetSentInterfaceId() string {
	if t == nil || t.SentInterfaceId == nil {
		return ""
	}
	return *t.SentInterfaceId
}

// GetSentRemoteId retrieves the value of the leaf SentRemoteId from the RelayAgent_Dhcpv6_Interface_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SentRemoteId is set, it can
// safely use t.GetSentRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SentRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Interface_Options) GetSentRemoteId() string {
	if t == nil || t.SentRemoteId == nil {
		return ""
	}
	return *t.SentRemoteId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Interface_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Interface_Options) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Interface_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Interface_Options.
func (*RelayAgent_Dhcpv6_Interface_Options) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RelayAgent_Dhcpv6_Options represents the /openconfig-relay-agent/relay-agent/dhcpv6/options YANG schema element.
type RelayAgent_Dhcpv6_Options struct {
	EnableInterfaceId *bool `path:"config/enable-interface-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable-interface-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
	EnableRemoteId    *bool `path:"config/enable-remote-id" module:"openconfig-relay-agent/openconfig-relay-agent" shadow-path:"state/enable-remote-id" shadow-module:"openconfig-relay-agent/openconfig-relay-agent"`
}

// IsYANGGoStruct ensures that RelayAgent_Dhcpv6_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RelayAgent_Dhcpv6_Options) IsYANGGoStruct() {}

// GetEnableInterfaceId retrieves the value of the leaf EnableInterfaceId from the RelayAgent_Dhcpv6_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableInterfaceId is set, it can
// safely use t.GetEnableInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableInterfaceId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Options) GetEnableInterfaceId() bool {
	if t == nil || t.EnableInterfaceId == nil {
		return false
	}
	return *t.EnableInterfaceId
}

// GetEnableRemoteId retrieves the value of the leaf EnableRemoteId from the RelayAgent_Dhcpv6_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableRemoteId is set, it can
// safely use t.GetEnableRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableRemoteId == nil' before retrieving the leaf's value.
func (t *RelayAgent_Dhcpv6_Options) GetEnableRemoteId() bool {
	if t == nil || t.EnableRemoteId == nil {
		return false
	}
	return *t.EnableRemoteId
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RelayAgent_Dhcpv6_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RelayAgent_Dhcpv6_Options) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RelayAgent_Dhcpv6_Options) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RelayAgent_Dhcpv6_Options.
func (*RelayAgent_Dhcpv6_Options) ΛBelongingModule() string {
	return "openconfig-relay-agent"
}

// RoutingPolicy represents the /openconfig-routing-policy/routing-policy YANG schema element.
type RoutingPolicy struct {
	DefinedSets      *RoutingPolicy_DefinedSets                 `path:"defined-sets" module:"openconfig-routing-policy"`
	PolicyDefinition map[string]*RoutingPolicy_PolicyDefinition `path:"policy-definitions/policy-definition" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy) IsYANGGoStruct() {}

// NewPolicyDefinition creates a new entry in the PolicyDefinition list of the
// RoutingPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy) NewPolicyDefinition(Name string) (*RoutingPolicy_PolicyDefinition, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PolicyDefinition[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PolicyDefinition", key)
	}

	t.PolicyDefinition[key] = &RoutingPolicy_PolicyDefinition{
		Name: &Name,
	}

	return t.PolicyDefinition[key], nil
}

// RenamePolicyDefinition renames an entry in the list PolicyDefinition within
// the RoutingPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy) RenamePolicyDefinition(oldK, newK string) error {
	if _, ok := t.PolicyDefinition[newK]; ok {
		return fmt.Errorf("key %v already exists in PolicyDefinition", newK)
	}

	e, ok := t.PolicyDefinition[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PolicyDefinition", oldK)
	}
	e.Name = &newK

	t.PolicyDefinition[newK] = e
	delete(t.PolicyDefinition, oldK)
	return nil
}

// GetOrCreatePolicyDefinition retrieves the value with the specified keys from
// the receiver RoutingPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy) GetOrCreatePolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	key := Name

	if v, ok := t.PolicyDefinition[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicyDefinition(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicyDefinition got unexpected error: %v", err))
	}
	return v
}

// GetPolicyDefinition retrieves the value with the specified key from
// the PolicyDefinition map field of RoutingPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy) GetPolicyDefinition(Name string) *RoutingPolicy_PolicyDefinition {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PolicyDefinition[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicyDefinition deletes the value with the specified keys from
// the receiver RoutingPolicy. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy) DeletePolicyDefinition(Name string) {
	key := Name

	delete(t.PolicyDefinition, key)
}

// AppendPolicyDefinition appends the supplied RoutingPolicy_PolicyDefinition struct to the
// list PolicyDefinition of RoutingPolicy. If the key value(s) specified in
// the supplied RoutingPolicy_PolicyDefinition already exist in the list, an error is
// returned.
func (t *RoutingPolicy) AppendPolicyDefinition(v *RoutingPolicy_PolicyDefinition) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PolicyDefinition == nil {
		t.PolicyDefinition = make(map[string]*RoutingPolicy_PolicyDefinition)
	}

	if _, ok := t.PolicyDefinition[key]; ok {
		return fmt.Errorf("duplicate key for list PolicyDefinition %v", key)
	}

	t.PolicyDefinition[key] = v
	return nil
}

// GetOrCreateDefinedSets retrieves the value of the DefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy) GetOrCreateDefinedSets() *RoutingPolicy_DefinedSets {
	if t.DefinedSets != nil {
		return t.DefinedSets
	}
	t.DefinedSets = &RoutingPolicy_DefinedSets{}
	return t.DefinedSets
}

// GetDefinedSets returns the value of the DefinedSets struct pointer
// from RoutingPolicy. If the receiver or the field DefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy) GetDefinedSets() *RoutingPolicy_DefinedSets {
	if t != nil && t.DefinedSets != nil {
		return t.DefinedSets
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy.
func (*RoutingPolicy) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets YANG schema element.
type RoutingPolicy_DefinedSets struct {
	BgpDefinedSets *RoutingPolicy_DefinedSets_BgpDefinedSets         `path:"bgp-defined-sets" module:"openconfig-bgp-policy"`
	NeighborSet    map[string]*RoutingPolicy_DefinedSets_NeighborSet `path:"neighbor-sets/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	PrefixSet      map[string]*RoutingPolicy_DefinedSets_PrefixSet   `path:"prefix-sets/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
	TagSet         map[string]*RoutingPolicy_DefinedSets_TagSet      `path:"tag-sets/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets) IsYANGGoStruct() {}

// NewNeighborSet creates a new entry in the NeighborSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewNeighborSet(Name string) (*RoutingPolicy_DefinedSets_NeighborSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NeighborSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NeighborSet", key)
	}

	t.NeighborSet[key] = &RoutingPolicy_DefinedSets_NeighborSet{
		Name: &Name,
	}

	return t.NeighborSet[key], nil
}

// RenameNeighborSet renames an entry in the list NeighborSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameNeighborSet(oldK, newK string) error {
	if _, ok := t.NeighborSet[newK]; ok {
		return fmt.Errorf("key %v already exists in NeighborSet", newK)
	}

	e, ok := t.NeighborSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NeighborSet", oldK)
	}
	e.Name = &newK

	t.NeighborSet[newK] = e
	delete(t.NeighborSet, oldK)
	return nil
}

// GetOrCreateNeighborSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	key := Name

	if v, ok := t.NeighborSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNeighborSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNeighborSet got unexpected error: %v", err))
	}
	return v
}

// GetNeighborSet retrieves the value with the specified key from
// the NeighborSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetNeighborSet(Name string) *RoutingPolicy_DefinedSets_NeighborSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.NeighborSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteNeighborSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteNeighborSet(Name string) {
	key := Name

	delete(t.NeighborSet, key)
}

// AppendNeighborSet appends the supplied RoutingPolicy_DefinedSets_NeighborSet struct to the
// list NeighborSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_NeighborSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendNeighborSet(v *RoutingPolicy_DefinedSets_NeighborSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NeighborSet == nil {
		t.NeighborSet = make(map[string]*RoutingPolicy_DefinedSets_NeighborSet)
	}

	if _, ok := t.NeighborSet[key]; ok {
		return fmt.Errorf("duplicate key for list NeighborSet %v", key)
	}

	t.NeighborSet[key] = v
	return nil
}

// NewPrefixSet creates a new entry in the PrefixSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewPrefixSet(Name string) (*RoutingPolicy_DefinedSets_PrefixSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrefixSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrefixSet", key)
	}

	t.PrefixSet[key] = &RoutingPolicy_DefinedSets_PrefixSet{
		Name: &Name,
	}

	return t.PrefixSet[key], nil
}

// RenamePrefixSet renames an entry in the list PrefixSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenamePrefixSet(oldK, newK string) error {
	if _, ok := t.PrefixSet[newK]; ok {
		return fmt.Errorf("key %v already exists in PrefixSet", newK)
	}

	e, ok := t.PrefixSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrefixSet", oldK)
	}
	e.Name = &newK

	t.PrefixSet[newK] = e
	delete(t.PrefixSet, oldK)
	return nil
}

// GetOrCreatePrefixSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreatePrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	key := Name

	if v, ok := t.PrefixSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefixSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefixSet got unexpected error: %v", err))
	}
	return v
}

// GetPrefixSet retrieves the value with the specified key from
// the PrefixSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetPrefixSet(Name string) *RoutingPolicy_DefinedSets_PrefixSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PrefixSet[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefixSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeletePrefixSet(Name string) {
	key := Name

	delete(t.PrefixSet, key)
}

// AppendPrefixSet appends the supplied RoutingPolicy_DefinedSets_PrefixSet struct to the
// list PrefixSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendPrefixSet(v *RoutingPolicy_DefinedSets_PrefixSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrefixSet == nil {
		t.PrefixSet = make(map[string]*RoutingPolicy_DefinedSets_PrefixSet)
	}

	if _, ok := t.PrefixSet[key]; ok {
		return fmt.Errorf("duplicate key for list PrefixSet %v", key)
	}

	t.PrefixSet[key] = v
	return nil
}

// NewTagSet creates a new entry in the TagSet list of the
// RoutingPolicy_DefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets) NewTagSet(Name string) (*RoutingPolicy_DefinedSets_TagSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TagSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TagSet", key)
	}

	t.TagSet[key] = &RoutingPolicy_DefinedSets_TagSet{
		Name: &Name,
	}

	return t.TagSet[key], nil
}

// RenameTagSet renames an entry in the list TagSet within
// the RoutingPolicy_DefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets) RenameTagSet(oldK, newK string) error {
	if _, ok := t.TagSet[newK]; ok {
		return fmt.Errorf("key %v already exists in TagSet", newK)
	}

	e, ok := t.TagSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TagSet", oldK)
	}
	e.Name = &newK

	t.TagSet[newK] = e
	delete(t.TagSet, oldK)
	return nil
}

// GetOrCreateTagSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets) GetOrCreateTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	key := Name

	if v, ok := t.TagSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTagSet(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTagSet got unexpected error: %v", err))
	}
	return v
}

// GetTagSet retrieves the value with the specified key from
// the TagSet map field of RoutingPolicy_DefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets) GetTagSet(Name string) *RoutingPolicy_DefinedSets_TagSet {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TagSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteTagSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets) DeleteTagSet(Name string) {
	key := Name

	delete(t.TagSet, key)
}

// AppendTagSet appends the supplied RoutingPolicy_DefinedSets_TagSet struct to the
// list TagSet of RoutingPolicy_DefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_TagSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets) AppendTagSet(v *RoutingPolicy_DefinedSets_TagSet) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TagSet == nil {
		t.TagSet = make(map[string]*RoutingPolicy_DefinedSets_TagSet)
	}

	if _, ok := t.TagSet[key]; ok {
		return fmt.Errorf("duplicate key for list TagSet %v", key)
	}

	t.TagSet[key] = v
	return nil
}

// GetOrCreateBgpDefinedSets retrieves the value of the BgpDefinedSets field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_DefinedSets) GetOrCreateBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	t.BgpDefinedSets = &RoutingPolicy_DefinedSets_BgpDefinedSets{}
	return t.BgpDefinedSets
}

// GetBgpDefinedSets returns the value of the BgpDefinedSets struct pointer
// from RoutingPolicy_DefinedSets. If the receiver or the field BgpDefinedSets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_DefinedSets) GetBgpDefinedSets() *RoutingPolicy_DefinedSets_BgpDefinedSets {
	if t != nil && t.BgpDefinedSets != nil {
		return t.BgpDefinedSets
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets.
func (*RoutingPolicy_DefinedSets) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets struct {
	AsPathSet       map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet       `path:"as-path-sets/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySet    map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet    `path:"community-sets/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySet map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet `path:"ext-community-sets/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) IsYANGGoStruct() {}

// NewAsPathSet creates a new entry in the AsPathSet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewAsPathSet(AsPathSetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	key := AsPathSetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AsPathSet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AsPathSet", key)
	}

	t.AsPathSet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet{
		AsPathSetName: &AsPathSetName,
	}

	return t.AsPathSet[key], nil
}

// RenameAsPathSet renames an entry in the list AsPathSet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameAsPathSet(oldK, newK string) error {
	if _, ok := t.AsPathSet[newK]; ok {
		return fmt.Errorf("key %v already exists in AsPathSet", newK)
	}

	e, ok := t.AsPathSet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AsPathSet", oldK)
	}
	e.AsPathSetName = &newK

	t.AsPathSet[newK] = e
	delete(t.AsPathSet, oldK)
	return nil
}

// GetOrCreateAsPathSet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	key := AsPathSetName

	if v, ok := t.AsPathSet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAsPathSet(AsPathSetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAsPathSet got unexpected error: %v", err))
	}
	return v
}

// GetAsPathSet retrieves the value with the specified key from
// the AsPathSet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetAsPathSet(AsPathSetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet {

	if t == nil {
		return nil
	}

	key := AsPathSetName

	if lm, ok := t.AsPathSet[key]; ok {
		return lm
	}
	return nil
}

// DeleteAsPathSet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteAsPathSet(AsPathSetName string) {
	key := AsPathSetName

	delete(t.AsPathSet, key)
}

// AppendAsPathSet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct to the
// list AsPathSet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendAsPathSet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) error {
	if v.AsPathSetName == nil {
		return fmt.Errorf("invalid nil key received for AsPathSetName")
	}

	key := *v.AsPathSetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AsPathSet == nil {
		t.AsPathSet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet)
	}

	if _, ok := t.AsPathSet[key]; ok {
		return fmt.Errorf("duplicate key for list AsPathSet %v", key)
	}

	t.AsPathSet[key] = v
	return nil
}

// NewCommunitySet creates a new entry in the CommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewCommunitySet(CommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	key := CommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommunitySet", key)
	}

	t.CommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet{
		CommunitySetName: &CommunitySetName,
	}

	return t.CommunitySet[key], nil
}

// RenameCommunitySet renames an entry in the list CommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameCommunitySet(oldK, newK string) error {
	if _, ok := t.CommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in CommunitySet", newK)
	}

	e, ok := t.CommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommunitySet", oldK)
	}
	e.CommunitySetName = &newK

	t.CommunitySet[newK] = e
	delete(t.CommunitySet, oldK)
	return nil
}

// GetOrCreateCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	key := CommunitySetName

	if v, ok := t.CommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunitySet(CommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetCommunitySet retrieves the value with the specified key from
// the CommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetCommunitySet(CommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet {

	if t == nil {
		return nil
	}

	key := CommunitySetName

	if lm, ok := t.CommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteCommunitySet(CommunitySetName string) {
	key := CommunitySetName

	delete(t.CommunitySet, key)
}

// AppendCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct to the
// list CommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) error {
	if v.CommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for CommunitySetName")
	}

	key := *v.CommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommunitySet == nil {
		t.CommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet)
	}

	if _, ok := t.CommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list CommunitySet %v", key)
	}

	t.CommunitySet[key] = v
	return nil
}

// NewExtCommunitySet creates a new entry in the ExtCommunitySet list of the
// RoutingPolicy_DefinedSets_BgpDefinedSets struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) NewExtCommunitySet(ExtCommunitySetName string) (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	key := ExtCommunitySetName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ExtCommunitySet[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ExtCommunitySet", key)
	}

	t.ExtCommunitySet[key] = &RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet{
		ExtCommunitySetName: &ExtCommunitySetName,
	}

	return t.ExtCommunitySet[key], nil
}

// RenameExtCommunitySet renames an entry in the list ExtCommunitySet within
// the RoutingPolicy_DefinedSets_BgpDefinedSets struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) RenameExtCommunitySet(oldK, newK string) error {
	if _, ok := t.ExtCommunitySet[newK]; ok {
		return fmt.Errorf("key %v already exists in ExtCommunitySet", newK)
	}

	e, ok := t.ExtCommunitySet[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ExtCommunitySet", oldK)
	}
	e.ExtCommunitySetName = &newK

	t.ExtCommunitySet[newK] = e
	delete(t.ExtCommunitySet, oldK)
	return nil
}

// GetOrCreateExtCommunitySet retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetOrCreateExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	key := ExtCommunitySetName

	if v, ok := t.ExtCommunitySet[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewExtCommunitySet(ExtCommunitySetName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateExtCommunitySet got unexpected error: %v", err))
	}
	return v
}

// GetExtCommunitySet retrieves the value with the specified key from
// the ExtCommunitySet map field of RoutingPolicy_DefinedSets_BgpDefinedSets. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) GetExtCommunitySet(ExtCommunitySetName string) *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet {

	if t == nil {
		return nil
	}

	key := ExtCommunitySetName

	if lm, ok := t.ExtCommunitySet[key]; ok {
		return lm
	}
	return nil
}

// DeleteExtCommunitySet deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_BgpDefinedSets. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) DeleteExtCommunitySet(ExtCommunitySetName string) {
	key := ExtCommunitySetName

	delete(t.ExtCommunitySet, key)
}

// AppendExtCommunitySet appends the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct to the
// list ExtCommunitySet of RoutingPolicy_DefinedSets_BgpDefinedSets. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) AppendExtCommunitySet(v *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) error {
	if v.ExtCommunitySetName == nil {
		return fmt.Errorf("invalid nil key received for ExtCommunitySetName")
	}

	key := *v.ExtCommunitySetName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ExtCommunitySet == nil {
		t.ExtCommunitySet = make(map[string]*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet)
	}

	if _, ok := t.ExtCommunitySet[key]; ok {
		return fmt.Errorf("duplicate key for list ExtCommunitySet %v", key)
	}

	t.ExtCommunitySet[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/as-path-sets/as-path-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct {
	AsPathSetMember []string `path:"config/as-path-set-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/as-path-set-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathSetName   *string  `path:"config/as-path-set-name|as-path-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"state/as-path-set-name|as-path-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) IsYANGGoStruct() {}

// GetAsPathSetMember retrieves the value of the leaf AsPathSetMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetMember is set, it can
// safely use t.GetAsPathSetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetMember() []string {
	if t == nil || t.AsPathSetMember == nil {
		return nil
	}
	return t.AsPathSetMember
}

// GetAsPathSetName retrieves the value of the leaf AsPathSetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSetName is set, it can
// safely use t.GetAsPathSetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) GetAsPathSetName() string {
	if t == nil || t.AsPathSetName == nil {
		return ""
	}
	return *t.AsPathSetName
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AsPathSetName == nil {
		return nil, fmt.Errorf("nil value for key AsPathSetName")
	}

	return map[string]interface{}{
		"as-path-set-name": *t.AsPathSetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_AsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/community-sets/community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct {
	CommunityMember  []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union `path:"config/community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	CommunitySetName *string                                                                       `path:"config/community-set-name|community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"state/community-set-name|community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions  E_PolicyTypes_MatchSetOptionsType                                             `path:"config/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) IsYANGGoStruct() {}

// GetCommunityMember retrieves the value of the leaf CommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityMember is set, it can
// safely use t.GetCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunityMember() []RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet_CommunityMember_Union {
	if t == nil || t.CommunityMember == nil {
		return nil
	}
	return t.CommunityMember
}

// GetCommunitySetName retrieves the value of the leaf CommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetName is set, it can
// safely use t.GetCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetCommunitySetName() string {
	if t == nil || t.CommunitySetName == nil {
		return ""
	}
	return *t.CommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key CommunitySetName")
	}

	return map[string]interface{}{
		"community-set-name": *t.CommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_CommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet represents the /openconfig-routing-policy/routing-policy/defined-sets/bgp-defined-sets/ext-community-sets/ext-community-set YANG schema element.
type RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct {
	ExtCommunityMember  []string                          `path:"config/ext-community-member" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/ext-community-member" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySetName *string                           `path:"config/ext-community-set-name|ext-community-set-name" module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy" shadow-path:"state/ext-community-set-name|ext-community-set-name" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy|openconfig-bgp-policy"`
	MatchSetOptions     E_PolicyTypes_MatchSetOptionsType `path:"config/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) IsYANGGoStruct() {}

// GetExtCommunityMember retrieves the value of the leaf ExtCommunityMember from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunityMember is set, it can
// safely use t.GetExtCommunityMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunityMember == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunityMember() []string {
	if t == nil || t.ExtCommunityMember == nil {
		return nil
	}
	return t.ExtCommunityMember
}

// GetExtCommunitySetName retrieves the value of the leaf ExtCommunitySetName from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetName is set, it can
// safely use t.GetExtCommunitySetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetName == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetExtCommunitySetName() string {
	if t == nil || t.ExtCommunitySetName == nil {
		return ""
	}
	return *t.ExtCommunitySetName
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ExtCommunitySetName == nil {
		return nil, fmt.Errorf("nil value for key ExtCommunitySetName")
	}

	return map[string]interface{}{
		"ext-community-set-name": *t.ExtCommunitySetName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet.
func (*RoutingPolicy_DefinedSets_BgpDefinedSets_ExtCommunitySet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_DefinedSets_NeighborSet represents the /openconfig-routing-policy/routing-policy/defined-sets/neighbor-sets/neighbor-set YANG schema element.
type RoutingPolicy_DefinedSets_NeighborSet struct {
	Address []string `path:"config/address" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/address" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name    *string  `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"state/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_NeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_NeighborSet) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetAddress() []string {
	if t == nil || t.Address == nil {
		return nil
	}
	return t.Address
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_NeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_NeighborSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_NeighborSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_NeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_NeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_NeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_NeighborSet.
func (*RoutingPolicy_DefinedSets_NeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet struct {
	Mode   E_RoutingPolicy_PrefixSet_Mode                                                                 `path:"config/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Name   *string                                                                                        `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"state/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Prefix map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix `path:"prefixes/prefix" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet) IsYANGGoStruct() {}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key represents the key for list Prefix of element /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key struct {
	IpPrefix        string `path:"ip-prefix"`
	MasklengthRange string `path:"masklength-range"`
}

// NewPrefix creates a new entry in the Prefix list of the
// RoutingPolicy_DefinedSets_PrefixSet struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_DefinedSets_PrefixSet) NewPrefix(IpPrefix string, MasklengthRange string) (*RoutingPolicy_DefinedSets_PrefixSet_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &RoutingPolicy_DefinedSets_PrefixSet_Prefix{
		IpPrefix:        &IpPrefix,
		MasklengthRange: &MasklengthRange,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the RoutingPolicy_DefinedSets_PrefixSet struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) RenamePrefix(oldK, newK RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK.IpPrefix
	e.MasklengthRange = &newK.MasklengthRange

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetOrCreatePrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix, MasklengthRange)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of RoutingPolicy_DefinedSets_PrefixSet. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetPrefix(IpPrefix string, MasklengthRange string) *RoutingPolicy_DefinedSets_PrefixSet_Prefix {

	if t == nil {
		return nil
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver RoutingPolicy_DefinedSets_PrefixSet. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_DefinedSets_PrefixSet) DeletePrefix(IpPrefix string, MasklengthRange string) {
	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        IpPrefix,
		MasklengthRange: MasklengthRange,
	}

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix struct to the
// list Prefix of RoutingPolicy_DefinedSets_PrefixSet. If the key value(s) specified in
// the supplied RoutingPolicy_DefinedSets_PrefixSet_Prefix already exist in the list, an error is
// returned.
func (t *RoutingPolicy_DefinedSets_PrefixSet) AppendPrefix(v *RoutingPolicy_DefinedSets_PrefixSet_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key for IpPrefix")
	}

	if v.MasklengthRange == nil {
		return fmt.Errorf("invalid nil key for MasklengthRange")
	}

	key := RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key{
		IpPrefix:        *v.IpPrefix,
		MasklengthRange: *v.MasklengthRange,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[RoutingPolicy_DefinedSets_PrefixSet_Prefix_Key]*RoutingPolicy_DefinedSets_PrefixSet_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetMode() E_RoutingPolicy_PrefixSet_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_PrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet.
func (*RoutingPolicy_DefinedSets_PrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_PrefixSet_Prefix represents the /openconfig-routing-policy/routing-policy/defined-sets/prefix-sets/prefix-set/prefixes/prefix YANG schema element.
type RoutingPolicy_DefinedSets_PrefixSet_Prefix struct {
	IpPrefix        *string `path:"config/ip-prefix|ip-prefix" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"state/ip-prefix|ip-prefix" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	MasklengthRange *string `path:"config/masklength-range|masklength-range" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"state/masklength-range|masklength-range" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_PrefixSet_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMasklengthRange retrieves the value of the leaf MasklengthRange from the RoutingPolicy_DefinedSets_PrefixSet_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasklengthRange is set, it can
// safely use t.GetMasklengthRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasklengthRange == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) GetMasklengthRange() string {
	if t == nil || t.MasklengthRange == nil {
		return ""
	}
	return *t.MasklengthRange
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_PrefixSet_Prefix struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	if t.MasklengthRange == nil {
		return nil, fmt.Errorf("nil value for key MasklengthRange")
	}

	return map[string]interface{}{
		"ip-prefix":        *t.IpPrefix,
		"masklength-range": *t.MasklengthRange,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_PrefixSet_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_PrefixSet_Prefix.
func (*RoutingPolicy_DefinedSets_PrefixSet_Prefix) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_DefinedSets_TagSet represents the /openconfig-routing-policy/routing-policy/defined-sets/tag-sets/tag-set YANG schema element.
type RoutingPolicy_DefinedSets_TagSet struct {
	Name     *string                                           `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"state/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	TagValue []RoutingPolicy_DefinedSets_TagSet_TagValue_Union `path:"config/tag-value" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/tag-value" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_DefinedSets_TagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_DefinedSets_TagSet) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTagValue retrieves the value of the leaf TagValue from the RoutingPolicy_DefinedSets_TagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagValue is set, it can
// safely use t.GetTagValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagValue == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_DefinedSets_TagSet) GetTagValue() []RoutingPolicy_DefinedSets_TagSet_TagValue_Union {
	if t == nil || t.TagValue == nil {
		return nil
	}
	return t.TagValue
}

// ΛListKeyMap returns the keys of the RoutingPolicy_DefinedSets_TagSet struct, which is a YANG list entry.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_DefinedSets_TagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_DefinedSets_TagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_DefinedSets_TagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_DefinedSets_TagSet.
func (*RoutingPolicy_DefinedSets_TagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition YANG schema element.
type RoutingPolicy_PolicyDefinition struct {
	Name      *string                                              `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"state/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
	Statement map[string]*RoutingPolicy_PolicyDefinition_Statement `path:"statements/statement" module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition) IsYANGGoStruct() {}

// NewStatement creates a new entry in the Statement list of the
// RoutingPolicy_PolicyDefinition struct. The keys of the list are populated from the input
// arguments.
func (t *RoutingPolicy_PolicyDefinition) NewStatement(Name string) (*RoutingPolicy_PolicyDefinition_Statement, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Statement == nil {
		t.Statement = make(map[string]*RoutingPolicy_PolicyDefinition_Statement)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Statement[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Statement", key)
	}

	t.Statement[key] = &RoutingPolicy_PolicyDefinition_Statement{
		Name: &Name,
	}

	return t.Statement[key], nil
}

// RenameStatement renames an entry in the list Statement within
// the RoutingPolicy_PolicyDefinition struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *RoutingPolicy_PolicyDefinition) RenameStatement(oldK, newK string) error {
	if _, ok := t.Statement[newK]; ok {
		return fmt.Errorf("key %v already exists in Statement", newK)
	}

	e, ok := t.Statement[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Statement", oldK)
	}
	e.Name = &newK

	t.Statement[newK] = e
	delete(t.Statement, oldK)
	return nil
}

// GetOrCreateStatement retrieves the value with the specified keys from
// the receiver RoutingPolicy_PolicyDefinition. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *RoutingPolicy_PolicyDefinition) GetOrCreateStatement(Name string) *RoutingPolicy_PolicyDefinition_Statement {

	key := Name

	if v, ok := t.Statement[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatement(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatement got unexpected error: %v", err))
	}
	return v
}

// GetStatement retrieves the value with the specified key from
// the Statement map field of RoutingPolicy_PolicyDefinition. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *RoutingPolicy_PolicyDefinition) GetStatement(Name string) *RoutingPolicy_PolicyDefinition_Statement {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Statement[key]; ok {
		return lm
	}
	return nil
}

// DeleteStatement deletes the value with the specified keys from
// the receiver RoutingPolicy_PolicyDefinition. If there is no such element, the function
// is a no-op.
func (t *RoutingPolicy_PolicyDefinition) DeleteStatement(Name string) {
	key := Name

	delete(t.Statement, key)
}

// AppendStatement appends the supplied RoutingPolicy_PolicyDefinition_Statement struct to the
// list Statement of RoutingPolicy_PolicyDefinition. If the key value(s) specified in
// the supplied RoutingPolicy_PolicyDefinition_Statement already exist in the list, an error is
// returned.
func (t *RoutingPolicy_PolicyDefinition) AppendStatement(v *RoutingPolicy_PolicyDefinition_Statement) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Statement == nil {
		t.Statement = make(map[string]*RoutingPolicy_PolicyDefinition_Statement)
	}

	if _, ok := t.Statement[key]; ok {
		return fmt.Errorf("duplicate key for list Statement %v", key)
	}

	t.Statement[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition.
func (*RoutingPolicy_PolicyDefinition) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement struct {
	Actions    *RoutingPolicy_PolicyDefinition_Statement_Actions    `path:"actions" module:"openconfig-routing-policy"`
	Conditions *RoutingPolicy_PolicyDefinition_Statement_Conditions `path:"conditions" module:"openconfig-routing-policy"`
	Name       *string                                              `path:"config/name|name" module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy" shadow-path:"state/name|name" shadow-module:"openconfig-routing-policy/openconfig-routing-policy|openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement) IsYANGGoStruct() {}

// GetOrCreateActions retrieves the value of the Actions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t.Actions != nil {
		return t.Actions
	}
	t.Actions = &RoutingPolicy_PolicyDefinition_Statement_Actions{}
	return t.Actions
}

// GetOrCreateConditions retrieves the value of the Conditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetOrCreateConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t.Conditions != nil {
		return t.Conditions
	}
	t.Conditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions{}
	return t.Conditions
}

// GetActions returns the value of the Actions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Actions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetActions() *RoutingPolicy_PolicyDefinition_Statement_Actions {
	if t != nil && t.Actions != nil {
		return t.Actions
	}
	return nil
}

// GetConditions returns the value of the Conditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement. If the receiver or the field Conditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions {
	if t != nil && t.Conditions != nil {
		return t.Conditions
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the RoutingPolicy_PolicyDefinition_Statement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the RoutingPolicy_PolicyDefinition_Statement struct, which is a YANG list entry.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement.
func (*RoutingPolicy_PolicyDefinition_Statement) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions struct {
	BgpActions   *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions `path:"bgp-actions" module:"openconfig-bgp-policy"`
	PolicyResult E_RoutingPolicy_PolicyResultType                             `path:"config/policy-result" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/policy-result" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	SetTag       *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag     `path:"set-tag" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) IsYANGGoStruct() {}

// GetOrCreateBgpActions retrieves the value of the BgpActions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t.BgpActions != nil {
		return t.BgpActions
	}
	t.BgpActions = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions{}
	return t.BgpActions
}

// GetOrCreateSetTag retrieves the value of the SetTag field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetOrCreateSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t.SetTag != nil {
		return t.SetTag
	}
	t.SetTag = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag{}
	return t.SetTag
}

// GetBgpActions returns the value of the BgpActions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field BgpActions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetBgpActions() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions {
	if t != nil && t.BgpActions != nil {
		return t.BgpActions
	}
	return nil
}

// GetSetTag returns the value of the SetTag struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions. If the receiver or the field SetTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetSetTag() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag {
	if t != nil && t.SetTag != nil {
		return t.SetTag
	}
	return nil
}

// GetPolicyResult retrieves the value of the leaf PolicyResult from the RoutingPolicy_PolicyDefinition_Statement_Actions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyResult is set, it can
// safely use t.GetPolicyResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyResult == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) GetPolicyResult() E_RoutingPolicy_PolicyResultType {
	if t == nil || t.PolicyResult == 0 {
		return 0
	}
	return t.PolicyResult
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions struct {
	SetAsPathPrepend *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend `path:"set-as-path-prepend" module:"openconfig-bgp-policy"`
	SetCommunity     *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity     `path:"set-community" module:"openconfig-bgp-policy"`
	SetExtCommunity  *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity  `path:"set-ext-community" module:"openconfig-bgp-policy"`
	SetLocalPref     *uint32                                                                       `path:"config/set-local-pref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/set-local-pref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetMed           RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union      `path:"config/set-med" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/set-med" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetNextHop       RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union  `path:"config/set-next-hop" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/set-next-hop" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	SetRouteOrigin   E_BgpTypes_BgpOriginAttrType                                                  `path:"config/set-route-origin" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/set-route-origin" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) IsYANGGoStruct() {}

// GetOrCreateSetAsPathPrepend retrieves the value of the SetAsPathPrepend field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	t.SetAsPathPrepend = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend{}
	return t.SetAsPathPrepend
}

// GetOrCreateSetCommunity retrieves the value of the SetCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t.SetCommunity != nil {
		return t.SetCommunity
	}
	t.SetCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity{}
	return t.SetCommunity
}

// GetOrCreateSetExtCommunity retrieves the value of the SetExtCommunity field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetOrCreateSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	t.SetExtCommunity = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity{}
	return t.SetExtCommunity
}

// GetSetAsPathPrepend returns the value of the SetAsPathPrepend struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetAsPathPrepend is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetAsPathPrepend() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend {
	if t != nil && t.SetAsPathPrepend != nil {
		return t.SetAsPathPrepend
	}
	return nil
}

// GetSetCommunity returns the value of the SetCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity {
	if t != nil && t.SetCommunity != nil {
		return t.SetCommunity
	}
	return nil
}

// GetSetExtCommunity returns the value of the SetExtCommunity struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions. If the receiver or the field SetExtCommunity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetExtCommunity() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity {
	if t != nil && t.SetExtCommunity != nil {
		return t.SetExtCommunity
	}
	return nil
}

// GetSetLocalPref retrieves the value of the leaf SetLocalPref from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetLocalPref is set, it can
// safely use t.GetSetLocalPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetLocalPref == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetLocalPref() uint32 {
	if t == nil || t.SetLocalPref == nil {
		return 0
	}
	return *t.SetLocalPref
}

// GetSetMed retrieves the value of the leaf SetMed from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetMed is set, it can
// safely use t.GetSetMed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetMed == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetMed() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetMed_Union {
	if t == nil || t.SetMed == nil {
		return nil
	}
	return t.SetMed
}

// GetSetNextHop retrieves the value of the leaf SetNextHop from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetNextHop is set, it can
// safely use t.GetSetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetNextHop == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetNextHop() RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetNextHop_Union {
	if t == nil || t.SetNextHop == nil {
		return nil
	}
	return t.SetNextHop
}

// GetSetRouteOrigin retrieves the value of the leaf SetRouteOrigin from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SetRouteOrigin is set, it can
// safely use t.GetSetRouteOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SetRouteOrigin == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) GetSetRouteOrigin() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.SetRouteOrigin == 0 {
		return 0
	}
	return t.SetRouteOrigin
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-as-path-prepend YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend struct {
	Asn     *uint32 `path:"config/asn" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/asn" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RepeatN *uint8  `path:"config/repeat-n" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/repeat-n" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) IsYANGGoStruct() {
}

// GetAsn retrieves the value of the leaf Asn from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Asn is set, it can
// safely use t.GetAsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Asn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetAsn() uint32 {
	if t == nil || t.Asn == nil {
		return 0
	}
	return *t.Asn
}

// GetRepeatN retrieves the value of the leaf RepeatN from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatN is set, it can
// safely use t.GetRepeatN() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatN == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) GetRepeatN() uint8 {
	if t == nil || t.RepeatN == nil {
		return 0
	}
	return *t.RepeatN
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetAsPathPrepend) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_BgpPolicy_SetCommunity_Method                                                     `path:"config/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                               `path:"config/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetMethod() E_BgpPolicy_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union `path:"config/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference struct {
	CommunitySetRef *string `path:"config/community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) IsYANGGoStruct() {
}

// GetCommunitySetRef retrieves the value of the leaf CommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySetRef is set, it can
// safely use t.GetCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) GetCommunitySetRef() string {
	if t == nil || t.CommunitySetRef == nil {
		return ""
	}
	return *t.CommunitySetRef
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline    `path:"inline" module:"openconfig-bgp-policy"`
	Method    E_BgpPolicy_SetCommunity_Method                                                        `path:"config/method" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/method" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Options   E_BgpPolicy_BgpSetCommunityOptionType                                                  `path:"config/options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference `path:"reference" module:"openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) IsYANGGoStruct() {
}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMethod retrieves the value of the leaf Method from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Method is set, it can
// safely use t.GetMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Method == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetMethod() E_BgpPolicy_SetCommunity_Method {
	if t == nil || t.Method == 0 {
		return 0
	}
	return t.Method
}

// GetOptions retrieves the value of the leaf Options from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Options is set, it can
// safely use t.GetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Options == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) GetOptions() E_BgpPolicy_BgpSetCommunityOptionType {
	if t == nil || t.Options == 0 {
		return 0
	}
	return t.Options
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline struct {
	Communities []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union `path:"config/communities" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/communities" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) IsYANGGoStruct() {
}

// GetCommunities retrieves the value of the leaf Communities from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Communities is set, it can
// safely use t.GetCommunities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Communities == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) GetCommunities() []RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline_Communities_Union {
	if t == nil || t.Communities == nil {
		return nil
	}
	return t.Communities
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Inline) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/bgp-actions/set-ext-community/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference struct {
	ExtCommunitySetRef *string `path:"config/ext-community-set-ref" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/ext-community-set-ref" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) IsYANGGoStruct() {
}

// GetExtCommunitySetRef retrieves the value of the leaf ExtCommunitySetRef from the RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySetRef is set, it can
// safely use t.GetExtCommunitySetRef() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySetRef == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) GetExtCommunitySetRef() string {
	if t == nil || t.ExtCommunitySetRef == nil {
		return ""
	}
	return *t.ExtCommunitySetRef
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_BgpActions_SetExtCommunity_Reference) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag struct {
	Inline    *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline    `path:"inline" module:"openconfig-routing-policy"`
	Mode      E_RoutingPolicy_SetTag_Mode                                        `path:"config/mode" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/mode" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Reference *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference `path:"reference" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) IsYANGGoStruct() {}

// GetOrCreateInline retrieves the value of the Inline field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t.Inline != nil {
		return t.Inline
	}
	t.Inline = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline{}
	return t.Inline
}

// GetOrCreateReference retrieves the value of the Reference field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetOrCreateReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t.Reference != nil {
		return t.Reference
	}
	t.Reference = &RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference{}
	return t.Reference
}

// GetInline returns the value of the Inline struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Inline is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetInline() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline {
	if t != nil && t.Inline != nil {
		return t.Inline
	}
	return nil
}

// GetReference returns the value of the Reference struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag. If the receiver or the field Reference is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetReference() *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference {
	if t != nil && t.Reference != nil {
		return t.Reference
	}
	return nil
}

// GetMode retrieves the value of the leaf Mode from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) GetMode() E_RoutingPolicy_SetTag_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/inline YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline struct {
	Tag []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union `path:"config/tag" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/tag" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) IsYANGGoStruct() {}

// GetTag retrieves the value of the leaf Tag from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tag is set, it can
// safely use t.GetTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tag == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) GetTag() []RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline_Tag_Union {
	if t == nil || t.Tag == nil {
		return nil
	}
	return t.Tag
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Inline) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/actions/set-tag/reference YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference struct {
	TagSet *string `path:"config/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) IsYANGGoStruct() {}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference.
func (*RoutingPolicy_PolicyDefinition_Statement_Actions_SetTag_Reference) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions struct {
	BgpConditions     *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions    `path:"bgp-conditions" module:"openconfig-bgp-policy"`
	CallPolicy        *string                                                               `path:"config/call-policy" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/call-policy" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	InstallProtocolEq E_PolicyTypes_INSTALL_PROTOCOL_TYPE                                   `path:"config/install-protocol-eq" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/install-protocol-eq" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	MatchInterface    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface   `path:"match-interface" module:"openconfig-routing-policy"`
	MatchNeighborSet  *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet `path:"match-neighbor-set" module:"openconfig-routing-policy"`
	MatchPrefixSet    *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet   `path:"match-prefix-set" module:"openconfig-routing-policy"`
	MatchTagSet       *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet      `path:"match-tag-set" module:"openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) IsYANGGoStruct() {}

// GetOrCreateBgpConditions retrieves the value of the BgpConditions field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t.BgpConditions != nil {
		return t.BgpConditions
	}
	t.BgpConditions = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions{}
	return t.BgpConditions
}

// GetOrCreateMatchInterface retrieves the value of the MatchInterface field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t.MatchInterface != nil {
		return t.MatchInterface
	}
	t.MatchInterface = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface{}
	return t.MatchInterface
}

// GetOrCreateMatchNeighborSet retrieves the value of the MatchNeighborSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	t.MatchNeighborSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet{}
	return t.MatchNeighborSet
}

// GetOrCreateMatchPrefixSet retrieves the value of the MatchPrefixSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	t.MatchPrefixSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet{}
	return t.MatchPrefixSet
}

// GetOrCreateMatchTagSet retrieves the value of the MatchTagSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetOrCreateMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	t.MatchTagSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet{}
	return t.MatchTagSet
}

// GetBgpConditions returns the value of the BgpConditions struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field BgpConditions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetBgpConditions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions {
	if t != nil && t.BgpConditions != nil {
		return t.BgpConditions
	}
	return nil
}

// GetMatchInterface returns the value of the MatchInterface struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchInterface() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface {
	if t != nil && t.MatchInterface != nil {
		return t.MatchInterface
	}
	return nil
}

// GetMatchNeighborSet returns the value of the MatchNeighborSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchNeighborSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchNeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet {
	if t != nil && t.MatchNeighborSet != nil {
		return t.MatchNeighborSet
	}
	return nil
}

// GetMatchPrefixSet returns the value of the MatchPrefixSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchPrefixSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchPrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet {
	if t != nil && t.MatchPrefixSet != nil {
		return t.MatchPrefixSet
	}
	return nil
}

// GetMatchTagSet returns the value of the MatchTagSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions. If the receiver or the field MatchTagSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetMatchTagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet {
	if t != nil && t.MatchTagSet != nil {
		return t.MatchTagSet
	}
	return nil
}

// GetCallPolicy retrieves the value of the leaf CallPolicy from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallPolicy is set, it can
// safely use t.GetCallPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallPolicy == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetCallPolicy() string {
	if t == nil || t.CallPolicy == nil {
		return ""
	}
	return *t.CallPolicy
}

// GetInstallProtocolEq retrieves the value of the leaf InstallProtocolEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InstallProtocolEq is set, it can
// safely use t.GetInstallProtocolEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InstallProtocolEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) GetInstallProtocolEq() E_PolicyTypes_INSTALL_PROTOCOL_TYPE {
	if t == nil || t.InstallProtocolEq == 0 {
		return 0
	}
	return t.InstallProtocolEq
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions struct {
	AfiSafiIn       []E_BgpTypes_AFI_SAFI_TYPE                                                        `path:"config/afi-safi-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/afi-safi-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	AsPathLength    *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength   `path:"as-path-length" module:"openconfig-bgp-policy"`
	CommunityCount  *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount `path:"community-count" module:"openconfig-bgp-policy"`
	CommunitySet    *string                                                                           `path:"config/community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	ExtCommunitySet *string                                                                           `path:"config/ext-community-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/ext-community-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	LocalPrefEq     *uint32                                                                           `path:"config/local-pref-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/local-pref-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchAsPathSet  *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet `path:"match-as-path-set" module:"openconfig-bgp-policy"`
	MedEq           *uint32                                                                           `path:"config/med-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/med-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	NextHopIn       []string                                                                          `path:"config/next-hop-in" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/next-hop-in" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	OriginEq        E_BgpTypes_BgpOriginAttrType                                                      `path:"config/origin-eq" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/origin-eq" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	RouteType       E_BgpPolicy_BgpConditions_RouteType                                               `path:"config/route-type" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/route-type" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) IsYANGGoStruct() {}

// GetOrCreateAsPathLength retrieves the value of the AsPathLength field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t.AsPathLength != nil {
		return t.AsPathLength
	}
	t.AsPathLength = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength{}
	return t.AsPathLength
}

// GetOrCreateCommunityCount retrieves the value of the CommunityCount field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t.CommunityCount != nil {
		return t.CommunityCount
	}
	t.CommunityCount = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount{}
	return t.CommunityCount
}

// GetOrCreateMatchAsPathSet retrieves the value of the MatchAsPathSet field
// or returns the existing field if it already exists.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOrCreateMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	t.MatchAsPathSet = &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet{}
	return t.MatchAsPathSet
}

// GetAsPathLength returns the value of the AsPathLength struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field AsPathLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength {
	if t != nil && t.AsPathLength != nil {
		return t.AsPathLength
	}
	return nil
}

// GetCommunityCount returns the value of the CommunityCount struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field CommunityCount is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount {
	if t != nil && t.CommunityCount != nil {
		return t.CommunityCount
	}
	return nil
}

// GetMatchAsPathSet returns the value of the MatchAsPathSet struct pointer
// from RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions. If the receiver or the field MatchAsPathSet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet {
	if t != nil && t.MatchAsPathSet != nil {
		return t.MatchAsPathSet
	}
	return nil
}

// GetAfiSafiIn retrieves the value of the leaf AfiSafiIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AfiSafiIn is set, it can
// safely use t.GetAfiSafiIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AfiSafiIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetAfiSafiIn() []E_BgpTypes_AFI_SAFI_TYPE {
	if t == nil || t.AfiSafiIn == nil {
		return nil
	}
	return t.AfiSafiIn
}

// GetCommunitySet retrieves the value of the leaf CommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunitySet is set, it can
// safely use t.GetCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetCommunitySet() string {
	if t == nil || t.CommunitySet == nil {
		return ""
	}
	return *t.CommunitySet
}

// GetExtCommunitySet retrieves the value of the leaf ExtCommunitySet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtCommunitySet is set, it can
// safely use t.GetExtCommunitySet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtCommunitySet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetExtCommunitySet() string {
	if t == nil || t.ExtCommunitySet == nil {
		return ""
	}
	return *t.ExtCommunitySet
}

// GetLocalPrefEq retrieves the value of the leaf LocalPrefEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPrefEq is set, it can
// safely use t.GetLocalPrefEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPrefEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetLocalPrefEq() uint32 {
	if t == nil || t.LocalPrefEq == nil {
		return 0
	}
	return *t.LocalPrefEq
}

// GetMedEq retrieves the value of the leaf MedEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MedEq is set, it can
// safely use t.GetMedEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MedEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetMedEq() uint32 {
	if t == nil || t.MedEq == nil {
		return 0
	}
	return *t.MedEq
}

// GetNextHopIn retrieves the value of the leaf NextHopIn from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHopIn is set, it can
// safely use t.GetNextHopIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHopIn == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetNextHopIn() []string {
	if t == nil || t.NextHopIn == nil {
		return nil
	}
	return t.NextHopIn
}

// GetOriginEq retrieves the value of the leaf OriginEq from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginEq is set, it can
// safely use t.GetOriginEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginEq == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetOriginEq() E_BgpTypes_BgpOriginAttrType {
	if t == nil || t.OriginEq == 0 {
		return 0
	}
	return t.OriginEq
}

// GetRouteType retrieves the value of the leaf RouteType from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouteType is set, it can
// safely use t.GetRouteType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouteType == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) GetRouteType() E_BgpPolicy_BgpConditions_RouteType {
	if t == nil || t.RouteType == 0 {
		return 0
	}
	return t.RouteType
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"config/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"config/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount struct {
	Operator E_PolicyTypes_ATTRIBUTE_COMPARISON `path:"config/operator" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/operator" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	Value    *uint32                            `path:"config/value" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/value" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) IsYANGGoStruct() {
}

// GetOperator retrieves the value of the leaf Operator from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Operator is set, it can
// safely use t.GetOperator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Operator == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetOperator() E_PolicyTypes_ATTRIBUTE_COMPARISON {
	if t == nil || t.Operator == 0 {
		return 0
	}
	return t.Operator
}

// GetValue retrieves the value of the leaf Value from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet struct {
	AsPathSet       *string                           `path:"config/as-path-set" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/as-path-set" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
	MatchSetOptions E_PolicyTypes_MatchSetOptionsType `path:"config/match-set-options" module:"openconfig-bgp-policy/openconfig-bgp-policy" shadow-path:"state/match-set-options" shadow-module:"openconfig-bgp-policy/openconfig-bgp-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) IsYANGGoStruct() {
}

// GetAsPathSet retrieves the value of the leaf AsPathSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsPathSet is set, it can
// safely use t.GetAsPathSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsPathSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetAsPathSet() string {
	if t == nil || t.AsPathSet == nil {
		return ""
	}
	return *t.AsPathSet
}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsType_ANY
	}
	return t.MatchSetOptions
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet) ΛBelongingModule() string {
	return "openconfig-bgp-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface struct {
	Interface    *string `path:"config/interface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/interface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	Subinterface *uint32 `path:"config/subinterface" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/subinterface" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) IsYANGGoStruct() {}

// GetInterface retrieves the value of the leaf Interface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interface is set, it can
// safely use t.GetInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetInterface() string {
	if t == nil || t.Interface == nil {
		return ""
	}
	return *t.Interface
}

// GetSubinterface retrieves the value of the leaf Subinterface from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subinterface is set, it can
// safely use t.GetSubinterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subinterface == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) GetSubinterface() uint32 {
	if t == nil || t.Subinterface == nil {
		return 0
	}
	return *t.Subinterface
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"config/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	NeighborSet     *string                                     `path:"config/neighbor-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/neighbor-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetNeighborSet retrieves the value of the leaf NeighborSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NeighborSet is set, it can
// safely use t.GetNeighborSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NeighborSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) GetNeighborSet() string {
	if t == nil || t.NeighborSet == nil {
		return ""
	}
	return *t.NeighborSet
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"config/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	PrefixSet       *string                                     `path:"config/prefix-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/prefix-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetPrefixSet retrieves the value of the leaf PrefixSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixSet is set, it can
// safely use t.GetPrefixSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) GetPrefixSet() string {
	if t == nil || t.PrefixSet == nil {
		return ""
	}
	return *t.PrefixSet
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet struct {
	MatchSetOptions E_PolicyTypes_MatchSetOptionsRestrictedType `path:"config/match-set-options" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/match-set-options" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
	TagSet          *string                                     `path:"config/tag-set" module:"openconfig-routing-policy/openconfig-routing-policy" shadow-path:"state/tag-set" shadow-module:"openconfig-routing-policy/openconfig-routing-policy"`
}

// IsYANGGoStruct ensures that RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) IsYANGGoStruct() {}

// GetMatchSetOptions retrieves the value of the leaf MatchSetOptions from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchSetOptions is set, it can
// safely use t.GetMatchSetOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchSetOptions == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetMatchSetOptions() E_PolicyTypes_MatchSetOptionsRestrictedType {
	if t == nil || t.MatchSetOptions == 0 {
		return PolicyTypes_MatchSetOptionsRestrictedType_ANY
	}
	return t.MatchSetOptions
}

// GetTagSet retrieves the value of the leaf TagSet from the RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TagSet is set, it can
// safely use t.GetTagSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TagSet == nil' before retrieving the leaf's value.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) GetTagSet() string {
	if t == nil || t.TagSet == nil {
		return ""
	}
	return *t.TagSet
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet.
func (*RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet) ΛBelongingModule() string {
	return "openconfig-routing-policy"
}

// Sampling represents the /openconfig-sampling/sampling YANG schema element.
type Sampling struct {
	Sflow *Sampling_Sflow `path:"sflow" module:"openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling) IsYANGGoStruct() {}

// GetOrCreateSflow retrieves the value of the Sflow field
// or returns the existing field if it already exists.
func (t *Sampling) GetOrCreateSflow() *Sampling_Sflow {
	if t.Sflow != nil {
		return t.Sflow
	}
	t.Sflow = &Sampling_Sflow{}
	return t.Sflow
}

// GetSflow returns the value of the Sflow struct pointer
// from Sampling. If the receiver or the field Sflow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Sampling) GetSflow() *Sampling_Sflow {
	if t != nil && t.Sflow != nil {
		return t.Sflow
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling.
func (*Sampling) ΛBelongingModule() string {
	return "openconfig-sampling"
}

// Sampling_Sflow represents the /openconfig-sampling/sampling/sflow YANG schema element.
type Sampling_Sflow struct {
	AgentIdIpv4         *string                                                    `path:"config/agent-id-ipv4" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/agent-id-ipv4" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	AgentIdIpv6         *string                                                    `path:"config/agent-id-ipv6" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/agent-id-ipv6" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Collector           map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector `path:"collectors/collector" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Dscp                *uint8                                                     `path:"config/dscp" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/dscp" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	EgressSamplingRate  *uint32                                                    `path:"config/egress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/egress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Enabled             *bool                                                      `path:"config/enabled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/enabled" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	IngressSamplingRate *uint32                                                    `path:"config/ingress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/ingress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Interface           map[string]*Sampling_Sflow_Interface                       `path:"interfaces/interface" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PollingInterval     *uint16                                                    `path:"config/polling-interval" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/polling-interval" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	SampleSize          *uint16                                                    `path:"config/sample-size" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/sample-size" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow) IsYANGGoStruct() {}

// Sampling_Sflow_Collector_Key represents the key for list Collector of element /openconfig-sampling/sampling/sflow.
type Sampling_Sflow_Collector_Key struct {
	Address string `path:"address"`
	Port    uint16 `path:"port"`
}

// NewCollector creates a new entry in the Collector list of the
// Sampling_Sflow struct. The keys of the list are populated from the input
// arguments.
func (t *Sampling_Sflow) NewCollector(Address string, Port uint16) (*Sampling_Sflow_Collector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector)
	}

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Collector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Collector", key)
	}

	t.Collector[key] = &Sampling_Sflow_Collector{
		Address: &Address,
		Port:    &Port,
	}

	return t.Collector[key], nil
}

// RenameCollector renames an entry in the list Collector within
// the Sampling_Sflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Sampling_Sflow) RenameCollector(oldK, newK Sampling_Sflow_Collector_Key) error {
	if _, ok := t.Collector[newK]; ok {
		return fmt.Errorf("key %v already exists in Collector", newK)
	}

	e, ok := t.Collector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Collector", oldK)
	}
	e.Address = &newK.Address
	e.Port = &newK.Port

	t.Collector[newK] = e
	delete(t.Collector, oldK)
	return nil
}

// GetOrCreateCollector retrieves the value with the specified keys from
// the receiver Sampling_Sflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Sampling_Sflow) GetOrCreateCollector(Address string, Port uint16) *Sampling_Sflow_Collector {

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Collector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCollector(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCollector got unexpected error: %v", err))
	}
	return v
}

// GetCollector retrieves the value with the specified key from
// the Collector map field of Sampling_Sflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Sampling_Sflow) GetCollector(Address string, Port uint16) *Sampling_Sflow_Collector {

	if t == nil {
		return nil
	}

	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Collector[key]; ok {
		return lm
	}
	return nil
}

// DeleteCollector deletes the value with the specified keys from
// the receiver Sampling_Sflow. If there is no such element, the function
// is a no-op.
func (t *Sampling_Sflow) DeleteCollector(Address string, Port uint16) {
	key := Sampling_Sflow_Collector_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Collector, key)
}

// AppendCollector appends the supplied Sampling_Sflow_Collector struct to the
// list Collector of Sampling_Sflow. If the key value(s) specified in
// the supplied Sampling_Sflow_Collector already exist in the list, an error is
// returned.
func (t *Sampling_Sflow) AppendCollector(v *Sampling_Sflow_Collector) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	if v.Port == nil {
		return fmt.Errorf("invalid nil key for Port")
	}

	key := Sampling_Sflow_Collector_Key{
		Address: *v.Address,
		Port:    *v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Collector == nil {
		t.Collector = make(map[Sampling_Sflow_Collector_Key]*Sampling_Sflow_Collector)
	}

	if _, ok := t.Collector[key]; ok {
		return fmt.Errorf("duplicate key for list Collector %v", key)
	}

	t.Collector[key] = v
	return nil
}

// NewInterface creates a new entry in the Interface list of the
// Sampling_Sflow struct. The keys of the list are populated from the input
// arguments.
func (t *Sampling_Sflow) NewInterface(Name string) (*Sampling_Sflow_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Sampling_Sflow_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Sampling_Sflow_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Sampling_Sflow struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Sampling_Sflow) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Sampling_Sflow. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Sampling_Sflow) GetOrCreateInterface(Name string) *Sampling_Sflow_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Sampling_Sflow. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Sampling_Sflow) GetInterface(Name string) *Sampling_Sflow_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Sampling_Sflow. If there is no such element, the function
// is a no-op.
func (t *Sampling_Sflow) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Sampling_Sflow_Interface struct to the
// list Interface of Sampling_Sflow. If the key value(s) specified in
// the supplied Sampling_Sflow_Interface already exist in the list, an error is
// returned.
func (t *Sampling_Sflow) AppendInterface(v *Sampling_Sflow_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Sampling_Sflow_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetAgentIdIpv4 retrieves the value of the leaf AgentIdIpv4 from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgentIdIpv4 is set, it can
// safely use t.GetAgentIdIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgentIdIpv4 == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetAgentIdIpv4() string {
	if t == nil || t.AgentIdIpv4 == nil {
		return ""
	}
	return *t.AgentIdIpv4
}

// GetAgentIdIpv6 retrieves the value of the leaf AgentIdIpv6 from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AgentIdIpv6 is set, it can
// safely use t.GetAgentIdIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AgentIdIpv6 == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetAgentIdIpv6() string {
	if t == nil || t.AgentIdIpv6 == nil {
		return ""
	}
	return *t.AgentIdIpv6
}

// GetDscp retrieves the value of the leaf Dscp from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetDscp() uint8 {
	if t == nil || t.Dscp == nil {
		return 0
	}
	return *t.Dscp
}

// GetEgressSamplingRate retrieves the value of the leaf EgressSamplingRate from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressSamplingRate is set, it can
// safely use t.GetEgressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetEgressSamplingRate() uint32 {
	if t == nil || t.EgressSamplingRate == nil {
		return 0
	}
	return *t.EgressSamplingRate
}

// GetEnabled retrieves the value of the leaf Enabled from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetIngressSamplingRate retrieves the value of the leaf IngressSamplingRate from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressSamplingRate is set, it can
// safely use t.GetIngressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetIngressSamplingRate() uint32 {
	if t == nil || t.IngressSamplingRate == nil {
		return 0
	}
	return *t.IngressSamplingRate
}

// GetPollingInterval retrieves the value of the leaf PollingInterval from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollingInterval is set, it can
// safely use t.GetPollingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollingInterval == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetPollingInterval() uint16 {
	if t == nil || t.PollingInterval == nil {
		return 0
	}
	return *t.PollingInterval
}

// GetSampleSize retrieves the value of the leaf SampleSize from the Sampling_Sflow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleSize is set, it can
// safely use t.GetSampleSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleSize == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow) GetSampleSize() uint16 {
	if t == nil || t.SampleSize == nil {
		return 128
	}
	return *t.SampleSize
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow.
func (*Sampling_Sflow) ΛBelongingModule() string {
	return "openconfig-sampling-sflow"
}

// Sampling_Sflow_Collector represents the /openconfig-sampling/sampling/sflow/collectors/collector YANG schema element.
type Sampling_Sflow_Collector struct {
	Address         *string `path:"config/address|address" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"state/address|address" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	NetworkInstance *string `path:"config/network-instance" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/network-instance" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PacketsSent     *uint64 `path:"state/packets-sent" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Port            *uint16 `path:"config/port|port" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"state/port|port" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	SourceAddress   *string `path:"config/source-address" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/source-address" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow_Collector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow_Collector) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetPacketsSent retrieves the value of the leaf PacketsSent from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketsSent is set, it can
// safely use t.GetPacketsSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketsSent == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetPacketsSent() uint64 {
	if t == nil || t.PacketsSent == nil {
		return 0
	}
	return *t.PacketsSent
}

// GetPort retrieves the value of the leaf Port from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 6343
	}
	return *t.Port
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the Sampling_Sflow_Collector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Collector) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// ΛListKeyMap returns the keys of the Sampling_Sflow_Collector struct, which is a YANG list entry.
func (t *Sampling_Sflow_Collector) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	if t.Port == nil {
		return nil, fmt.Errorf("nil value for key Port")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    *t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Collector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow_Collector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Collector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow_Collector) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow_Collector.
func (*Sampling_Sflow_Collector) ΛBelongingModule() string {
	return "openconfig-sampling-sflow"
}

// Sampling_Sflow_Interface represents the /openconfig-sampling/sampling/sflow/interfaces/interface YANG schema element.
type Sampling_Sflow_Interface struct {
	EgressSamplingRate  *uint32 `path:"config/egress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/egress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Enabled             *bool   `path:"config/enabled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/enabled" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	IngressSamplingRate *uint32 `path:"config/ingress-sampling-rate" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/ingress-sampling-rate" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	Name                *string `path:"config/name|name" module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow" shadow-path:"state/name|name" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow|openconfig-sampling-sflow"`
	PacketsSampled      *uint64 `path:"state/packets-sampled" module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
	PollingInterval     *uint16 `path:"config/polling-interval" module:"openconfig-sampling-sflow/openconfig-sampling-sflow" shadow-path:"state/polling-interval" shadow-module:"openconfig-sampling-sflow/openconfig-sampling-sflow"`
}

// IsYANGGoStruct ensures that Sampling_Sflow_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Sampling_Sflow_Interface) IsYANGGoStruct() {}

// GetEgressSamplingRate retrieves the value of the leaf EgressSamplingRate from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EgressSamplingRate is set, it can
// safely use t.GetEgressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EgressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetEgressSamplingRate() uint32 {
	if t == nil || t.EgressSamplingRate == nil {
		return 0
	}
	return *t.EgressSamplingRate
}

// GetEnabled retrieves the value of the leaf Enabled from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetIngressSamplingRate retrieves the value of the leaf IngressSamplingRate from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IngressSamplingRate is set, it can
// safely use t.GetIngressSamplingRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IngressSamplingRate == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetIngressSamplingRate() uint32 {
	if t == nil || t.IngressSamplingRate == nil {
		return 0
	}
	return *t.IngressSamplingRate
}

// GetName retrieves the value of the leaf Name from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPacketsSampled retrieves the value of the leaf PacketsSampled from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketsSampled is set, it can
// safely use t.GetPacketsSampled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketsSampled == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetPacketsSampled() uint64 {
	if t == nil || t.PacketsSampled == nil {
		return 0
	}
	return *t.PacketsSampled
}

// GetPollingInterval retrieves the value of the leaf PollingInterval from the Sampling_Sflow_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollingInterval is set, it can
// safely use t.GetPollingInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollingInterval == nil' before retrieving the leaf's value.
func (t *Sampling_Sflow_Interface) GetPollingInterval() uint16 {
	if t == nil || t.PollingInterval == nil {
		return 0
	}
	return *t.PollingInterval
}

// ΛListKeyMap returns the keys of the Sampling_Sflow_Interface struct, which is a YANG list entry.
func (t *Sampling_Sflow_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Sampling_Sflow_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Sampling_Sflow_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Sampling_Sflow_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Sampling_Sflow_Interface.
func (*Sampling_Sflow_Interface) ΛBelongingModule() string {
	return "openconfig-sampling-sflow"
}

// Stp represents the /openconfig-spanning-tree/stp YANG schema element.
type Stp struct {
	Global    *Stp_Global               `path:"global" module:"openconfig-spanning-tree"`
	Interface map[string]*Stp_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Mstp      *Stp_Mstp                 `path:"mstp" module:"openconfig-spanning-tree"`
	Rstp      *Stp_Rstp                 `path:"rstp" module:"openconfig-spanning-tree"`
	Vlan      map[uint16]*Stp_Vlan      `path:"rapid-pvst/vlan" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp) NewInterface(Name string) (*Stp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp) GetOrCreateInterface(Name string) *Stp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp) GetInterface(Name string) *Stp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp. If there is no such element, the function
// is a no-op.
func (t *Stp) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Interface struct to the
// list Interface of Stp. If the key value(s) specified in
// the supplied Stp_Interface already exist in the list, an error is
// returned.
func (t *Stp) AppendInterface(v *Stp_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// NewVlan creates a new entry in the Vlan list of the
// Stp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp) NewVlan(VlanId uint16) (*Stp_Vlan, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*Stp_Vlan)
	}

	key := VlanId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vlan[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vlan", key)
	}

	t.Vlan[key] = &Stp_Vlan{
		VlanId: &VlanId,
	}

	return t.Vlan[key], nil
}

// RenameVlan renames an entry in the list Vlan within
// the Stp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp) RenameVlan(oldK, newK uint16) error {
	if _, ok := t.Vlan[newK]; ok {
		return fmt.Errorf("key %v already exists in Vlan", newK)
	}

	e, ok := t.Vlan[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vlan", oldK)
	}
	e.VlanId = &newK

	t.Vlan[newK] = e
	delete(t.Vlan, oldK)
	return nil
}

// GetOrCreateVlan retrieves the value with the specified keys from
// the receiver Stp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp) GetOrCreateVlan(VlanId uint16) *Stp_Vlan {

	key := VlanId

	if v, ok := t.Vlan[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVlan(VlanId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVlan got unexpected error: %v", err))
	}
	return v
}

// GetVlan retrieves the value with the specified key from
// the Vlan map field of Stp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp) GetVlan(VlanId uint16) *Stp_Vlan {

	if t == nil {
		return nil
	}

	key := VlanId

	if lm, ok := t.Vlan[key]; ok {
		return lm
	}
	return nil
}

// DeleteVlan deletes the value with the specified keys from
// the receiver Stp. If there is no such element, the function
// is a no-op.
func (t *Stp) DeleteVlan(VlanId uint16) {
	key := VlanId

	delete(t.Vlan, key)
}

// AppendVlan appends the supplied Stp_Vlan struct to the
// list Vlan of Stp. If the key value(s) specified in
// the supplied Stp_Vlan already exist in the list, an error is
// returned.
func (t *Stp) AppendVlan(v *Stp_Vlan) error {
	if v.VlanId == nil {
		return fmt.Errorf("invalid nil key received for VlanId")
	}

	key := *v.VlanId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vlan == nil {
		t.Vlan = make(map[uint16]*Stp_Vlan)
	}

	if _, ok := t.Vlan[key]; ok {
		return fmt.Errorf("duplicate key for list Vlan %v", key)
	}

	t.Vlan[key] = v
	return nil
}

// GetOrCreateGlobal retrieves the value of the Global field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateGlobal() *Stp_Global {
	if t.Global != nil {
		return t.Global
	}
	t.Global = &Stp_Global{}
	return t.Global
}

// GetOrCreateMstp retrieves the value of the Mstp field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateMstp() *Stp_Mstp {
	if t.Mstp != nil {
		return t.Mstp
	}
	t.Mstp = &Stp_Mstp{}
	return t.Mstp
}

// GetOrCreateRstp retrieves the value of the Rstp field
// or returns the existing field if it already exists.
func (t *Stp) GetOrCreateRstp() *Stp_Rstp {
	if t.Rstp != nil {
		return t.Rstp
	}
	t.Rstp = &Stp_Rstp{}
	return t.Rstp
}

// GetGlobal returns the value of the Global struct pointer
// from Stp. If the receiver or the field Global is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetGlobal() *Stp_Global {
	if t != nil && t.Global != nil {
		return t.Global
	}
	return nil
}

// GetMstp returns the value of the Mstp struct pointer
// from Stp. If the receiver or the field Mstp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetMstp() *Stp_Mstp {
	if t != nil && t.Mstp != nil {
		return t.Mstp
	}
	return nil
}

// GetRstp returns the value of the Rstp struct pointer
// from Stp. If the receiver or the field Rstp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp) GetRstp() *Stp_Rstp {
	if t != nil && t.Rstp != nil {
		return t.Rstp
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp.
func (*Stp) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Global represents the /openconfig-spanning-tree/stp/global YANG schema element.
type Stp_Global struct {
	BpduFilter                 *bool                              `path:"config/bpdu-filter" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bpdu-filter" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	BpduGuard                  *bool                              `path:"config/bpdu-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bpdu-guard" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	BpduguardTimeoutRecovery   *uint8                             `path:"config/bpduguard-timeout-recovery" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bpduguard-timeout-recovery" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	BridgeAssurance            *bool                              `path:"config/bridge-assurance" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bridge-assurance" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	EnabledProtocol            []E_SpanningTreeTypes_STP_PROTOCOL `path:"config/enabled-protocol" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/enabled-protocol" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	EtherchannelMisconfigGuard *bool                              `path:"config/etherchannel-misconfig-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/etherchannel-misconfig-guard" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	LoopGuard                  *bool                              `path:"config/loop-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/loop-guard" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Global implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Global) IsYANGGoStruct() {}

// GetBpduFilter retrieves the value of the leaf BpduFilter from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduFilter is set, it can
// safely use t.GetBpduFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduFilter == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBpduFilter() bool {
	if t == nil || t.BpduFilter == nil {
		return false
	}
	return *t.BpduFilter
}

// GetBpduGuard retrieves the value of the leaf BpduGuard from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduGuard is set, it can
// safely use t.GetBpduGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduGuard == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBpduGuard() bool {
	if t == nil || t.BpduGuard == nil {
		return false
	}
	return *t.BpduGuard
}

// GetBpduguardTimeoutRecovery retrieves the value of the leaf BpduguardTimeoutRecovery from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduguardTimeoutRecovery is set, it can
// safely use t.GetBpduguardTimeoutRecovery() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduguardTimeoutRecovery == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBpduguardTimeoutRecovery() uint8 {
	if t == nil || t.BpduguardTimeoutRecovery == nil {
		return 0
	}
	return *t.BpduguardTimeoutRecovery
}

// GetBridgeAssurance retrieves the value of the leaf BridgeAssurance from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAssurance is set, it can
// safely use t.GetBridgeAssurance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAssurance == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetBridgeAssurance() bool {
	if t == nil || t.BridgeAssurance == nil {
		return false
	}
	return *t.BridgeAssurance
}

// GetEnabledProtocol retrieves the value of the leaf EnabledProtocol from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnabledProtocol is set, it can
// safely use t.GetEnabledProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnabledProtocol == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetEnabledProtocol() []E_SpanningTreeTypes_STP_PROTOCOL {
	if t == nil || t.EnabledProtocol == nil {
		return nil
	}
	return t.EnabledProtocol
}

// GetEtherchannelMisconfigGuard retrieves the value of the leaf EtherchannelMisconfigGuard from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EtherchannelMisconfigGuard is set, it can
// safely use t.GetEtherchannelMisconfigGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EtherchannelMisconfigGuard == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetEtherchannelMisconfigGuard() bool {
	if t == nil || t.EtherchannelMisconfigGuard == nil {
		return false
	}
	return *t.EtherchannelMisconfigGuard
}

// GetLoopGuard retrieves the value of the leaf LoopGuard from the Stp_Global
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoopGuard is set, it can
// safely use t.GetLoopGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoopGuard == nil' before retrieving the leaf's value.
func (t *Stp_Global) GetLoopGuard() bool {
	if t == nil || t.LoopGuard == nil {
		return false
	}
	return *t.LoopGuard
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Global) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Global"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Global) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Global) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Global.
func (*Stp_Global) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Interface represents the /openconfig-spanning-tree/stp/interfaces/interface YANG schema element.
type Stp_Interface struct {
	BpduFilter *bool                             `path:"config/bpdu-filter" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bpdu-filter" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	BpduGuard  *bool                             `path:"config/bpdu-guard" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bpdu-guard" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	EdgePort   E_SpanningTreeTypes_STP_EDGE_PORT `path:"config/edge-port" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/edge-port" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Guard      E_SpanningTreeTypes_StpGuardType  `path:"config/guard" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/guard" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	LinkType   E_SpanningTreeTypes_StpLinkType   `path:"config/link-type" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/link-type" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Name       *string                           `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree" shadow-path:"state/name|name" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Interface) IsYANGGoStruct() {}

// GetBpduFilter retrieves the value of the leaf BpduFilter from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduFilter is set, it can
// safely use t.GetBpduFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduFilter == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetBpduFilter() bool {
	if t == nil || t.BpduFilter == nil {
		return false
	}
	return *t.BpduFilter
}

// GetBpduGuard retrieves the value of the leaf BpduGuard from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduGuard is set, it can
// safely use t.GetBpduGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduGuard == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetBpduGuard() bool {
	if t == nil || t.BpduGuard == nil {
		return false
	}
	return *t.BpduGuard
}

// GetEdgePort retrieves the value of the leaf EdgePort from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EdgePort is set, it can
// safely use t.GetEdgePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EdgePort == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetEdgePort() E_SpanningTreeTypes_STP_EDGE_PORT {
	if t == nil || t.EdgePort == 0 {
		return 0
	}
	return t.EdgePort
}

// GetGuard retrieves the value of the leaf Guard from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Guard is set, it can
// safely use t.GetGuard() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Guard == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetGuard() E_SpanningTreeTypes_StpGuardType {
	if t == nil || t.Guard == 0 {
		return 0
	}
	return t.Guard
}

// GetLinkType retrieves the value of the leaf LinkType from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkType is set, it can
// safely use t.GetLinkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkType == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetLinkType() E_SpanningTreeTypes_StpLinkType {
	if t == nil || t.LinkType == 0 {
		return 0
	}
	return t.LinkType
}

// GetName retrieves the value of the leaf Name from the Stp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// ΛListKeyMap returns the keys of the Stp_Interface struct, which is a YANG list entry.
func (t *Stp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Interface.
func (*Stp_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp represents the /openconfig-spanning-tree/stp/mstp YANG schema element.
type Stp_Mstp struct {
	ForwardingDelay *uint8                           `path:"config/forwarding-delay" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/forwarding-delay" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HelloTime       *uint8                           `path:"config/hello-time" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/hello-time" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HoldCount       *uint8                           `path:"config/hold-count" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/hold-count" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	MaxAge          *uint8                           `path:"config/max-age" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/max-age" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	MaxHop          *uint8                           `path:"config/max-hop" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/max-hop" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	MstInstance     map[uint16]*Stp_Mstp_MstInstance `path:"mst-instances/mst-instance" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Name            *string                          `path:"config/name" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/name" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Revision        *uint32                          `path:"config/revision" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/revision" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Mstp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp) IsYANGGoStruct() {}

// NewMstInstance creates a new entry in the MstInstance list of the
// Stp_Mstp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Mstp) NewMstInstance(MstId uint16) (*Stp_Mstp_MstInstance, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint16]*Stp_Mstp_MstInstance)
	}

	key := MstId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MstInstance[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MstInstance", key)
	}

	t.MstInstance[key] = &Stp_Mstp_MstInstance{
		MstId: &MstId,
	}

	return t.MstInstance[key], nil
}

// RenameMstInstance renames an entry in the list MstInstance within
// the Stp_Mstp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Mstp) RenameMstInstance(oldK, newK uint16) error {
	if _, ok := t.MstInstance[newK]; ok {
		return fmt.Errorf("key %v already exists in MstInstance", newK)
	}

	e, ok := t.MstInstance[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MstInstance", oldK)
	}
	e.MstId = &newK

	t.MstInstance[newK] = e
	delete(t.MstInstance, oldK)
	return nil
}

// GetOrCreateMstInstance retrieves the value with the specified keys from
// the receiver Stp_Mstp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Mstp) GetOrCreateMstInstance(MstId uint16) *Stp_Mstp_MstInstance {

	key := MstId

	if v, ok := t.MstInstance[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMstInstance(MstId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMstInstance got unexpected error: %v", err))
	}
	return v
}

// GetMstInstance retrieves the value with the specified key from
// the MstInstance map field of Stp_Mstp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Mstp) GetMstInstance(MstId uint16) *Stp_Mstp_MstInstance {

	if t == nil {
		return nil
	}

	key := MstId

	if lm, ok := t.MstInstance[key]; ok {
		return lm
	}
	return nil
}

// DeleteMstInstance deletes the value with the specified keys from
// the receiver Stp_Mstp. If there is no such element, the function
// is a no-op.
func (t *Stp_Mstp) DeleteMstInstance(MstId uint16) {
	key := MstId

	delete(t.MstInstance, key)
}

// AppendMstInstance appends the supplied Stp_Mstp_MstInstance struct to the
// list MstInstance of Stp_Mstp. If the key value(s) specified in
// the supplied Stp_Mstp_MstInstance already exist in the list, an error is
// returned.
func (t *Stp_Mstp) AppendMstInstance(v *Stp_Mstp_MstInstance) error {
	if v.MstId == nil {
		return fmt.Errorf("invalid nil key received for MstId")
	}

	key := *v.MstId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MstInstance == nil {
		t.MstInstance = make(map[uint16]*Stp_Mstp_MstInstance)
	}

	if _, ok := t.MstInstance[key]; ok {
		return fmt.Errorf("duplicate key for list MstInstance %v", key)
	}

	t.MstInstance[key] = v
	return nil
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingDelay is set, it can
// safely use t.GetForwardingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingDelay == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldCount is set, it can
// safely use t.GetHoldCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldCount == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAge is set, it can
// safely use t.GetMaxAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAge == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetMaxHop retrieves the value of the leaf MaxHop from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxHop is set, it can
// safely use t.GetMaxHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxHop == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetMaxHop() uint8 {
	if t == nil || t.MaxHop == nil {
		return 0
	}
	return *t.MaxHop
}

// GetName retrieves the value of the leaf Name from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRevision retrieves the value of the leaf Revision from the Stp_Mstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Revision is set, it can
// safely use t.GetRevision() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Revision == nil' before retrieving the leaf's value.
func (t *Stp_Mstp) GetRevision() uint32 {
	if t == nil || t.Revision == nil {
		return 0
	}
	return *t.Revision
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp.
func (*Stp_Mstp) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp_MstInstance represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance YANG schema element.
type Stp_Mstp_MstInstance struct {
	BridgeAddress          *string                                    `path:"state/bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	BridgePriority         *uint16                                    `path:"config/bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bridge-priority" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootAddress  *string                                    `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootPriority *uint16                                    `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HoldTime               *uint8                                     `path:"state/hold-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Interface              map[string]*Stp_Mstp_MstInstance_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	LastTopologyChange     *uint64                                    `path:"state/last-topology-change" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	MstId                  *uint16                                    `path:"config/mst-id|mst-id" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree" shadow-path:"state/mst-id|mst-id" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	RootCost               *uint32                                    `path:"state/root-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	RootPort               *uint16                                    `path:"state/root-port" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	TopologyChanges        *uint64                                    `path:"state/topology-changes" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Vlan                   []Stp_Mstp_MstInstance_Vlan_Union          `path:"config/vlan" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/vlan" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Mstp_MstInstance struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Mstp_MstInstance) NewInterface(Name string) (*Stp_Mstp_MstInstance_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Mstp_MstInstance_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Mstp_MstInstance_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Mstp_MstInstance struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Mstp_MstInstance) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Mstp_MstInstance. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Mstp_MstInstance) GetOrCreateInterface(Name string) *Stp_Mstp_MstInstance_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Mstp_MstInstance. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Mstp_MstInstance) GetInterface(Name string) *Stp_Mstp_MstInstance_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp_Mstp_MstInstance. If there is no such element, the function
// is a no-op.
func (t *Stp_Mstp_MstInstance) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Mstp_MstInstance_Interface struct to the
// list Interface of Stp_Mstp_MstInstance. If the key value(s) specified in
// the supplied Stp_Mstp_MstInstance_Interface already exist in the list, an error is
// returned.
func (t *Stp_Mstp_MstInstance) AppendInterface(v *Stp_Mstp_MstInstance_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Mstp_MstInstance_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAddress is set, it can
// safely use t.GetBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgePriority is set, it can
// safely use t.GetBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetBridgePriority() uint16 {
	if t == nil || t.BridgePriority == nil {
		return 32768
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTopologyChange is set, it can
// safely use t.GetLastTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTopologyChange == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMstId retrieves the value of the leaf MstId from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MstId is set, it can
// safely use t.GetMstId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MstId == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetMstId() uint16 {
	if t == nil || t.MstId == nil {
		return 0
	}
	return *t.MstId
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootCost is set, it can
// safely use t.GetRootCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootCost == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPort is set, it can
// safely use t.GetRootPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPort == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopologyChanges is set, it can
// safely use t.GetTopologyChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopologyChanges == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// GetVlan retrieves the value of the leaf Vlan from the Stp_Mstp_MstInstance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance) GetVlan() []Stp_Mstp_MstInstance_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return nil
	}
	return t.Vlan
}

// ΛListKeyMap returns the keys of the Stp_Mstp_MstInstance struct, which is a YANG list entry.
func (t *Stp_Mstp_MstInstance) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MstId == nil {
		return nil, fmt.Errorf("nil value for key MstId")
	}

	return map[string]interface{}{
		"mst-id": *t.MstId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp_MstInstance.
func (*Stp_Mstp_MstInstance) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp_MstInstance_Interface represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface YANG schema element.
type Stp_Mstp_MstInstance_Interface struct {
	Cost                     *uint32                                  `path:"config/cost" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/cost" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Counters                 *Stp_Mstp_MstInstance_Interface_Counters `path:"state/counters" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedBridgeAddress  *string                                  `path:"state/designated-bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedBridgePriority *uint16                                  `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedCost           *uint32                                  `path:"state/designated-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedPortNum        *uint16                                  `path:"state/designated-port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedPortPriority   *uint8                                   `path:"state/designated-port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootAddress    *string                                  `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootPriority   *uint16                                  `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ForwardTransisitions     *uint64                                  `path:"state/forward-transisitions" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Name                     *string                                  `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree" shadow-path:"state/name|name" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	PortNum                  *uint16                                  `path:"state/port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	PortPriority             *uint8                                   `path:"config/port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/port-priority" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	PortState                E_SpanningTreeTypes_STP_PORT_STATE       `path:"state/port-state" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Role                     E_SpanningTreeTypes_STP_PORT_ROLE        `path:"state/role" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Mstp_MstInstance_Interface) GetOrCreateCounters() *Stp_Mstp_MstInstance_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Mstp_MstInstance_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Mstp_MstInstance_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Mstp_MstInstance_Interface) GetCounters() *Stp_Mstp_MstInstance_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgeAddress is set, it can
// safely use t.GetDesignatedBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgePriority is set, it can
// safely use t.GetDesignatedBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedBridgePriority() uint16 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 32768
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedCost is set, it can
// safely use t.GetDesignatedCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedCost == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortNum is set, it can
// safely use t.GetDesignatedPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortNum == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortPriority is set, it can
// safely use t.GetDesignatedPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardTransisitions is set, it can
// safely use t.GetForwardTransisitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardTransisitions == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPriority is set, it can
// safely use t.GetPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortState is set, it can
// safely use t.GetPortState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortState == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetPortState() E_SpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Mstp_MstInstance_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface) GetRole() E_SpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// ΛListKeyMap returns the keys of the Stp_Mstp_MstInstance_Interface struct, which is a YANG list entry.
func (t *Stp_Mstp_MstInstance_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp_MstInstance_Interface.
func (*Stp_Mstp_MstInstance_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Mstp_MstInstance_Interface_Counters represents the /openconfig-spanning-tree/stp/mstp/mst-instances/mst-instance/interfaces/interface/state/counters YANG schema element.
type Stp_Mstp_MstInstance_Interface_Counters struct {
	BpduReceived *uint64 `path:"bpdu-received" module:"openconfig-spanning-tree"`
	BpduSent     *uint64 `path:"bpdu-sent" module:"openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Mstp_MstInstance_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Mstp_MstInstance_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Mstp_MstInstance_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduReceived is set, it can
// safely use t.GetBpduReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduReceived == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Mstp_MstInstance_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduSent is set, it can
// safely use t.GetBpduSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduSent == nil' before retrieving the leaf's value.
func (t *Stp_Mstp_MstInstance_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Mstp_MstInstance_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Mstp_MstInstance_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Mstp_MstInstance_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Mstp_MstInstance_Interface_Counters.
func (*Stp_Mstp_MstInstance_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Rstp represents the /openconfig-spanning-tree/stp/rstp YANG schema element.
type Stp_Rstp struct {
	BridgeAddress          *string                        `path:"state/bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	BridgePriority         *uint16                        `path:"config/bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bridge-priority" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootAddress  *string                        `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootPriority *uint16                        `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ForwardingDelay        *uint8                         `path:"config/forwarding-delay" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/forwarding-delay" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HelloTime              *uint8                         `path:"config/hello-time" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/hello-time" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HoldCount              *uint8                         `path:"config/hold-count" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/hold-count" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HoldTime               *uint8                         `path:"state/hold-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Interface              map[string]*Stp_Rstp_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	LastTopologyChange     *uint64                        `path:"state/last-topology-change" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	MaxAge                 *uint8                         `path:"config/max-age" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/max-age" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	RootCost               *uint32                        `path:"state/root-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	RootPort               *uint16                        `path:"state/root-port" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	TopologyChanges        *uint64                        `path:"state/topology-changes" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Rstp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Rstp struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Rstp) NewInterface(Name string) (*Stp_Rstp_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Rstp_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Rstp_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Rstp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Rstp) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Rstp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Rstp) GetOrCreateInterface(Name string) *Stp_Rstp_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Rstp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Rstp) GetInterface(Name string) *Stp_Rstp_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp_Rstp. If there is no such element, the function
// is a no-op.
func (t *Stp_Rstp) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Rstp_Interface struct to the
// list Interface of Stp_Rstp. If the key value(s) specified in
// the supplied Stp_Rstp_Interface already exist in the list, an error is
// returned.
func (t *Stp_Rstp) AppendInterface(v *Stp_Rstp_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Rstp_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAddress is set, it can
// safely use t.GetBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgePriority is set, it can
// safely use t.GetBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetBridgePriority() uint16 {
	if t == nil || t.BridgePriority == nil {
		return 32768
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingDelay is set, it can
// safely use t.GetForwardingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingDelay == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldCount is set, it can
// safely use t.GetHoldCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldCount == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTopologyChange is set, it can
// safely use t.GetLastTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTopologyChange == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAge is set, it can
// safely use t.GetMaxAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAge == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootCost is set, it can
// safely use t.GetRootCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootCost == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPort is set, it can
// safely use t.GetRootPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPort == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Rstp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopologyChanges is set, it can
// safely use t.GetTopologyChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopologyChanges == nil' before retrieving the leaf's value.
func (t *Stp_Rstp) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Rstp.
func (*Stp_Rstp) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Rstp_Interface represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface YANG schema element.
type Stp_Rstp_Interface struct {
	Cost                     *uint32                            `path:"config/cost" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/cost" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Counters                 *Stp_Rstp_Interface_Counters       `path:"state/counters" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedBridgeAddress  *string                            `path:"state/designated-bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedBridgePriority *uint16                            `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedCost           *uint32                            `path:"state/designated-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedPortNum        *uint16                            `path:"state/designated-port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedPortPriority   *uint8                             `path:"state/designated-port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootAddress    *string                            `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootPriority   *uint16                            `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ForwardTransisitions     *uint64                            `path:"state/forward-transisitions" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Name                     *string                            `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree" shadow-path:"state/name|name" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	PortNum                  *uint16                            `path:"state/port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	PortPriority             *uint8                             `path:"config/port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/port-priority" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	PortState                E_SpanningTreeTypes_STP_PORT_STATE `path:"state/port-state" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Role                     E_SpanningTreeTypes_STP_PORT_ROLE  `path:"state/role" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Rstp_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Rstp_Interface) GetOrCreateCounters() *Stp_Rstp_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Rstp_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Rstp_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Rstp_Interface) GetCounters() *Stp_Rstp_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgeAddress is set, it can
// safely use t.GetDesignatedBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgePriority is set, it can
// safely use t.GetDesignatedBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedBridgePriority() uint16 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 32768
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedCost is set, it can
// safely use t.GetDesignatedCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedCost == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortNum is set, it can
// safely use t.GetDesignatedPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortNum == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortPriority is set, it can
// safely use t.GetDesignatedPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardTransisitions is set, it can
// safely use t.GetForwardTransisitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardTransisitions == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPriority is set, it can
// safely use t.GetPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortState is set, it can
// safely use t.GetPortState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortState == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetPortState() E_SpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Rstp_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface) GetRole() E_SpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// ΛListKeyMap returns the keys of the Stp_Rstp_Interface struct, which is a YANG list entry.
func (t *Stp_Rstp_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Rstp_Interface.
func (*Stp_Rstp_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Rstp_Interface_Counters represents the /openconfig-spanning-tree/stp/rstp/interfaces/interface/state/counters YANG schema element.
type Stp_Rstp_Interface_Counters struct {
	BpduReceived *uint64 `path:"bpdu-received" module:"openconfig-spanning-tree"`
	BpduSent     *uint64 `path:"bpdu-sent" module:"openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Rstp_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Rstp_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Rstp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduReceived is set, it can
// safely use t.GetBpduReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduReceived == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Rstp_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduSent is set, it can
// safely use t.GetBpduSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduSent == nil' before retrieving the leaf's value.
func (t *Stp_Rstp_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Rstp_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Rstp_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Rstp_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Rstp_Interface_Counters.
func (*Stp_Rstp_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Vlan represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan YANG schema element.
type Stp_Vlan struct {
	BridgeAddress          *string                        `path:"state/bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	BridgePriority         *uint16                        `path:"config/bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/bridge-priority" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootAddress  *string                        `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootPriority *uint16                        `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ForwardingDelay        *uint8                         `path:"config/forwarding-delay" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/forwarding-delay" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HelloTime              *uint8                         `path:"config/hello-time" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/hello-time" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HoldCount              *uint8                         `path:"config/hold-count" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/hold-count" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	HoldTime               *uint8                         `path:"state/hold-time" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Interface              map[string]*Stp_Vlan_Interface `path:"interfaces/interface" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	LastTopologyChange     *uint64                        `path:"state/last-topology-change" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	MaxAge                 *uint8                         `path:"config/max-age" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/max-age" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	RootCost               *uint32                        `path:"state/root-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	RootPort               *uint16                        `path:"state/root-port" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	TopologyChanges        *uint64                        `path:"state/topology-changes" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	VlanId                 *uint16                        `path:"config/vlan-id|vlan-id" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree" shadow-path:"state/vlan-id|vlan-id" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Vlan implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan) IsYANGGoStruct() {}

// NewInterface creates a new entry in the Interface list of the
// Stp_Vlan struct. The keys of the list are populated from the input
// arguments.
func (t *Stp_Vlan) NewInterface(Name string) (*Stp_Vlan_Interface, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Vlan_Interface)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Interface[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Interface", key)
	}

	t.Interface[key] = &Stp_Vlan_Interface{
		Name: &Name,
	}

	return t.Interface[key], nil
}

// RenameInterface renames an entry in the list Interface within
// the Stp_Vlan struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *Stp_Vlan) RenameInterface(oldK, newK string) error {
	if _, ok := t.Interface[newK]; ok {
		return fmt.Errorf("key %v already exists in Interface", newK)
	}

	e, ok := t.Interface[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Interface", oldK)
	}
	e.Name = &newK

	t.Interface[newK] = e
	delete(t.Interface, oldK)
	return nil
}

// GetOrCreateInterface retrieves the value with the specified keys from
// the receiver Stp_Vlan. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *Stp_Vlan) GetOrCreateInterface(Name string) *Stp_Vlan_Interface {

	key := Name

	if v, ok := t.Interface[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewInterface(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateInterface got unexpected error: %v", err))
	}
	return v
}

// GetInterface retrieves the value with the specified key from
// the Interface map field of Stp_Vlan. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *Stp_Vlan) GetInterface(Name string) *Stp_Vlan_Interface {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Interface[key]; ok {
		return lm
	}
	return nil
}

// DeleteInterface deletes the value with the specified keys from
// the receiver Stp_Vlan. If there is no such element, the function
// is a no-op.
func (t *Stp_Vlan) DeleteInterface(Name string) {
	key := Name

	delete(t.Interface, key)
}

// AppendInterface appends the supplied Stp_Vlan_Interface struct to the
// list Interface of Stp_Vlan. If the key value(s) specified in
// the supplied Stp_Vlan_Interface already exist in the list, an error is
// returned.
func (t *Stp_Vlan) AppendInterface(v *Stp_Vlan_Interface) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Interface == nil {
		t.Interface = make(map[string]*Stp_Vlan_Interface)
	}

	if _, ok := t.Interface[key]; ok {
		return fmt.Errorf("duplicate key for list Interface %v", key)
	}

	t.Interface[key] = v
	return nil
}

// GetBridgeAddress retrieves the value of the leaf BridgeAddress from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeAddress is set, it can
// safely use t.GetBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetBridgeAddress() string {
	if t == nil || t.BridgeAddress == nil {
		return ""
	}
	return *t.BridgeAddress
}

// GetBridgePriority retrieves the value of the leaf BridgePriority from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgePriority is set, it can
// safely use t.GetBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetBridgePriority() uint16 {
	if t == nil || t.BridgePriority == nil {
		return 32768
	}
	return *t.BridgePriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardingDelay retrieves the value of the leaf ForwardingDelay from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardingDelay is set, it can
// safely use t.GetForwardingDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardingDelay == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetForwardingDelay() uint8 {
	if t == nil || t.ForwardingDelay == nil {
		return 0
	}
	return *t.ForwardingDelay
}

// GetHelloTime retrieves the value of the leaf HelloTime from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloTime is set, it can
// safely use t.GetHelloTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloTime == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetHelloTime() uint8 {
	if t == nil || t.HelloTime == nil {
		return 0
	}
	return *t.HelloTime
}

// GetHoldCount retrieves the value of the leaf HoldCount from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldCount is set, it can
// safely use t.GetHoldCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldCount == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetHoldCount() uint8 {
	if t == nil || t.HoldCount == nil {
		return 6
	}
	return *t.HoldCount
}

// GetHoldTime retrieves the value of the leaf HoldTime from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetHoldTime() uint8 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetLastTopologyChange retrieves the value of the leaf LastTopologyChange from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastTopologyChange is set, it can
// safely use t.GetLastTopologyChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastTopologyChange == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetLastTopologyChange() uint64 {
	if t == nil || t.LastTopologyChange == nil {
		return 0
	}
	return *t.LastTopologyChange
}

// GetMaxAge retrieves the value of the leaf MaxAge from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAge is set, it can
// safely use t.GetMaxAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAge == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetMaxAge() uint8 {
	if t == nil || t.MaxAge == nil {
		return 0
	}
	return *t.MaxAge
}

// GetRootCost retrieves the value of the leaf RootCost from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootCost is set, it can
// safely use t.GetRootCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootCost == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetRootCost() uint32 {
	if t == nil || t.RootCost == nil {
		return 0
	}
	return *t.RootCost
}

// GetRootPort retrieves the value of the leaf RootPort from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootPort is set, it can
// safely use t.GetRootPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootPort == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetRootPort() uint16 {
	if t == nil || t.RootPort == nil {
		return 0
	}
	return *t.RootPort
}

// GetTopologyChanges retrieves the value of the leaf TopologyChanges from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopologyChanges is set, it can
// safely use t.GetTopologyChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopologyChanges == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetTopologyChanges() uint64 {
	if t == nil || t.TopologyChanges == nil {
		return 0
	}
	return *t.TopologyChanges
}

// GetVlanId retrieves the value of the leaf VlanId from the Stp_Vlan
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VlanId is set, it can
// safely use t.GetVlanId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VlanId == nil' before retrieving the leaf's value.
func (t *Stp_Vlan) GetVlanId() uint16 {
	if t == nil || t.VlanId == nil {
		return 0
	}
	return *t.VlanId
}

// ΛListKeyMap returns the keys of the Stp_Vlan struct, which is a YANG list entry.
func (t *Stp_Vlan) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VlanId == nil {
		return nil, fmt.Errorf("nil value for key VlanId")
	}

	return map[string]interface{}{
		"vlan-id": *t.VlanId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Vlan.
func (*Stp_Vlan) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Vlan_Interface represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface YANG schema element.
type Stp_Vlan_Interface struct {
	Cost                     *uint32                            `path:"config/cost" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/cost" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Counters                 *Stp_Vlan_Interface_Counters       `path:"state/counters" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedBridgeAddress  *string                            `path:"state/designated-bridge-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedBridgePriority *uint16                            `path:"state/designated-bridge-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedCost           *uint32                            `path:"state/designated-cost" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedPortNum        *uint16                            `path:"state/designated-port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedPortPriority   *uint8                             `path:"state/designated-port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootAddress    *string                            `path:"state/designated-root-address" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	DesignatedRootPriority   *uint16                            `path:"state/designated-root-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	ForwardTransisitions     *uint64                            `path:"state/forward-transisitions" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Name                     *string                            `path:"config/name|name" module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree" shadow-path:"state/name|name" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree|openconfig-spanning-tree"`
	PortNum                  *uint16                            `path:"state/port-num" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	PortPriority             *uint8                             `path:"config/port-priority" module:"openconfig-spanning-tree/openconfig-spanning-tree" shadow-path:"state/port-priority" shadow-module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	PortState                E_SpanningTreeTypes_STP_PORT_STATE `path:"state/port-state" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
	Role                     E_SpanningTreeTypes_STP_PORT_ROLE  `path:"state/role" module:"openconfig-spanning-tree/openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Vlan_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan_Interface) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *Stp_Vlan_Interface) GetOrCreateCounters() *Stp_Vlan_Interface_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &Stp_Vlan_Interface_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from Stp_Vlan_Interface. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Stp_Vlan_Interface) GetCounters() *Stp_Vlan_Interface_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetCost retrieves the value of the leaf Cost from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetDesignatedBridgeAddress retrieves the value of the leaf DesignatedBridgeAddress from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgeAddress is set, it can
// safely use t.GetDesignatedBridgeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgeAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedBridgeAddress() string {
	if t == nil || t.DesignatedBridgeAddress == nil {
		return ""
	}
	return *t.DesignatedBridgeAddress
}

// GetDesignatedBridgePriority retrieves the value of the leaf DesignatedBridgePriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedBridgePriority is set, it can
// safely use t.GetDesignatedBridgePriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedBridgePriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedBridgePriority() uint16 {
	if t == nil || t.DesignatedBridgePriority == nil {
		return 32768
	}
	return *t.DesignatedBridgePriority
}

// GetDesignatedCost retrieves the value of the leaf DesignatedCost from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedCost is set, it can
// safely use t.GetDesignatedCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedCost == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedCost() uint32 {
	if t == nil || t.DesignatedCost == nil {
		return 0
	}
	return *t.DesignatedCost
}

// GetDesignatedPortNum retrieves the value of the leaf DesignatedPortNum from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortNum is set, it can
// safely use t.GetDesignatedPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortNum == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedPortNum() uint16 {
	if t == nil || t.DesignatedPortNum == nil {
		return 0
	}
	return *t.DesignatedPortNum
}

// GetDesignatedPortPriority retrieves the value of the leaf DesignatedPortPriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedPortPriority is set, it can
// safely use t.GetDesignatedPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedPortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedPortPriority() uint8 {
	if t == nil || t.DesignatedPortPriority == nil {
		return 0
	}
	return *t.DesignatedPortPriority
}

// GetDesignatedRootAddress retrieves the value of the leaf DesignatedRootAddress from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootAddress is set, it can
// safely use t.GetDesignatedRootAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootAddress == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedRootAddress() string {
	if t == nil || t.DesignatedRootAddress == nil {
		return ""
	}
	return *t.DesignatedRootAddress
}

// GetDesignatedRootPriority retrieves the value of the leaf DesignatedRootPriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DesignatedRootPriority is set, it can
// safely use t.GetDesignatedRootPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DesignatedRootPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetDesignatedRootPriority() uint16 {
	if t == nil || t.DesignatedRootPriority == nil {
		return 32768
	}
	return *t.DesignatedRootPriority
}

// GetForwardTransisitions retrieves the value of the leaf ForwardTransisitions from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardTransisitions is set, it can
// safely use t.GetForwardTransisitions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardTransisitions == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetForwardTransisitions() uint64 {
	if t == nil || t.ForwardTransisitions == nil {
		return 0
	}
	return *t.ForwardTransisitions
}

// GetName retrieves the value of the leaf Name from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPortNum retrieves the value of the leaf PortNum from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortNum is set, it can
// safely use t.GetPortNum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortNum == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortNum() uint16 {
	if t == nil || t.PortNum == nil {
		return 0
	}
	return *t.PortNum
}

// GetPortPriority retrieves the value of the leaf PortPriority from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPriority is set, it can
// safely use t.GetPortPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPriority == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortPriority() uint8 {
	if t == nil || t.PortPriority == nil {
		return 0
	}
	return *t.PortPriority
}

// GetPortState retrieves the value of the leaf PortState from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortState is set, it can
// safely use t.GetPortState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortState == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetPortState() E_SpanningTreeTypes_STP_PORT_STATE {
	if t == nil || t.PortState == 0 {
		return 0
	}
	return t.PortState
}

// GetRole retrieves the value of the leaf Role from the Stp_Vlan_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface) GetRole() E_SpanningTreeTypes_STP_PORT_ROLE {
	if t == nil || t.Role == 0 {
		return 0
	}
	return t.Role
}

// ΛListKeyMap returns the keys of the Stp_Vlan_Interface struct, which is a YANG list entry.
func (t *Stp_Vlan_Interface) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan_Interface) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Vlan_Interface.
func (*Stp_Vlan_Interface) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// Stp_Vlan_Interface_Counters represents the /openconfig-spanning-tree/stp/rapid-pvst/vlan/interfaces/interface/state/counters YANG schema element.
type Stp_Vlan_Interface_Counters struct {
	BpduReceived *uint64 `path:"bpdu-received" module:"openconfig-spanning-tree"`
	BpduSent     *uint64 `path:"bpdu-sent" module:"openconfig-spanning-tree"`
}

// IsYANGGoStruct ensures that Stp_Vlan_Interface_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Stp_Vlan_Interface_Counters) IsYANGGoStruct() {}

// GetBpduReceived retrieves the value of the leaf BpduReceived from the Stp_Vlan_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduReceived is set, it can
// safely use t.GetBpduReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduReceived == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface_Counters) GetBpduReceived() uint64 {
	if t == nil || t.BpduReceived == nil {
		return 0
	}
	return *t.BpduReceived
}

// GetBpduSent retrieves the value of the leaf BpduSent from the Stp_Vlan_Interface_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BpduSent is set, it can
// safely use t.GetBpduSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BpduSent == nil' before retrieving the leaf's value.
func (t *Stp_Vlan_Interface_Counters) GetBpduSent() uint64 {
	if t == nil || t.BpduSent == nil {
		return 0
	}
	return *t.BpduSent
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Stp_Vlan_Interface_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Stp_Vlan_Interface_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Stp_Vlan_Interface_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Stp_Vlan_Interface_Counters.
func (*Stp_Vlan_Interface_Counters) ΛBelongingModule() string {
	return "openconfig-spanning-tree"
}

// System represents the /openconfig-system/system YANG schema element.
type System struct {
	Aaa             *System_Aaa                            `path:"aaa" module:"openconfig-system"`
	Alarm           map[string]*System_Alarm               `path:"alarms/alarm" module:"openconfig-system/openconfig-system"`
	BootTime        *uint64                                `path:"state/boot-time" module:"openconfig-system/openconfig-system"`
	Clock           *System_Clock                          `path:"clock" module:"openconfig-system"`
	Cpu             map[System_Cpu_Index_Union]*System_Cpu `path:"cpus/cpu" module:"openconfig-system/openconfig-system"`
	CurrentDatetime *string                                `path:"state/current-datetime" module:"openconfig-system/openconfig-system"`
	Dns             *System_Dns                            `path:"dns" module:"openconfig-system"`
	DomainName      *string                                `path:"config/domain-name" module:"openconfig-system/openconfig-system" shadow-path:"state/domain-name" shadow-module:"openconfig-system/openconfig-system"`
	GrpcServer      map[string]*System_GrpcServer          `path:"grpc-servers/grpc-server" module:"openconfig-system-grpc/openconfig-system-grpc"`
	Hostname        *string                                `path:"config/hostname" module:"openconfig-system/openconfig-system" shadow-path:"state/hostname" shadow-module:"openconfig-system/openconfig-system"`
	License         *System_License                        `path:"license" module:"openconfig-system"`
	Logging         *System_Logging                        `path:"logging" module:"openconfig-system"`
	LoginBanner     *string                                `path:"config/login-banner" module:"openconfig-system/openconfig-system" shadow-path:"state/login-banner" shadow-module:"openconfig-system/openconfig-system"`
	Memory          *System_Memory                         `path:"memory" module:"openconfig-system"`
	Messages        *System_Messages                       `path:"messages" module:"openconfig-system"`
	MotdBanner      *string                                `path:"config/motd-banner" module:"openconfig-system/openconfig-system" shadow-path:"state/motd-banner" shadow-module:"openconfig-system/openconfig-system"`
	MountPoint      map[string]*System_MountPoint          `path:"mount-points/mount-point" module:"openconfig-system/openconfig-system"`
	Ntp             *System_Ntp                            `path:"ntp" module:"openconfig-system"`
	Process         map[uint64]*System_Process             `path:"processes/process" module:"openconfig-system/openconfig-system"`
	SshServer       *System_SshServer                      `path:"ssh-server" module:"openconfig-system"`
	TelnetServer    *System_TelnetServer                   `path:"telnet-server" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewAlarm(Id string) (*System_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &System_Alarm{
		Id: &Id,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameAlarm(oldK, newK string) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.Id = &newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateAlarm(Id string) *System_Alarm {

	key := Id

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetAlarm(Id string) *System_Alarm {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteAlarm(Id string) {
	key := Id

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied System_Alarm struct to the
// list Alarm of System. If the key value(s) specified in
// the supplied System_Alarm already exist in the list, an error is
// returned.
func (t *System) AppendAlarm(v *System_Alarm) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[string]*System_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// NewCpu creates a new entry in the Cpu list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewCpu(Index System_Cpu_Index_Union) (*System_Cpu, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cpu[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cpu", key)
	}

	t.Cpu[key] = &System_Cpu{
		Index: Index,
	}

	return t.Cpu[key], nil
}

// RenameCpu renames an entry in the list Cpu within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameCpu(oldK, newK System_Cpu_Index_Union) error {
	if _, ok := t.Cpu[newK]; ok {
		return fmt.Errorf("key %v already exists in Cpu", newK)
	}

	e, ok := t.Cpu[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cpu", oldK)
	}
	e.Index = newK

	t.Cpu[newK] = e
	delete(t.Cpu, oldK)
	return nil
}

// GetOrCreateCpu retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateCpu(Index System_Cpu_Index_Union) *System_Cpu {

	key := Index

	if v, ok := t.Cpu[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCpu(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCpu got unexpected error: %v", err))
	}
	return v
}

// GetCpu retrieves the value with the specified key from
// the Cpu map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetCpu(Index System_Cpu_Index_Union) *System_Cpu {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cpu[key]; ok {
		return lm
	}
	return nil
}

// DeleteCpu deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteCpu(Index System_Cpu_Index_Union) {
	key := Index

	delete(t.Cpu, key)
}

// AppendCpu appends the supplied System_Cpu struct to the
// list Cpu of System. If the key value(s) specified in
// the supplied System_Cpu already exist in the list, an error is
// returned.
func (t *System) AppendCpu(v *System_Cpu) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cpu == nil {
		t.Cpu = make(map[System_Cpu_Index_Union]*System_Cpu)
	}

	if _, ok := t.Cpu[key]; ok {
		return fmt.Errorf("duplicate key for list Cpu %v", key)
	}

	t.Cpu[key] = v
	return nil
}

// NewGrpcServer creates a new entry in the GrpcServer list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewGrpcServer(Name string) (*System_GrpcServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.GrpcServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list GrpcServer", key)
	}

	t.GrpcServer[key] = &System_GrpcServer{
		Name: &Name,
	}

	return t.GrpcServer[key], nil
}

// RenameGrpcServer renames an entry in the list GrpcServer within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameGrpcServer(oldK, newK string) error {
	if _, ok := t.GrpcServer[newK]; ok {
		return fmt.Errorf("key %v already exists in GrpcServer", newK)
	}

	e, ok := t.GrpcServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in GrpcServer", oldK)
	}
	e.Name = &newK

	t.GrpcServer[newK] = e
	delete(t.GrpcServer, oldK)
	return nil
}

// GetOrCreateGrpcServer retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateGrpcServer(Name string) *System_GrpcServer {

	key := Name

	if v, ok := t.GrpcServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewGrpcServer(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateGrpcServer got unexpected error: %v", err))
	}
	return v
}

// GetGrpcServer retrieves the value with the specified key from
// the GrpcServer map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetGrpcServer(Name string) *System_GrpcServer {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.GrpcServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteGrpcServer deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteGrpcServer(Name string) {
	key := Name

	delete(t.GrpcServer, key)
}

// AppendGrpcServer appends the supplied System_GrpcServer struct to the
// list GrpcServer of System. If the key value(s) specified in
// the supplied System_GrpcServer already exist in the list, an error is
// returned.
func (t *System) AppendGrpcServer(v *System_GrpcServer) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.GrpcServer == nil {
		t.GrpcServer = make(map[string]*System_GrpcServer)
	}

	if _, ok := t.GrpcServer[key]; ok {
		return fmt.Errorf("duplicate key for list GrpcServer %v", key)
	}

	t.GrpcServer[key] = v
	return nil
}

// NewMountPoint creates a new entry in the MountPoint list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewMountPoint(Name string) (*System_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &System_MountPoint{
		Name: &Name,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameMountPoint(oldK, newK string) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Name = &newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateMountPoint(Name string) *System_MountPoint {

	key := Name

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetMountPoint(Name string) *System_MountPoint {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteMountPoint(Name string) {
	key := Name

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied System_MountPoint struct to the
// list MountPoint of System. If the key value(s) specified in
// the supplied System_MountPoint already exist in the list, an error is
// returned.
func (t *System) AppendMountPoint(v *System_MountPoint) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[string]*System_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// NewProcess creates a new entry in the Process list of the
// System struct. The keys of the list are populated from the input
// arguments.
func (t *System) NewProcess(Pid uint64) (*System_Process, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	key := Pid

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Process[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Process", key)
	}

	t.Process[key] = &System_Process{
		Pid: &Pid,
	}

	return t.Process[key], nil
}

// RenameProcess renames an entry in the list Process within
// the System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System) RenameProcess(oldK, newK uint64) error {
	if _, ok := t.Process[newK]; ok {
		return fmt.Errorf("key %v already exists in Process", newK)
	}

	e, ok := t.Process[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Process", oldK)
	}
	e.Pid = &newK

	t.Process[newK] = e
	delete(t.Process, oldK)
	return nil
}

// GetOrCreateProcess retrieves the value with the specified keys from
// the receiver System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System) GetOrCreateProcess(Pid uint64) *System_Process {

	key := Pid

	if v, ok := t.Process[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProcess(Pid)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProcess got unexpected error: %v", err))
	}
	return v
}

// GetProcess retrieves the value with the specified key from
// the Process map field of System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System) GetProcess(Pid uint64) *System_Process {

	if t == nil {
		return nil
	}

	key := Pid

	if lm, ok := t.Process[key]; ok {
		return lm
	}
	return nil
}

// DeleteProcess deletes the value with the specified keys from
// the receiver System. If there is no such element, the function
// is a no-op.
func (t *System) DeleteProcess(Pid uint64) {
	key := Pid

	delete(t.Process, key)
}

// AppendProcess appends the supplied System_Process struct to the
// list Process of System. If the key value(s) specified in
// the supplied System_Process already exist in the list, an error is
// returned.
func (t *System) AppendProcess(v *System_Process) error {
	if v.Pid == nil {
		return fmt.Errorf("invalid nil key received for Pid")
	}

	key := *v.Pid

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Process == nil {
		t.Process = make(map[uint64]*System_Process)
	}

	if _, ok := t.Process[key]; ok {
		return fmt.Errorf("duplicate key for list Process %v", key)
	}

	t.Process[key] = v
	return nil
}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateAaa() *System_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &System_Aaa{}
	return t.Aaa
}

// GetOrCreateClock retrieves the value of the Clock field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateClock() *System_Clock {
	if t.Clock != nil {
		return t.Clock
	}
	t.Clock = &System_Clock{}
	return t.Clock
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateDns() *System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &System_Dns{}
	return t.Dns
}

// GetOrCreateLicense retrieves the value of the License field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLicense() *System_License {
	if t.License != nil {
		return t.License
	}
	t.License = &System_License{}
	return t.License
}

// GetOrCreateLogging retrieves the value of the Logging field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateLogging() *System_Logging {
	if t.Logging != nil {
		return t.Logging
	}
	t.Logging = &System_Logging{}
	return t.Logging
}

// GetOrCreateMemory retrieves the value of the Memory field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMemory() *System_Memory {
	if t.Memory != nil {
		return t.Memory
	}
	t.Memory = &System_Memory{}
	return t.Memory
}

// GetOrCreateMessages retrieves the value of the Messages field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateMessages() *System_Messages {
	if t.Messages != nil {
		return t.Messages
	}
	t.Messages = &System_Messages{}
	return t.Messages
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateNtp() *System_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &System_Ntp{}
	return t.Ntp
}

// GetOrCreateSshServer retrieves the value of the SshServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateSshServer() *System_SshServer {
	if t.SshServer != nil {
		return t.SshServer
	}
	t.SshServer = &System_SshServer{}
	return t.SshServer
}

// GetOrCreateTelnetServer retrieves the value of the TelnetServer field
// or returns the existing field if it already exists.
func (t *System) GetOrCreateTelnetServer() *System_TelnetServer {
	if t.TelnetServer != nil {
		return t.TelnetServer
	}
	t.TelnetServer = &System_TelnetServer{}
	return t.TelnetServer
}

// GetAaa returns the value of the Aaa struct pointer
// from System. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetAaa() *System_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetClock returns the value of the Clock struct pointer
// from System. If the receiver or the field Clock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetClock() *System_Clock {
	if t != nil && t.Clock != nil {
		return t.Clock
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetDns() *System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetLicense returns the value of the License struct pointer
// from System. If the receiver or the field License is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLicense() *System_License {
	if t != nil && t.License != nil {
		return t.License
	}
	return nil
}

// GetLogging returns the value of the Logging struct pointer
// from System. If the receiver or the field Logging is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetLogging() *System_Logging {
	if t != nil && t.Logging != nil {
		return t.Logging
	}
	return nil
}

// GetMemory returns the value of the Memory struct pointer
// from System. If the receiver or the field Memory is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMemory() *System_Memory {
	if t != nil && t.Memory != nil {
		return t.Memory
	}
	return nil
}

// GetMessages returns the value of the Messages struct pointer
// from System. If the receiver or the field Messages is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetMessages() *System_Messages {
	if t != nil && t.Messages != nil {
		return t.Messages
	}
	return nil
}

// GetNtp returns the value of the Ntp struct pointer
// from System. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetNtp() *System_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetSshServer returns the value of the SshServer struct pointer
// from System. If the receiver or the field SshServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetSshServer() *System_SshServer {
	if t != nil && t.SshServer != nil {
		return t.SshServer
	}
	return nil
}

// GetTelnetServer returns the value of the TelnetServer struct pointer
// from System. If the receiver or the field TelnetServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System) GetTelnetServer() *System_TelnetServer {
	if t != nil && t.TelnetServer != nil {
		return t.TelnetServer
	}
	return nil
}

// GetBootTime retrieves the value of the leaf BootTime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootTime is set, it can
// safely use t.GetBootTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootTime == nil' before retrieving the leaf's value.
func (t *System) GetBootTime() uint64 {
	if t == nil || t.BootTime == nil {
		return 0
	}
	return *t.BootTime
}

// GetCurrentDatetime retrieves the value of the leaf CurrentDatetime from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentDatetime is set, it can
// safely use t.GetCurrentDatetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentDatetime == nil' before retrieving the leaf's value.
func (t *System) GetCurrentDatetime() string {
	if t == nil || t.CurrentDatetime == nil {
		return ""
	}
	return *t.CurrentDatetime
}

// GetDomainName retrieves the value of the leaf DomainName from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *System) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetHostname retrieves the value of the leaf Hostname from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *System) GetLoginBanner() string {
	if t == nil || t.LoginBanner == nil {
		return ""
	}
	return *t.LoginBanner
}

// GetMotdBanner retrieves the value of the leaf MotdBanner from the System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MotdBanner is set, it can
// safely use t.GetMotdBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MotdBanner == nil' before retrieving the leaf's value.
func (t *System) GetMotdBanner() string {
	if t == nil || t.MotdBanner == nil {
		return ""
	}
	return *t.MotdBanner
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System.
func (*System) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa represents the /openconfig-system/system/aaa YANG schema element.
type System_Aaa struct {
	Accounting     *System_Aaa_Accounting             `path:"accounting" module:"openconfig-system"`
	Authentication *System_Aaa_Authentication         `path:"authentication" module:"openconfig-system"`
	Authorization  *System_Aaa_Authorization          `path:"authorization" module:"openconfig-system"`
	ServerGroup    map[string]*System_Aaa_ServerGroup `path:"server-groups/server-group" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa) IsYANGGoStruct() {}

// NewServerGroup creates a new entry in the ServerGroup list of the
// System_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa) NewServerGroup(Name string) (*System_Aaa_ServerGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerGroup", key)
	}

	t.ServerGroup[key] = &System_Aaa_ServerGroup{
		Name: &Name,
	}

	return t.ServerGroup[key], nil
}

// RenameServerGroup renames an entry in the list ServerGroup within
// the System_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa) RenameServerGroup(oldK, newK string) error {
	if _, ok := t.ServerGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerGroup", newK)
	}

	e, ok := t.ServerGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerGroup", oldK)
	}
	e.Name = &newK

	t.ServerGroup[newK] = e
	delete(t.ServerGroup, oldK)
	return nil
}

// GetOrCreateServerGroup retrieves the value with the specified keys from
// the receiver System_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa) GetOrCreateServerGroup(Name string) *System_Aaa_ServerGroup {

	key := Name

	if v, ok := t.ServerGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerGroup got unexpected error: %v", err))
	}
	return v
}

// GetServerGroup retrieves the value with the specified key from
// the ServerGroup map field of System_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa) GetServerGroup(Name string) *System_Aaa_ServerGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ServerGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerGroup deletes the value with the specified keys from
// the receiver System_Aaa. If there is no such element, the function
// is a no-op.
func (t *System_Aaa) DeleteServerGroup(Name string) {
	key := Name

	delete(t.ServerGroup, key)
}

// AppendServerGroup appends the supplied System_Aaa_ServerGroup struct to the
// list ServerGroup of System_Aaa. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup already exist in the list, an error is
// returned.
func (t *System_Aaa) AppendServerGroup(v *System_Aaa_ServerGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerGroup == nil {
		t.ServerGroup = make(map[string]*System_Aaa_ServerGroup)
	}

	if _, ok := t.ServerGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ServerGroup %v", key)
	}

	t.ServerGroup[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAccounting() *System_Aaa_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &System_Aaa_Accounting{}
	return t.Accounting
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthentication() *System_Aaa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &System_Aaa_Authentication{}
	return t.Authentication
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *System_Aaa) GetOrCreateAuthorization() *System_Aaa_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &System_Aaa_Authorization{}
	return t.Authorization
}

// GetAccounting returns the value of the Accounting struct pointer
// from System_Aaa. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAccounting() *System_Aaa_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAuthentication returns the value of the Authentication struct pointer
// from System_Aaa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthentication() *System_Aaa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from System_Aaa. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa) GetAuthorization() *System_Aaa_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa.
func (*System_Aaa) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting represents the /openconfig-system/system/aaa/accounting YANG schema element.
type System_Aaa_Accounting struct {
	AccountingMethod []System_Aaa_Accounting_AccountingMethod_Union                        `path:"config/accounting-method" module:"openconfig-system/openconfig-system" shadow-path:"state/accounting-method" shadow-module:"openconfig-system/openconfig-system"`
	Event            map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Accounting struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Accounting) NewEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) (*System_Aaa_Accounting_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Accounting_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Accounting struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Accounting) RenameEvent(oldK, newK E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Accounting. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Accounting) GetOrCreateEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Accounting. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Accounting) GetEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) *System_Aaa_Accounting_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Accounting. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Accounting) DeleteEvent(EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Accounting_Event struct to the
// list Event of System_Aaa_Accounting. If the key value(s) specified in
// the supplied System_Aaa_Accounting_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Accounting) AppendEvent(v *System_Aaa_Accounting_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE]*System_Aaa_Accounting_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAccountingMethod retrieves the value of the leaf AccountingMethod from the System_Aaa_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingMethod is set, it can
// safely use t.GetAccountingMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting) GetAccountingMethod() []System_Aaa_Accounting_AccountingMethod_Union {
	if t == nil || t.AccountingMethod == nil {
		return nil
	}
	return t.AccountingMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting.
func (*System_Aaa_Accounting) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Accounting_Event represents the /openconfig-system/system/aaa/accounting/events/event YANG schema element.
type System_Aaa_Accounting_Event struct {
	EventType E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE `path:"config/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Record    E_Aaa_Event_Record                   `path:"config/record" module:"openconfig-system/openconfig-system" shadow-path:"state/record" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Accounting_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Accounting_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetEventType() E_AaaTypes_AAA_ACCOUNTING_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// GetRecord retrieves the value of the leaf Record from the System_Aaa_Accounting_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Record is set, it can
// safely use t.GetRecord() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Record == nil' before retrieving the leaf's value.
func (t *System_Aaa_Accounting_Event) GetRecord() E_Aaa_Event_Record {
	if t == nil || t.Record == 0 {
		return 0
	}
	return t.Record
}

// ΛListKeyMap returns the keys of the System_Aaa_Accounting_Event struct, which is a YANG list entry.
func (t *System_Aaa_Accounting_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Accounting_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Accounting_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Accounting_Event) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Accounting_Event.
func (*System_Aaa_Accounting_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication represents the /openconfig-system/system/aaa/authentication YANG schema element.
type System_Aaa_Authentication struct {
	AdminUser            *System_Aaa_Authentication_AdminUser                   `path:"admin-user" module:"openconfig-system"`
	AuthenticationMethod []System_Aaa_Authentication_AuthenticationMethod_Union `path:"config/authentication-method" module:"openconfig-system/openconfig-system" shadow-path:"state/authentication-method" shadow-module:"openconfig-system/openconfig-system"`
	User                 map[string]*System_Aaa_Authentication_User             `path:"users/user" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// System_Aaa_Authentication struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authentication) NewUser(Username string) (*System_Aaa_Authentication_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	key := Username

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &System_Aaa_Authentication_User{
		Username: &Username,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the System_Aaa_Authentication struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authentication) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.Username = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver System_Aaa_Authentication. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authentication) GetOrCreateUser(Username string) *System_Aaa_Authentication_User {

	key := Username

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(Username)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of System_Aaa_Authentication. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authentication) GetUser(Username string) *System_Aaa_Authentication_User {

	if t == nil {
		return nil
	}

	key := Username

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver System_Aaa_Authentication. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authentication) DeleteUser(Username string) {
	key := Username

	delete(t.User, key)
}

// AppendUser appends the supplied System_Aaa_Authentication_User struct to the
// list User of System_Aaa_Authentication. If the key value(s) specified in
// the supplied System_Aaa_Authentication_User already exist in the list, an error is
// returned.
func (t *System_Aaa_Authentication) AppendUser(v *System_Aaa_Authentication_User) error {
	if v.Username == nil {
		return fmt.Errorf("invalid nil key received for Username")
	}

	key := *v.Username

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*System_Aaa_Authentication_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreateAdminUser retrieves the value of the AdminUser field
// or returns the existing field if it already exists.
func (t *System_Aaa_Authentication) GetOrCreateAdminUser() *System_Aaa_Authentication_AdminUser {
	if t.AdminUser != nil {
		return t.AdminUser
	}
	t.AdminUser = &System_Aaa_Authentication_AdminUser{}
	return t.AdminUser
}

// GetAdminUser returns the value of the AdminUser struct pointer
// from System_Aaa_Authentication. If the receiver or the field AdminUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_Authentication) GetAdminUser() *System_Aaa_Authentication_AdminUser {
	if t != nil && t.AdminUser != nil {
		return t.AdminUser
	}
	return nil
}

// GetAuthenticationMethod retrieves the value of the leaf AuthenticationMethod from the System_Aaa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationMethod is set, it can
// safely use t.GetAuthenticationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication) GetAuthenticationMethod() []System_Aaa_Authentication_AuthenticationMethod_Union {
	if t == nil || t.AuthenticationMethod == nil {
		return nil
	}
	return t.AuthenticationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication.
func (*System_Aaa_Authentication) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_AdminUser represents the /openconfig-system/system/aaa/authentication/admin-user YANG schema element.
type System_Aaa_Authentication_AdminUser struct {
	AdminPassword       *string `path:"config/admin-password" module:"openconfig-system/openconfig-system" shadow-path:"state/admin-password" shadow-module:"openconfig-system/openconfig-system"`
	AdminPasswordHashed *string `path:"config/admin-password-hashed" module:"openconfig-system/openconfig-system" shadow-path:"state/admin-password-hashed" shadow-module:"openconfig-system/openconfig-system"`
	AdminUsername       *string `path:"state/admin-username" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_AdminUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_AdminUser) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPassword is set, it can
// safely use t.GetAdminPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPassword == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetAdminPasswordHashed retrieves the value of the leaf AdminPasswordHashed from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPasswordHashed is set, it can
// safely use t.GetAdminPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminPasswordHashed() string {
	if t == nil || t.AdminPasswordHashed == nil {
		return ""
	}
	return *t.AdminPasswordHashed
}

// GetAdminUsername retrieves the value of the leaf AdminUsername from the System_Aaa_Authentication_AdminUser
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminUsername is set, it can
// safely use t.GetAdminUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminUsername == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_AdminUser) GetAdminUsername() string {
	if t == nil || t.AdminUsername == nil {
		return ""
	}
	return *t.AdminUsername
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_AdminUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_AdminUser) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_AdminUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_AdminUser.
func (*System_Aaa_Authentication_AdminUser) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authentication_User represents the /openconfig-system/system/aaa/authentication/users/user YANG schema element.
type System_Aaa_Authentication_User struct {
	Password       *string                                   `path:"config/password" module:"openconfig-system/openconfig-system" shadow-path:"state/password" shadow-module:"openconfig-system/openconfig-system"`
	PasswordHashed *string                                   `path:"config/password-hashed" module:"openconfig-system/openconfig-system" shadow-path:"state/password-hashed" shadow-module:"openconfig-system/openconfig-system"`
	Role           System_Aaa_Authentication_User_Role_Union `path:"config/role" module:"openconfig-system/openconfig-system" shadow-path:"state/role" shadow-module:"openconfig-system/openconfig-system"`
	SshKey         *string                                   `path:"config/ssh-key" module:"openconfig-system/openconfig-system" shadow-path:"state/ssh-key" shadow-module:"openconfig-system/openconfig-system"`
	Username       *string                                   `path:"config/username|username" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/username|username" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authentication_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authentication_User) IsYANGGoStruct() {}

// GetPassword retrieves the value of the leaf Password from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPasswordHashed retrieves the value of the leaf PasswordHashed from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PasswordHashed is set, it can
// safely use t.GetPasswordHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PasswordHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetPasswordHashed() string {
	if t == nil || t.PasswordHashed == nil {
		return ""
	}
	return *t.PasswordHashed
}

// GetRole retrieves the value of the leaf Role from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Role is set, it can
// safely use t.GetRole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Role == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetRole() System_Aaa_Authentication_User_Role_Union {
	if t == nil || t.Role == nil {
		return nil
	}
	return t.Role
}

// GetSshKey retrieves the value of the leaf SshKey from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshKey is set, it can
// safely use t.GetSshKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetSshKey() string {
	if t == nil || t.SshKey == nil {
		return ""
	}
	return *t.SshKey
}

// GetUsername retrieves the value of the leaf Username from the System_Aaa_Authentication_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authentication_User) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// ΛListKeyMap returns the keys of the System_Aaa_Authentication_User struct, which is a YANG list entry.
func (t *System_Aaa_Authentication_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Username == nil {
		return nil, fmt.Errorf("nil value for key Username")
	}

	return map[string]interface{}{
		"username": *t.Username,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authentication_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authentication_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authentication_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authentication_User.
func (*System_Aaa_Authentication_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization represents the /openconfig-system/system/aaa/authorization YANG schema element.
type System_Aaa_Authorization struct {
	AuthorizationMethod []System_Aaa_Authorization_AuthorizationMethod_Union                        `path:"config/authorization-method" module:"openconfig-system/openconfig-system" shadow-path:"state/authorization-method" shadow-module:"openconfig-system/openconfig-system"`
	Event               map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event `path:"events/event" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization) IsYANGGoStruct() {}

// NewEvent creates a new entry in the Event list of the
// System_Aaa_Authorization struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_Authorization) NewEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) (*System_Aaa_Authorization_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	key := EventType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &System_Aaa_Authorization_Event{
		EventType: EventType,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the System_Aaa_Authorization struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_Authorization) RenameEvent(oldK, newK E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.EventType = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver System_Aaa_Authorization. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_Authorization) GetOrCreateEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	key := EventType

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(EventType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of System_Aaa_Authorization. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_Authorization) GetEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) *System_Aaa_Authorization_Event {

	if t == nil {
		return nil
	}

	key := EventType

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver System_Aaa_Authorization. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_Authorization) DeleteEvent(EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE) {
	key := EventType

	delete(t.Event, key)
}

// AppendEvent appends the supplied System_Aaa_Authorization_Event struct to the
// list Event of System_Aaa_Authorization. If the key value(s) specified in
// the supplied System_Aaa_Authorization_Event already exist in the list, an error is
// returned.
func (t *System_Aaa_Authorization) AppendEvent(v *System_Aaa_Authorization_Event) error {
	key := v.EventType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE]*System_Aaa_Authorization_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// GetAuthorizationMethod retrieves the value of the leaf AuthorizationMethod from the System_Aaa_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizationMethod is set, it can
// safely use t.GetAuthorizationMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizationMethod == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization) GetAuthorizationMethod() []System_Aaa_Authorization_AuthorizationMethod_Union {
	if t == nil || t.AuthorizationMethod == nil {
		return nil
	}
	return t.AuthorizationMethod
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization.
func (*System_Aaa_Authorization) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_Authorization_Event represents the /openconfig-system/system/aaa/authorization/events/event YANG schema element.
type System_Aaa_Authorization_Event struct {
	EventType E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE `path:"config/event-type|event-type" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/event-type|event-type" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_Authorization_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_Authorization_Event) IsYANGGoStruct() {}

// GetEventType retrieves the value of the leaf EventType from the System_Aaa_Authorization_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *System_Aaa_Authorization_Event) GetEventType() E_AaaTypes_AAA_AUTHORIZATION_EVENT_TYPE {
	if t == nil || t.EventType == 0 {
		return 0
	}
	return t.EventType
}

// ΛListKeyMap returns the keys of the System_Aaa_Authorization_Event struct, which is a YANG list entry.
func (t *System_Aaa_Authorization_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"event-type": t.EventType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_Authorization_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_Authorization_Event) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_Authorization_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_Authorization_Event.
func (*System_Aaa_Authorization_Event) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup represents the /openconfig-system/system/aaa/server-groups/server-group YANG schema element.
type System_Aaa_ServerGroup struct {
	Name   *string                                   `path:"config/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/name|name" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Server map[string]*System_Aaa_ServerGroup_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
	Type   E_AaaTypes_AAA_SERVER_TYPE                `path:"config/type" module:"openconfig-system/openconfig-system" shadow-path:"state/type" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// System_Aaa_ServerGroup struct. The keys of the list are populated from the input
// arguments.
func (t *System_Aaa_ServerGroup) NewServer(Address string) (*System_Aaa_ServerGroup_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Aaa_ServerGroup_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Aaa_ServerGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Aaa_ServerGroup) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Aaa_ServerGroup) GetOrCreateServer(Address string) *System_Aaa_ServerGroup_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Aaa_ServerGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Aaa_ServerGroup) GetServer(Address string) *System_Aaa_ServerGroup_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Aaa_ServerGroup. If there is no such element, the function
// is a no-op.
func (t *System_Aaa_ServerGroup) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Aaa_ServerGroup_Server struct to the
// list Server of System_Aaa_ServerGroup. If the key value(s) specified in
// the supplied System_Aaa_ServerGroup_Server already exist in the list, an error is
// returned.
func (t *System_Aaa_ServerGroup) AppendServer(v *System_Aaa_ServerGroup_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Aaa_ServerGroup_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetType retrieves the value of the leaf Type from the System_Aaa_ServerGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup) GetType() E_AaaTypes_AAA_SERVER_TYPE {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup.
func (*System_Aaa_ServerGroup) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server YANG schema element.
type System_Aaa_ServerGroup_Server struct {
	Address            *string                               `path:"config/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	ConnectionAborts   *uint64                               `path:"state/connection-aborts" module:"openconfig-system/openconfig-system"`
	ConnectionCloses   *uint64                               `path:"state/connection-closes" module:"openconfig-system/openconfig-system"`
	ConnectionFailures *uint64                               `path:"state/connection-failures" module:"openconfig-system/openconfig-system"`
	ConnectionOpens    *uint64                               `path:"state/connection-opens" module:"openconfig-system/openconfig-system"`
	ConnectionTimeouts *uint64                               `path:"state/connection-timeouts" module:"openconfig-system/openconfig-system"`
	ErrorsReceived     *uint64                               `path:"state/errors-received" module:"openconfig-system/openconfig-system"`
	MessagesReceived   *uint64                               `path:"state/messages-received" module:"openconfig-system/openconfig-system"`
	MessagesSent       *uint64                               `path:"state/messages-sent" module:"openconfig-system/openconfig-system"`
	Name               *string                               `path:"config/name" module:"openconfig-system/openconfig-system" shadow-path:"state/name" shadow-module:"openconfig-system/openconfig-system"`
	Radius             *System_Aaa_ServerGroup_Server_Radius `path:"radius" module:"openconfig-system"`
	Tacacs             *System_Aaa_ServerGroup_Server_Tacacs `path:"tacacs" module:"openconfig-system"`
	Timeout            *uint16                               `path:"config/timeout" module:"openconfig-system/openconfig-system" shadow-path:"state/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server) IsYANGGoStruct() {}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &System_Aaa_ServerGroup_Server_Radius{}
	return t.Radius
}

// GetOrCreateTacacs retrieves the value of the Tacacs field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server) GetOrCreateTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t.Tacacs != nil {
		return t.Tacacs
	}
	t.Tacacs = &System_Aaa_ServerGroup_Server_Tacacs{}
	return t.Tacacs
}

// GetRadius returns the value of the Radius struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetRadius() *System_Aaa_ServerGroup_Server_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacacs returns the value of the Tacacs struct pointer
// from System_Aaa_ServerGroup_Server. If the receiver or the field Tacacs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server) GetTacacs() *System_Aaa_ServerGroup_Server_Tacacs {
	if t != nil && t.Tacacs != nil {
		return t.Tacacs
	}
	return nil
}

// GetAddress retrieves the value of the leaf Address from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetConnectionAborts retrieves the value of the leaf ConnectionAborts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionAborts is set, it can
// safely use t.GetConnectionAborts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionAborts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionAborts() uint64 {
	if t == nil || t.ConnectionAborts == nil {
		return 0
	}
	return *t.ConnectionAborts
}

// GetConnectionCloses retrieves the value of the leaf ConnectionCloses from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionCloses is set, it can
// safely use t.GetConnectionCloses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionCloses == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionCloses() uint64 {
	if t == nil || t.ConnectionCloses == nil {
		return 0
	}
	return *t.ConnectionCloses
}

// GetConnectionFailures retrieves the value of the leaf ConnectionFailures from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionFailures is set, it can
// safely use t.GetConnectionFailures() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionFailures == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionFailures() uint64 {
	if t == nil || t.ConnectionFailures == nil {
		return 0
	}
	return *t.ConnectionFailures
}

// GetConnectionOpens retrieves the value of the leaf ConnectionOpens from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionOpens is set, it can
// safely use t.GetConnectionOpens() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionOpens == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionOpens() uint64 {
	if t == nil || t.ConnectionOpens == nil {
		return 0
	}
	return *t.ConnectionOpens
}

// GetConnectionTimeouts retrieves the value of the leaf ConnectionTimeouts from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeouts is set, it can
// safely use t.GetConnectionTimeouts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeouts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetConnectionTimeouts() uint64 {
	if t == nil || t.ConnectionTimeouts == nil {
		return 0
	}
	return *t.ConnectionTimeouts
}

// GetErrorsReceived retrieves the value of the leaf ErrorsReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorsReceived is set, it can
// safely use t.GetErrorsReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorsReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetErrorsReceived() uint64 {
	if t == nil || t.ErrorsReceived == nil {
		return 0
	}
	return *t.ErrorsReceived
}

// GetMessagesReceived retrieves the value of the leaf MessagesReceived from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesReceived is set, it can
// safely use t.GetMessagesReceived() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesReceived == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesReceived() uint64 {
	if t == nil || t.MessagesReceived == nil {
		return 0
	}
	return *t.MessagesReceived
}

// GetMessagesSent retrieves the value of the leaf MessagesSent from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessagesSent is set, it can
// safely use t.GetMessagesSent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessagesSent == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetMessagesSent() uint64 {
	if t == nil || t.MessagesSent == nil {
		return 0
	}
	return *t.MessagesSent
}

// GetName retrieves the value of the leaf Name from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTimeout retrieves the value of the leaf Timeout from the System_Aaa_ServerGroup_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// ΛListKeyMap returns the keys of the System_Aaa_ServerGroup_Server struct, which is a YANG list entry.
func (t *System_Aaa_ServerGroup_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server.
func (*System_Aaa_ServerGroup_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius YANG schema element.
type System_Aaa_ServerGroup_Server_Radius struct {
	AcctPort           *uint16                                        `path:"config/acct-port" module:"openconfig-system/openconfig-system" shadow-path:"state/acct-port" shadow-module:"openconfig-system/openconfig-system"`
	AuthPort           *uint16                                        `path:"config/auth-port" module:"openconfig-system/openconfig-system" shadow-path:"state/auth-port" shadow-module:"openconfig-system/openconfig-system"`
	Counters           *System_Aaa_ServerGroup_Server_Radius_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	RetransmitAttempts *uint8                                         `path:"config/retransmit-attempts" module:"openconfig-system/openconfig-system" shadow-path:"state/retransmit-attempts" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey          *string                                        `path:"config/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"state/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed    *string                                        `path:"config/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"state/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress      *string                                        `path:"config/source-address" module:"openconfig-system/openconfig-system" shadow-path:"state/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Aaa_ServerGroup_Server_Radius) GetOrCreateCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Aaa_ServerGroup_Server_Radius_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Aaa_ServerGroup_Server_Radius. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Aaa_ServerGroup_Server_Radius) GetCounters() *System_Aaa_ServerGroup_Server_Radius_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetAcctPort retrieves the value of the leaf AcctPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctPort is set, it can
// safely use t.GetAcctPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAcctPort() uint16 {
	if t == nil || t.AcctPort == nil {
		return 1813
	}
	return *t.AcctPort
}

// GetAuthPort retrieves the value of the leaf AuthPort from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthPort is set, it can
// safely use t.GetAuthPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthPort == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetAuthPort() uint16 {
	if t == nil || t.AuthPort == nil {
		return 1812
	}
	return *t.AuthPort
}

// GetRetransmitAttempts retrieves the value of the leaf RetransmitAttempts from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitAttempts is set, it can
// safely use t.GetRetransmitAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitAttempts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetRetransmitAttempts() uint8 {
	if t == nil || t.RetransmitAttempts == nil {
		return 0
	}
	return *t.RetransmitAttempts
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius.
func (*System_Aaa_ServerGroup_Server_Radius) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Radius_Counters represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/radius/state/counters YANG schema element.
type System_Aaa_ServerGroup_Server_Radius_Counters struct {
	AccessAccepts         *uint64 `path:"access-accepts" module:"openconfig-system"`
	AccessRejects         *uint64 `path:"access-rejects" module:"openconfig-system"`
	RetriedAccessRequests *uint64 `path:"retried-access-requests" module:"openconfig-system"`
	TimeoutAccessRequests *uint64 `path:"timeout-access-requests" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Radius_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) IsYANGGoStruct() {}

// GetAccessAccepts retrieves the value of the leaf AccessAccepts from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAccepts is set, it can
// safely use t.GetAccessAccepts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAccepts == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessAccepts() uint64 {
	if t == nil || t.AccessAccepts == nil {
		return 0
	}
	return *t.AccessAccepts
}

// GetAccessRejects retrieves the value of the leaf AccessRejects from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessRejects is set, it can
// safely use t.GetAccessRejects() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessRejects == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetAccessRejects() uint64 {
	if t == nil || t.AccessRejects == nil {
		return 0
	}
	return *t.AccessRejects
}

// GetRetriedAccessRequests retrieves the value of the leaf RetriedAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetriedAccessRequests is set, it can
// safely use t.GetRetriedAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetriedAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetRetriedAccessRequests() uint64 {
	if t == nil || t.RetriedAccessRequests == nil {
		return 0
	}
	return *t.RetriedAccessRequests
}

// GetTimeoutAccessRequests retrieves the value of the leaf TimeoutAccessRequests from the System_Aaa_ServerGroup_Server_Radius_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeoutAccessRequests is set, it can
// safely use t.GetTimeoutAccessRequests() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeoutAccessRequests == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) GetTimeoutAccessRequests() uint64 {
	if t == nil || t.TimeoutAccessRequests == nil {
		return 0
	}
	return *t.TimeoutAccessRequests
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Radius_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Radius_Counters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Radius_Counters.
func (*System_Aaa_ServerGroup_Server_Radius_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Aaa_ServerGroup_Server_Tacacs represents the /openconfig-system/system/aaa/server-groups/server-group/servers/server/tacacs YANG schema element.
type System_Aaa_ServerGroup_Server_Tacacs struct {
	Port            *uint16 `path:"config/port" module:"openconfig-system/openconfig-system" shadow-path:"state/port" shadow-module:"openconfig-system/openconfig-system"`
	SecretKey       *string `path:"config/secret-key" module:"openconfig-system/openconfig-system" shadow-path:"state/secret-key" shadow-module:"openconfig-system/openconfig-system"`
	SecretKeyHashed *string `path:"config/secret-key-hashed" module:"openconfig-system/openconfig-system" shadow-path:"state/secret-key-hashed" shadow-module:"openconfig-system/openconfig-system"`
	SourceAddress   *string `path:"config/source-address" module:"openconfig-system/openconfig-system" shadow-path:"state/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Aaa_ServerGroup_Server_Tacacs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Aaa_ServerGroup_Server_Tacacs) IsYANGGoStruct() {}

// GetPort retrieves the value of the leaf Port from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecretKey retrieves the value of the leaf SecretKey from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKey is set, it can
// safely use t.GetSecretKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKey == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKey() string {
	if t == nil || t.SecretKey == nil {
		return ""
	}
	return *t.SecretKey
}

// GetSecretKeyHashed retrieves the value of the leaf SecretKeyHashed from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecretKeyHashed is set, it can
// safely use t.GetSecretKeyHashed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecretKeyHashed == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSecretKeyHashed() string {
	if t == nil || t.SecretKeyHashed == nil {
		return ""
	}
	return *t.SecretKeyHashed
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Aaa_ServerGroup_Server_Tacacs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Aaa_ServerGroup_Server_Tacacs) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Aaa_ServerGroup_Server_Tacacs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Aaa_ServerGroup_Server_Tacacs) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Aaa_ServerGroup_Server_Tacacs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Aaa_ServerGroup_Server_Tacacs.
func (*System_Aaa_ServerGroup_Server_Tacacs) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Alarm represents the /openconfig-system/system/alarms/alarm YANG schema element.
type System_Alarm struct {
	Id          *string                                `path:"state/id|id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"id" shadow-module:"openconfig-system"`
	Resource    *string                                `path:"state/resource" module:"openconfig-system/openconfig-system"`
	Severity    E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY `path:"state/severity" module:"openconfig-system/openconfig-system"`
	Text        *string                                `path:"state/text" module:"openconfig-system/openconfig-system"`
	TimeCreated *uint64                                `path:"state/time-created" module:"openconfig-system/openconfig-system"`
	TypeId      System_Alarm_TypeId_Union              `path:"state/type-id" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Alarm) IsYANGGoStruct() {}

// GetId retrieves the value of the leaf Id from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetId() string {
	if t == nil || t.Id == nil {
		return ""
	}
	return *t.Id
}

// GetResource retrieves the value of the leaf Resource from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Resource is set, it can
// safely use t.GetResource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Resource == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetResource() string {
	if t == nil || t.Resource == nil {
		return ""
	}
	return *t.Resource
}

// GetSeverity retrieves the value of the leaf Severity from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetSeverity() E_AlarmTypes_OPENCONFIG_ALARM_SEVERITY {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// GetText retrieves the value of the leaf Text from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Text is set, it can
// safely use t.GetText() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Text == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetTimeCreated retrieves the value of the leaf TimeCreated from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeCreated is set, it can
// safely use t.GetTimeCreated() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeCreated == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTimeCreated() uint64 {
	if t == nil || t.TimeCreated == nil {
		return 0
	}
	return *t.TimeCreated
}

// GetTypeId retrieves the value of the leaf TypeId from the System_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TypeId is set, it can
// safely use t.GetTypeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TypeId == nil' before retrieving the leaf's value.
func (t *System_Alarm) GetTypeId() System_Alarm_TypeId_Union {
	if t == nil || t.TypeId == nil {
		return nil
	}
	return t.TypeId
}

// ΛListKeyMap returns the keys of the System_Alarm struct, which is a YANG list entry.
func (t *System_Alarm) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Alarm) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Alarm) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Alarm.
func (*System_Alarm) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Clock represents the /openconfig-system/system/clock YANG schema element.
type System_Clock struct {
	TimezoneName *string `path:"config/timezone-name" module:"openconfig-system/openconfig-system" shadow-path:"state/timezone-name" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Clock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Clock) IsYANGGoStruct() {}

// GetTimezoneName retrieves the value of the leaf TimezoneName from the System_Clock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimezoneName is set, it can
// safely use t.GetTimezoneName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimezoneName == nil' before retrieving the leaf's value.
func (t *System_Clock) GetTimezoneName() string {
	if t == nil || t.TimezoneName == nil {
		return ""
	}
	return *t.TimezoneName
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Clock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Clock) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Clock) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Clock.
func (*System_Clock) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu represents the /openconfig-system/system/cpus/cpu YANG schema element.
type System_Cpu struct {
	HardwareInterrupt *System_Cpu_HardwareInterrupt `path:"state/hardware-interrupt" module:"openconfig-system/openconfig-system"`
	Idle              *System_Cpu_Idle              `path:"state/idle" module:"openconfig-system/openconfig-system"`
	Index             System_Cpu_Index_Union        `path:"state/index|index" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"index" shadow-module:"openconfig-system"`
	Kernel            *System_Cpu_Kernel            `path:"state/kernel" module:"openconfig-system/openconfig-system"`
	Nice              *System_Cpu_Nice              `path:"state/nice" module:"openconfig-system/openconfig-system"`
	SoftwareInterrupt *System_Cpu_SoftwareInterrupt `path:"state/software-interrupt" module:"openconfig-system/openconfig-system"`
	Total             *System_Cpu_Total             `path:"state/total" module:"openconfig-system/openconfig-system"`
	User              *System_Cpu_User              `path:"state/user" module:"openconfig-system/openconfig-system"`
	Wait              *System_Cpu_Wait              `path:"state/wait" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu) IsYANGGoStruct() {}

// GetOrCreateHardwareInterrupt retrieves the value of the HardwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	t.HardwareInterrupt = &System_Cpu_HardwareInterrupt{}
	return t.HardwareInterrupt
}

// GetOrCreateIdle retrieves the value of the Idle field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateIdle() *System_Cpu_Idle {
	if t.Idle != nil {
		return t.Idle
	}
	t.Idle = &System_Cpu_Idle{}
	return t.Idle
}

// GetOrCreateKernel retrieves the value of the Kernel field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateKernel() *System_Cpu_Kernel {
	if t.Kernel != nil {
		return t.Kernel
	}
	t.Kernel = &System_Cpu_Kernel{}
	return t.Kernel
}

// GetOrCreateNice retrieves the value of the Nice field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateNice() *System_Cpu_Nice {
	if t.Nice != nil {
		return t.Nice
	}
	t.Nice = &System_Cpu_Nice{}
	return t.Nice
}

// GetOrCreateSoftwareInterrupt retrieves the value of the SoftwareInterrupt field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	t.SoftwareInterrupt = &System_Cpu_SoftwareInterrupt{}
	return t.SoftwareInterrupt
}

// GetOrCreateTotal retrieves the value of the Total field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateTotal() *System_Cpu_Total {
	if t.Total != nil {
		return t.Total
	}
	t.Total = &System_Cpu_Total{}
	return t.Total
}

// GetOrCreateUser retrieves the value of the User field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateUser() *System_Cpu_User {
	if t.User != nil {
		return t.User
	}
	t.User = &System_Cpu_User{}
	return t.User
}

// GetOrCreateWait retrieves the value of the Wait field
// or returns the existing field if it already exists.
func (t *System_Cpu) GetOrCreateWait() *System_Cpu_Wait {
	if t.Wait != nil {
		return t.Wait
	}
	t.Wait = &System_Cpu_Wait{}
	return t.Wait
}

// GetHardwareInterrupt returns the value of the HardwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field HardwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetHardwareInterrupt() *System_Cpu_HardwareInterrupt {
	if t != nil && t.HardwareInterrupt != nil {
		return t.HardwareInterrupt
	}
	return nil
}

// GetIdle returns the value of the Idle struct pointer
// from System_Cpu. If the receiver or the field Idle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetIdle() *System_Cpu_Idle {
	if t != nil && t.Idle != nil {
		return t.Idle
	}
	return nil
}

// GetKernel returns the value of the Kernel struct pointer
// from System_Cpu. If the receiver or the field Kernel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetKernel() *System_Cpu_Kernel {
	if t != nil && t.Kernel != nil {
		return t.Kernel
	}
	return nil
}

// GetNice returns the value of the Nice struct pointer
// from System_Cpu. If the receiver or the field Nice is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetNice() *System_Cpu_Nice {
	if t != nil && t.Nice != nil {
		return t.Nice
	}
	return nil
}

// GetSoftwareInterrupt returns the value of the SoftwareInterrupt struct pointer
// from System_Cpu. If the receiver or the field SoftwareInterrupt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetSoftwareInterrupt() *System_Cpu_SoftwareInterrupt {
	if t != nil && t.SoftwareInterrupt != nil {
		return t.SoftwareInterrupt
	}
	return nil
}

// GetTotal returns the value of the Total struct pointer
// from System_Cpu. If the receiver or the field Total is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetTotal() *System_Cpu_Total {
	if t != nil && t.Total != nil {
		return t.Total
	}
	return nil
}

// GetUser returns the value of the User struct pointer
// from System_Cpu. If the receiver or the field User is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetUser() *System_Cpu_User {
	if t != nil && t.User != nil {
		return t.User
	}
	return nil
}

// GetWait returns the value of the Wait struct pointer
// from System_Cpu. If the receiver or the field Wait is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Cpu) GetWait() *System_Cpu_Wait {
	if t != nil && t.Wait != nil {
		return t.Wait
	}
	return nil
}

// GetIndex retrieves the value of the leaf Index from the System_Cpu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *System_Cpu) GetIndex() System_Cpu_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// ΛListKeyMap returns the keys of the System_Cpu struct, which is a YANG list entry.
func (t *System_Cpu) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu.
func (*System_Cpu) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_HardwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/hardware-interrupt YANG schema element.
type System_Cpu_HardwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_HardwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_HardwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_HardwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_HardwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_HardwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_HardwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_HardwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_HardwareInterrupt.
func (*System_Cpu_HardwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Idle represents the /openconfig-system/system/cpus/cpu/state/idle YANG schema element.
type System_Cpu_Idle struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Idle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Idle) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Idle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Idle) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Idle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Idle) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Idle) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Idle.
func (*System_Cpu_Idle) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Kernel represents the /openconfig-system/system/cpus/cpu/state/kernel YANG schema element.
type System_Cpu_Kernel struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Kernel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Kernel) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Kernel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Kernel) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Kernel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Kernel) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Kernel) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Kernel.
func (*System_Cpu_Kernel) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Nice represents the /openconfig-system/system/cpus/cpu/state/nice YANG schema element.
type System_Cpu_Nice struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Nice implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Nice) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Nice
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Nice) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Nice"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Nice) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Nice) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Nice.
func (*System_Cpu_Nice) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_SoftwareInterrupt represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterrupt struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_SoftwareInterrupt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_SoftwareInterrupt) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_SoftwareInterrupt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_SoftwareInterrupt) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_SoftwareInterrupt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_SoftwareInterrupt) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_SoftwareInterrupt) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_SoftwareInterrupt.
func (*System_Cpu_SoftwareInterrupt) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Total represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_Total struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Total implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Total) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Total
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Total) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Total"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Total) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Total) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Total.
func (*System_Cpu_Total) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_User represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_User struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_User) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_User) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_User) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_User) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_User.
func (*System_Cpu_User) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Cpu_Wait represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_Wait struct {
	Avg      *uint8  `path:"avg" module:"openconfig-system"`
	Instant  *uint8  `path:"instant" module:"openconfig-system"`
	Interval *uint64 `path:"interval" module:"openconfig-system"`
	Max      *uint8  `path:"max" module:"openconfig-system"`
	MaxTime  *uint64 `path:"max-time" module:"openconfig-system"`
	Min      *uint8  `path:"min" module:"openconfig-system"`
	MinTime  *uint64 `path:"min-time" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Cpu_Wait implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Cpu_Wait) IsYANGGoStruct() {}

// GetAvg retrieves the value of the leaf Avg from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Avg is set, it can
// safely use t.GetAvg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Avg == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetAvg() uint8 {
	if t == nil || t.Avg == nil {
		return 0
	}
	return *t.Avg
}

// GetInstant retrieves the value of the leaf Instant from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Instant is set, it can
// safely use t.GetInstant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Instant == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInstant() uint8 {
	if t == nil || t.Instant == nil {
		return 0
	}
	return *t.Instant
}

// GetInterval retrieves the value of the leaf Interval from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetInterval() uint64 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMax retrieves the value of the leaf Max from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMax() uint8 {
	if t == nil || t.Max == nil {
		return 0
	}
	return *t.Max
}

// GetMaxTime retrieves the value of the leaf MaxTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMaxTime() uint64 {
	if t == nil || t.MaxTime == nil {
		return 0
	}
	return *t.MaxTime
}

// GetMin retrieves the value of the leaf Min from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMin() uint8 {
	if t == nil || t.Min == nil {
		return 0
	}
	return *t.Min
}

// GetMinTime retrieves the value of the leaf MinTime from the System_Cpu_Wait
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinTime is set, it can
// safely use t.GetMinTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinTime == nil' before retrieving the leaf's value.
func (t *System_Cpu_Wait) GetMinTime() uint64 {
	if t == nil || t.MinTime == nil {
		return 0
	}
	return *t.MinTime
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Cpu_Wait"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Cpu_Wait) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Cpu_Wait) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Cpu_Wait.
func (*System_Cpu_Wait) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns represents the /openconfig-system/system/dns YANG schema element.
type System_Dns struct {
	HostEntry map[string]*System_Dns_HostEntry `path:"host-entries/host-entry" module:"openconfig-system/openconfig-system"`
	Search    []string                         `path:"config/search" module:"openconfig-system/openconfig-system" shadow-path:"state/search" shadow-module:"openconfig-system/openconfig-system"`
	Server    map[string]*System_Dns_Server    `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns) IsYANGGoStruct() {}

// NewHostEntry creates a new entry in the HostEntry list of the
// System_Dns struct. The keys of the list are populated from the input
// arguments.
func (t *System_Dns) NewHostEntry(Hostname string) (*System_Dns_HostEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	key := Hostname

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostEntry", key)
	}

	t.HostEntry[key] = &System_Dns_HostEntry{
		Hostname: &Hostname,
	}

	return t.HostEntry[key], nil
}

// RenameHostEntry renames an entry in the list HostEntry within
// the System_Dns struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Dns) RenameHostEntry(oldK, newK string) error {
	if _, ok := t.HostEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in HostEntry", newK)
	}

	e, ok := t.HostEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostEntry", oldK)
	}
	e.Hostname = &newK

	t.HostEntry[newK] = e
	delete(t.HostEntry, oldK)
	return nil
}

// GetOrCreateHostEntry retrieves the value with the specified keys from
// the receiver System_Dns. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Dns) GetOrCreateHostEntry(Hostname string) *System_Dns_HostEntry {

	key := Hostname

	if v, ok := t.HostEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostEntry(Hostname)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostEntry got unexpected error: %v", err))
	}
	return v
}

// GetHostEntry retrieves the value with the specified key from
// the HostEntry map field of System_Dns. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Dns) GetHostEntry(Hostname string) *System_Dns_HostEntry {

	if t == nil {
		return nil
	}

	key := Hostname

	if lm, ok := t.HostEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostEntry deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the function
// is a no-op.
func (t *System_Dns) DeleteHostEntry(Hostname string) {
	key := Hostname

	delete(t.HostEntry, key)
}

// AppendHostEntry appends the supplied System_Dns_HostEntry struct to the
// list HostEntry of System_Dns. If the key value(s) specified in
// the supplied System_Dns_HostEntry already exist in the list, an error is
// returned.
func (t *System_Dns) AppendHostEntry(v *System_Dns_HostEntry) error {
	if v.Hostname == nil {
		return fmt.Errorf("invalid nil key received for Hostname")
	}

	key := *v.Hostname

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostEntry == nil {
		t.HostEntry = make(map[string]*System_Dns_HostEntry)
	}

	if _, ok := t.HostEntry[key]; ok {
		return fmt.Errorf("duplicate key for list HostEntry %v", key)
	}

	t.HostEntry[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// System_Dns struct. The keys of the list are populated from the input
// arguments.
func (t *System_Dns) NewServer(Address string) (*System_Dns_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Dns_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Dns_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Dns struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Dns) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Dns. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Dns) GetOrCreateServer(Address string) *System_Dns_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Dns. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Dns) GetServer(Address string) *System_Dns_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Dns. If there is no such element, the function
// is a no-op.
func (t *System_Dns) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Dns_Server struct to the
// list Server of System_Dns. If the key value(s) specified in
// the supplied System_Dns_Server already exist in the list, an error is
// returned.
func (t *System_Dns) AppendServer(v *System_Dns_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Dns_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetSearch retrieves the value of the leaf Search from the System_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Search is set, it can
// safely use t.GetSearch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Search == nil' before retrieving the leaf's value.
func (t *System_Dns) GetSearch() []string {
	if t == nil || t.Search == nil {
		return nil
	}
	return t.Search
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns.
func (*System_Dns) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_HostEntry represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntry struct {
	Alias       []string `path:"config/alias" module:"openconfig-system/openconfig-system" shadow-path:"state/alias" shadow-module:"openconfig-system/openconfig-system"`
	Hostname    *string  `path:"config/hostname|hostname" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/hostname|hostname" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Ipv4Address []string `path:"config/ipv4-address" module:"openconfig-system/openconfig-system" shadow-path:"state/ipv4-address" shadow-module:"openconfig-system/openconfig-system"`
	Ipv6Address []string `path:"config/ipv6-address" module:"openconfig-system/openconfig-system" shadow-path:"state/ipv6-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_HostEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_HostEntry) IsYANGGoStruct() {}

// GetAlias retrieves the value of the leaf Alias from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alias is set, it can
// safely use t.GetAlias() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alias == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetAlias() []string {
	if t == nil || t.Alias == nil {
		return nil
	}
	return t.Alias
}

// GetHostname retrieves the value of the leaf Hostname from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hostname is set, it can
// safely use t.GetHostname() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hostname == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetHostname() string {
	if t == nil || t.Hostname == nil {
		return ""
	}
	return *t.Hostname
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the System_Dns_HostEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *System_Dns_HostEntry) GetIpv6Address() []string {
	if t == nil || t.Ipv6Address == nil {
		return nil
	}
	return t.Ipv6Address
}

// ΛListKeyMap returns the keys of the System_Dns_HostEntry struct, which is a YANG list entry.
func (t *System_Dns_HostEntry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Hostname == nil {
		return nil, fmt.Errorf("nil value for key Hostname")
	}

	return map[string]interface{}{
		"hostname": *t.Hostname,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_HostEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_HostEntry) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_HostEntry) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_HostEntry.
func (*System_Dns_HostEntry) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Dns_Server represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_Server struct {
	Address *string `path:"config/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Port    *uint16 `path:"config/port" module:"openconfig-system/openconfig-system" shadow-path:"state/port" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Dns_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Dns_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the System_Dns_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Dns_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 53
	}
	return *t.Port
}

// ΛListKeyMap returns the keys of the System_Dns_Server struct, which is a YANG list entry.
func (t *System_Dns_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Dns_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Dns_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Dns_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Dns_Server.
func (*System_Dns_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_GrpcServer represents the /openconfig-system/system/grpc-servers/grpc-server YANG schema element.
type System_GrpcServer struct {
	CertificateId          *string                                   `path:"config/certificate-id" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/certificate-id" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Enable                 *bool                                     `path:"config/enable" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/enable" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	ListenAddresses        []System_GrpcServer_ListenAddresses_Union `path:"config/listen-addresses" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/listen-addresses" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	MetadataAuthentication *bool                                     `path:"config/metadata-authentication" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/metadata-authentication" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Name                   *string                                   `path:"config/name|name" module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc" shadow-path:"state/name|name" shadow-module:"openconfig-system-grpc/openconfig-system-grpc|openconfig-system-grpc"`
	NetworkInstance        *string                                   `path:"config/network-instance" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/network-instance" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Port                   *uint16                                   `path:"config/port" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/port" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	Services               []E_SystemGrpc_GRPC_SERVICE               `path:"config/services" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/services" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
	TransportSecurity      *bool                                     `path:"config/transport-security" module:"openconfig-system-grpc/openconfig-system-grpc" shadow-path:"state/transport-security" shadow-module:"openconfig-system-grpc/openconfig-system-grpc"`
}

// IsYANGGoStruct ensures that System_GrpcServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_GrpcServer) IsYANGGoStruct() {}

// GetCertificateId retrieves the value of the leaf CertificateId from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateId is set, it can
// safely use t.GetCertificateId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateId == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetCertificateId() string {
	if t == nil || t.CertificateId == nil {
		return ""
	}
	return *t.CertificateId
}

// GetEnable retrieves the value of the leaf Enable from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetListenAddresses retrieves the value of the leaf ListenAddresses from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListenAddresses is set, it can
// safely use t.GetListenAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListenAddresses == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetListenAddresses() []System_GrpcServer_ListenAddresses_Union {
	if t == nil || t.ListenAddresses == nil {
		return nil
	}
	return t.ListenAddresses
}

// GetMetadataAuthentication retrieves the value of the leaf MetadataAuthentication from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MetadataAuthentication is set, it can
// safely use t.GetMetadataAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MetadataAuthentication == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetMetadataAuthentication() bool {
	if t == nil || t.MetadataAuthentication == nil {
		return false
	}
	return *t.MetadataAuthentication
}

// GetName retrieves the value of the leaf Name from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetName() string {
	if t == nil || t.Name == nil {
		return "DEFAULT"
	}
	return *t.Name
}

// GetNetworkInstance retrieves the value of the leaf NetworkInstance from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkInstance is set, it can
// safely use t.GetNetworkInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkInstance == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetNetworkInstance() string {
	if t == nil || t.NetworkInstance == nil {
		return ""
	}
	return *t.NetworkInstance
}

// GetPort retrieves the value of the leaf Port from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// GetServices retrieves the value of the leaf Services from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Services is set, it can
// safely use t.GetServices() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Services == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetServices() []E_SystemGrpc_GRPC_SERVICE {
	if t == nil || t.Services == nil {
		return nil
	}
	return t.Services
}

// GetTransportSecurity retrieves the value of the leaf TransportSecurity from the System_GrpcServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransportSecurity is set, it can
// safely use t.GetTransportSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransportSecurity == nil' before retrieving the leaf's value.
func (t *System_GrpcServer) GetTransportSecurity() bool {
	if t == nil || t.TransportSecurity == nil {
		return true
	}
	return *t.TransportSecurity
}

// ΛListKeyMap returns the keys of the System_GrpcServer struct, which is a YANG list entry.
func (t *System_GrpcServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_GrpcServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_GrpcServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_GrpcServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_GrpcServer.
func (*System_GrpcServer) ΛBelongingModule() string {
	return "openconfig-system-grpc"
}

// System_License represents the /openconfig-system/system/license YANG schema element.
type System_License struct {
	License map[string]*System_License_License `path:"licenses/license" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License) IsYANGGoStruct() {}

// NewLicense creates a new entry in the License list of the
// System_License struct. The keys of the list are populated from the input
// arguments.
func (t *System_License) NewLicense(LicenseId string) (*System_License_License, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	key := LicenseId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.License[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list License", key)
	}

	t.License[key] = &System_License_License{
		LicenseId: &LicenseId,
	}

	return t.License[key], nil
}

// RenameLicense renames an entry in the list License within
// the System_License struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_License) RenameLicense(oldK, newK string) error {
	if _, ok := t.License[newK]; ok {
		return fmt.Errorf("key %v already exists in License", newK)
	}

	e, ok := t.License[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in License", oldK)
	}
	e.LicenseId = &newK

	t.License[newK] = e
	delete(t.License, oldK)
	return nil
}

// GetOrCreateLicense retrieves the value with the specified keys from
// the receiver System_License. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_License) GetOrCreateLicense(LicenseId string) *System_License_License {

	key := LicenseId

	if v, ok := t.License[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLicense(LicenseId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLicense got unexpected error: %v", err))
	}
	return v
}

// GetLicense retrieves the value with the specified key from
// the License map field of System_License. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_License) GetLicense(LicenseId string) *System_License_License {

	if t == nil {
		return nil
	}

	key := LicenseId

	if lm, ok := t.License[key]; ok {
		return lm
	}
	return nil
}

// DeleteLicense deletes the value with the specified keys from
// the receiver System_License. If there is no such element, the function
// is a no-op.
func (t *System_License) DeleteLicense(LicenseId string) {
	key := LicenseId

	delete(t.License, key)
}

// AppendLicense appends the supplied System_License_License struct to the
// list License of System_License. If the key value(s) specified in
// the supplied System_License_License already exist in the list, an error is
// returned.
func (t *System_License) AppendLicense(v *System_License_License) error {
	if v.LicenseId == nil {
		return fmt.Errorf("invalid nil key received for LicenseId")
	}

	key := *v.LicenseId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.License == nil {
		t.License = make(map[string]*System_License_License)
	}

	if _, ok := t.License[key]; ok {
		return fmt.Errorf("duplicate key for list License %v", key)
	}

	t.License[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License.
func (*System_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_License_License represents the /openconfig-system/system/license/licenses/license YANG schema element.
type System_License_License struct {
	Active         *bool                                    `path:"config/active" module:"openconfig-system/openconfig-system" shadow-path:"state/active" shadow-module:"openconfig-system/openconfig-system"`
	Description    *string                                  `path:"state/description" module:"openconfig-system/openconfig-system"`
	ExpirationDate *uint64                                  `path:"state/expiration-date" module:"openconfig-system/openconfig-system"`
	Expired        *bool                                    `path:"state/expired" module:"openconfig-system/openconfig-system"`
	InUse          *bool                                    `path:"state/in-use" module:"openconfig-system/openconfig-system"`
	IssueDate      *uint64                                  `path:"state/issue-date" module:"openconfig-system/openconfig-system"`
	LicenseData    System_License_License_LicenseData_Union `path:"config/license-data" module:"openconfig-system/openconfig-system" shadow-path:"state/license-data" shadow-module:"openconfig-system/openconfig-system"`
	LicenseId      *string                                  `path:"config/license-id|license-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/license-id|license-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Valid          *bool                                    `path:"state/valid" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_License_License implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_License_License) IsYANGGoStruct() {}

// GetActive retrieves the value of the leaf Active from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Active is set, it can
// safely use t.GetActive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Active == nil' before retrieving the leaf's value.
func (t *System_License_License) GetActive() bool {
	if t == nil || t.Active == nil {
		return false
	}
	return *t.Active
}

// GetDescription retrieves the value of the leaf Description from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *System_License_License) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExpirationDate retrieves the value of the leaf ExpirationDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpirationDate is set, it can
// safely use t.GetExpirationDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpirationDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpirationDate() uint64 {
	if t == nil || t.ExpirationDate == nil {
		return 0
	}
	return *t.ExpirationDate
}

// GetExpired retrieves the value of the leaf Expired from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Expired is set, it can
// safely use t.GetExpired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Expired == nil' before retrieving the leaf's value.
func (t *System_License_License) GetExpired() bool {
	if t == nil || t.Expired == nil {
		return false
	}
	return *t.Expired
}

// GetInUse retrieves the value of the leaf InUse from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InUse is set, it can
// safely use t.GetInUse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InUse == nil' before retrieving the leaf's value.
func (t *System_License_License) GetInUse() bool {
	if t == nil || t.InUse == nil {
		return false
	}
	return *t.InUse
}

// GetIssueDate retrieves the value of the leaf IssueDate from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IssueDate is set, it can
// safely use t.GetIssueDate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IssueDate == nil' before retrieving the leaf's value.
func (t *System_License_License) GetIssueDate() uint64 {
	if t == nil || t.IssueDate == nil {
		return 0
	}
	return *t.IssueDate
}

// GetLicenseData retrieves the value of the leaf LicenseData from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseData is set, it can
// safely use t.GetLicenseData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseData == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseData() System_License_License_LicenseData_Union {
	if t == nil || t.LicenseData == nil {
		return nil
	}
	return t.LicenseData
}

// GetLicenseId retrieves the value of the leaf LicenseId from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LicenseId is set, it can
// safely use t.GetLicenseId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LicenseId == nil' before retrieving the leaf's value.
func (t *System_License_License) GetLicenseId() string {
	if t == nil || t.LicenseId == nil {
		return ""
	}
	return *t.LicenseId
}

// GetValid retrieves the value of the leaf Valid from the System_License_License
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Valid is set, it can
// safely use t.GetValid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Valid == nil' before retrieving the leaf's value.
func (t *System_License_License) GetValid() bool {
	if t == nil || t.Valid == nil {
		return false
	}
	return *t.Valid
}

// ΛListKeyMap returns the keys of the System_License_License struct, which is a YANG list entry.
func (t *System_License_License) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LicenseId == nil {
		return nil, fmt.Errorf("nil value for key LicenseId")
	}

	return map[string]interface{}{
		"license-id": *t.LicenseId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_License_License"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_License_License) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_License_License) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_License_License.
func (*System_License_License) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging represents the /openconfig-system/system/logging YANG schema element.
type System_Logging struct {
	Console      *System_Logging_Console                 `path:"console" module:"openconfig-system"`
	RemoteServer map[string]*System_Logging_RemoteServer `path:"remote-servers/remote-server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging) IsYANGGoStruct() {}

// NewRemoteServer creates a new entry in the RemoteServer list of the
// System_Logging struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging) NewRemoteServer(Host string) (*System_Logging_RemoteServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	key := Host

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RemoteServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RemoteServer", key)
	}

	t.RemoteServer[key] = &System_Logging_RemoteServer{
		Host: &Host,
	}

	return t.RemoteServer[key], nil
}

// RenameRemoteServer renames an entry in the list RemoteServer within
// the System_Logging struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging) RenameRemoteServer(oldK, newK string) error {
	if _, ok := t.RemoteServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RemoteServer", newK)
	}

	e, ok := t.RemoteServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RemoteServer", oldK)
	}
	e.Host = &newK

	t.RemoteServer[newK] = e
	delete(t.RemoteServer, oldK)
	return nil
}

// GetOrCreateRemoteServer retrieves the value with the specified keys from
// the receiver System_Logging. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging) GetOrCreateRemoteServer(Host string) *System_Logging_RemoteServer {

	key := Host

	if v, ok := t.RemoteServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRemoteServer(Host)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRemoteServer got unexpected error: %v", err))
	}
	return v
}

// GetRemoteServer retrieves the value with the specified key from
// the RemoteServer map field of System_Logging. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging) GetRemoteServer(Host string) *System_Logging_RemoteServer {

	if t == nil {
		return nil
	}

	key := Host

	if lm, ok := t.RemoteServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteRemoteServer deletes the value with the specified keys from
// the receiver System_Logging. If there is no such element, the function
// is a no-op.
func (t *System_Logging) DeleteRemoteServer(Host string) {
	key := Host

	delete(t.RemoteServer, key)
}

// AppendRemoteServer appends the supplied System_Logging_RemoteServer struct to the
// list RemoteServer of System_Logging. If the key value(s) specified in
// the supplied System_Logging_RemoteServer already exist in the list, an error is
// returned.
func (t *System_Logging) AppendRemoteServer(v *System_Logging_RemoteServer) error {
	if v.Host == nil {
		return fmt.Errorf("invalid nil key received for Host")
	}

	key := *v.Host

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RemoteServer == nil {
		t.RemoteServer = make(map[string]*System_Logging_RemoteServer)
	}

	if _, ok := t.RemoteServer[key]; ok {
		return fmt.Errorf("duplicate key for list RemoteServer %v", key)
	}

	t.RemoteServer[key] = v
	return nil
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *System_Logging) GetOrCreateConsole() *System_Logging_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &System_Logging_Console{}
	return t.Console
}

// GetConsole returns the value of the Console struct pointer
// from System_Logging. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Logging) GetConsole() *System_Logging_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging.
func (*System_Logging) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console represents the /openconfig-system/system/logging/console YANG schema element.
type System_Logging_Console struct {
	Selector map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console) IsYANGGoStruct() {}

// System_Logging_Console_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/console.
type System_Logging_Console_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_Console struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_Console) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_Console_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_Console_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_Console struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_Console) RenameSelector(oldK, newK System_Logging_Console_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_Console. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_Console) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_Console. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_Console) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_Console_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_Console. If there is no such element, the function
// is a no-op.
func (t *System_Logging_Console) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_Console_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_Console_Selector struct to the
// list Selector of System_Logging_Console. If the key value(s) specified in
// the supplied System_Logging_Console_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_Console) AppendSelector(v *System_Logging_Console_Selector) error {
	key := System_Logging_Console_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_Console_Selector_Key]*System_Logging_Console_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console.
func (*System_Logging_Console) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_Console_Selector represents the /openconfig-system/system/logging/console/selectors/selector YANG schema element.
type System_Logging_Console_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"config/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"config/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_Console_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_Console_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_Console_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_Console_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// ΛListKeyMap returns the keys of the System_Logging_Console_Selector struct, which is a YANG list entry.
func (t *System_Logging_Console_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_Console_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_Console_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_Console_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_Console_Selector.
func (*System_Logging_Console_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer represents the /openconfig-system/system/logging/remote-servers/remote-server YANG schema element.
type System_Logging_RemoteServer struct {
	Host          *string                                                                            `path:"config/host|host" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/host|host" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	RemotePort    *uint16                                                                            `path:"config/remote-port" module:"openconfig-system/openconfig-system" shadow-path:"state/remote-port" shadow-module:"openconfig-system/openconfig-system"`
	Selector      map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector `path:"selectors/selector" module:"openconfig-system/openconfig-system"`
	SourceAddress *string                                                                            `path:"config/source-address" module:"openconfig-system/openconfig-system" shadow-path:"state/source-address" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer) IsYANGGoStruct() {}

// System_Logging_RemoteServer_Selector_Key represents the key for list Selector of element /openconfig-system/system/logging/remote-servers/remote-server.
type System_Logging_RemoteServer_Selector_Key struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"facility"`
	Severity E_SystemLogging_SyslogSeverity  `path:"severity"`
}

// NewSelector creates a new entry in the Selector list of the
// System_Logging_RemoteServer struct. The keys of the list are populated from the input
// arguments.
func (t *System_Logging_RemoteServer) NewSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) (*System_Logging_RemoteServer_Selector, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Selector[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Selector", key)
	}

	t.Selector[key] = &System_Logging_RemoteServer_Selector{
		Facility: Facility,
		Severity: Severity,
	}

	return t.Selector[key], nil
}

// RenameSelector renames an entry in the list Selector within
// the System_Logging_RemoteServer struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Logging_RemoteServer) RenameSelector(oldK, newK System_Logging_RemoteServer_Selector_Key) error {
	if _, ok := t.Selector[newK]; ok {
		return fmt.Errorf("key %v already exists in Selector", newK)
	}

	e, ok := t.Selector[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Selector", oldK)
	}
	e.Facility = newK.Facility
	e.Severity = newK.Severity

	t.Selector[newK] = e
	delete(t.Selector, oldK)
	return nil
}

// GetOrCreateSelector retrieves the value with the specified keys from
// the receiver System_Logging_RemoteServer. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Logging_RemoteServer) GetOrCreateSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if v, ok := t.Selector[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSelector(Facility, Severity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSelector got unexpected error: %v", err))
	}
	return v
}

// GetSelector retrieves the value with the specified key from
// the Selector map field of System_Logging_RemoteServer. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Logging_RemoteServer) GetSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) *System_Logging_RemoteServer_Selector {

	if t == nil {
		return nil
	}

	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	if lm, ok := t.Selector[key]; ok {
		return lm
	}
	return nil
}

// DeleteSelector deletes the value with the specified keys from
// the receiver System_Logging_RemoteServer. If there is no such element, the function
// is a no-op.
func (t *System_Logging_RemoteServer) DeleteSelector(Facility E_SystemLogging_SYSLOG_FACILITY, Severity E_SystemLogging_SyslogSeverity) {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: Facility,
		Severity: Severity,
	}

	delete(t.Selector, key)
}

// AppendSelector appends the supplied System_Logging_RemoteServer_Selector struct to the
// list Selector of System_Logging_RemoteServer. If the key value(s) specified in
// the supplied System_Logging_RemoteServer_Selector already exist in the list, an error is
// returned.
func (t *System_Logging_RemoteServer) AppendSelector(v *System_Logging_RemoteServer_Selector) error {
	key := System_Logging_RemoteServer_Selector_Key{
		Facility: v.Facility,
		Severity: v.Severity,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Selector == nil {
		t.Selector = make(map[System_Logging_RemoteServer_Selector_Key]*System_Logging_RemoteServer_Selector)
	}

	if _, ok := t.Selector[key]; ok {
		return fmt.Errorf("duplicate key for list Selector %v", key)
	}

	t.Selector[key] = v
	return nil
}

// GetHost retrieves the value of the leaf Host from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Host is set, it can
// safely use t.GetHost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Host == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetHost() string {
	if t == nil || t.Host == nil {
		return ""
	}
	return *t.Host
}

// GetRemotePort retrieves the value of the leaf RemotePort from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemotePort is set, it can
// safely use t.GetRemotePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemotePort == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetRemotePort() uint16 {
	if t == nil || t.RemotePort == nil {
		return 514
	}
	return *t.RemotePort
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the System_Logging_RemoteServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Host == nil {
		return nil, fmt.Errorf("nil value for key Host")
	}

	return map[string]interface{}{
		"host": *t.Host,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer.
func (*System_Logging_RemoteServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Logging_RemoteServer_Selector represents the /openconfig-system/system/logging/remote-servers/remote-server/selectors/selector YANG schema element.
type System_Logging_RemoteServer_Selector struct {
	Facility E_SystemLogging_SYSLOG_FACILITY `path:"config/facility|facility" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/facility|facility" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	Severity E_SystemLogging_SyslogSeverity  `path:"config/severity|severity" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/severity|severity" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Logging_RemoteServer_Selector implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Logging_RemoteServer_Selector) IsYANGGoStruct() {}

// GetFacility retrieves the value of the leaf Facility from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Facility is set, it can
// safely use t.GetFacility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Facility == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetFacility() E_SystemLogging_SYSLOG_FACILITY {
	if t == nil || t.Facility == 0 {
		return 0
	}
	return t.Facility
}

// GetSeverity retrieves the value of the leaf Severity from the System_Logging_RemoteServer_Selector
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Logging_RemoteServer_Selector) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// ΛListKeyMap returns the keys of the System_Logging_RemoteServer_Selector struct, which is a YANG list entry.
func (t *System_Logging_RemoteServer_Selector) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"facility": t.Facility,
		"severity": t.Severity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Logging_RemoteServer_Selector"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Logging_RemoteServer_Selector) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Logging_RemoteServer_Selector) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Logging_RemoteServer_Selector.
func (*System_Logging_RemoteServer_Selector) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory represents the /openconfig-system/system/memory YANG schema element.
type System_Memory struct {
	Counters *System_Memory_Counters `path:"state/counters" module:"openconfig-system/openconfig-system"`
	Free     *uint64                 `path:"state/free" module:"openconfig-system/openconfig-system"`
	Physical *uint64                 `path:"state/physical" module:"openconfig-system/openconfig-system"`
	Reserved *uint64                 `path:"state/reserved" module:"openconfig-system/openconfig-system"`
	Used     *uint64                 `path:"state/used" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory) IsYANGGoStruct() {}

// GetOrCreateCounters retrieves the value of the Counters field
// or returns the existing field if it already exists.
func (t *System_Memory) GetOrCreateCounters() *System_Memory_Counters {
	if t.Counters != nil {
		return t.Counters
	}
	t.Counters = &System_Memory_Counters{}
	return t.Counters
}

// GetCounters returns the value of the Counters struct pointer
// from System_Memory. If the receiver or the field Counters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Memory) GetCounters() *System_Memory_Counters {
	if t != nil && t.Counters != nil {
		return t.Counters
	}
	return nil
}

// GetFree retrieves the value of the leaf Free from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Free is set, it can
// safely use t.GetFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Free == nil' before retrieving the leaf's value.
func (t *System_Memory) GetFree() uint64 {
	if t == nil || t.Free == nil {
		return 0
	}
	return *t.Free
}

// GetPhysical retrieves the value of the leaf Physical from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Physical is set, it can
// safely use t.GetPhysical() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Physical == nil' before retrieving the leaf's value.
func (t *System_Memory) GetPhysical() uint64 {
	if t == nil || t.Physical == nil {
		return 0
	}
	return *t.Physical
}

// GetReserved retrieves the value of the leaf Reserved from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *System_Memory) GetReserved() uint64 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetUsed retrieves the value of the leaf Used from the System_Memory
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Used is set, it can
// safely use t.GetUsed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Used == nil' before retrieving the leaf's value.
func (t *System_Memory) GetUsed() uint64 {
	if t == nil || t.Used == nil {
		return 0
	}
	return *t.Used
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory.
func (*System_Memory) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Memory_Counters represents the /openconfig-system/system/memory/state/counters YANG schema element.
type System_Memory_Counters struct {
	CorrectableEccErrors   *uint64 `path:"correctable-ecc-errors" module:"openconfig-system"`
	TotalEccErrors         *uint64 `path:"total-ecc-errors" module:"openconfig-system"`
	UncorrectableEccErrors *uint64 `path:"uncorrectable-ecc-errors" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Memory_Counters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Memory_Counters) IsYANGGoStruct() {}

// GetCorrectableEccErrors retrieves the value of the leaf CorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CorrectableEccErrors is set, it can
// safely use t.GetCorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetCorrectableEccErrors() uint64 {
	if t == nil || t.CorrectableEccErrors == nil {
		return 0
	}
	return *t.CorrectableEccErrors
}

// GetTotalEccErrors retrieves the value of the leaf TotalEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TotalEccErrors is set, it can
// safely use t.GetTotalEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TotalEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetTotalEccErrors() uint64 {
	if t == nil || t.TotalEccErrors == nil {
		return 0
	}
	return *t.TotalEccErrors
}

// GetUncorrectableEccErrors retrieves the value of the leaf UncorrectableEccErrors from the System_Memory_Counters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncorrectableEccErrors is set, it can
// safely use t.GetUncorrectableEccErrors() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncorrectableEccErrors == nil' before retrieving the leaf's value.
func (t *System_Memory_Counters) GetUncorrectableEccErrors() uint64 {
	if t == nil || t.UncorrectableEccErrors == nil {
		return 0
	}
	return *t.UncorrectableEccErrors
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Memory_Counters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Memory_Counters) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Memory_Counters) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Memory_Counters.
func (*System_Memory_Counters) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages represents the /openconfig-system/system/messages YANG schema element.
type System_Messages struct {
	DebugService map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService `path:"debug-entries/debug-service" module:"openconfig-system/openconfig-system"`
	Message      *System_Messages_Message                                   `path:"state/message" module:"openconfig-system/openconfig-system"`
	Severity     E_SystemLogging_SyslogSeverity                             `path:"config/severity" module:"openconfig-system/openconfig-system" shadow-path:"state/severity" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages) IsYANGGoStruct() {}

// NewDebugService creates a new entry in the DebugService list of the
// System_Messages struct. The keys of the list are populated from the input
// arguments.
func (t *System_Messages) NewDebugService(Service E_Messages_DEBUG_SERVICE) (*System_Messages_DebugService, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	key := Service

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DebugService[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DebugService", key)
	}

	t.DebugService[key] = &System_Messages_DebugService{
		Service: Service,
	}

	return t.DebugService[key], nil
}

// RenameDebugService renames an entry in the list DebugService within
// the System_Messages struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Messages) RenameDebugService(oldK, newK E_Messages_DEBUG_SERVICE) error {
	if _, ok := t.DebugService[newK]; ok {
		return fmt.Errorf("key %v already exists in DebugService", newK)
	}

	e, ok := t.DebugService[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DebugService", oldK)
	}
	e.Service = newK

	t.DebugService[newK] = e
	delete(t.DebugService, oldK)
	return nil
}

// GetOrCreateDebugService retrieves the value with the specified keys from
// the receiver System_Messages. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Messages) GetOrCreateDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	key := Service

	if v, ok := t.DebugService[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDebugService(Service)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDebugService got unexpected error: %v", err))
	}
	return v
}

// GetDebugService retrieves the value with the specified key from
// the DebugService map field of System_Messages. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Messages) GetDebugService(Service E_Messages_DEBUG_SERVICE) *System_Messages_DebugService {

	if t == nil {
		return nil
	}

	key := Service

	if lm, ok := t.DebugService[key]; ok {
		return lm
	}
	return nil
}

// DeleteDebugService deletes the value with the specified keys from
// the receiver System_Messages. If there is no such element, the function
// is a no-op.
func (t *System_Messages) DeleteDebugService(Service E_Messages_DEBUG_SERVICE) {
	key := Service

	delete(t.DebugService, key)
}

// AppendDebugService appends the supplied System_Messages_DebugService struct to the
// list DebugService of System_Messages. If the key value(s) specified in
// the supplied System_Messages_DebugService already exist in the list, an error is
// returned.
func (t *System_Messages) AppendDebugService(v *System_Messages_DebugService) error {
	key := v.Service

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DebugService == nil {
		t.DebugService = make(map[E_Messages_DEBUG_SERVICE]*System_Messages_DebugService)
	}

	if _, ok := t.DebugService[key]; ok {
		return fmt.Errorf("duplicate key for list DebugService %v", key)
	}

	t.DebugService[key] = v
	return nil
}

// GetOrCreateMessage retrieves the value of the Message field
// or returns the existing field if it already exists.
func (t *System_Messages) GetOrCreateMessage() *System_Messages_Message {
	if t.Message != nil {
		return t.Message
	}
	t.Message = &System_Messages_Message{}
	return t.Message
}

// GetMessage returns the value of the Message struct pointer
// from System_Messages. If the receiver or the field Message is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *System_Messages) GetMessage() *System_Messages_Message {
	if t != nil && t.Message != nil {
		return t.Message
	}
	return nil
}

// GetSeverity retrieves the value of the leaf Severity from the System_Messages
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Severity is set, it can
// safely use t.GetSeverity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Severity == nil' before retrieving the leaf's value.
func (t *System_Messages) GetSeverity() E_SystemLogging_SyslogSeverity {
	if t == nil || t.Severity == 0 {
		return 0
	}
	return t.Severity
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages.
func (*System_Messages) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_DebugService represents the /openconfig-system/system/messages/debug-entries/debug-service YANG schema element.
type System_Messages_DebugService struct {
	Enabled *bool                    `path:"config/enabled" module:"openconfig-system/openconfig-system" shadow-path:"state/enabled" shadow-module:"openconfig-system/openconfig-system"`
	Service E_Messages_DEBUG_SERVICE `path:"config/service|service" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/service|service" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_DebugService implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_DebugService) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetService retrieves the value of the leaf Service from the System_Messages_DebugService
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *System_Messages_DebugService) GetService() E_Messages_DEBUG_SERVICE {
	if t == nil || t.Service == 0 {
		return 0
	}
	return t.Service
}

// ΛListKeyMap returns the keys of the System_Messages_DebugService struct, which is a YANG list entry.
func (t *System_Messages_DebugService) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"service": t.Service,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_DebugService"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_DebugService) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_DebugService) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_DebugService.
func (*System_Messages_DebugService) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Messages_Message represents the /openconfig-system/system/messages/state/message YANG schema element.
type System_Messages_Message struct {
	AppName  *string `path:"app-name" module:"openconfig-system"`
	Msg      *string `path:"msg" module:"openconfig-system"`
	Msgid    *string `path:"msgid" module:"openconfig-system"`
	Priority *uint8  `path:"priority" module:"openconfig-system"`
	Procid   *string `path:"procid" module:"openconfig-system"`
}

// IsYANGGoStruct ensures that System_Messages_Message implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Messages_Message) IsYANGGoStruct() {}

// GetAppName retrieves the value of the leaf AppName from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppName is set, it can
// safely use t.GetAppName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppName == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetAppName() string {
	if t == nil || t.AppName == nil {
		return ""
	}
	return *t.AppName
}

// GetMsg retrieves the value of the leaf Msg from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msg is set, it can
// safely use t.GetMsg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msg == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsg() string {
	if t == nil || t.Msg == nil {
		return ""
	}
	return *t.Msg
}

// GetMsgid retrieves the value of the leaf Msgid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msgid is set, it can
// safely use t.GetMsgid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msgid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetMsgid() string {
	if t == nil || t.Msgid == nil {
		return ""
	}
	return *t.Msgid
}

// GetPriority retrieves the value of the leaf Priority from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetProcid retrieves the value of the leaf Procid from the System_Messages_Message
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Procid is set, it can
// safely use t.GetProcid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Procid == nil' before retrieving the leaf's value.
func (t *System_Messages_Message) GetProcid() string {
	if t == nil || t.Procid == nil {
		return ""
	}
	return *t.Procid
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Messages_Message"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Messages_Message) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Messages_Message) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Messages_Message.
func (*System_Messages_Message) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_MountPoint represents the /openconfig-system/system/mount-points/mount-point YANG schema element.
type System_MountPoint struct {
	Available        *uint64 `path:"state/available" module:"openconfig-system/openconfig-system"`
	Name             *string `path:"state/name|name" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"name" shadow-module:"openconfig-system"`
	Size             *uint64 `path:"state/size" module:"openconfig-system/openconfig-system"`
	StorageComponent *string `path:"state/storage-component" module:"openconfig-system/openconfig-system"`
	Utilized         *uint64 `path:"state/utilized" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_MountPoint) IsYANGGoStruct() {}

// GetAvailable retrieves the value of the leaf Available from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Available is set, it can
// safely use t.GetAvailable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Available == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetAvailable() uint64 {
	if t == nil || t.Available == nil {
		return 0
	}
	return *t.Available
}

// GetName retrieves the value of the leaf Name from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSize retrieves the value of the leaf Size from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetSize() uint64 {
	if t == nil || t.Size == nil {
		return 0
	}
	return *t.Size
}

// GetStorageComponent retrieves the value of the leaf StorageComponent from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StorageComponent is set, it can
// safely use t.GetStorageComponent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StorageComponent == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetStorageComponent() string {
	if t == nil || t.StorageComponent == nil {
		return ""
	}
	return *t.StorageComponent
}

// GetUtilized retrieves the value of the leaf Utilized from the System_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Utilized is set, it can
// safely use t.GetUtilized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Utilized == nil' before retrieving the leaf's value.
func (t *System_MountPoint) GetUtilized() uint64 {
	if t == nil || t.Utilized == nil {
		return 0
	}
	return *t.Utilized
}

// ΛListKeyMap returns the keys of the System_MountPoint struct, which is a YANG list entry.
func (t *System_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_MountPoint) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_MountPoint.
func (*System_MountPoint) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp represents the /openconfig-system/system/ntp YANG schema element.
type System_Ntp struct {
	AuthMismatch     *uint64                       `path:"state/auth-mismatch" module:"openconfig-system/openconfig-system"`
	EnableNtpAuth    *bool                         `path:"config/enable-ntp-auth" module:"openconfig-system/openconfig-system" shadow-path:"state/enable-ntp-auth" shadow-module:"openconfig-system/openconfig-system"`
	Enabled          *bool                         `path:"config/enabled" module:"openconfig-system/openconfig-system" shadow-path:"state/enabled" shadow-module:"openconfig-system/openconfig-system"`
	NtpKey           map[uint16]*System_Ntp_NtpKey `path:"ntp-keys/ntp-key" module:"openconfig-system/openconfig-system"`
	NtpSourceAddress *string                       `path:"config/ntp-source-address" module:"openconfig-system/openconfig-system" shadow-path:"state/ntp-source-address" shadow-module:"openconfig-system/openconfig-system"`
	Server           map[string]*System_Ntp_Server `path:"servers/server" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp) IsYANGGoStruct() {}

// NewNtpKey creates a new entry in the NtpKey list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewNtpKey(KeyId uint16) (*System_Ntp_NtpKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NtpKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NtpKey", key)
	}

	t.NtpKey[key] = &System_Ntp_NtpKey{
		KeyId: &KeyId,
	}

	return t.NtpKey[key], nil
}

// RenameNtpKey renames an entry in the list NtpKey within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameNtpKey(oldK, newK uint16) error {
	if _, ok := t.NtpKey[newK]; ok {
		return fmt.Errorf("key %v already exists in NtpKey", newK)
	}

	e, ok := t.NtpKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NtpKey", oldK)
	}
	e.KeyId = &newK

	t.NtpKey[newK] = e
	delete(t.NtpKey, oldK)
	return nil
}

// GetOrCreateNtpKey retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	key := KeyId

	if v, ok := t.NtpKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNtpKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNtpKey got unexpected error: %v", err))
	}
	return v
}

// GetNtpKey retrieves the value with the specified key from
// the NtpKey map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetNtpKey(KeyId uint16) *System_Ntp_NtpKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.NtpKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteNtpKey deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteNtpKey(KeyId uint16) {
	key := KeyId

	delete(t.NtpKey, key)
}

// AppendNtpKey appends the supplied System_Ntp_NtpKey struct to the
// list NtpKey of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_NtpKey already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendNtpKey(v *System_Ntp_NtpKey) error {
	if v.KeyId == nil {
		return fmt.Errorf("invalid nil key received for KeyId")
	}

	key := *v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NtpKey == nil {
		t.NtpKey = make(map[uint16]*System_Ntp_NtpKey)
	}

	if _, ok := t.NtpKey[key]; ok {
		return fmt.Errorf("duplicate key for list NtpKey %v", key)
	}

	t.NtpKey[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// System_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *System_Ntp) NewServer(Address string) (*System_Ntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	key := Address

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &System_Ntp_Server{
		Address: &Address,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the System_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *System_Ntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Address = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver System_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *System_Ntp) GetOrCreateServer(Address string) *System_Ntp_Server {

	key := Address

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Address)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of System_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *System_Ntp) GetServer(Address string) *System_Ntp_Server {

	if t == nil {
		return nil
	}

	key := Address

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver System_Ntp. If there is no such element, the function
// is a no-op.
func (t *System_Ntp) DeleteServer(Address string) {
	key := Address

	delete(t.Server, key)
}

// AppendServer appends the supplied System_Ntp_Server struct to the
// list Server of System_Ntp. If the key value(s) specified in
// the supplied System_Ntp_Server already exist in the list, an error is
// returned.
func (t *System_Ntp) AppendServer(v *System_Ntp_Server) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key received for Address")
	}

	key := *v.Address

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*System_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAuthMismatch retrieves the value of the leaf AuthMismatch from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthMismatch is set, it can
// safely use t.GetAuthMismatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthMismatch == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetAuthMismatch() uint64 {
	if t == nil || t.AuthMismatch == nil {
		return 0
	}
	return *t.AuthMismatch
}

// GetEnableNtpAuth retrieves the value of the leaf EnableNtpAuth from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnableNtpAuth is set, it can
// safely use t.GetEnableNtpAuth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnableNtpAuth == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnableNtpAuth() bool {
	if t == nil || t.EnableNtpAuth == nil {
		return false
	}
	return *t.EnableNtpAuth
}

// GetEnabled retrieves the value of the leaf Enabled from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// GetNtpSourceAddress retrieves the value of the leaf NtpSourceAddress from the System_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NtpSourceAddress is set, it can
// safely use t.GetNtpSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NtpSourceAddress == nil' before retrieving the leaf's value.
func (t *System_Ntp) GetNtpSourceAddress() string {
	if t == nil || t.NtpSourceAddress == nil {
		return ""
	}
	return *t.NtpSourceAddress
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp.
func (*System_Ntp) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_NtpKey represents the /openconfig-system/system/ntp/ntp-keys/ntp-key YANG schema element.
type System_Ntp_NtpKey struct {
	KeyId    *uint16                `path:"config/key-id|key-id" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/key-id|key-id" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	KeyType  E_System_NTP_AUTH_TYPE `path:"config/key-type" module:"openconfig-system/openconfig-system" shadow-path:"state/key-type" shadow-module:"openconfig-system/openconfig-system"`
	KeyValue *string                `path:"config/key-value" module:"openconfig-system/openconfig-system" shadow-path:"state/key-value" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_NtpKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_NtpKey) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyId() uint16 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetKeyType retrieves the value of the leaf KeyType from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyType is set, it can
// safely use t.GetKeyType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyType == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyType() E_System_NTP_AUTH_TYPE {
	if t == nil || t.KeyType == 0 {
		return 0
	}
	return t.KeyType
}

// GetKeyValue retrieves the value of the leaf KeyValue from the System_Ntp_NtpKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *System_Ntp_NtpKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// ΛListKeyMap returns the keys of the System_Ntp_NtpKey struct, which is a YANG list entry.
func (t *System_Ntp_NtpKey) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeyId == nil {
		return nil, fmt.Errorf("nil value for key KeyId")
	}

	return map[string]interface{}{
		"key-id": *t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_NtpKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_NtpKey) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_NtpKey) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_NtpKey.
func (*System_Ntp_NtpKey) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Ntp_Server represents the /openconfig-system/system/ntp/servers/server YANG schema element.
type System_Ntp_Server struct {
	Address         *string                         `path:"config/address|address" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"state/address|address" shadow-module:"openconfig-system/openconfig-system|openconfig-system"`
	AssociationType E_System_Server_AssociationType `path:"config/association-type" module:"openconfig-system/openconfig-system" shadow-path:"state/association-type" shadow-module:"openconfig-system/openconfig-system"`
	Iburst          *bool                           `path:"config/iburst" module:"openconfig-system/openconfig-system" shadow-path:"state/iburst" shadow-module:"openconfig-system/openconfig-system"`
	Offset          *uint64                         `path:"state/offset" module:"openconfig-system/openconfig-system"`
	PollInterval    *uint32                         `path:"state/poll-interval" module:"openconfig-system/openconfig-system"`
	Port            *uint16                         `path:"config/port" module:"openconfig-system/openconfig-system" shadow-path:"state/port" shadow-module:"openconfig-system/openconfig-system"`
	Prefer          *bool                           `path:"config/prefer" module:"openconfig-system/openconfig-system" shadow-path:"state/prefer" shadow-module:"openconfig-system/openconfig-system"`
	RootDelay       *uint32                         `path:"state/root-delay" module:"openconfig-system/openconfig-system"`
	RootDispersion  *uint64                         `path:"state/root-dispersion" module:"openconfig-system/openconfig-system"`
	Stratum         *uint8                          `path:"state/stratum" module:"openconfig-system/openconfig-system"`
	Version         *uint8                          `path:"config/version" module:"openconfig-system/openconfig-system" shadow-path:"state/version" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Ntp_Server) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAssociationType retrieves the value of the leaf AssociationType from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationType is set, it can
// safely use t.GetAssociationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationType == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetAssociationType() E_System_Server_AssociationType {
	if t == nil || t.AssociationType == 0 {
		return System_Server_AssociationType_SERVER
	}
	return t.AssociationType
}

// GetIburst retrieves the value of the leaf Iburst from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Iburst is set, it can
// safely use t.GetIburst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Iburst == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetIburst() bool {
	if t == nil || t.Iburst == nil {
		return false
	}
	return *t.Iburst
}

// GetOffset retrieves the value of the leaf Offset from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetOffset() uint64 {
	if t == nil || t.Offset == nil {
		return 0
	}
	return *t.Offset
}

// GetPollInterval retrieves the value of the leaf PollInterval from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PollInterval is set, it can
// safely use t.GetPollInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PollInterval == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPollInterval() uint32 {
	if t == nil || t.PollInterval == nil {
		return 0
	}
	return *t.PollInterval
}

// GetPort retrieves the value of the leaf Port from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 123
	}
	return *t.Port
}

// GetPrefer retrieves the value of the leaf Prefer from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRootDelay retrieves the value of the leaf RootDelay from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDelay is set, it can
// safely use t.GetRootDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDelay == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDelay() uint32 {
	if t == nil || t.RootDelay == nil {
		return 0
	}
	return *t.RootDelay
}

// GetRootDispersion retrieves the value of the leaf RootDispersion from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDispersion is set, it can
// safely use t.GetRootDispersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDispersion == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetRootDispersion() uint64 {
	if t == nil || t.RootDispersion == nil {
		return 0
	}
	return *t.RootDispersion
}

// GetStratum retrieves the value of the leaf Stratum from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Stratum is set, it can
// safely use t.GetStratum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Stratum == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetStratum() uint8 {
	if t == nil || t.Stratum == nil {
		return 0
	}
	return *t.Stratum
}

// GetVersion retrieves the value of the leaf Version from the System_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *System_Ntp_Server) GetVersion() uint8 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// ΛListKeyMap returns the keys of the System_Ntp_Server struct, which is a YANG list entry.
func (t *System_Ntp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Ntp_Server) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Ntp_Server) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Ntp_Server.
func (*System_Ntp_Server) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_Process represents the /openconfig-system/system/processes/process YANG schema element.
type System_Process struct {
	Args              []string `path:"state/args" module:"openconfig-system/openconfig-system"`
	CpuUsageSystem    *uint64  `path:"state/cpu-usage-system" module:"openconfig-system/openconfig-system"`
	CpuUsageUser      *uint64  `path:"state/cpu-usage-user" module:"openconfig-system/openconfig-system"`
	CpuUtilization    *uint8   `path:"state/cpu-utilization" module:"openconfig-system/openconfig-system"`
	MemoryUsage       *uint64  `path:"state/memory-usage" module:"openconfig-system/openconfig-system"`
	MemoryUtilization *uint8   `path:"state/memory-utilization" module:"openconfig-system/openconfig-system"`
	Name              *string  `path:"state/name" module:"openconfig-system/openconfig-system"`
	Pid               *uint64  `path:"state/pid|pid" module:"openconfig-system/openconfig-system|openconfig-system" shadow-path:"pid" shadow-module:"openconfig-system"`
	StartTime         *uint64  `path:"state/start-time" module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_Process implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_Process) IsYANGGoStruct() {}

// GetArgs retrieves the value of the leaf Args from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Args is set, it can
// safely use t.GetArgs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Args == nil' before retrieving the leaf's value.
func (t *System_Process) GetArgs() []string {
	if t == nil || t.Args == nil {
		return nil
	}
	return t.Args
}

// GetCpuUsageSystem retrieves the value of the leaf CpuUsageSystem from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageSystem is set, it can
// safely use t.GetCpuUsageSystem() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageSystem == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageSystem() uint64 {
	if t == nil || t.CpuUsageSystem == nil {
		return 0
	}
	return *t.CpuUsageSystem
}

// GetCpuUsageUser retrieves the value of the leaf CpuUsageUser from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUsageUser is set, it can
// safely use t.GetCpuUsageUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUsageUser == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUsageUser() uint64 {
	if t == nil || t.CpuUsageUser == nil {
		return 0
	}
	return *t.CpuUsageUser
}

// GetCpuUtilization retrieves the value of the leaf CpuUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpuUtilization is set, it can
// safely use t.GetCpuUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpuUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetCpuUtilization() uint8 {
	if t == nil || t.CpuUtilization == nil {
		return 0
	}
	return *t.CpuUtilization
}

// GetMemoryUsage retrieves the value of the leaf MemoryUsage from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUsage is set, it can
// safely use t.GetMemoryUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUsage == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUsage() uint64 {
	if t == nil || t.MemoryUsage == nil {
		return 0
	}
	return *t.MemoryUsage
}

// GetMemoryUtilization retrieves the value of the leaf MemoryUtilization from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryUtilization is set, it can
// safely use t.GetMemoryUtilization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryUtilization == nil' before retrieving the leaf's value.
func (t *System_Process) GetMemoryUtilization() uint8 {
	if t == nil || t.MemoryUtilization == nil {
		return 0
	}
	return *t.MemoryUtilization
}

// GetName retrieves the value of the leaf Name from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *System_Process) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPid retrieves the value of the leaf Pid from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pid is set, it can
// safely use t.GetPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pid == nil' before retrieving the leaf's value.
func (t *System_Process) GetPid() uint64 {
	if t == nil || t.Pid == nil {
		return 0
	}
	return *t.Pid
}

// GetStartTime retrieves the value of the leaf StartTime from the System_Process
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartTime is set, it can
// safely use t.GetStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartTime == nil' before retrieving the leaf's value.
func (t *System_Process) GetStartTime() uint64 {
	if t == nil || t.StartTime == nil {
		return 0
	}
	return *t.StartTime
}

// ΛListKeyMap returns the keys of the System_Process struct, which is a YANG list entry.
func (t *System_Process) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Pid == nil {
		return nil, fmt.Errorf("nil value for key Pid")
	}

	return map[string]interface{}{
		"pid": *t.Pid,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_Process"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_Process) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_Process) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_Process.
func (*System_Process) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_SshServer represents the /openconfig-system/system/ssh-server YANG schema element.
type System_SshServer struct {
	Enable          *bool                                      `path:"config/enable" module:"openconfig-system/openconfig-system" shadow-path:"state/enable" shadow-module:"openconfig-system/openconfig-system"`
	ProtocolVersion E_SystemTerminal_SshServer_ProtocolVersion `path:"config/protocol-version" module:"openconfig-system/openconfig-system" shadow-path:"state/protocol-version" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit       *uint16                                    `path:"config/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"state/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit    *uint16                                    `path:"config/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"state/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout         *uint16                                    `path:"config/timeout" module:"openconfig-system/openconfig-system" shadow-path:"state/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_SshServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_SshServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return true
	}
	return *t.Enable
}

// GetProtocolVersion retrieves the value of the leaf ProtocolVersion from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolVersion is set, it can
// safely use t.GetProtocolVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolVersion == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetProtocolVersion() E_SystemTerminal_SshServer_ProtocolVersion {
	if t == nil || t.ProtocolVersion == 0 {
		return SystemTerminal_SshServer_ProtocolVersion_V2
	}
	return t.ProtocolVersion
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_SshServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_SshServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_SshServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_SshServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_SshServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_SshServer.
func (*System_SshServer) ΛBelongingModule() string {
	return "openconfig-system"
}

// System_TelnetServer represents the /openconfig-system/system/telnet-server YANG schema element.
type System_TelnetServer struct {
	Enable       *bool   `path:"config/enable" module:"openconfig-system/openconfig-system" shadow-path:"state/enable" shadow-module:"openconfig-system/openconfig-system"`
	RateLimit    *uint16 `path:"config/rate-limit" module:"openconfig-system/openconfig-system" shadow-path:"state/rate-limit" shadow-module:"openconfig-system/openconfig-system"`
	SessionLimit *uint16 `path:"config/session-limit" module:"openconfig-system/openconfig-system" shadow-path:"state/session-limit" shadow-module:"openconfig-system/openconfig-system"`
	Timeout      *uint16 `path:"config/timeout" module:"openconfig-system/openconfig-system" shadow-path:"state/timeout" shadow-module:"openconfig-system/openconfig-system"`
}

// IsYANGGoStruct ensures that System_TelnetServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*System_TelnetServer) IsYANGGoStruct() {}

// GetEnable retrieves the value of the leaf Enable from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enable is set, it can
// safely use t.GetEnable() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enable == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetEnable() bool {
	if t == nil || t.Enable == nil {
		return false
	}
	return *t.Enable
}

// GetRateLimit retrieves the value of the leaf RateLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateLimit is set, it can
// safely use t.GetRateLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetRateLimit() uint16 {
	if t == nil || t.RateLimit == nil {
		return 0
	}
	return *t.RateLimit
}

// GetSessionLimit retrieves the value of the leaf SessionLimit from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionLimit is set, it can
// safely use t.GetSessionLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionLimit == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetSessionLimit() uint16 {
	if t == nil || t.SessionLimit == nil {
		return 0
	}
	return *t.SessionLimit
}

// GetTimeout retrieves the value of the leaf Timeout from the System_TelnetServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *System_TelnetServer) GetTimeout() uint16 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["System_TelnetServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *System_TelnetServer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *System_TelnetServer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of System_TelnetServer.
func (*System_TelnetServer) ΛBelongingModule() string {
	return "openconfig-system"
}
