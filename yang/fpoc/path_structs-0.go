/*
Package fpoc is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/sthesayi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - google-bgp-timers.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-if-tunnel.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-aaa.yang
  - public/release/models/system/openconfig-aaa-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package fpoc

import (
	"github.com/openconfig/ygot/ygot"
)

// AclPath represents the /openconfig-acl/acl YANG schema element.
type AclPath struct {
	*ygot.NodePath
}

// AclPathAny represents the wildcard version of the /openconfig-acl/acl YANG schema element.
type AclPathAny struct {
	*ygot.NodePath
}

// Acl_CounterCapabilityPath represents the /openconfig-acl/acl/state/counter-capability YANG schema element.
type Acl_CounterCapabilityPath struct {
	*ygot.NodePath
}

// Acl_CounterCapabilityPathAny represents the wildcard version of the /openconfig-acl/acl/state/counter-capability YANG schema element.
type Acl_CounterCapabilityPathAny struct {
	*ygot.NodePath
}

// AclSetAny (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *AclPath) AclSetAny() *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": "*"},
			n,
		),
	}
}

// AclSetAny (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *AclPathAny) AclSetAny() *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": "*"},
			n,
		),
	}
}

// AclSetAnyType (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *AclPath) AclSetAnyType(Name string) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": "*"},
			n,
		),
	}
}

// AclSetAnyType (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *AclPathAny) AclSetAnyType(Name string) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": "*"},
			n,
		),
	}
}

// AclSetAnyName (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type: E_Acl_ACL_TYPE
func (n *AclPath) AclSetAnyName(Type E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": Type},
			n,
		),
	}
}

// AclSetAnyName (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name (wildcarded): string
// Type: E_Acl_ACL_TYPE
func (n *AclPathAny) AclSetAnyName(Type E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": "*", "type": Type},
			n,
		),
	}
}

// AclSet (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type: E_Acl_ACL_TYPE
func (n *AclPath) AclSet(Name string, Type E_Acl_ACL_TYPE) *Acl_AclSetPath {
	return &Acl_AclSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": Type},
			n,
		),
	}
}

// AclSet (list): List of ACL sets, each comprising of a list of ACL
// entries
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-sets/acl-set"
// Path from root: "/acl/acl-sets/acl-set"
// Name: string
// Type: E_Acl_ACL_TYPE
func (n *AclPathAny) AclSet(Name string, Type E_Acl_ACL_TYPE) *Acl_AclSetPathAny {
	return &Acl_AclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-sets", "acl-set"},
			map[string]interface{}{"name": Name, "type": Type},
			n,
		),
	}
}

// CounterCapability (leaf): System reported indication of how ACL counters are reported
// by the target
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/counter-capability"
// Path from root: "/acl/state/counter-capability"
func (n *AclPath) CounterCapability() *Acl_CounterCapabilityPath {
	return &Acl_CounterCapabilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counter-capability"},
			map[string]interface{}{},
			n,
		),
	}
}

// CounterCapability (leaf): System reported indication of how ACL counters are reported
// by the target
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/counter-capability"
// Path from root: "/acl/state/counter-capability"
func (n *AclPathAny) CounterCapability() *Acl_CounterCapabilityPathAny {
	return &Acl_CounterCapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counter-capability"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id (wildcarded): string
func (n *AclPath) InterfaceAny() *Acl_InterfacePathAny {
	return &Acl_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id (wildcarded): string
func (n *AclPathAny) InterfaceAny() *Acl_InterfacePathAny {
	return &Acl_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id: string
func (n *AclPath) Interface(Id string) *Acl_InterfacePath {
	return &Acl_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Interface (list): List of interfaces on which ACLs are set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "interfaces/interface"
// Path from root: "/acl/interfaces/interface"
// Id: string
func (n *AclPathAny) Interface(Id string) *Acl_InterfacePathAny {
	return &Acl_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Acl_AclSetPath represents the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPath struct {
	*ygot.NodePath
}

// Acl_AclSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set YANG schema element.
type Acl_AclSetPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_DescriptionPath represents the /openconfig-acl/acl/acl-sets/acl-set/config/description YANG schema element.
type Acl_AclSet_DescriptionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_DescriptionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/config/description YANG schema element.
type Acl_AclSet_DescriptionPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_NamePath represents the /openconfig-acl/acl/acl-sets/acl-set/config/name YANG schema element.
type Acl_AclSet_NamePath struct {
	*ygot.NodePath
}

// Acl_AclSet_NamePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/config/name YANG schema element.
type Acl_AclSet_NamePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_TypePath represents the /openconfig-acl/acl/acl-sets/acl-set/config/type YANG schema element.
type Acl_AclSet_TypePath struct {
	*ygot.NodePath
}

// Acl_AclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/config/type YANG schema element.
type Acl_AclSet_TypePathAny struct {
	*ygot.NodePath
}

// AclEntryAny (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_AclSetPath) AclEntryAny() *Acl_AclSet_AclEntryPathAny {
	return &Acl_AclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntryAny (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_AclSetPathAny) AclEntryAny() *Acl_AclSet_AclEntryPathAny {
	return &Acl_AclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_AclSetPath) AclEntry(SequenceId uint32) *Acl_AclSet_AclEntryPath {
	return &Acl_AclSet_AclEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries comprising an ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_AclSetPathAny) AclEntry(SequenceId uint32) *Acl_AclSet_AclEntryPathAny {
	return &Acl_AclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// Description (leaf): Description, or comment, for the ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/description"
// Path from root: "/acl/acl-sets/acl-set/config/description"
func (n *Acl_AclSetPath) Description() *Acl_AclSet_DescriptionPath {
	return &Acl_AclSet_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description, or comment, for the ACL set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/description"
// Path from root: "/acl/acl-sets/acl-set/config/description"
func (n *Acl_AclSetPathAny) Description() *Acl_AclSet_DescriptionPathAny {
	return &Acl_AclSet_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the access-list set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/name"
// Path from root: "/acl/acl-sets/acl-set/config/name"
func (n *Acl_AclSetPath) Name() *Acl_AclSet_NamePath {
	return &Acl_AclSet_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the access-list set
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/name"
// Path from root: "/acl/acl-sets/acl-set/config/name"
func (n *Acl_AclSetPathAny) Name() *Acl_AclSet_NamePathAny {
	return &Acl_AclSet_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type determines the fields allowed in the ACL entries
// belonging to the ACL set (e.g., IPv4, IPv6, etc.)
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/type"
// Path from root: "/acl/acl-sets/acl-set/config/type"
func (n *Acl_AclSetPath) Type() *Acl_AclSet_TypePath {
	return &Acl_AclSet_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type determines the fields allowed in the ACL entries
// belonging to the ACL set (e.g., IPv4, IPv6, etc.)
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/type"
// Path from root: "/acl/acl-sets/acl-set/config/type"
func (n *Acl_AclSetPathAny) Type() *Acl_AclSet_TypePathAny {
	return &Acl_AclSet_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntryPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry YANG schema element.
type Acl_AclSet_AclEntryPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_DescriptionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/config/description YANG schema element.
type Acl_AclSet_AclEntry_DescriptionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_DescriptionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/config/description YANG schema element.
type Acl_AclSet_AclEntry_DescriptionPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_AclSet_AclEntry_MatchedOctetsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_AclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_AclSet_AclEntry_MatchedPacketsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_AclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/config/sequence-id YANG schema element.
type Acl_AclSet_AclEntry_SequenceIdPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/config/sequence-id YANG schema element.
type Acl_AclSet_AclEntry_SequenceIdPathAny struct {
	*ygot.NodePath
}

// Actions (container): Enclosing container for list of ACL actions associated
// with an entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "actions"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions"
func (n *Acl_AclSet_AclEntryPath) Actions() *Acl_AclSet_AclEntry_ActionsPath {
	return &Acl_AclSet_AclEntry_ActionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Actions (container): Enclosing container for list of ACL actions associated
// with an entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "actions"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions"
func (n *Acl_AclSet_AclEntryPathAny) Actions() *Acl_AclSet_AclEntry_ActionsPathAny {
	return &Acl_AclSet_AclEntry_ActionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"actions"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A user-defined description, or comment, for this Access List
// Entry.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/description"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/description"
func (n *Acl_AclSet_AclEntryPath) Description() *Acl_AclSet_AclEntry_DescriptionPath {
	return &Acl_AclSet_AclEntry_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A user-defined description, or comment, for this Access List
// Entry.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/description"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/description"
func (n *Acl_AclSet_AclEntryPathAny) Description() *Acl_AclSet_AclEntry_DescriptionPathAny {
	return &Acl_AclSet_AclEntry_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputInterface (container): Input interface container
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "input-interface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface"
func (n *Acl_AclSet_AclEntryPath) InputInterface() *Acl_AclSet_AclEntry_InputInterfacePath {
	return &Acl_AclSet_AclEntry_InputInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"input-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputInterface (container): Input interface container
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "input-interface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface"
func (n *Acl_AclSet_AclEntryPathAny) InputInterface() *Acl_AclSet_AclEntry_InputInterfacePathAny {
	return &Acl_AclSet_AclEntry_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv4"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4"
func (n *Acl_AclSet_AclEntryPath) Ipv4() *Acl_AclSet_AclEntry_Ipv4Path {
	return &Acl_AclSet_AclEntry_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Top level container for IPv4 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv4"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4"
func (n *Acl_AclSet_AclEntryPathAny) Ipv4() *Acl_AclSet_AclEntry_Ipv4PathAny {
	return &Acl_AclSet_AclEntry_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv6"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6"
func (n *Acl_AclSet_AclEntryPath) Ipv6() *Acl_AclSet_AclEntry_Ipv6Path {
	return &Acl_AclSet_AclEntry_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Top-level container for IPv6 match field data
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "ipv6"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6"
func (n *Acl_AclSet_AclEntryPathAny) Ipv6() *Acl_AclSet_AclEntry_Ipv6PathAny {
	return &Acl_AclSet_AclEntry_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "l2"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2"
func (n *Acl_AclSet_AclEntryPath) L2() *Acl_AclSet_AclEntry_L2Path {
	return &Acl_AclSet_AclEntry_L2Path{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2 (container): Ethernet header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "l2"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2"
func (n *Acl_AclSet_AclEntryPathAny) L2() *Acl_AclSet_AclEntry_L2PathAny {
	return &Acl_AclSet_AclEntry_L2PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntryPath) MatchedOctets() *Acl_AclSet_AclEntry_MatchedOctetsPath {
	return &Acl_AclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_AclSet_AclEntryPathAny) MatchedOctets() *Acl_AclSet_AclEntry_MatchedOctetsPathAny {
	return &Acl_AclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntryPath) MatchedPackets() *Acl_AclSet_AclEntry_MatchedPacketsPath {
	return &Acl_AclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_AclSet_AclEntryPathAny) MatchedPackets() *Acl_AclSet_AclEntry_MatchedPacketsPathAny {
	return &Acl_AclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "mpls"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls"
func (n *Acl_AclSet_AclEntryPath) Mpls() *Acl_AclSet_AclEntry_MplsPath {
	return &Acl_AclSet_AclEntry_MplsPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): MPLS header fields
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "mpls"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls"
func (n *Acl_AclSet_AclEntryPathAny) Mpls() *Acl_AclSet_AclEntry_MplsPathAny {
	return &Acl_AclSet_AclEntry_MplsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): The sequence id determines the order in which ACL entries
// are applied.  The sequence id must be unique for each entry
// in an ACL set.  Target devices should apply the ACL entry
// rules in ascending order determined by sequence id (low to
// high), rather than the relying only on order in the list.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/sequence-id"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/sequence-id"
func (n *Acl_AclSet_AclEntryPath) SequenceId() *Acl_AclSet_AclEntry_SequenceIdPath {
	return &Acl_AclSet_AclEntry_SequenceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): The sequence id determines the order in which ACL entries
// are applied.  The sequence id must be unique for each entry
// in an ACL set.  Target devices should apply the ACL entry
// rules in ascending order determined by sequence id (low to
// high), rather than the relying only on order in the list.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/sequence-id"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/config/sequence-id"
func (n *Acl_AclSet_AclEntryPathAny) SequenceId() *Acl_AclSet_AclEntry_SequenceIdPathAny {
	return &Acl_AclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "transport"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport"
func (n *Acl_AclSet_AclEntryPath) Transport() *Acl_AclSet_AclEntry_TransportPath {
	return &Acl_AclSet_AclEntry_TransportPath{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Transport (container): Transport fields container
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "transport"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport"
func (n *Acl_AclSet_AclEntryPathAny) Transport() *Acl_AclSet_AclEntry_TransportPathAny {
	return &Acl_AclSet_AclEntry_TransportPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_ActionsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_ActionsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions YANG schema element.
type Acl_AclSet_AclEntry_ActionsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_ForwardingActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_LogActionPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Actions_LogActionPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action YANG schema element.
type Acl_AclSet_AclEntry_Actions_LogActionPathAny struct {
	*ygot.NodePath
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/forwarding-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPath {
	return &Acl_AclSet_AclEntry_Actions_ForwardingActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingAction (leaf): Specifies the forwarding action.  One forwarding action
// must be specified for each ACL entry
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/forwarding-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/forwarding-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) ForwardingAction() *Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny {
	return &Acl_AclSet_AclEntry_Actions_ForwardingActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/log-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPath) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPath {
	return &Acl_AclSet_AclEntry_Actions_LogActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "log-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// LogAction (leaf): Specifies the log action and destination for
// matched packets.  The default is not to log the
// packet.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/log-action"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/actions/config/log-action"
func (n *Acl_AclSet_AclEntry_ActionsPathAny) LogAction() *Acl_AclSet_AclEntry_Actions_LogActionPathAny {
	return &Acl_AclSet_AclEntry_Actions_LogActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "log-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_InputInterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_InputInterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterfacePathAny struct {
	*ygot.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePath) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref"
func (n *Acl_AclSet_AclEntry_InputInterfacePathAny) InterfaceRef() *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface YANG schema element.
type Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/interface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Interface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/interface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/interface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Interface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/subinterface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPath) Subinterface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/subinterface"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/input-interface/interface-ref/config/subinterface"
func (n *Acl_AclSet_AclEntry_InputInterface_InterfaceRefPathAny) Subinterface() *Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny {
	return &Acl_AclSet_AclEntry_InputInterface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_Ipv4Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4Path struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4 YANG schema element.
type Acl_AclSet_AclEntry_Ipv4PathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_DscpPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_DscpSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpSetPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_HopLimitPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_HopLimitPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_ProtocolPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_ProtocolPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DestinationAddress() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath {
	return &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DestinationAddress() *Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny {
	return &Acl_AclSet_AclEntry_Ipv4_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Dscp() *Acl_AclSet_AclEntry_Ipv4_DscpPath {
	return &Acl_AclSet_AclEntry_Ipv4_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Dscp() *Acl_AclSet_AclEntry_Ipv4_DscpPathAny {
	return &Acl_AclSet_AclEntry_Ipv4_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp-set"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4Path) DscpSet() *Acl_AclSet_AclEntry_Ipv4_DscpSetPath {
	return &Acl_AclSet_AclEntry_Ipv4_DscpSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp-set"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) DscpSet() *Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny {
	return &Acl_AclSet_AclEntry_Ipv4_DscpSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/hop-limit"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4Path) HopLimit() *Acl_AclSet_AclEntry_Ipv4_HopLimitPath {
	return &Acl_AclSet_AclEntry_Ipv4_HopLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/hop-limit"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) HopLimit() *Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny {
	return &Acl_AclSet_AclEntry_Ipv4_HopLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/protocol"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4Path) Protocol() *Acl_AclSet_AclEntry_Ipv4_ProtocolPath {
	return &Acl_AclSet_AclEntry_Ipv4_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/protocol"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) Protocol() *Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny {
	return &Acl_AclSet_AclEntry_Ipv4_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4Path) SourceAddress() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPath {
	return &Acl_AclSet_AclEntry_Ipv4_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv4 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv4/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv4PathAny) SourceAddress() *Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny {
	return &Acl_AclSet_AclEntry_Ipv4_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_Ipv6Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6Path struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6 YANG schema element.
type Acl_AclSet_AclEntry_Ipv6PathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DscpPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DscpSetPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpSetPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp-set YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_HopLimitPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_HopLimitPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/hop-limit YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_ProtocolPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_ProtocolPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_SourceAddressPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceAddressPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-flow-label YANG schema element.
type Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny struct {
	*ygot.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6Path) DestinationAddress() *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath {
	return &Acl_AclSet_AclEntry_Ipv6_DestinationAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-address"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) DestinationAddress() *Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_DestinationAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-flow-label"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6Path) DestinationFlowLabel() *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath {
	return &Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-flow-label"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/destination-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) DestinationFlowLabel() *Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6Path) Dscp() *Acl_AclSet_AclEntry_Ipv6_DscpPath {
	return &Acl_AclSet_AclEntry_Ipv6_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf): Value of diffserv codepoint.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) Dscp() *Acl_AclSet_AclEntry_Ipv6_DscpPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp-set"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6Path) DscpSet() *Acl_AclSet_AclEntry_Ipv6_DscpSetPath {
	return &Acl_AclSet_AclEntry_Ipv6_DscpSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/dscp-set"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/dscp-set"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) DscpSet() *Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_DscpSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dscp-set"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/hop-limit"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6Path) HopLimit() *Acl_AclSet_AclEntry_Ipv6_HopLimitPath {
	return &Acl_AclSet_AclEntry_Ipv6_HopLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/hop-limit"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/hop-limit"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) HopLimit() *Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_HopLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/protocol"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6Path) Protocol() *Acl_AclSet_AclEntry_Ipv6_ProtocolPath {
	return &Acl_AclSet_AclEntry_Ipv6_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/protocol"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/protocol"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) Protocol() *Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6Path) SourceAddress() *Acl_AclSet_AclEntry_Ipv6_SourceAddressPath {
	return &Acl_AclSet_AclEntry_Ipv6_SourceAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceAddress (leaf): Source IPv6 address prefix.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-address"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-address"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) SourceAddress() *Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_SourceAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-flow-label"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6Path) SourceFlowLabel() *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath {
	return &Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-flow-label"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/ipv6/config/source-flow-label"
func (n *Acl_AclSet_AclEntry_Ipv6PathAny) SourceFlowLabel() *Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny {
	return &Acl_AclSet_AclEntry_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_L2Path represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2Path struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2PathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2 YANG schema element.
type Acl_AclSet_AclEntry_L2PathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_DestinationMacPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_DestinationMacMaskPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacMaskPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_EthertypePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype YANG schema element.
type Acl_AclSet_AclEntry_L2_EthertypePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_EthertypePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype YANG schema element.
type Acl_AclSet_AclEntry_L2_EthertypePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_SourceMacPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_SourceMacPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_SourceMacMaskPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacMaskPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask YANG schema element.
type Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny struct {
	*ygot.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-mac"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac"
func (n *Acl_AclSet_AclEntry_L2Path) DestinationMac() *Acl_AclSet_AclEntry_L2_DestinationMacPath {
	return &Acl_AclSet_AclEntry_L2_DestinationMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-mac"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac"
func (n *Acl_AclSet_AclEntry_L2PathAny) DestinationMac() *Acl_AclSet_AclEntry_L2_DestinationMacPathAny {
	return &Acl_AclSet_AclEntry_L2_DestinationMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-mac-mask"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2Path) DestinationMacMask() *Acl_AclSet_AclEntry_L2_DestinationMacMaskPath {
	return &Acl_AclSet_AclEntry_L2_DestinationMacMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-mac-mask"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/destination-mac-mask"
func (n *Acl_AclSet_AclEntry_L2PathAny) DestinationMacMask() *Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny {
	return &Acl_AclSet_AclEntry_L2_DestinationMacMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/ethertype"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype"
func (n *Acl_AclSet_AclEntry_L2Path) Ethertype() *Acl_AclSet_AclEntry_L2_EthertypePath {
	return &Acl_AclSet_AclEntry_L2_EthertypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ethertype"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/ethertype"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/ethertype"
func (n *Acl_AclSet_AclEntry_L2PathAny) Ethertype() *Acl_AclSet_AclEntry_L2_EthertypePathAny {
	return &Acl_AclSet_AclEntry_L2_EthertypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ethertype"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMac (leaf): Source IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-mac"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac"
func (n *Acl_AclSet_AclEntry_L2Path) SourceMac() *Acl_AclSet_AclEntry_L2_SourceMacPath {
	return &Acl_AclSet_AclEntry_L2_SourceMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMac (leaf): Source IEEE 802 MAC address.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-mac"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac"
func (n *Acl_AclSet_AclEntry_L2PathAny) SourceMac() *Acl_AclSet_AclEntry_L2_SourceMacPathAny {
	return &Acl_AclSet_AclEntry_L2_SourceMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-mac-mask"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2Path) SourceMacMask() *Acl_AclSet_AclEntry_L2_SourceMacMaskPath {
	return &Acl_AclSet_AclEntry_L2_SourceMacMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-mac-mask"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/l2/config/source-mac-mask"
func (n *Acl_AclSet_AclEntry_L2PathAny) SourceMacMask() *Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny {
	return &Acl_AclSet_AclEntry_L2_SourceMacMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_MplsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_MplsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls YANG schema element.
type Acl_AclSet_AclEntry_MplsPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TtlValuePath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Mpls_TtlValuePathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value YANG schema element.
type Acl_AclSet_AclEntry_Mpls_TtlValuePathAny struct {
	*ygot.NodePath
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/end-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePath {
	return &Acl_AclSet_AclEntry_Mpls_EndLabelValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/end-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/end-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) EndLabelValue() *Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny {
	return &Acl_AclSet_AclEntry_Mpls_EndLabelValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/start-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPath) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePath {
	return &Acl_AclSet_AclEntry_Mpls_StartLabelValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartLabelValue (leaf): Match MPLS label value on the MPLS header.
// The usage of this field indicated the upper
// range value in the top of the stack.
// The range that is used is inclusive. The match that
// is done for a particular received pkt_label is:
// start-label-value <= pkt_label <= end-label-value.
// The 20-bit label value in an MPLS label
// stack as specified in RFC 3032.
// This label value does not include the
// encodings of Traffic Class and TTL.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/start-label-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/start-label-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) StartLabelValue() *Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny {
	return &Acl_AclSet_AclEntry_Mpls_StartLabelValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-label-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/traffic-class"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPath) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPath {
	return &Acl_AclSet_AclEntry_Mpls_TrafficClassPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "traffic-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrafficClass (leaf): The value of the MPLS traffic class (TC) bits,
// formerly known as the EXP bits.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/traffic-class"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/traffic-class"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TrafficClass() *Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny {
	return &Acl_AclSet_AclEntry_Mpls_TrafficClassPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "traffic-class"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/ttl-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPath) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePath {
	return &Acl_AclSet_AclEntry_Mpls_TtlValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlValue (leaf): Time-to-live MPLS packet value match.
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/ttl-value"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/mpls/config/ttl-value"
func (n *Acl_AclSet_AclEntry_MplsPathAny) TtlValue() *Acl_AclSet_AclEntry_Mpls_TtlValuePathAny {
	return &Acl_AclSet_AclEntry_Mpls_TtlValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl-value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_AclSet_AclEntry_TransportPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_TransportPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport YANG schema element.
type Acl_AclSet_AclEntry_TransportPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_DestinationPortPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_SourcePortPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port YANG schema element.
type Acl_AclSet_AclEntry_Transport_SourcePortPathAny struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_TcpFlagsPath represents the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_TcpFlagsPath struct {
	*ygot.NodePath
}

// Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny represents the wildcard version of the /openconfig-acl/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/tcp-flags YANG schema element.
type Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny struct {
	*ygot.NodePath
}

// DestinationPort (leaf): Destination port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPath) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPath {
	return &Acl_AclSet_AclEntry_Transport_DestinationPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// DestinationPort (leaf): Destination port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/destination-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/destination-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) DestinationPort() *Acl_AclSet_AclEntry_Transport_DestinationPortPathAny {
	return &Acl_AclSet_AclEntry_Transport_DestinationPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "destination-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port"
func (n *Acl_AclSet_AclEntry_TransportPath) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPath {
	return &Acl_AclSet_AclEntry_Transport_SourcePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourcePort (leaf): Source port or range
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/source-port"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/source-port"
func (n *Acl_AclSet_AclEntry_TransportPathAny) SourcePort() *Acl_AclSet_AclEntry_Transport_SourcePortPathAny {
	return &Acl_AclSet_AclEntry_Transport_SourcePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// TcpFlags (leaf-list): List of TCP flags to match
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/tcp-flags"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPath) TcpFlags() *Acl_AclSet_AclEntry_Transport_TcpFlagsPath {
	return &Acl_AclSet_AclEntry_Transport_TcpFlagsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tcp-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// TcpFlags (leaf-list): List of TCP flags to match
// ----------------------------------------
// Defining module: "openconfig-packet-match"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/tcp-flags"
// Path from root: "/acl/acl-sets/acl-set/acl-entries/acl-entry/transport/config/tcp-flags"
func (n *Acl_AclSet_AclEntry_TransportPathAny) TcpFlags() *Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny {
	return &Acl_AclSet_AclEntry_Transport_TcpFlagsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tcp-flags"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_InterfacePath represents the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePath struct {
	*ygot.NodePath
}

// Acl_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface YANG schema element.
type Acl_InterfacePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IdPath represents the /openconfig-acl/acl/interfaces/interface/config/id YANG schema element.
type Acl_Interface_IdPath struct {
	*ygot.NodePath
}

// Acl_Interface_IdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/config/id YANG schema element.
type Acl_Interface_IdPathAny struct {
	*ygot.NodePath
}

// EgressAclSetAny (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// EgressAclSetAny (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSetAny() *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// EgressAclSetAnyType (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSetAnyType(SetName string) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// EgressAclSetAnyType (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSetAnyType(SetName string) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// EgressAclSetAnySetName (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSetAnySetName(Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// EgressAclSetAnySetName (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName (wildcarded): string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSetAnySetName(Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// EgressAclSet (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) EgressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPath {
	return &Acl_Interface_EgressAclSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// EgressAclSet (list): List of egress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "egress-acl-sets/egress-acl-set"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set"
// SetName: string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) EgressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_EgressAclSetPathAny {
	return &Acl_Interface_EgressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-acl-sets", "egress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/id"
// Path from root: "/acl/interfaces/interface/config/id"
func (n *Acl_InterfacePath) Id() *Acl_Interface_IdPath {
	return &Acl_Interface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): User-defined identifier for the interface -- a common
// convention could be '<if name>.<subif index>'
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/id"
// Path from root: "/acl/interfaces/interface/config/id"
func (n *Acl_InterfacePathAny) Id() *Acl_Interface_IdPathAny {
	return &Acl_Interface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// IngressAclSetAny (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSetAny() *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": "*"},
			n,
		),
	}
}

// IngressAclSetAnyType (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSetAnyType(SetName string) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// IngressAclSetAnyType (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type (wildcarded): E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSetAnyType(SetName string) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": "*"},
			n,
		),
	}
}

// IngressAclSetAnySetName (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSetAnySetName(Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// IngressAclSetAnySetName (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName (wildcarded): string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSetAnySetName(Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": "*", "type": Type},
			n,
		),
	}
}

// IngressAclSet (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePath) IngressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPath {
	return &Acl_Interface_IngressAclSetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// IngressAclSet (list): List of ingress ACLs on the interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "ingress-acl-sets/ingress-acl-set"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set"
// SetName: string
// Type: E_Acl_ACL_TYPE
func (n *Acl_InterfacePathAny) IngressAclSet(SetName string, Type E_Acl_ACL_TYPE) *Acl_Interface_IngressAclSetPathAny {
	return &Acl_Interface_IngressAclSetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-acl-sets", "ingress-acl-set"},
			map[string]interface{}{"set-name": SetName, "type": Type},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePath) InterfaceRef() *Acl_Interface_InterfaceRefPath {
	return &Acl_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "interface-ref"
// Path from root: "/acl/interfaces/interface/interface-ref"
func (n *Acl_InterfacePathAny) InterfaceRef() *Acl_Interface_InterfaceRefPathAny {
	return &Acl_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_EgressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set YANG schema element.
type Acl_Interface_EgressAclSetPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name YANG schema element.
type Acl_Interface_EgressAclSet_SetNamePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type YANG schema element.
type Acl_Interface_EgressAclSet_TypePathAny struct {
	*ygot.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_EgressAclSetPath) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	return &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_EgressAclSetPathAny) AclEntryAny() *Acl_Interface_EgressAclSet_AclEntryPathAny {
	return &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPath {
	return &Acl_Interface_EgressAclSet_AclEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_EgressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_EgressAclSet_AclEntryPathAny {
	return &Acl_Interface_EgressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on egress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/set-name"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name"
func (n *Acl_Interface_EgressAclSetPath) SetName() *Acl_Interface_EgressAclSet_SetNamePath {
	return &Acl_Interface_EgressAclSet_SetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on egress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/set-name"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/set-name"
func (n *Acl_Interface_EgressAclSetPathAny) SetName() *Acl_Interface_EgressAclSet_SetNamePathAny {
	return &Acl_Interface_EgressAclSet_SetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on egress.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/type"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type"
func (n *Acl_Interface_EgressAclSetPath) Type() *Acl_Interface_EgressAclSet_TypePath {
	return &Acl_Interface_EgressAclSet_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on egress.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/type"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/config/type"
func (n *Acl_Interface_EgressAclSetPathAny) Type() *Acl_Interface_EgressAclSet_TypePathAny {
	return &Acl_Interface_EgressAclSet_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_EgressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_EgressAclSet_AclEntryPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath struct {
	*ygot.NodePath
}

// Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygot.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny {
	return &Acl_Interface_EgressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPath) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath {
	return &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/egress-acl-sets/egress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_EgressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny {
	return &Acl_Interface_EgressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_IngressAclSetPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSetPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set YANG schema element.
type Acl_Interface_IngressAclSetPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_SetNamePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_SetNamePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name YANG schema element.
type Acl_Interface_IngressAclSet_SetNamePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_TypePath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_TypePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type YANG schema element.
type Acl_Interface_IngressAclSet_TypePathAny struct {
	*ygot.NodePath
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_IngressAclSetPath) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	return &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntryAny (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId (wildcarded): uint32
func (n *Acl_Interface_IngressAclSetPathAny) AclEntryAny() *Acl_Interface_IngressAclSet_AclEntryPathAny {
	return &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPath) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPath {
	return &Acl_Interface_IngressAclSet_AclEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// AclEntry (list): List of ACL entries assigned to an interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl-entries/acl-entry"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry"
// SequenceId: uint32
func (n *Acl_Interface_IngressAclSetPathAny) AclEntry(SequenceId uint32) *Acl_Interface_IngressAclSet_AclEntryPathAny {
	return &Acl_Interface_IngressAclSet_AclEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acl-entries", "acl-entry"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/set-name"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name"
func (n *Acl_Interface_IngressAclSetPath) SetName() *Acl_Interface_IngressAclSet_SetNamePath {
	return &Acl_Interface_IngressAclSet_SetNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetName (leaf): Reference to the ACL set name applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/set-name"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/set-name"
func (n *Acl_Interface_IngressAclSetPathAny) SetName() *Acl_Interface_IngressAclSet_SetNamePathAny {
	return &Acl_Interface_IngressAclSet_SetNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/type"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type"
func (n *Acl_Interface_IngressAclSetPath) Type() *Acl_Interface_IngressAclSet_TypePath {
	return &Acl_Interface_IngressAclSet_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Reference to the ACL set type applied on ingress
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/type"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/config/type"
func (n *Acl_Interface_IngressAclSetPathAny) Type() *Acl_Interface_IngressAclSet_TypePathAny {
	return &Acl_Interface_IngressAclSet_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_IngressAclSet_AclEntryPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntryPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry YANG schema element.
type Acl_Interface_IngressAclSet_AclEntryPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath represents the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath struct {
	*ygot.NodePath
}

// Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id YANG schema element.
type Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny struct {
	*ygot.NodePath
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedOctets (leaf): Count of the number of octets (bytes) matching the current
// ACL entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-octets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-octets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedOctets() *Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// MatchedPackets (leaf): Count of the number of packets matching the current ACL
// entry.
//
// An implementation should provide this counter on a
// per-interface per-ACL-entry if possible.
//
// If an implementation only supports ACL counters per entry
// (i.e., not broken out per interface), then the value
// should be equal to the aggregate count across all interfaces.
//
// An implementation that provides counters per entry per
// interface is not required to also provide an aggregate count,
// e.g., per entry -- the user is expected to be able implement
// the required aggregation if such a count is needed.
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/matched-packets"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/matched-packets"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) MatchedPackets() *Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny {
	return &Acl_Interface_IngressAclSet_AclEntry_MatchedPacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "matched-packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPath) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath {
	return &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SequenceId (leaf): Reference to an entry in the ACL set applied to an
// interface
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "state/sequence-id"
// Path from root: "/acl/interfaces/interface/ingress-acl-sets/ingress-acl-set/acl-entries/acl-entry/state/sequence-id"
func (n *Acl_Interface_IngressAclSet_AclEntryPathAny) SequenceId() *Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny {
	return &Acl_Interface_IngressAclSet_AclEntry_SequenceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sequence-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Acl_Interface_InterfaceRefPath represents the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref YANG schema element.
type Acl_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_InterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/config/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/config/interface YANG schema element.
type Acl_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-acl/acl/interfaces/interface/interface-ref/config/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Acl_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-acl/acl/interfaces/interface/interface-ref/config/subinterface YANG schema element.
type Acl_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/interface"
// Path from root: "/acl/interfaces/interface/interface-ref/config/interface"
func (n *Acl_Interface_InterfaceRefPath) Interface() *Acl_Interface_InterfaceRef_InterfacePath {
	return &Acl_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/interface"
// Path from root: "/acl/interfaces/interface/interface-ref/config/interface"
func (n *Acl_Interface_InterfaceRefPathAny) Interface() *Acl_Interface_InterfaceRef_InterfacePathAny {
	return &Acl_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/subinterface"
// Path from root: "/acl/interfaces/interface/interface-ref/config/subinterface"
func (n *Acl_Interface_InterfaceRefPath) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePath {
	return &Acl_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-acl"
// Path from parent: "config/subinterface"
// Path from root: "/acl/interfaces/interface/interface-ref/config/subinterface"
func (n *Acl_Interface_InterfaceRefPathAny) Subinterface() *Acl_Interface_InterfaceRef_SubinterfacePathAny {
	return &Acl_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// ComponentPath represents the /openconfig-platform/components/component YANG schema element.
type ComponentPath struct {
	*ygot.NodePath
}

// ComponentPathAny represents the wildcard version of the /openconfig-platform/components/component YANG schema element.
type ComponentPathAny struct {
	*ygot.NodePath
}

// Component_AllocatedPowerPath represents the /openconfig-platform/components/component/state/allocated-power YANG schema element.
type Component_AllocatedPowerPath struct {
	*ygot.NodePath
}

// Component_AllocatedPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/allocated-power YANG schema element.
type Component_AllocatedPowerPathAny struct {
	*ygot.NodePath
}

// Component_DescriptionPath represents the /openconfig-platform/components/component/state/description YANG schema element.
type Component_DescriptionPath struct {
	*ygot.NodePath
}

// Component_DescriptionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/description YANG schema element.
type Component_DescriptionPathAny struct {
	*ygot.NodePath
}

// Component_EmptyPath represents the /openconfig-platform/components/component/state/empty YANG schema element.
type Component_EmptyPath struct {
	*ygot.NodePath
}

// Component_EmptyPathAny represents the wildcard version of the /openconfig-platform/components/component/state/empty YANG schema element.
type Component_EmptyPathAny struct {
	*ygot.NodePath
}

// Component_EquipmentFailurePath represents the /openconfig-platform/components/component/state/equipment-failure YANG schema element.
type Component_EquipmentFailurePath struct {
	*ygot.NodePath
}

// Component_EquipmentFailurePathAny represents the wildcard version of the /openconfig-platform/components/component/state/equipment-failure YANG schema element.
type Component_EquipmentFailurePathAny struct {
	*ygot.NodePath
}

// Component_EquipmentMismatchPath represents the /openconfig-platform/components/component/state/equipment-mismatch YANG schema element.
type Component_EquipmentMismatchPath struct {
	*ygot.NodePath
}

// Component_EquipmentMismatchPathAny represents the wildcard version of the /openconfig-platform/components/component/state/equipment-mismatch YANG schema element.
type Component_EquipmentMismatchPathAny struct {
	*ygot.NodePath
}

// Component_FirmwareVersionPath represents the /openconfig-platform/components/component/state/firmware-version YANG schema element.
type Component_FirmwareVersionPath struct {
	*ygot.NodePath
}

// Component_FirmwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/firmware-version YANG schema element.
type Component_FirmwareVersionPathAny struct {
	*ygot.NodePath
}

// Component_HardwareVersionPath represents the /openconfig-platform/components/component/state/hardware-version YANG schema element.
type Component_HardwareVersionPath struct {
	*ygot.NodePath
}

// Component_HardwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/hardware-version YANG schema element.
type Component_HardwareVersionPathAny struct {
	*ygot.NodePath
}

// Component_IdPath represents the /openconfig-platform/components/component/state/id YANG schema element.
type Component_IdPath struct {
	*ygot.NodePath
}

// Component_IdPathAny represents the wildcard version of the /openconfig-platform/components/component/state/id YANG schema element.
type Component_IdPathAny struct {
	*ygot.NodePath
}

// Component_LastRebootReasonPath represents the /openconfig-platform/components/component/state/last-reboot-reason YANG schema element.
type Component_LastRebootReasonPath struct {
	*ygot.NodePath
}

// Component_LastRebootReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-reboot-reason YANG schema element.
type Component_LastRebootReasonPathAny struct {
	*ygot.NodePath
}

// Component_LastRebootTimePath represents the /openconfig-platform/components/component/state/last-reboot-time YANG schema element.
type Component_LastRebootTimePath struct {
	*ygot.NodePath
}

// Component_LastRebootTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-reboot-time YANG schema element.
type Component_LastRebootTimePathAny struct {
	*ygot.NodePath
}

// Component_LastSwitchoverTimePath represents the /openconfig-platform/components/component/state/last-switchover-time YANG schema element.
type Component_LastSwitchoverTimePath struct {
	*ygot.NodePath
}

// Component_LastSwitchoverTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-time YANG schema element.
type Component_LastSwitchoverTimePathAny struct {
	*ygot.NodePath
}

// Component_LocationPath represents the /openconfig-platform/components/component/state/location YANG schema element.
type Component_LocationPath struct {
	*ygot.NodePath
}

// Component_LocationPathAny represents the wildcard version of the /openconfig-platform/components/component/state/location YANG schema element.
type Component_LocationPathAny struct {
	*ygot.NodePath
}

// Component_MfgDatePath represents the /openconfig-platform/components/component/state/mfg-date YANG schema element.
type Component_MfgDatePath struct {
	*ygot.NodePath
}

// Component_MfgDatePathAny represents the wildcard version of the /openconfig-platform/components/component/state/mfg-date YANG schema element.
type Component_MfgDatePathAny struct {
	*ygot.NodePath
}

// Component_MfgNamePath represents the /openconfig-platform/components/component/state/mfg-name YANG schema element.
type Component_MfgNamePath struct {
	*ygot.NodePath
}

// Component_MfgNamePathAny represents the wildcard version of the /openconfig-platform/components/component/state/mfg-name YANG schema element.
type Component_MfgNamePathAny struct {
	*ygot.NodePath
}

// Component_NamePath represents the /openconfig-platform/components/component/config/name YANG schema element.
type Component_NamePath struct {
	*ygot.NodePath
}

// Component_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/config/name YANG schema element.
type Component_NamePathAny struct {
	*ygot.NodePath
}

// Component_OperStatusPath represents the /openconfig-platform/components/component/state/oper-status YANG schema element.
type Component_OperStatusPath struct {
	*ygot.NodePath
}

// Component_OperStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/state/oper-status YANG schema element.
type Component_OperStatusPathAny struct {
	*ygot.NodePath
}

// Component_ParentPath represents the /openconfig-platform/components/component/state/parent YANG schema element.
type Component_ParentPath struct {
	*ygot.NodePath
}

// Component_ParentPathAny represents the wildcard version of the /openconfig-platform/components/component/state/parent YANG schema element.
type Component_ParentPathAny struct {
	*ygot.NodePath
}

// Component_PartNoPath represents the /openconfig-platform/components/component/state/part-no YANG schema element.
type Component_PartNoPath struct {
	*ygot.NodePath
}

// Component_PartNoPathAny represents the wildcard version of the /openconfig-platform/components/component/state/part-no YANG schema element.
type Component_PartNoPathAny struct {
	*ygot.NodePath
}

// Component_RedundantRolePath represents the /openconfig-platform/components/component/state/redundant-role YANG schema element.
type Component_RedundantRolePath struct {
	*ygot.NodePath
}

// Component_RedundantRolePathAny represents the wildcard version of the /openconfig-platform/components/component/state/redundant-role YANG schema element.
type Component_RedundantRolePathAny struct {
	*ygot.NodePath
}

// Component_RemovablePath represents the /openconfig-platform/components/component/state/removable YANG schema element.
type Component_RemovablePath struct {
	*ygot.NodePath
}

// Component_RemovablePathAny represents the wildcard version of the /openconfig-platform/components/component/state/removable YANG schema element.
type Component_RemovablePathAny struct {
	*ygot.NodePath
}

// Component_SerialNoPath represents the /openconfig-platform/components/component/state/serial-no YANG schema element.
type Component_SerialNoPath struct {
	*ygot.NodePath
}

// Component_SerialNoPathAny represents the wildcard version of the /openconfig-platform/components/component/state/serial-no YANG schema element.
type Component_SerialNoPathAny struct {
	*ygot.NodePath
}

// Component_SoftwareVersionPath represents the /openconfig-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPath struct {
	*ygot.NodePath
}

// Component_SoftwareVersionPathAny represents the wildcard version of the /openconfig-platform/components/component/state/software-version YANG schema element.
type Component_SoftwareVersionPathAny struct {
	*ygot.NodePath
}

// Component_TypePath represents the /openconfig-platform/components/component/state/type YANG schema element.
type Component_TypePath struct {
	*ygot.NodePath
}

// Component_TypePathAny represents the wildcard version of the /openconfig-platform/components/component/state/type YANG schema element.
type Component_TypePathAny struct {
	*ygot.NodePath
}

// Component_UsedPowerPath represents the /openconfig-platform/components/component/state/used-power YANG schema element.
type Component_UsedPowerPath struct {
	*ygot.NodePath
}

// Component_UsedPowerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/used-power YANG schema element.
type Component_UsedPowerPathAny struct {
	*ygot.NodePath
}

// AllocatedPower (leaf): Power allocated by the system for the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/allocated-power"
// Path from root: "/components/component/state/allocated-power"
func (n *ComponentPath) AllocatedPower() *Component_AllocatedPowerPath {
	return &Component_AllocatedPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allocated-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// AllocatedPower (leaf): Power allocated by the system for the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/allocated-power"
// Path from root: "/components/component/state/allocated-power"
func (n *ComponentPathAny) AllocatedPower() *Component_AllocatedPowerPathAny {
	return &Component_AllocatedPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "allocated-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// Backplane (container): Data for backplane components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane"
// Path from root: "/components/component/backplane"
func (n *ComponentPath) Backplane() *Component_BackplanePath {
	return &Component_BackplanePath{
		NodePath: ygot.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
}

// Backplane (container): Data for backplane components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "backplane"
// Path from root: "/components/component/backplane"
func (n *ComponentPathAny) Backplane() *Component_BackplanePathAny {
	return &Component_BackplanePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"backplane"},
			map[string]interface{}{},
			n,
		),
	}
}

// Chassis (container): Data for chassis components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "chassis"
// Path from root: "/components/component/chassis"
func (n *ComponentPath) Chassis() *Component_ChassisPath {
	return &Component_ChassisPath{
		NodePath: ygot.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
}

// Chassis (container): Data for chassis components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "chassis"
// Path from root: "/components/component/chassis"
func (n *ComponentPathAny) Chassis() *Component_ChassisPathAny {
	return &Component_ChassisPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"chassis"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (container): Data for cpu components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "cpu"
// Path from root: "/components/component/cpu"
func (n *ComponentPath) Cpu() *Component_CpuPath {
	return &Component_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (container): Data for cpu components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "cpu"
// Path from root: "/components/component/cpu"
func (n *ComponentPathAny) Cpu() *Component_CpuPathAny {
	return &Component_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): System-supplied description of the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/description"
// Path from root: "/components/component/state/description"
func (n *ComponentPath) Description() *Component_DescriptionPath {
	return &Component_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): System-supplied description of the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/description"
// Path from root: "/components/component/state/description"
func (n *ComponentPathAny) Description() *Component_DescriptionPathAny {
	return &Component_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Empty (leaf): The empty leaf may be used by the device to indicate that a
// component position exists but is not populated.  Using this
// flag, it is possible for the management system to learn how
// many positions are available (e.g., occupied vs. empty
// linecard slots in a chassis).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/empty"
// Path from root: "/components/component/state/empty"
func (n *ComponentPath) Empty() *Component_EmptyPath {
	return &Component_EmptyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "empty"},
			map[string]interface{}{},
			n,
		),
	}
}

// Empty (leaf): The empty leaf may be used by the device to indicate that a
// component position exists but is not populated.  Using this
// flag, it is possible for the management system to learn how
// many positions are available (e.g., occupied vs. empty
// linecard slots in a chassis).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/empty"
// Path from root: "/components/component/state/empty"
func (n *ComponentPathAny) Empty() *Component_EmptyPathAny {
	return &Component_EmptyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "empty"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentFailure (leaf): If true, the hardware indicates that the component's physical equipment
// has failed
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-failure"
// Path from root: "/components/component/state/equipment-failure"
func (n *ComponentPath) EquipmentFailure() *Component_EquipmentFailurePath {
	return &Component_EquipmentFailurePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentFailure (leaf): If true, the hardware indicates that the component's physical equipment
// has failed
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-failure"
// Path from root: "/components/component/state/equipment-failure"
func (n *ComponentPathAny) EquipmentFailure() *Component_EquipmentFailurePathAny {
	return &Component_EquipmentFailurePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-failure"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentMismatch (leaf): If true, the hardware indicates that the component inserted into the
// affected component's physical location is of a different type than what
// is configured
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-mismatch"
// Path from root: "/components/component/state/equipment-mismatch"
func (n *ComponentPath) EquipmentMismatch() *Component_EquipmentMismatchPath {
	return &Component_EquipmentMismatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// EquipmentMismatch (leaf): If true, the hardware indicates that the component inserted into the
// affected component's physical location is of a different type than what
// is configured
// ----------------------------------------
// Defining module: "openconfig-alarms"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/equipment-mismatch"
// Path from root: "/components/component/state/equipment-mismatch"
func (n *ComponentPathAny) EquipmentMismatch() *Component_EquipmentMismatchPathAny {
	return &Component_EquipmentMismatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "equipment-mismatch"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fabric (container): Data for fabric components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fabric"
// Path from root: "/components/component/fabric"
func (n *ComponentPath) Fabric() *Component_FabricPath {
	return &Component_FabricPath{
		NodePath: ygot.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fabric (container): Data for fabric components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fabric"
// Path from root: "/components/component/fabric"
func (n *ComponentPathAny) Fabric() *Component_FabricPathAny {
	return &Component_FabricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fabric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fan (container): Data for fan components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fan"
// Path from root: "/components/component/fan"
func (n *ComponentPath) Fan() *Component_FanPath {
	return &Component_FanPath{
		NodePath: ygot.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fan (container): Data for fan components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fan"
// Path from root: "/components/component/fan"
func (n *ComponentPathAny) Fan() *Component_FanPathAny {
	return &Component_FanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fan"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirmwareVersion (leaf): For hardware components, this is the version of associated
// firmware that is running on the component, if applicable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/firmware-version"
// Path from root: "/components/component/state/firmware-version"
func (n *ComponentPath) FirmwareVersion() *Component_FirmwareVersionPath {
	return &Component_FirmwareVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "firmware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// FirmwareVersion (leaf): For hardware components, this is the version of associated
// firmware that is running on the component, if applicable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/firmware-version"
// Path from root: "/components/component/state/firmware-version"
func (n *ComponentPathAny) FirmwareVersion() *Component_FirmwareVersionPathAny {
	return &Component_FirmwareVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "firmware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwareVersion (leaf): For hardware components, this is the hardware revision of
// the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/hardware-version"
// Path from root: "/components/component/state/hardware-version"
func (n *ComponentPath) HardwareVersion() *Component_HardwareVersionPath {
	return &Component_HardwareVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwareVersion (leaf): For hardware components, this is the hardware revision of
// the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/hardware-version"
// Path from root: "/components/component/state/hardware-version"
func (n *ComponentPathAny) HardwareVersion() *Component_HardwareVersionPathAny {
	return &Component_HardwareVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Unique identifier assigned by the system for the
// component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/id"
// Path from root: "/components/component/state/id"
func (n *ComponentPath) Id() *Component_IdPath {
	return &Component_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): Unique identifier assigned by the system for the
// component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/id"
// Path from root: "/components/component/state/id"
func (n *ComponentPathAny) Id() *Component_IdPathAny {
	return &Component_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "integrated-circuit"
// Path from root: "/components/component/integrated-circuit"
func (n *ComponentPath) IntegratedCircuit() *Component_IntegratedCircuitPath {
	return &Component_IntegratedCircuitPath{
		NodePath: ygot.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntegratedCircuit (container): Data for chip components, such as ASIC, NPUs, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "integrated-circuit"
// Path from root: "/components/component/integrated-circuit"
func (n *ComponentPathAny) IntegratedCircuit() *Component_IntegratedCircuitPathAny {
	return &Component_IntegratedCircuitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"integrated-circuit"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootReason (leaf): This reports the reason of the last reboot of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-reason"
// Path from root: "/components/component/state/last-reboot-reason"
func (n *ComponentPath) LastRebootReason() *Component_LastRebootReasonPath {
	return &Component_LastRebootReasonPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootReason (leaf): This reports the reason of the last reboot of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-reason"
// Path from root: "/components/component/state/last-reboot-reason"
func (n *ComponentPathAny) LastRebootReason() *Component_LastRebootReasonPathAny {
	return &Component_LastRebootReasonPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootTime (leaf): This reports the time of the last reboot of the component. The
// value is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-time"
// Path from root: "/components/component/state/last-reboot-time"
func (n *ComponentPath) LastRebootTime() *Component_LastRebootTimePath {
	return &Component_LastRebootTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastRebootTime (leaf): This reports the time of the last reboot of the component. The
// value is the timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-reboot-time"
// Path from root: "/components/component/state/last-reboot-time"
func (n *ComponentPathAny) LastRebootTime() *Component_LastRebootTimePathAny {
	return &Component_LastRebootTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-reboot-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverReason (container): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the reason of the last change of the
// component's role.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-reason"
// Path from root: "/components/component/state/last-switchover-reason"
func (n *ComponentPath) LastSwitchoverReason() *Component_LastSwitchoverReasonPath {
	return &Component_LastSwitchoverReasonPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverReason (container): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the reason of the last change of the
// component's role.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-reason"
// Path from root: "/components/component/state/last-switchover-reason"
func (n *ComponentPathAny) LastSwitchoverReason() *Component_LastSwitchoverReasonPathAny {
	return &Component_LastSwitchoverReasonPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-reason"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverTime (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as
// secondary), this reports the time of the last change of
// the component's role. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-time"
// Path from root: "/components/component/state/last-switchover-time"
func (n *ComponentPath) LastSwitchoverTime() *Component_LastSwitchoverTimePath {
	return &Component_LastSwitchoverTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastSwitchoverTime (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as
// secondary), this reports the time of the last change of
// the component's role. The value is the timestamp in
// nanoseconds relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-switchover-time"
// Path from root: "/components/component/state/last-switchover-time"
func (n *ComponentPathAny) LastSwitchoverTime() *Component_LastSwitchoverTimePathAny {
	return &Component_LastSwitchoverTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-switchover-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Location (leaf): System-supplied description of the location of the
// component within the system. This could be a bay position,
// slot number, socket location, etc. For component types that
// have an explicit slot-id attribute, such as linecards, the
// system should populate the more specific slot-id.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/location"
// Path from root: "/components/component/state/location"
func (n *ComponentPath) Location() *Component_LocationPath {
	return &Component_LocationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "location"},
			map[string]interface{}{},
			n,
		),
	}
}

// Location (leaf): System-supplied description of the location of the
// component within the system. This could be a bay position,
// slot number, socket location, etc. For component types that
// have an explicit slot-id attribute, such as linecards, the
// system should populate the more specific slot-id.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/location"
// Path from root: "/components/component/state/location"
func (n *ComponentPathAny) Location() *Component_LocationPathAny {
	return &Component_LocationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "location"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): For components that have associated memory, these values
// report information about available and utilized memory.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/memory"
// Path from root: "/components/component/state/memory"
func (n *ComponentPath) Memory() *Component_MemoryPath {
	return &Component_MemoryPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// Memory (container): For components that have associated memory, these values
// report information about available and utilized memory.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/memory"
// Path from root: "/components/component/state/memory"
func (n *ComponentPathAny) Memory() *Component_MemoryPathAny {
	return &Component_MemoryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "memory"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgDate (leaf): System-supplied representation of the component's
// manufacturing date.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-date"
// Path from root: "/components/component/state/mfg-date"
func (n *ComponentPath) MfgDate() *Component_MfgDatePath {
	return &Component_MfgDatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgDate (leaf): System-supplied representation of the component's
// manufacturing date.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-date"
// Path from root: "/components/component/state/mfg-date"
func (n *ComponentPathAny) MfgDate() *Component_MfgDatePathAny {
	return &Component_MfgDatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-date"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgName (leaf): System-supplied identifier for the manufacturer of the
// component.  This data is particularly useful when a
// component manufacturer is different than the overall
// device vendor.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-name"
// Path from root: "/components/component/state/mfg-name"
func (n *ComponentPath) MfgName() *Component_MfgNamePath {
	return &Component_MfgNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MfgName (leaf): System-supplied identifier for the manufacturer of the
// component.  This data is particularly useful when a
// component manufacturer is different than the overall
// device vendor.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/mfg-name"
// Path from root: "/components/component/state/mfg-name"
func (n *ComponentPathAny) MfgName() *Component_MfgNamePathAny {
	return &Component_MfgNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mfg-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/config/name"
func (n *ComponentPath) Name() *Component_NamePath {
	return &Component_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Device name for the component -- this may not be a
// configurable parameter on many implementations.  Where
// component preconfiguration is supported, for example,
// the component name may be configurable.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/config/name"
func (n *ComponentPathAny) Name() *Component_NamePathAny {
	return &Component_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): If applicable, this reports the current operational status
// of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/oper-status"
// Path from root: "/components/component/state/oper-status"
func (n *ComponentPath) OperStatus() *Component_OperStatusPath {
	return &Component_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): If applicable, this reports the current operational status
// of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/oper-status"
// Path from root: "/components/component/state/oper-status"
func (n *ComponentPathAny) OperStatus() *Component_OperStatusPathAny {
	return &Component_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent (leaf): Reference to the name of the parent component.  Note that
// this reference must be kept synchronized with the
// corresponding subcomponent reference from the parent
// component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/parent"
// Path from root: "/components/component/state/parent"
func (n *ComponentPath) Parent() *Component_ParentPath {
	return &Component_ParentPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// Parent (leaf): Reference to the name of the parent component.  Note that
// this reference must be kept synchronized with the
// corresponding subcomponent reference from the parent
// component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/parent"
// Path from root: "/components/component/state/parent"
func (n *ComponentPathAny) Parent() *Component_ParentPathAny {
	return &Component_ParentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "parent"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartNo (leaf): System-assigned part number for the component.  This should
// be present in particular if the component is also an FRU
// (field replaceable unit)
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/part-no"
// Path from root: "/components/component/state/part-no"
func (n *ComponentPath) PartNo() *Component_PartNoPath {
	return &Component_PartNoPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "part-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartNo (leaf): System-assigned part number for the component.  This should
// be present in particular if the component is also an FRU
// (field replaceable unit)
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/part-no"
// Path from root: "/components/component/state/part-no"
func (n *ComponentPathAny) PartNo() *Component_PartNoPathAny {
	return &Component_PartNoPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "part-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pcie (container): Components that are connected to the system over the Peripheral
// Component Interconnect Express (PCIe), report the fatal, non-fatal
// and correctable PCIe error counts.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/pcie"
// Path from root: "/components/component/state/pcie"
func (n *ComponentPath) Pcie() *Component_PciePath {
	return &Component_PciePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pcie"},
			map[string]interface{}{},
			n,
		),
	}
}

// Pcie (container): Components that are connected to the system over the Peripheral
// Component Interconnect Express (PCIe), report the fatal, non-fatal
// and correctable PCIe error counts.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/pcie"
// Path from root: "/components/component/state/pcie"
func (n *ComponentPathAny) Pcie() *Component_PciePathAny {
	return &Component_PciePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pcie"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (container): Data for physical port components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "port"
// Path from root: "/components/component/port"
func (n *ComponentPath) Port() *Component_PortPath {
	return &Component_PortPath{
		NodePath: ygot.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
}

// Port (container): Data for physical port components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "port"
// Path from root: "/components/component/port"
func (n *ComponentPathAny) Port() *Component_PortPathAny {
	return &Component_PortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"port"},
			map[string]interface{}{},
			n,
		),
	}
}

// PowerSupply (container): Data for power supply components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "power-supply"
// Path from root: "/components/component/power-supply"
func (n *ComponentPath) PowerSupply() *Component_PowerSupplyPath {
	return &Component_PowerSupplyPath{
		NodePath: ygot.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
}

// PowerSupply (container): Data for power supply components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "power-supply"
// Path from root: "/components/component/power-supply"
func (n *ComponentPathAny) PowerSupply() *Component_PowerSupplyPathAny {
	return &Component_PowerSupplyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"power-supply"},
			map[string]interface{}{},
			n,
		),
	}
}

// PropertyAny (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name (wildcarded): string
func (n *ComponentPath) PropertyAny() *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PropertyAny (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name (wildcarded): string
func (n *ComponentPathAny) PropertyAny() *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Property (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name: string
func (n *ComponentPath) Property(Name string) *Component_PropertyPath {
	return &Component_PropertyPath{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Property (list): List of system properties for the component
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "properties/property"
// Path from root: "/components/component/properties/property"
// Name: string
func (n *ComponentPathAny) Property(Name string) *Component_PropertyPathAny {
	return &Component_PropertyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"properties", "property"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// RedundantRole (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the role of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/redundant-role"
// Path from root: "/components/component/state/redundant-role"
func (n *ComponentPath) RedundantRole() *Component_RedundantRolePath {
	return &Component_RedundantRolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "redundant-role"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedundantRole (leaf): For components that have redundant roles (e.g. two
// supervisors in a device, one as primary the other as secondary),
// this reports the role of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/redundant-role"
// Path from root: "/components/component/state/redundant-role"
func (n *ComponentPathAny) RedundantRole() *Component_RedundantRolePathAny {
	return &Component_RedundantRolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "redundant-role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Removable (leaf): If true, this component is removable or is a field
// replaceable unit
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/removable"
// Path from root: "/components/component/state/removable"
func (n *ComponentPath) Removable() *Component_RemovablePath {
	return &Component_RemovablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "removable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Removable (leaf): If true, this component is removable or is a field
// replaceable unit
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/removable"
// Path from root: "/components/component/state/removable"
func (n *ComponentPathAny) Removable() *Component_RemovablePathAny {
	return &Component_RemovablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "removable"},
			map[string]interface{}{},
			n,
		),
	}
}

// SerialNo (leaf): System-assigned serial number of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/serial-no"
// Path from root: "/components/component/state/serial-no"
func (n *ComponentPath) SerialNo() *Component_SerialNoPath {
	return &Component_SerialNoPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// SerialNo (leaf): System-assigned serial number of the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/serial-no"
// Path from root: "/components/component/state/serial-no"
func (n *ComponentPathAny) SerialNo() *Component_SerialNoPathAny {
	return &Component_SerialNoPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "serial-no"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "software-module"
// Path from root: "/components/component/software-module"
func (n *ComponentPath) SoftwareModule() *Component_SoftwareModulePath {
	return &Component_SoftwareModulePath{
		NodePath: ygot.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareModule (container): Data for software module components, i.e., for components
// with type=SOFTWARE_MODULE
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "software-module"
// Path from root: "/components/component/software-module"
func (n *ComponentPathAny) SoftwareModule() *Component_SoftwareModulePathAny {
	return &Component_SoftwareModulePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"software-module"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareVersion (leaf): For software components such as operating system or other
// software module, this is the version of the currently
// running software.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/software-version"
// Path from root: "/components/component/state/software-version"
func (n *ComponentPath) SoftwareVersion() *Component_SoftwareVersionPath {
	return &Component_SoftwareVersionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftwareVersion (leaf): For software components such as operating system or other
// software module, this is the version of the currently
// running software.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/software-version"
// Path from root: "/components/component/state/software-version"
func (n *ComponentPathAny) SoftwareVersion() *Component_SoftwareVersionPathAny {
	return &Component_SoftwareVersionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "software-version"},
			map[string]interface{}{},
			n,
		),
	}
}

// Storage (container): Data for storage components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "storage"
// Path from root: "/components/component/storage"
func (n *ComponentPath) Storage() *Component_StoragePath {
	return &Component_StoragePath{
		NodePath: ygot.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
}

// Storage (container): Data for storage components
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "storage"
// Path from root: "/components/component/storage"
func (n *ComponentPathAny) Storage() *Component_StoragePathAny {
	return &Component_StoragePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"storage"},
			map[string]interface{}{},
			n,
		),
	}
}

// SubcomponentAny (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name (wildcarded): string
func (n *ComponentPath) SubcomponentAny() *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// SubcomponentAny (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name (wildcarded): string
func (n *ComponentPathAny) SubcomponentAny() *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Subcomponent (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name: string
func (n *ComponentPath) Subcomponent(Name string) *Component_SubcomponentPath {
	return &Component_SubcomponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Subcomponent (list): List of subcomponent references
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "subcomponents/subcomponent"
// Path from root: "/components/component/subcomponents/subcomponent"
// Name: string
func (n *ComponentPathAny) Subcomponent(Name string) *Component_SubcomponentPathAny {
	return &Component_SubcomponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subcomponents", "subcomponent"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Temperature (container): Temperature in degrees Celsius of the component. Values include
// the instantaneous, average, minimum, and maximum statistics. If
// avg/min/max statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/temperature"
// Path from root: "/components/component/state/temperature"
func (n *ComponentPath) Temperature() *Component_TemperaturePath {
	return &Component_TemperaturePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temperature"},
			map[string]interface{}{},
			n,
		),
	}
}

// Temperature (container): Temperature in degrees Celsius of the component. Values include
// the instantaneous, average, minimum, and maximum statistics. If
// avg/min/max statistics are not supported, the target is expected
// to just supply the instant value
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/temperature"
// Path from root: "/components/component/state/temperature"
func (n *ComponentPathAny) Temperature() *Component_TemperaturePathAny {
	return &Component_TemperaturePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "temperature"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of component as identified by the system
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/type"
// Path from root: "/components/component/state/type"
func (n *ComponentPath) Type() *Component_TypePath {
	return &Component_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Type of component as identified by the system
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/type"
// Path from root: "/components/component/state/type"
func (n *ComponentPathAny) Type() *Component_TypePathAny {
	return &Component_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// UsedPower (leaf): Actual power used by the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used-power"
// Path from root: "/components/component/state/used-power"
func (n *ComponentPath) UsedPower() *Component_UsedPowerPath {
	return &Component_UsedPowerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// UsedPower (leaf): Actual power used by the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used-power"
// Path from root: "/components/component/state/used-power"
func (n *ComponentPathAny) UsedPower() *Component_UsedPowerPathAny {
	return &Component_UsedPowerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used-power"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_BackplanePath represents the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePath struct {
	*ygot.NodePath
}

// Component_BackplanePathAny represents the wildcard version of the /openconfig-platform/components/component/backplane YANG schema element.
type Component_BackplanePathAny struct {
	*ygot.NodePath
}

// Component_ChassisPath represents the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPath struct {
	*ygot.NodePath
}

// Component_ChassisPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis YANG schema element.
type Component_ChassisPathAny struct {
	*ygot.NodePath
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/chassis/utilization"
func (n *Component_ChassisPath) Utilization() *Component_Chassis_UtilizationPath {
	return &Component_Chassis_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/chassis/utilization"
func (n *Component_ChassisPathAny) Utilization() *Component_Chassis_UtilizationPathAny {
	return &Component_Chassis_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Chassis_UtilizationPath represents the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPath struct {
	*ygot.NodePath
}

// Component_Chassis_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization YANG schema element.
type Component_Chassis_UtilizationPathAny struct {
	*ygot.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_Chassis_UtilizationPath) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_Chassis_UtilizationPathAny) ResourceAny() *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name: string
func (n *Component_Chassis_UtilizationPath) Resource(Name string) *Component_Chassis_Utilization_ResourcePath {
	return &Component_Chassis_Utilization_ResourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/chassis/utilization/resources/resource"
// Name: string
func (n *Component_Chassis_UtilizationPathAny) Resource(Name string) *Component_Chassis_Utilization_ResourcePathAny {
	return &Component_Chassis_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Component_Chassis_Utilization_ResourcePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource YANG schema element.
type Component_Chassis_Utilization_ResourcePathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/committed YANG schema element.
type Component_Chassis_Utilization_Resource_CommittedPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/committed YANG schema element.
type Component_Chassis_Utilization_Resource_CommittedPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/free YANG schema element.
type Component_Chassis_Utilization_Resource_FreePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/free YANG schema element.
type Component_Chassis_Utilization_Resource_FreePathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_HighWatermarkPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_HighWatermarkPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_LastHighWatermarkPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Chassis_Utilization_Resource_MaxLimitPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/max-limit YANG schema element.
type Component_Chassis_Utilization_Resource_MaxLimitPathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/config/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/config/name YANG schema element.
type Component_Chassis_Utilization_Resource_NamePathAny struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPath struct {
	*ygot.NodePath
}

// Component_Chassis_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/chassis/utilization/resources/resource/state/used YANG schema element.
type Component_Chassis_Utilization_Resource_UsedPathAny struct {
	*ygot.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/committed"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePath) Committed() *Component_Chassis_Utilization_Resource_CommittedPath {
	return &Component_Chassis_Utilization_Resource_CommittedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/committed"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/committed"
func (n *Component_Chassis_Utilization_ResourcePathAny) Committed() *Component_Chassis_Utilization_Resource_CommittedPathAny {
	return &Component_Chassis_Utilization_Resource_CommittedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Number of entries available to use.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/free"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePath) Free() *Component_Chassis_Utilization_Resource_FreePath {
	return &Component_Chassis_Utilization_Resource_FreePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Number of entries available to use.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/free"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/free"
func (n *Component_Chassis_Utilization_ResourcePathAny) Free() *Component_Chassis_Utilization_Resource_FreePathAny {
	return &Component_Chassis_Utilization_Resource_FreePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPath {
	return &Component_Chassis_Utilization_Resource_HighWatermarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) HighWatermark() *Component_Chassis_Utilization_Resource_HighWatermarkPathAny {
	return &Component_Chassis_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastHighWatermark (leaf): The time when the high-watermark was last updated
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePath) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPath {
	return &Component_Chassis_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastHighWatermark (leaf): The time when the high-watermark was last updated
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-high-watermark"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/last-high-watermark"
func (n *Component_Chassis_Utilization_ResourcePathAny) LastHighWatermark() *Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny {
	return &Component_Chassis_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-limit"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePath) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPath {
	return &Component_Chassis_Utilization_Resource_MaxLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-limit"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/max-limit"
func (n *Component_Chassis_Utilization_ResourcePathAny) MaxLimit() *Component_Chassis_Utilization_Resource_MaxLimitPathAny {
	return &Component_Chassis_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_ResourcePath) Name() *Component_Chassis_Utilization_Resource_NamePath {
	return &Component_Chassis_Utilization_Resource_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/chassis/utilization/resources/resource/config/name"
func (n *Component_Chassis_Utilization_ResourcePathAny) Name() *Component_Chassis_Utilization_Resource_NamePathAny {
	return &Component_Chassis_Utilization_Resource_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Number of entries currently in use for the resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePath) Used() *Component_Chassis_Utilization_Resource_UsedPath {
	return &Component_Chassis_Utilization_Resource_UsedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Number of entries currently in use for the resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used"
// Path from root: "/components/component/chassis/utilization/resources/resource/state/used"
func (n *Component_Chassis_Utilization_ResourcePathAny) Used() *Component_Chassis_Utilization_Resource_UsedPathAny {
	return &Component_Chassis_Utilization_Resource_UsedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_CpuPath represents the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPath struct {
	*ygot.NodePath
}

// Component_CpuPathAny represents the wildcard version of the /openconfig-platform/components/component/cpu YANG schema element.
type Component_CpuPathAny struct {
	*ygot.NodePath
}

// Component_FabricPath represents the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPath struct {
	*ygot.NodePath
}

// Component_FabricPathAny represents the wildcard version of the /openconfig-platform/components/component/fabric YANG schema element.
type Component_FabricPathAny struct {
	*ygot.NodePath
}

// Component_FanPath represents the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPath struct {
	*ygot.NodePath
}

// Component_FanPathAny represents the wildcard version of the /openconfig-platform/components/component/fan YANG schema element.
type Component_FanPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuitPath represents the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit YANG schema element.
type Component_IntegratedCircuitPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_NodeIdPath represents the /openconfig-platform/components/component/integrated-circuit/config/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_NodeIdPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/config/node-id YANG schema element.
type Component_IntegratedCircuit_NodeIdPathAny struct {
	*ygot.NodePath
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/node-id"
// Path from root: "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuitPath) NodeId() *Component_IntegratedCircuit_NodeIdPath {
	return &Component_IntegratedCircuit_NodeIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "node-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NodeId (leaf): The numeric ID (device_id) used by the controller to address
// the integrated circuit, which may be referred to as a 'device',
// 'node' or 'target' by the P4RT specification.
//
// Each switching ASIC (i.e., node) is addressed by the external
// entity based on its numeric identifier.
//
// The node ID is specified in addition to the string identifier
// assigned to the integrated circuit within the
// /components/component list.
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/node-id"
// Path from root: "/components/component/integrated-circuit/config/node-id"
func (n *Component_IntegratedCircuitPathAny) NodeId() *Component_IntegratedCircuit_NodeIdPathAny {
	return &Component_IntegratedCircuit_NodeIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "node-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPath) Utilization() *Component_IntegratedCircuit_UtilizationPath {
	return &Component_IntegratedCircuit_UtilizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilization (container): Utilization of the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilization"
// Path from root: "/components/component/integrated-circuit/utilization"
func (n *Component_IntegratedCircuitPathAny) Utilization() *Component_IntegratedCircuit_UtilizationPathAny {
	return &Component_IntegratedCircuit_UtilizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_IntegratedCircuit_UtilizationPath represents the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_UtilizationPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization YANG schema element.
type Component_IntegratedCircuit_UtilizationPathAny struct {
	*ygot.NodePath
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_IntegratedCircuit_UtilizationPath) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	return &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// ResourceAny (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name (wildcarded): string
func (n *Component_IntegratedCircuit_UtilizationPathAny) ResourceAny() *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	return &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name: string
func (n *Component_IntegratedCircuit_UtilizationPath) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePath {
	return &Component_IntegratedCircuit_Utilization_ResourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Resource (list): List of resources, keyed by resource name.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "resources/resource"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource"
// Name: string
func (n *Component_IntegratedCircuit_UtilizationPathAny) Resource(Name string) *Component_IntegratedCircuit_Utilization_ResourcePathAny {
	return &Component_IntegratedCircuit_Utilization_ResourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"resources", "resource"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Component_IntegratedCircuit_Utilization_ResourcePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_ResourcePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource YANG schema element.
type Component_IntegratedCircuit_Utilization_ResourcePathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/committed YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_FreePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_FreePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/free YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_FreePathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/max-limit YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_NamePath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/config/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/config/name YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_NamePathAny struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPath represents the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPath struct {
	*ygot.NodePath
}

// Component_IntegratedCircuit_Utilization_Resource_UsedPathAny represents the wildcard version of the /openconfig-platform/components/component/integrated-circuit/utilization/resources/resource/state/used YANG schema element.
type Component_IntegratedCircuit_Utilization_Resource_UsedPathAny struct {
	*ygot.NodePath
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/committed"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPath {
	return &Component_IntegratedCircuit_Utilization_Resource_CommittedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Committed (leaf): Number of entries currently reserved for this resource. This is only
// relevant to tables which allocate a block of resource for a given
// feature.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/committed"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/committed"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Committed() *Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_CommittedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "committed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Number of entries available to use.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/free"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePath {
	return &Component_IntegratedCircuit_Utilization_Resource_FreePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// Free (leaf): Number of entries available to use.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/free"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/free"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Free() *Component_IntegratedCircuit_Utilization_Resource_FreePathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_FreePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "free"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/high-watermark"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath {
	return &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighWatermark (leaf): A watermark of highest number of entries used for this resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/high-watermark"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) HighWatermark() *Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_HighWatermarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastHighWatermark (leaf): The time when the high-watermark was last updated
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-high-watermark"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath {
	return &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastHighWatermark (leaf): The time when the high-watermark was last updated
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/last-high-watermark"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/last-high-watermark"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) LastHighWatermark() *Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_LastHighWatermarkPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-high-watermark"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-limit"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath {
	return &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxLimit (leaf): Maximum number of entries available for the resource. The value
// is the theoretical maximum resource utilization possible.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/max-limit"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/max-limit"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) MaxLimit() *Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_MaxLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "max-limit"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePath {
	return &Component_IntegratedCircuit_Utilization_Resource_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Resource name within the component.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/config/name"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Name() *Component_IntegratedCircuit_Utilization_Resource_NamePathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Number of entries currently in use for the resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePath) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPath {
	return &Component_IntegratedCircuit_Utilization_Resource_UsedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Used (leaf): Number of entries currently in use for the resource.
// ----------------------------------------
// Defining module: "openconfig-platform-common"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/used"
// Path from root: "/components/component/integrated-circuit/utilization/resources/resource/state/used"
func (n *Component_IntegratedCircuit_Utilization_ResourcePathAny) Used() *Component_IntegratedCircuit_Utilization_Resource_UsedPathAny {
	return &Component_IntegratedCircuit_Utilization_Resource_UsedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "used"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_LastSwitchoverReasonPath represents the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPath struct {
	*ygot.NodePath
}

// Component_LastSwitchoverReasonPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason YANG schema element.
type Component_LastSwitchoverReasonPathAny struct {
	*ygot.NodePath
}

// Component_LastSwitchoverReason_DetailsPath represents the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPath struct {
	*ygot.NodePath
}

// Component_LastSwitchoverReason_DetailsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/details YANG schema element.
type Component_LastSwitchoverReason_DetailsPathAny struct {
	*ygot.NodePath
}

// Component_LastSwitchoverReason_TriggerPath represents the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPath struct {
	*ygot.NodePath
}

// Component_LastSwitchoverReason_TriggerPathAny represents the wildcard version of the /openconfig-platform/components/component/state/last-switchover-reason/trigger YANG schema element.
type Component_LastSwitchoverReason_TriggerPathAny struct {
	*ygot.NodePath
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "details"
// Path from root: "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPath) Details() *Component_LastSwitchoverReason_DetailsPath {
	return &Component_LastSwitchoverReason_DetailsPath{
		NodePath: ygot.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
	}
}

// Details (leaf): Records detailed description of why the switchover happens.
// For example, when system initiated the switchover, this leaf
// can be used to record the specific reason, e.g. due to critical
// errors of the routing daemon in the primary role.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "details"
// Path from root: "/components/component/state/last-switchover-reason/details"
func (n *Component_LastSwitchoverReasonPathAny) Details() *Component_LastSwitchoverReason_DetailsPathAny {
	return &Component_LastSwitchoverReason_DetailsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"details"},
			map[string]interface{}{},
			n,
		),
	}
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "trigger"
// Path from root: "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPath) Trigger() *Component_LastSwitchoverReason_TriggerPath {
	return &Component_LastSwitchoverReason_TriggerPath{
		NodePath: ygot.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
	}
}

// Trigger (leaf): Records the generic triggers, e.g. user or system
// initiated the switchover.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "trigger"
// Path from root: "/components/component/state/last-switchover-reason/trigger"
func (n *Component_LastSwitchoverReasonPathAny) Trigger() *Component_LastSwitchoverReason_TriggerPathAny {
	return &Component_LastSwitchoverReason_TriggerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"trigger"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_MemoryPath represents the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_MemoryPath struct {
	*ygot.NodePath
}

// Component_MemoryPathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory YANG schema element.
type Component_MemoryPathAny struct {
	*ygot.NodePath
}

// Component_Memory_AvailablePath represents the /openconfig-platform/components/component/state/memory/available YANG schema element.
type Component_Memory_AvailablePath struct {
	*ygot.NodePath
}

// Component_Memory_AvailablePathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory/available YANG schema element.
type Component_Memory_AvailablePathAny struct {
	*ygot.NodePath
}

// Component_Memory_UtilizedPath represents the /openconfig-platform/components/component/state/memory/utilized YANG schema element.
type Component_Memory_UtilizedPath struct {
	*ygot.NodePath
}

// Component_Memory_UtilizedPathAny represents the wildcard version of the /openconfig-platform/components/component/state/memory/utilized YANG schema element.
type Component_Memory_UtilizedPathAny struct {
	*ygot.NodePath
}

// Available (leaf): The available memory physically installed, or logically
// allocated to the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "available"
// Path from root: "/components/component/state/memory/available"
func (n *Component_MemoryPath) Available() *Component_Memory_AvailablePath {
	return &Component_Memory_AvailablePath{
		NodePath: ygot.NewNodePath(
			[]string{"available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Available (leaf): The available memory physically installed, or logically
// allocated to the component.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "available"
// Path from root: "/components/component/state/memory/available"
func (n *Component_MemoryPathAny) Available() *Component_Memory_AvailablePathAny {
	return &Component_Memory_AvailablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"available"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The memory currently in use by processes running on
// the component, not considering reserved memory that is
// not available for use.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilized"
// Path from root: "/components/component/state/memory/utilized"
func (n *Component_MemoryPath) Utilized() *Component_Memory_UtilizedPath {
	return &Component_Memory_UtilizedPath{
		NodePath: ygot.NewNodePath(
			[]string{"utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// Utilized (leaf): The memory currently in use by processes running on
// the component, not considering reserved memory that is
// not available for use.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "utilized"
// Path from root: "/components/component/state/memory/utilized"
func (n *Component_MemoryPathAny) Utilized() *Component_Memory_UtilizedPathAny {
	return &Component_Memory_UtilizedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"utilized"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_PciePath represents the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_PciePath struct {
	*ygot.NodePath
}

// Component_PciePathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie YANG schema element.
type Component_PciePathAny struct {
	*ygot.NodePath
}

// CorrectableErrors (container): The count of the correctable PCIe errors.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "correctable-errors"
// Path from root: "/components/component/state/pcie/correctable-errors"
func (n *Component_PciePath) CorrectableErrors() *Component_Pcie_CorrectableErrorsPath {
	return &Component_Pcie_CorrectableErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CorrectableErrors (container): The count of the correctable PCIe errors.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "correctable-errors"
// Path from root: "/components/component/state/pcie/correctable-errors"
func (n *Component_PciePathAny) CorrectableErrors() *Component_Pcie_CorrectableErrorsPathAny {
	return &Component_Pcie_CorrectableErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"correctable-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// FatalErrors (container): The count of the fatal PCIe errors.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fatal-errors"
// Path from root: "/components/component/state/pcie/fatal-errors"
func (n *Component_PciePath) FatalErrors() *Component_Pcie_FatalErrorsPath {
	return &Component_Pcie_FatalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// FatalErrors (container): The count of the fatal PCIe errors.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "fatal-errors"
// Path from root: "/components/component/state/pcie/fatal-errors"
func (n *Component_PciePathAny) FatalErrors() *Component_Pcie_FatalErrorsPathAny {
	return &Component_Pcie_FatalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// NonFatalErrors (container): The count of the non-fatal PCIe errors.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "non-fatal-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors"
func (n *Component_PciePath) NonFatalErrors() *Component_Pcie_NonFatalErrorsPath {
	return &Component_Pcie_NonFatalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// NonFatalErrors (container): The count of the non-fatal PCIe errors.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "non-fatal-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors"
func (n *Component_PciePathAny) NonFatalErrors() *Component_Pcie_NonFatalErrorsPathAny {
	return &Component_Pcie_NonFatalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Pcie_CorrectableErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors YANG schema element.
type Component_Pcie_CorrectableErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_BadDllpErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-dllp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadDllpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-dllp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_BadTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-tlp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadTlpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/bad-tlp-errors YANG schema element.
type Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors YANG schema element.
type Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors YANG schema element.
type Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/internal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_InternalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/internal-errors YANG schema element.
type Component_Pcie_CorrectableErrors_InternalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_ReceiverErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/receiver-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReceiverErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/receiver-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/relay-rollover-errors YANG schema element.
type Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/relay-rollover-errors YANG schema element.
type Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/replay-timeout-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/replay-timeout-errors YANG schema element.
type Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/correctable-errors/total-errors YANG schema element.
type Component_Pcie_CorrectableErrors_TotalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_CorrectableErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/correctable-errors/total-errors YANG schema element.
type Component_Pcie_CorrectableErrors_TotalErrorsPathAny struct {
	*ygot.NodePath
}

// AdvisoryNonFatalErrors (leaf): Number of advisory non fatal errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "advisory-non-fatal-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrorsPath) AdvisoryNonFatalErrors() *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath {
	return &Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvisoryNonFatalErrors (leaf): Number of advisory non fatal errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "advisory-non-fatal-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/advisory-non-fatal-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) AdvisoryNonFatalErrors() *Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_AdvisoryNonFatalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"advisory-non-fatal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadDllpErrors (leaf): Number of DLLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "bad-dllp-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrorsPath) BadDllpErrors() *Component_Pcie_CorrectableErrors_BadDllpErrorsPath {
	return &Component_Pcie_CorrectableErrors_BadDllpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-dllp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadDllpErrors (leaf): Number of DLLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "bad-dllp-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/bad-dllp-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) BadDllpErrors() *Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_BadDllpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-dllp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadTlpErrors (leaf): Number of TLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "bad-tlp-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrorsPath) BadTlpErrors() *Component_Pcie_CorrectableErrors_BadTlpErrorsPath {
	return &Component_Pcie_CorrectableErrors_BadTlpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"bad-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BadTlpErrors (leaf): Number of TLPs with bad LCRC detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "bad-tlp-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/bad-tlp-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) BadTlpErrors() *Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_BadTlpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bad-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// HdrLogOverflowErrors (leaf): Number of header log overflow errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "hdr-log-overflow-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrorsPath) HdrLogOverflowErrors() *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath {
	return &Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// HdrLogOverflowErrors (leaf): Number of header log overflow errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "hdr-log-overflow-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/hdr-log-overflow-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) HdrLogOverflowErrors() *Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_HdrLogOverflowErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hdr-log-overflow-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "internal-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrorsPath) InternalErrors() *Component_Pcie_CorrectableErrors_InternalErrorsPath {
	return &Component_Pcie_CorrectableErrors_InternalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "internal-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/internal-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) InternalErrors() *Component_Pcie_CorrectableErrors_InternalErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_InternalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiverErrors (leaf): Number of receiver errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "receiver-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrorsPath) ReceiverErrors() *Component_Pcie_CorrectableErrors_ReceiverErrorsPath {
	return &Component_Pcie_CorrectableErrors_ReceiverErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"receiver-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiverErrors (leaf): Number of receiver errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "receiver-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/receiver-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) ReceiverErrors() *Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_ReceiverErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"receiver-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// RelayRolloverErrors (leaf): Number of relay rollover errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "relay-rollover-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrorsPath) RelayRolloverErrors() *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath {
	return &Component_Pcie_CorrectableErrors_RelayRolloverErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"relay-rollover-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// RelayRolloverErrors (leaf): Number of relay rollover errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "relay-rollover-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/relay-rollover-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) RelayRolloverErrors() *Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_RelayRolloverErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"relay-rollover-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplayTimeoutErrors (leaf): Number of replay timeout errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "replay-timeout-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrorsPath) ReplayTimeoutErrors() *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath {
	return &Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"replay-timeout-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplayTimeoutErrors (leaf): Number of replay timeout errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "replay-timeout-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/replay-timeout-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) ReplayTimeoutErrors() *Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_ReplayTimeoutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"replay-timeout-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalErrors (leaf): Total number of correctable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "total-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrorsPath) TotalErrors() *Component_Pcie_CorrectableErrors_TotalErrorsPath {
	return &Component_Pcie_CorrectableErrors_TotalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalErrors (leaf): Total number of correctable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "total-errors"
// Path from root: "/components/component/state/pcie/correctable-errors/total-errors"
func (n *Component_Pcie_CorrectableErrorsPathAny) TotalErrors() *Component_Pcie_CorrectableErrors_TotalErrorsPathAny {
	return &Component_Pcie_CorrectableErrors_TotalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Pcie_FatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors YANG schema element.
type Component_Pcie_FatalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_AcsViolationErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_FatalErrors_AcsViolationErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_AcsViolationErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_FatalErrors_AcsViolationErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_BlockedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_BlockedTlpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_CompletionAbortErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionAbortErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_DataLinkErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_FatalErrors_DataLinkErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_DataLinkErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_FatalErrors_DataLinkErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_EcrcErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_FatalErrors_EcrcErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_EcrcErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_FatalErrors_EcrcErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/internal-errors YANG schema element.
type Component_Pcie_FatalErrors_InternalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/internal-errors YANG schema element.
type Component_Pcie_FatalErrors_InternalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_MalformedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_MalformedTlpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_PoisonedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_PoisonedTlpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_SurpriseDownErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_FatalErrors_SurpriseDownErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/total-errors YANG schema element.
type Component_Pcie_FatalErrors_TotalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/total-errors YANG schema element.
type Component_Pcie_FatalErrors_TotalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_UndefinedErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_FatalErrors_UndefinedErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_UndefinedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_FatalErrors_UndefinedErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath represents the /openconfig-platform/components/component/state/pcie/fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny struct {
	*ygot.NodePath
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "acs-violation-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrorsPath) AcsViolationErrors() *Component_Pcie_FatalErrors_AcsViolationErrorsPath {
	return &Component_Pcie_FatalErrors_AcsViolationErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "acs-violation-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/acs-violation-errors"
func (n *Component_Pcie_FatalErrorsPathAny) AcsViolationErrors() *Component_Pcie_FatalErrors_AcsViolationErrorsPathAny {
	return &Component_Pcie_FatalErrors_AcsViolationErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "atomic-op-blocked-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrorsPath) AtomicOpBlockedErrors() *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath {
	return &Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "atomic-op-blocked-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_FatalErrorsPathAny) AtomicOpBlockedErrors() *Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny {
	return &Component_Pcie_FatalErrors_AtomicOpBlockedErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "blocked-tlp-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) BlockedTlpErrors() *Component_Pcie_FatalErrors_BlockedTlpErrorsPath {
	return &Component_Pcie_FatalErrors_BlockedTlpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "blocked-tlp-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) BlockedTlpErrors() *Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny {
	return &Component_Pcie_FatalErrors_BlockedTlpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-abort-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrorsPath) CompletionAbortErrors() *Component_Pcie_FatalErrors_CompletionAbortErrorsPath {
	return &Component_Pcie_FatalErrors_CompletionAbortErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-abort-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/completion-abort-errors"
func (n *Component_Pcie_FatalErrorsPathAny) CompletionAbortErrors() *Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny {
	return &Component_Pcie_FatalErrors_CompletionAbortErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-timeout-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrorsPath) CompletionTimeoutErrors() *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath {
	return &Component_Pcie_FatalErrors_CompletionTimeoutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-timeout-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_FatalErrorsPathAny) CompletionTimeoutErrors() *Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny {
	return &Component_Pcie_FatalErrors_CompletionTimeoutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "data-link-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrorsPath) DataLinkErrors() *Component_Pcie_FatalErrors_DataLinkErrorsPath {
	return &Component_Pcie_FatalErrors_DataLinkErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "data-link-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/data-link-errors"
func (n *Component_Pcie_FatalErrorsPathAny) DataLinkErrors() *Component_Pcie_FatalErrors_DataLinkErrorsPathAny {
	return &Component_Pcie_FatalErrors_DataLinkErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "ecrc-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrorsPath) EcrcErrors() *Component_Pcie_FatalErrors_EcrcErrorsPath {
	return &Component_Pcie_FatalErrors_EcrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "ecrc-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/ecrc-errors"
func (n *Component_Pcie_FatalErrorsPathAny) EcrcErrors() *Component_Pcie_FatalErrors_EcrcErrorsPathAny {
	return &Component_Pcie_FatalErrors_EcrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "flow-control-protocol-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrorsPath) FlowControlProtocolErrors() *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath {
	return &Component_Pcie_FatalErrors_FlowControlProtocolErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "flow-control-protocol-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_FatalErrorsPathAny) FlowControlProtocolErrors() *Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny {
	return &Component_Pcie_FatalErrors_FlowControlProtocolErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "internal-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrorsPath) InternalErrors() *Component_Pcie_FatalErrors_InternalErrorsPath {
	return &Component_Pcie_FatalErrors_InternalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "internal-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/internal-errors"
func (n *Component_Pcie_FatalErrorsPathAny) InternalErrors() *Component_Pcie_FatalErrors_InternalErrorsPathAny {
	return &Component_Pcie_FatalErrors_InternalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "malformed-tlp-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) MalformedTlpErrors() *Component_Pcie_FatalErrors_MalformedTlpErrorsPath {
	return &Component_Pcie_FatalErrors_MalformedTlpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "malformed-tlp-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) MalformedTlpErrors() *Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny {
	return &Component_Pcie_FatalErrors_MalformedTlpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "poisoned-tlp-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrorsPath) PoisonedTlpErrors() *Component_Pcie_FatalErrors_PoisonedTlpErrorsPath {
	return &Component_Pcie_FatalErrors_PoisonedTlpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "poisoned-tlp-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_FatalErrorsPathAny) PoisonedTlpErrors() *Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny {
	return &Component_Pcie_FatalErrors_PoisonedTlpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "receiver-overflow-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrorsPath) ReceiverOverflowErrors() *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath {
	return &Component_Pcie_FatalErrors_ReceiverOverflowErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "receiver-overflow-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_FatalErrorsPathAny) ReceiverOverflowErrors() *Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny {
	return &Component_Pcie_FatalErrors_ReceiverOverflowErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "surprise-down-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrorsPath) SurpriseDownErrors() *Component_Pcie_FatalErrors_SurpriseDownErrorsPath {
	return &Component_Pcie_FatalErrors_SurpriseDownErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "surprise-down-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/surprise-down-errors"
func (n *Component_Pcie_FatalErrorsPathAny) SurpriseDownErrors() *Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny {
	return &Component_Pcie_FatalErrors_SurpriseDownErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "tlp-prefix-blocked-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrorsPath) TlpPrefixBlockedErrors() *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath {
	return &Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "tlp-prefix-blocked-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_FatalErrorsPathAny) TlpPrefixBlockedErrors() *Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny {
	return &Component_Pcie_FatalErrors_TlpPrefixBlockedErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "total-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrorsPath) TotalErrors() *Component_Pcie_FatalErrors_TotalErrorsPath {
	return &Component_Pcie_FatalErrors_TotalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "total-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/total-errors"
func (n *Component_Pcie_FatalErrorsPathAny) TotalErrors() *Component_Pcie_FatalErrors_TotalErrorsPathAny {
	return &Component_Pcie_FatalErrors_TotalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "undefined-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrorsPath) UndefinedErrors() *Component_Pcie_FatalErrors_UndefinedErrorsPath {
	return &Component_Pcie_FatalErrors_UndefinedErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "undefined-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/undefined-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UndefinedErrors() *Component_Pcie_FatalErrors_UndefinedErrorsPathAny {
	return &Component_Pcie_FatalErrors_UndefinedErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unexpected-completion-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrorsPath) UnexpectedCompletionErrors() *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath {
	return &Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unexpected-completion-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UnexpectedCompletionErrors() *Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny {
	return &Component_Pcie_FatalErrors_UnexpectedCompletionErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unsupported-request-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrorsPath) UnsupportedRequestErrors() *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath {
	return &Component_Pcie_FatalErrors_UnsupportedRequestErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unsupported-request-errors"
// Path from root: "/components/component/state/pcie/fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_FatalErrorsPathAny) UnsupportedRequestErrors() *Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny {
	return &Component_Pcie_FatalErrors_UnsupportedRequestErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Pcie_NonFatalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors YANG schema element.
type Component_Pcie_NonFatalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_AcsViolationErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AcsViolationErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/acs-violation-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-abort-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/completion-timeout-errors YANG schema element.
type Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_DataLinkErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_NonFatalErrors_DataLinkErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/data-link-errors YANG schema element.
type Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_EcrcErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_NonFatalErrors_EcrcErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_EcrcErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/ecrc-errors YANG schema element.
type Component_Pcie_NonFatalErrors_EcrcErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors YANG schema element.
type Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_InternalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/internal-errors YANG schema element.
type Component_Pcie_NonFatalErrors_InternalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_InternalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/internal-errors YANG schema element.
type Component_Pcie_NonFatalErrors_InternalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors YANG schema element.
type Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors YANG schema element.
type Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/surprise-down-errors YANG schema element.
type Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_TotalErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/total-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TotalErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_TotalErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/total-errors YANG schema element.
type Component_Pcie_NonFatalErrors_TotalErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_UndefinedErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UndefinedErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/undefined-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath represents the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath struct {
	*ygot.NodePath
}

// Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny represents the wildcard version of the /openconfig-platform/components/component/state/pcie/non-fatal-errors/unsupported-request-errors YANG schema element.
type Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny struct {
	*ygot.NodePath
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "acs-violation-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrorsPath) AcsViolationErrors() *Component_Pcie_NonFatalErrors_AcsViolationErrorsPath {
	return &Component_Pcie_NonFatalErrors_AcsViolationErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcsViolationErrors (leaf): Number of access control errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "acs-violation-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/acs-violation-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) AcsViolationErrors() *Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_AcsViolationErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"acs-violation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "atomic-op-blocked-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPath) AtomicOpBlockedErrors() *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath {
	return &Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// AtomicOpBlockedErrors (leaf): Number of atomic operation blocked errors detected by PCIe
// device since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "atomic-op-blocked-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/atomic-op-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) AtomicOpBlockedErrors() *Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_AtomicOpBlockedErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"atomic-op-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "blocked-tlp-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) BlockedTlpErrors() *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath {
	return &Component_Pcie_NonFatalErrors_BlockedTlpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// BlockedTlpErrors (leaf): Number of blocked TLP errors detected by PCIe device since
// the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "blocked-tlp-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/blocked-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) BlockedTlpErrors() *Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_BlockedTlpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"blocked-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-abort-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrorsPath) CompletionAbortErrors() *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath {
	return &Component_Pcie_NonFatalErrors_CompletionAbortErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionAbortErrors (leaf): Number of completion abort errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-abort-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/completion-abort-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) CompletionAbortErrors() *Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_CompletionAbortErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"completion-abort-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-timeout-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrorsPath) CompletionTimeoutErrors() *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath {
	return &Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// CompletionTimeoutErrors (leaf): Number of completion timeout errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "completion-timeout-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/completion-timeout-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) CompletionTimeoutErrors() *Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_CompletionTimeoutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"completion-timeout-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "data-link-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrorsPath) DataLinkErrors() *Component_Pcie_NonFatalErrors_DataLinkErrorsPath {
	return &Component_Pcie_NonFatalErrors_DataLinkErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// DataLinkErrors (leaf): Number of data-link errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "data-link-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/data-link-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) DataLinkErrors() *Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_DataLinkErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"data-link-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "ecrc-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrorsPath) EcrcErrors() *Component_Pcie_NonFatalErrors_EcrcErrorsPath {
	return &Component_Pcie_NonFatalErrors_EcrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// EcrcErrors (leaf): Number of ECRC errors detected by PCIe device since the system
// booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "ecrc-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/ecrc-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) EcrcErrors() *Component_Pcie_NonFatalErrors_EcrcErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_EcrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ecrc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "flow-control-protocol-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrorsPath) FlowControlProtocolErrors() *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath {
	return &Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// FlowControlProtocolErrors (leaf): Number of flow control protocol errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "flow-control-protocol-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/flow-control-protocol-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) FlowControlProtocolErrors() *Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_FlowControlProtocolErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"flow-control-protocol-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "internal-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrorsPath) InternalErrors() *Component_Pcie_NonFatalErrors_InternalErrorsPath {
	return &Component_Pcie_NonFatalErrors_InternalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InternalErrors (leaf): Number of internal errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "internal-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/internal-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) InternalErrors() *Component_Pcie_NonFatalErrors_InternalErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_InternalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"internal-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "malformed-tlp-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) MalformedTlpErrors() *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath {
	return &Component_Pcie_NonFatalErrors_MalformedTlpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// MalformedTlpErrors (leaf): Number of malformed TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "malformed-tlp-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/malformed-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) MalformedTlpErrors() *Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_MalformedTlpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"malformed-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "poisoned-tlp-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPath) PoisonedTlpErrors() *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath {
	return &Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoisonedTlpErrors (leaf): Number of poisoned TLP errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "poisoned-tlp-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/poisoned-tlp-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) PoisonedTlpErrors() *Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_PoisonedTlpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"poisoned-tlp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "receiver-overflow-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrorsPath) ReceiverOverflowErrors() *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath {
	return &Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiverOverflowErrors (leaf): Number of receiver overflow errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "receiver-overflow-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/receiver-overflow-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) ReceiverOverflowErrors() *Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_ReceiverOverflowErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"receiver-overflow-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "surprise-down-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrorsPath) SurpriseDownErrors() *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath {
	return &Component_Pcie_NonFatalErrors_SurpriseDownErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SurpriseDownErrors (leaf): Number of unexpected link down errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "surprise-down-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/surprise-down-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) SurpriseDownErrors() *Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_SurpriseDownErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"surprise-down-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "tlp-prefix-blocked-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPath) TlpPrefixBlockedErrors() *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath {
	return &Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlpPrefixBlockedErrors (leaf): Number of TLP prefix blocked errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "tlp-prefix-blocked-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/tlp-prefix-blocked-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) TlpPrefixBlockedErrors() *Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_TlpPrefixBlockedErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlp-prefix-blocked-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "total-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrorsPath) TotalErrors() *Component_Pcie_NonFatalErrors_TotalErrorsPath {
	return &Component_Pcie_NonFatalErrors_TotalErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// TotalErrors (leaf): Total number of uncorrectable errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "total-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/total-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) TotalErrors() *Component_Pcie_NonFatalErrors_TotalErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_TotalErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"total-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "undefined-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UndefinedErrors() *Component_Pcie_NonFatalErrors_UndefinedErrorsPath {
	return &Component_Pcie_NonFatalErrors_UndefinedErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UndefinedErrors (leaf): Number of undefined errors detected by PCIe device since the
// system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "undefined-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/undefined-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UndefinedErrors() *Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_UndefinedErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"undefined-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unexpected-completion-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UnexpectedCompletionErrors() *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath {
	return &Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnexpectedCompletionErrors (leaf): Number of unexpected completion errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unexpected-completion-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/unexpected-completion-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UnexpectedCompletionErrors() *Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_UnexpectedCompletionErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unexpected-completion-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unsupported-request-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrorsPath) UnsupportedRequestErrors() *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath {
	return &Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnsupportedRequestErrors (leaf): Number of unsupported request errors detected by PCIe device
// since the system booted, according to PCIe AER driver.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "unsupported-request-errors"
// Path from root: "/components/component/state/pcie/non-fatal-errors/unsupported-request-errors"
func (n *Component_Pcie_NonFatalErrorsPathAny) UnsupportedRequestErrors() *Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny {
	return &Component_Pcie_NonFatalErrors_UnsupportedRequestErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unsupported-request-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_PortPath represents the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPath struct {
	*ygot.NodePath
}

// Component_PortPathAny represents the wildcard version of the /openconfig-platform/components/component/port YANG schema element.
type Component_PortPathAny struct {
	*ygot.NodePath
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "breakout-mode"
// Path from root: "/components/component/port/breakout-mode"
func (n *Component_PortPath) BreakoutMode() *Component_Port_BreakoutModePath {
	return &Component_Port_BreakoutModePath{
		NodePath: ygot.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// BreakoutMode (container): Top-level container for port breakout-mode data.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "breakout-mode"
// Path from root: "/components/component/port/breakout-mode"
func (n *Component_PortPathAny) BreakoutMode() *Component_Port_BreakoutModePathAny {
	return &Component_Port_BreakoutModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"breakout-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_Port_BreakoutModePath represents the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutModePathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode YANG schema element.
type Component_Port_BreakoutModePathAny struct {
	*ygot.NodePath
}

// GroupAny (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index (wildcarded): uint8
func (n *Component_Port_BreakoutModePath) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	return &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// GroupAny (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index (wildcarded): uint8
func (n *Component_Port_BreakoutModePathAny) GroupAny() *Component_Port_BreakoutMode_GroupPathAny {
	return &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Group (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index: uint8
func (n *Component_Port_BreakoutModePath) Group(Index uint8) *Component_Port_BreakoutMode_GroupPath {
	return &Component_Port_BreakoutMode_GroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Group (list): List of breakout groups.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "groups/group"
// Path from root: "/components/component/port/breakout-mode/groups/group"
// Index: uint8
func (n *Component_Port_BreakoutModePathAny) Group(Index uint8) *Component_Port_BreakoutMode_GroupPathAny {
	return &Component_Port_BreakoutMode_GroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"groups", "group"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Component_Port_BreakoutMode_GroupPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_GroupPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group YANG schema element.
type Component_Port_BreakoutMode_GroupPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/breakout-speed YANG schema element.
type Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_IndexPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_IndexPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/index YANG schema element.
type Component_Port_BreakoutMode_Group_IndexPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumBreakoutsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-breakouts YANG schema element.
type Component_Port_BreakoutMode_Group_NumBreakoutsPathAny struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath represents the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath struct {
	*ygot.NodePath
}

// Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny represents the wildcard version of the /openconfig-platform/components/component/port/breakout-mode/groups/group/config/num-physical-channels YANG schema element.
type Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny struct {
	*ygot.NodePath
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/breakout-speed"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPath) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPath {
	return &Component_Port_BreakoutMode_Group_BreakoutSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// BreakoutSpeed (leaf): Speed of interfaces in this breakout group, supported
// values are defined by the ETHERNET_SPEED identity.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/breakout-speed"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/breakout-speed"
func (n *Component_Port_BreakoutMode_GroupPathAny) BreakoutSpeed() *Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny {
	return &Component_Port_BreakoutMode_Group_BreakoutSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "breakout-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/index"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_GroupPath) Index() *Component_Port_BreakoutMode_Group_IndexPath {
	return &Component_Port_BreakoutMode_Group_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Each index specifies breakouts that are identical in
// terms of speed and the number of physical channels.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/index"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/index"
func (n *Component_Port_BreakoutMode_GroupPathAny) Index() *Component_Port_BreakoutMode_Group_IndexPathAny {
	return &Component_Port_BreakoutMode_Group_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-breakouts"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPath) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPath {
	return &Component_Port_BreakoutMode_Group_NumBreakoutsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumBreakouts (leaf): Sets the number of interfaces using this breakout group.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-breakouts"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-breakouts"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumBreakouts() *Component_Port_BreakoutMode_Group_NumBreakoutsPathAny {
	return &Component_Port_BreakoutMode_Group_NumBreakoutsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-breakouts"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-physical-channels"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPath) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath {
	return &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
}

// NumPhysicalChannels (leaf): Sets the number of lanes or physical channels assigned
// to the interfaces in this breakout group. This leaf need
// not be set if there is only one breakout group where all
// the interfaces are of equal speed and have equal number
// of physical channels
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/num-physical-channels"
// Path from root: "/components/component/port/breakout-mode/groups/group/config/num-physical-channels"
func (n *Component_Port_BreakoutMode_GroupPathAny) NumPhysicalChannels() *Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny {
	return &Component_Port_BreakoutMode_Group_NumPhysicalChannelsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "num-physical-channels"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_PowerSupplyPath represents the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPath struct {
	*ygot.NodePath
}

// Component_PowerSupplyPathAny represents the wildcard version of the /openconfig-platform/components/component/power-supply YANG schema element.
type Component_PowerSupplyPathAny struct {
	*ygot.NodePath
}

// Component_PropertyPath represents the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPath struct {
	*ygot.NodePath
}

// Component_PropertyPathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property YANG schema element.
type Component_PropertyPathAny struct {
	*ygot.NodePath
}

// Component_Property_ConfigurablePath represents the /openconfig-platform/components/component/properties/property/state/configurable YANG schema element.
type Component_Property_ConfigurablePath struct {
	*ygot.NodePath
}

// Component_Property_ConfigurablePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/state/configurable YANG schema element.
type Component_Property_ConfigurablePathAny struct {
	*ygot.NodePath
}

// Component_Property_NamePath represents the /openconfig-platform/components/component/properties/property/config/name YANG schema element.
type Component_Property_NamePath struct {
	*ygot.NodePath
}

// Component_Property_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/config/name YANG schema element.
type Component_Property_NamePathAny struct {
	*ygot.NodePath
}

// Component_Property_ValuePath represents the /openconfig-platform/components/component/properties/property/config/value YANG schema element.
type Component_Property_ValuePath struct {
	*ygot.NodePath
}

// Component_Property_ValuePathAny represents the wildcard version of the /openconfig-platform/components/component/properties/property/config/value YANG schema element.
type Component_Property_ValuePathAny struct {
	*ygot.NodePath
}

// Configurable (leaf): Indication whether the property is user-configurable
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/configurable"
// Path from root: "/components/component/properties/property/state/configurable"
func (n *Component_PropertyPath) Configurable() *Component_Property_ConfigurablePath {
	return &Component_Property_ConfigurablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "configurable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Configurable (leaf): Indication whether the property is user-configurable
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "state/configurable"
// Path from root: "/components/component/properties/property/state/configurable"
func (n *Component_PropertyPathAny) Configurable() *Component_Property_ConfigurablePathAny {
	return &Component_Property_ConfigurablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "configurable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/properties/property/config/name"
func (n *Component_PropertyPath) Name() *Component_Property_NamePath {
	return &Component_Property_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): System-supplied name of the property -- this is typically
// non-configurable
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/properties/property/config/name"
func (n *Component_PropertyPathAny) Name() *Component_Property_NamePathAny {
	return &Component_Property_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/value"
// Path from root: "/components/component/properties/property/config/value"
func (n *Component_PropertyPath) Value() *Component_Property_ValuePath {
	return &Component_Property_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): Property values can take on a variety of types.  Signed and
// unsigned integer types may be provided in smaller sizes,
// e.g., int8, uint16, etc.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/value"
// Path from root: "/components/component/properties/property/config/value"
func (n *Component_PropertyPathAny) Value() *Component_Property_ValuePathAny {
	return &Component_Property_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_SoftwareModulePath represents the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePath struct {
	*ygot.NodePath
}

// Component_SoftwareModulePathAny represents the wildcard version of the /openconfig-platform/components/component/software-module YANG schema element.
type Component_SoftwareModulePathAny struct {
	*ygot.NodePath
}

// Component_StoragePath represents the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePath struct {
	*ygot.NodePath
}

// Component_StoragePathAny represents the wildcard version of the /openconfig-platform/components/component/storage YANG schema element.
type Component_StoragePathAny struct {
	*ygot.NodePath
}

// Component_SubcomponentPath represents the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPath struct {
	*ygot.NodePath
}

// Component_SubcomponentPathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent YANG schema element.
type Component_SubcomponentPathAny struct {
	*ygot.NodePath
}

// Component_Subcomponent_NamePath represents the /openconfig-platform/components/component/subcomponents/subcomponent/config/name YANG schema element.
type Component_Subcomponent_NamePath struct {
	*ygot.NodePath
}

// Component_Subcomponent_NamePathAny represents the wildcard version of the /openconfig-platform/components/component/subcomponents/subcomponent/config/name YANG schema element.
type Component_Subcomponent_NamePathAny struct {
	*ygot.NodePath
}

// Name (leaf): Reference to the name of the subcomponent
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_SubcomponentPath) Name() *Component_Subcomponent_NamePath {
	return &Component_Subcomponent_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the name of the subcomponent
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "config/name"
// Path from root: "/components/component/subcomponents/subcomponent/config/name"
func (n *Component_SubcomponentPathAny) Name() *Component_Subcomponent_NamePathAny {
	return &Component_Subcomponent_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Component_TemperaturePath represents the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_TemperaturePath struct {
	*ygot.NodePath
}

// Component_TemperaturePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature YANG schema element.
type Component_TemperaturePathAny struct {
	*ygot.NodePath
}

// Component_Temperature_AlarmSeverityPath represents the /openconfig-platform/components/component/state/temperature/alarm-severity YANG schema element.
type Component_Temperature_AlarmSeverityPath struct {
	*ygot.NodePath
}

// Component_Temperature_AlarmSeverityPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-severity YANG schema element.
type Component_Temperature_AlarmSeverityPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_AlarmStatusPath represents the /openconfig-platform/components/component/state/temperature/alarm-status YANG schema element.
type Component_Temperature_AlarmStatusPath struct {
	*ygot.NodePath
}

// Component_Temperature_AlarmStatusPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-status YANG schema element.
type Component_Temperature_AlarmStatusPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_AlarmThresholdPath represents the /openconfig-platform/components/component/state/temperature/alarm-threshold YANG schema element.
type Component_Temperature_AlarmThresholdPath struct {
	*ygot.NodePath
}

// Component_Temperature_AlarmThresholdPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/alarm-threshold YANG schema element.
type Component_Temperature_AlarmThresholdPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_AvgPath represents the /openconfig-platform/components/component/state/temperature/avg YANG schema element.
type Component_Temperature_AvgPath struct {
	*ygot.NodePath
}

// Component_Temperature_AvgPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/avg YANG schema element.
type Component_Temperature_AvgPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_InstantPath represents the /openconfig-platform/components/component/state/temperature/instant YANG schema element.
type Component_Temperature_InstantPath struct {
	*ygot.NodePath
}

// Component_Temperature_InstantPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/instant YANG schema element.
type Component_Temperature_InstantPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_IntervalPath represents the /openconfig-platform/components/component/state/temperature/interval YANG schema element.
type Component_Temperature_IntervalPath struct {
	*ygot.NodePath
}

// Component_Temperature_IntervalPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/interval YANG schema element.
type Component_Temperature_IntervalPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_MaxPath represents the /openconfig-platform/components/component/state/temperature/max YANG schema element.
type Component_Temperature_MaxPath struct {
	*ygot.NodePath
}

// Component_Temperature_MaxPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/max YANG schema element.
type Component_Temperature_MaxPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_MaxTimePath represents the /openconfig-platform/components/component/state/temperature/max-time YANG schema element.
type Component_Temperature_MaxTimePath struct {
	*ygot.NodePath
}

// Component_Temperature_MaxTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/max-time YANG schema element.
type Component_Temperature_MaxTimePathAny struct {
	*ygot.NodePath
}

// Component_Temperature_MinPath represents the /openconfig-platform/components/component/state/temperature/min YANG schema element.
type Component_Temperature_MinPath struct {
	*ygot.NodePath
}

// Component_Temperature_MinPathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/min YANG schema element.
type Component_Temperature_MinPathAny struct {
	*ygot.NodePath
}

// Component_Temperature_MinTimePath represents the /openconfig-platform/components/component/state/temperature/min-time YANG schema element.
type Component_Temperature_MinTimePath struct {
	*ygot.NodePath
}

// Component_Temperature_MinTimePathAny represents the wildcard version of the /openconfig-platform/components/component/state/temperature/min-time YANG schema element.
type Component_Temperature_MinTimePathAny struct {
	*ygot.NodePath
}

// AlarmSeverity (leaf): The severity of the current alarm.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "alarm-severity"
// Path from root: "/components/component/state/temperature/alarm-severity"
func (n *Component_TemperaturePath) AlarmSeverity() *Component_Temperature_AlarmSeverityPath {
	return &Component_Temperature_AlarmSeverityPath{
		NodePath: ygot.NewNodePath(
			[]string{"alarm-severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmSeverity (leaf): The severity of the current alarm.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "alarm-severity"
// Path from root: "/components/component/state/temperature/alarm-severity"
func (n *Component_TemperaturePathAny) AlarmSeverity() *Component_Temperature_AlarmSeverityPathAny {
	return &Component_Temperature_AlarmSeverityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarm-severity"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmStatus (leaf): A value of true indicates the alarm has been raised or
// asserted.  The value should be false when the alarm is
// cleared.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "alarm-status"
// Path from root: "/components/component/state/temperature/alarm-status"
func (n *Component_TemperaturePath) AlarmStatus() *Component_Temperature_AlarmStatusPath {
	return &Component_Temperature_AlarmStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"alarm-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmStatus (leaf): A value of true indicates the alarm has been raised or
// asserted.  The value should be false when the alarm is
// cleared.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "alarm-status"
// Path from root: "/components/component/state/temperature/alarm-status"
func (n *Component_TemperaturePathAny) AlarmStatus() *Component_Temperature_AlarmStatusPathAny {
	return &Component_Temperature_AlarmStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarm-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmThreshold (leaf): The threshold value that was crossed for this alarm.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "alarm-threshold"
// Path from root: "/components/component/state/temperature/alarm-threshold"
func (n *Component_TemperaturePath) AlarmThreshold() *Component_Temperature_AlarmThresholdPath {
	return &Component_Temperature_AlarmThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"alarm-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// AlarmThreshold (leaf): The threshold value that was crossed for this alarm.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "alarm-threshold"
// Path from root: "/components/component/state/temperature/alarm-threshold"
func (n *Component_TemperaturePathAny) AlarmThreshold() *Component_Temperature_AlarmThresholdPathAny {
	return &Component_Temperature_AlarmThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"alarm-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "avg"
// Path from root: "/components/component/state/temperature/avg"
func (n *Component_TemperaturePath) Avg() *Component_Temperature_AvgPath {
	return &Component_Temperature_AvgPath{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Avg (leaf): The arithmetic mean value of the statistic over the
// sampling period.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "avg"
// Path from root: "/components/component/state/temperature/avg"
func (n *Component_TemperaturePathAny) Avg() *Component_Temperature_AvgPathAny {
	return &Component_Temperature_AvgPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "instant"
// Path from root: "/components/component/state/temperature/instant"
func (n *Component_TemperaturePath) Instant() *Component_Temperature_InstantPath {
	return &Component_Temperature_InstantPath{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Instant (leaf): The instantaneous value of the statistic.
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "instant"
// Path from root: "/components/component/state/temperature/instant"
func (n *Component_TemperaturePathAny) Instant() *Component_Temperature_InstantPathAny {
	return &Component_Temperature_InstantPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "interval"
// Path from root: "/components/component/state/temperature/interval"
func (n *Component_TemperaturePath) Interval() *Component_Temperature_IntervalPath {
	return &Component_Temperature_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "interval"
// Path from root: "/components/component/state/temperature/interval"
func (n *Component_TemperaturePathAny) Interval() *Component_Temperature_IntervalPathAny {
	return &Component_Temperature_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "max"
// Path from root: "/components/component/state/temperature/max"
func (n *Component_TemperaturePath) Max() *Component_Temperature_MaxPath {
	return &Component_Temperature_MaxPath{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// Max (leaf): The maximum value of the statistic over the sampling
// period
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "max"
// Path from root: "/components/component/state/temperature/max"
func (n *Component_TemperaturePathAny) Max() *Component_Temperature_MaxPathAny {
	return &Component_Temperature_MaxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "max-time"
// Path from root: "/components/component/state/temperature/max-time"
func (n *Component_TemperaturePath) MaxTime() *Component_Temperature_MaxTimePath {
	return &Component_Temperature_MaxTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "max-time"
// Path from root: "/components/component/state/temperature/max-time"
func (n *Component_TemperaturePathAny) MaxTime() *Component_Temperature_MaxTimePathAny {
	return &Component_Temperature_MaxTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "min"
// Path from root: "/components/component/state/temperature/min"
func (n *Component_TemperaturePath) Min() *Component_Temperature_MinPath {
	return &Component_Temperature_MinPath{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// Min (leaf): The minimum value of the statistic over the sampling
// period
// ----------------------------------------
// Defining module: "openconfig-platform-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "min"
// Path from root: "/components/component/state/temperature/min"
func (n *Component_TemperaturePathAny) Min() *Component_Temperature_MinPathAny {
	return &Component_Temperature_MinPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "min-time"
// Path from root: "/components/component/state/temperature/min-time"
func (n *Component_TemperaturePath) MinTime() *Component_Temperature_MinTimePath {
	return &Component_Temperature_MinTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// ----------------------------------------
// Defining module: "openconfig-types"
// Instantiating module: "openconfig-platform"
// Path from parent: "min-time"
// Path from root: "/components/component/state/temperature/min-time"
func (n *Component_TemperaturePathAny) MinTime() *Component_Temperature_MinTimePathAny {
	return &Component_Temperature_MinTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// DevicePath represents the /device YANG schema element.
type DevicePath struct {
	*ygot.DeviceRootBase
}

// DeviceRoot returns a new path object from which YANG paths can be constructed.
func DeviceRoot(id string) *DevicePath {
	return &DevicePath{ygot.NewDeviceRootBase(id)}
}

// Acl (container): Top level enclosing container for ACL model config
// and operational state data
// ----------------------------------------
// Defining module: "openconfig-acl"
// Instantiating module: "openconfig-acl"
// Path from parent: "acl"
// Path from root: "/acl"
func (n *DevicePath) Acl() *AclPath {
	return &AclPath{
		NodePath: ygot.NewNodePath(
			[]string{"acl"},
			map[string]interface{}{},
			n,
		),
	}
}

// ComponentAny (list): List of components, keyed by component name.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "components/component"
// Path from root: "/components/component"
// Name (wildcarded): string
func (n *DevicePath) ComponentAny() *ComponentPathAny {
	return &ComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"components", "component"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Component (list): List of components, keyed by component name.
// ----------------------------------------
// Defining module: "openconfig-platform"
// Instantiating module: "openconfig-platform"
// Path from parent: "components/component"
// Path from root: "/components/component"
// Name: string
func (n *DevicePath) Component(Name string) *ComponentPath {
	return &ComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"components", "component"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// InterfaceAny (list): The list of named interfaces on the device.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interfaces/interface"
// Path from root: "/interfaces/interface"
// Name (wildcarded): string
func (n *DevicePath) InterfaceAny() *InterfacePathAny {
	return &InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): The list of named interfaces on the device.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interfaces/interface"
// Path from root: "/interfaces/interface"
// Name: string
func (n *DevicePath) Interface(Name string) *InterfacePath {
	return &InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// KeychainAny (list): List of defined keychains.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keychains/keychain"
// Path from root: "/keychains/keychain"
// Name (wildcarded): string
func (n *DevicePath) KeychainAny() *KeychainPathAny {
	return &KeychainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"keychains", "keychain"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Keychain (list): List of defined keychains.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keychains/keychain"
// Path from root: "/keychains/keychain"
// Name: string
func (n *DevicePath) Keychain(Name string) *KeychainPath {
	return &KeychainPath{
		NodePath: ygot.NewNodePath(
			[]string{"keychains", "keychain"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Lacp (container): Configuration and operational state data for LACP protocol
// operation on the aggregate interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp"
// Path from root: "/lacp"
func (n *DevicePath) Lacp() *LacpPath {
	return &LacpPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp (container): Top-level container for LLDP configuration and state data
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "lldp"
// Path from root: "/lldp"
func (n *DevicePath) Lldp() *LldpPath {
	return &LldpPath{
		NodePath: ygot.NewNodePath(
			[]string{"lldp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec (container): The MACsec
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "macsec"
// Path from root: "/macsec"
func (n *DevicePath) Macsec() *MacsecPath {
	return &MacsecPath{
		NodePath: ygot.NewNodePath(
			[]string{"macsec"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstanceAny (list): Network instances configured on the local system
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "network-instances/network-instance"
// Path from root: "/network-instances/network-instance"
// Name (wildcarded): string
func (n *DevicePath) NetworkInstanceAny() *NetworkInstancePathAny {
	return &NetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"network-instances", "network-instance"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NetworkInstance (list): Network instances configured on the local system
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "network-instances/network-instance"
// Path from root: "/network-instances/network-instance"
// Name: string
func (n *DevicePath) NetworkInstance(Name string) *NetworkInstancePath {
	return &NetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"network-instances", "network-instance"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Qos (container): Top-level container for QoS data
// ----------------------------------------
// Defining module: "openconfig-qos"
// Instantiating module: "openconfig-qos"
// Path from parent: "qos"
// Path from root: "/qos"
func (n *DevicePath) Qos() *QosPath {
	return &QosPath{
		NodePath: ygot.NewNodePath(
			[]string{"qos"},
			map[string]interface{}{},
			n,
		),
	}
}

// RelayAgent (container): Top level container for relay-agent configuration and
// operational state data
// ----------------------------------------
// Defining module: "openconfig-relay-agent"
// Instantiating module: "openconfig-relay-agent"
// Path from parent: "relay-agent"
// Path from root: "/relay-agent"
func (n *DevicePath) RelayAgent() *RelayAgentPath {
	return &RelayAgentPath{
		NodePath: ygot.NewNodePath(
			[]string{"relay-agent"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutingPolicy (container): Top-level container for all routing policy configuration
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-routing-policy"
// Path from parent: "routing-policy"
// Path from root: "/routing-policy"
func (n *DevicePath) RoutingPolicy() *RoutingPolicyPath {
	return &RoutingPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"routing-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sampling (container): Top-level container for sampling-related configuration and
// operational state data
// ----------------------------------------
// Defining module: "openconfig-sampling"
// Instantiating module: "openconfig-sampling"
// Path from parent: "sampling"
// Path from root: "/sampling"
func (n *DevicePath) Sampling() *SamplingPath {
	return &SamplingPath{
		NodePath: ygot.NewNodePath(
			[]string{"sampling"},
			map[string]interface{}{},
			n,
		),
	}
}

// Stp (container): Top-level container for spanning tree configuration and
// state data
// ----------------------------------------
// Defining module: "openconfig-spanning-tree"
// Instantiating module: "openconfig-spanning-tree"
// Path from parent: "stp"
// Path from root: "/stp"
func (n *DevicePath) Stp() *StpPath {
	return &StpPath{
		NodePath: ygot.NewNodePath(
			[]string{"stp"},
			map[string]interface{}{},
			n,
		),
	}
}

// System (container): Enclosing container for system-related configuration and
// operational state data
// ----------------------------------------
// Defining module: "openconfig-system"
// Instantiating module: "openconfig-system"
// Path from parent: "system"
// Path from root: "/system"
func (n *DevicePath) System() *SystemPath {
	return &SystemPath{
		NodePath: ygot.NewNodePath(
			[]string{"system"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfacePath represents the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePath struct {
	*ygot.NodePath
}

// InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface YANG schema element.
type InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPath struct {
	*ygot.NodePath
}

// Interface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/admin-status YANG schema element.
type Interface_AdminStatusPathAny struct {
	*ygot.NodePath
}

// Interface_CpuPath represents the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPath struct {
	*ygot.NodePath
}

// Interface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/cpu YANG schema element.
type Interface_CpuPathAny struct {
	*ygot.NodePath
}

// Interface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/config/description YANG schema element.
type Interface_DescriptionPath struct {
	*ygot.NodePath
}

// Interface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/description YANG schema element.
type Interface_DescriptionPathAny struct {
	*ygot.NodePath
}

// Interface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/config/enabled YANG schema element.
type Interface_EnabledPath struct {
	*ygot.NodePath
}

// Interface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/enabled YANG schema element.
type Interface_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_ForwardingViablePath represents the /openconfig-interfaces/interfaces/interface/config/forwarding-viable YANG schema element.
type Interface_ForwardingViablePath struct {
	*ygot.NodePath
}

// Interface_ForwardingViablePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/forwarding-viable YANG schema element.
type Interface_ForwardingViablePathAny struct {
	*ygot.NodePath
}

// Interface_HardwarePortPath represents the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPath struct {
	*ygot.NodePath
}

// Interface_HardwarePortPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/hardware-port YANG schema element.
type Interface_HardwarePortPathAny struct {
	*ygot.NodePath
}

// Interface_IdPath represents the /openconfig-interfaces/interfaces/interface/config/id YANG schema element.
type Interface_IdPath struct {
	*ygot.NodePath
}

// Interface_IdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/id YANG schema element.
type Interface_IdPathAny struct {
	*ygot.NodePath
}

// Interface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPath struct {
	*ygot.NodePath
}

// Interface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/ifindex YANG schema element.
type Interface_IfindexPathAny struct {
	*ygot.NodePath
}

// Interface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePath struct {
	*ygot.NodePath
}

// Interface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/last-change YANG schema element.
type Interface_LastChangePathAny struct {
	*ygot.NodePath
}

// Interface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPath struct {
	*ygot.NodePath
}

// Interface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/logical YANG schema element.
type Interface_LogicalPathAny struct {
	*ygot.NodePath
}

// Interface_LoopbackModePath represents the /openconfig-interfaces/interfaces/interface/config/loopback-mode YANG schema element.
type Interface_LoopbackModePath struct {
	*ygot.NodePath
}

// Interface_LoopbackModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/loopback-mode YANG schema element.
type Interface_LoopbackModePathAny struct {
	*ygot.NodePath
}

// Interface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPath struct {
	*ygot.NodePath
}

// Interface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/management YANG schema element.
type Interface_ManagementPathAny struct {
	*ygot.NodePath
}

// Interface_MtuPath represents the /openconfig-interfaces/interfaces/interface/config/mtu YANG schema element.
type Interface_MtuPath struct {
	*ygot.NodePath
}

// Interface_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/mtu YANG schema element.
type Interface_MtuPathAny struct {
	*ygot.NodePath
}

// Interface_NamePath represents the /openconfig-interfaces/interfaces/interface/config/name YANG schema element.
type Interface_NamePath struct {
	*ygot.NodePath
}

// Interface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/name YANG schema element.
type Interface_NamePathAny struct {
	*ygot.NodePath
}

// Interface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPath struct {
	*ygot.NodePath
}

// Interface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/oper-status YANG schema element.
type Interface_OperStatusPathAny struct {
	*ygot.NodePath
}

// Interface_TpidPath represents the /openconfig-interfaces/interfaces/interface/config/tpid YANG schema element.
type Interface_TpidPath struct {
	*ygot.NodePath
}

// Interface_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/tpid YANG schema element.
type Interface_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_TypePath represents the /openconfig-interfaces/interfaces/interface/config/type YANG schema element.
type Interface_TypePath struct {
	*ygot.NodePath
}

// Interface_TypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/config/type YANG schema element.
type Interface_TypePathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/state/admin-status"
func (n *InterfacePath) AdminStatus() *Interface_AdminStatusPath {
	return &Interface_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/state/admin-status"
func (n *InterfacePathAny) AdminStatus() *Interface_AdminStatusPathAny {
	return &Interface_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "aggregation"
// Path from root: "/interfaces/interface/aggregation"
func (n *InterfacePath) Aggregation() *Interface_AggregationPath {
	return &Interface_AggregationPath{
		NodePath: ygot.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregation (container): Options for logical interfaces representing
// aggregates
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "aggregation"
// Path from root: "/interfaces/interface/aggregation"
func (n *InterfacePathAny) Aggregation() *Interface_AggregationPathAny {
	return &Interface_AggregationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"aggregation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/state/counters"
func (n *InterfacePath) Counters() *Interface_CountersPath {
	return &Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/state/counters"
func (n *InterfacePathAny) Counters() *Interface_CountersPathAny {
	return &Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/state/cpu"
func (n *InterfacePath) Cpu() *Interface_CpuPath {
	return &Interface_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/state/cpu"
func (n *InterfacePathAny) Cpu() *Interface_CpuPathAny {
	return &Interface_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/description"
// Path from root: "/interfaces/interface/config/description"
func (n *InterfacePath) Description() *Interface_DescriptionPath {
	return &Interface_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/description"
// Path from root: "/interfaces/interface/config/description"
func (n *InterfacePathAny) Description() *Interface_DescriptionPathAny {
	return &Interface_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/config/enabled"
func (n *InterfacePath) Enabled() *Interface_EnabledPath {
	return &Interface_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/config/enabled"
func (n *InterfacePathAny) Enabled() *Interface_EnabledPathAny {
	return &Interface_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ethernet"
// Path from root: "/interfaces/interface/ethernet"
func (n *InterfacePath) Ethernet() *Interface_EthernetPath {
	return &Interface_EthernetPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ethernet (container): Top-level container for ethernet configuration
// and state
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ethernet"
// Path from root: "/interfaces/interface/ethernet"
func (n *InterfacePathAny) Ethernet() *Interface_EthernetPathAny {
	return &Interface_EthernetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingViable (leaf): This value indicates whether the interface may be used
// to route traffic or not.  If set to false, the
// interface is not used for forwarding traffic, but as long as
// it is up, the interface still maintains its layer-2
// adjacencies and runs its configured layer-2 functions
// (e.g., LLDP, etc.).
// This is used by an external programming entity to disable an interface
// (usually part of an aggregate) for the purposes of forwarding
// traffic. This allows a logical aggregate to continue to be
// used with partial capacity, for example.  Note that setting
// `forwarding-viable = false` is not equivalent to
// administratively disabling the interface -- in particular, the
// interface is expected to participate in L2 protocols such as
// LLDP or LACP even if it blocked from forwarding traffic.
// ----------------------------------------
// Defining module: "openconfig-if-sdn-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/forwarding-viable"
// Path from root: "/interfaces/interface/config/forwarding-viable"
func (n *InterfacePath) ForwardingViable() *Interface_ForwardingViablePath {
	return &Interface_ForwardingViablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-viable"},
			map[string]interface{}{},
			n,
		),
	}
}

// ForwardingViable (leaf): This value indicates whether the interface may be used
// to route traffic or not.  If set to false, the
// interface is not used for forwarding traffic, but as long as
// it is up, the interface still maintains its layer-2
// adjacencies and runs its configured layer-2 functions
// (e.g., LLDP, etc.).
// This is used by an external programming entity to disable an interface
// (usually part of an aggregate) for the purposes of forwarding
// traffic. This allows a logical aggregate to continue to be
// used with partial capacity, for example.  Note that setting
// `forwarding-viable = false` is not equivalent to
// administratively disabling the interface -- in particular, the
// interface is expected to participate in L2 protocols such as
// LLDP or LACP even if it blocked from forwarding traffic.
// ----------------------------------------
// Defining module: "openconfig-if-sdn-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/forwarding-viable"
// Path from root: "/interfaces/interface/config/forwarding-viable"
func (n *InterfacePathAny) ForwardingViable() *Interface_ForwardingViablePathAny {
	return &Interface_ForwardingViablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "forwarding-viable"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hardware-port"
// Path from root: "/interfaces/interface/state/hardware-port"
func (n *InterfacePath) HardwarePort() *Interface_HardwarePortPath {
	return &Interface_HardwarePortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// HardwarePort (leaf): For non-channelized interfaces, references the hardware port
// corresponding to the base interface.
// ----------------------------------------
// Defining module: "openconfig-platform-port"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hardware-port"
// Path from root: "/interfaces/interface/state/hardware-port"
func (n *InterfacePathAny) HardwarePort() *Interface_HardwarePortPathAny {
	return &Interface_HardwarePortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hardware-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "hold-time"
// Path from root: "/interfaces/interface/hold-time"
func (n *InterfacePath) HoldTime() *Interface_HoldTimePath {
	return &Interface_HoldTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldTime (container): Top-level container for hold-time settings to enable
// dampening advertisements of interface transitions.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "hold-time"
// Path from root: "/interfaces/interface/hold-time"
func (n *InterfacePathAny) HoldTime() *Interface_HoldTimePathAny {
	return &Interface_HoldTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"hold-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/id"
// Path from root: "/interfaces/interface/config/id"
func (n *InterfacePath) Id() *Interface_IdPath {
	return &Interface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): The numeric identifier (SDN Port) used by the controller to
// address the interface. This ID is assigned by an
// external-to-the-device entity (e.g., an SDN management system)
// to establish an externally deterministic numeric reference for
// the interface. The programming entity must ensure that the ID is
// unique within the required context.
//
// Note that this identifier is used only when a numeric reference
// to the interface is required, it does not replace the unique
// name assigned to the interface.
//
// Ranges:
//
// 0x00000000: Unspecified/Invalid
// 0x00000001: Minimum Port Value
// 0xFFFFFEFF: Maximum Port Value
//
// Reserved:   0xFFFFFFF0 - 0xFFFFFFFF
// 0xFFFFFFFA: Recirculate
// 0xFFFFFFFD: CPU
//
// ----------------------------------------
// Defining module: "openconfig-p4rt"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/id"
// Path from root: "/interfaces/interface/config/id"
func (n *InterfacePathAny) Id() *Interface_IdPathAny {
	return &Interface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/state/ifindex"
func (n *InterfacePath) Ifindex() *Interface_IfindexPath {
	return &Interface_IfindexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/state/ifindex"
func (n *InterfacePathAny) Ifindex() *Interface_IfindexPathAny {
	return &Interface_IfindexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/state/last-change"
func (n *InterfacePath) LastChange() *Interface_LastChangePath {
	return &Interface_LastChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/state/last-change"
func (n *InterfacePathAny) LastChange() *Interface_LastChangePathAny {
	return &Interface_LastChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/state/logical"
func (n *InterfacePath) Logical() *Interface_LogicalPath {
	return &Interface_LogicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/state/logical"
func (n *InterfacePathAny) Logical() *Interface_LogicalPathAny {
	return &Interface_LogicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): When set to true, the interface is logically looped back,
// such that packets that are forwarded via the interface
// are received on the same interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/loopback-mode"
// Path from root: "/interfaces/interface/config/loopback-mode"
func (n *InterfacePath) LoopbackMode() *Interface_LoopbackModePath {
	return &Interface_LoopbackModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LoopbackMode (leaf): When set to true, the interface is logically looped back,
// such that packets that are forwarded via the interface
// are received on the same interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/loopback-mode"
// Path from root: "/interfaces/interface/config/loopback-mode"
func (n *InterfacePathAny) LoopbackMode() *Interface_LoopbackModePathAny {
	return &Interface_LoopbackModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "loopback-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/state/management"
func (n *InterfacePath) Management() *Interface_ManagementPath {
	return &Interface_ManagementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/state/management"
func (n *InterfacePathAny) Management() *Interface_ManagementPathAny {
	return &Interface_ManagementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/config/mtu"
func (n *InterfacePath) Mtu() *Interface_MtuPath {
	return &Interface_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): Set the max transmission unit size in octets
// for the physical interface.  If this is not set, the mtu is
// set to the operational default -- e.g., 1514 bytes on an
// Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/config/mtu"
func (n *InterfacePathAny) Mtu() *Interface_MtuPathAny {
	return &Interface_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/name"
// Path from root: "/interfaces/interface/config/name"
func (n *InterfacePath) Name() *Interface_NamePath {
	return &Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The name of the interface.
//
// A device MAY restrict the allowed values for this leaf,
// possibly depending on the type of the interface.
// For system-controlled interfaces, this leaf is the
// device-specific name of the interface.  The 'config false'
// list interfaces/interface[name]/state contains the currently
// existing interfaces on the device.
//
// If a client tries to create configuration for a
// system-controlled interface that is not present in the
// corresponding state list, the server MAY reject
// the request if the implementation does not support
// pre-provisioning of interfaces or if the name refers to
// an interface that can never exist in the system.  A
// NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
//
// The IETF model in RFC 7223 provides YANG features for the
// following (i.e., pre-provisioning and arbitrary-names),
// however they are omitted here:
//
//	If the device supports pre-provisioning of interface
//	configuration, the 'pre-provisioning' feature is
//	advertised.
//
//	If the device allows arbitrarily named user-controlled
//	interfaces, the 'arbitrary-names' feature is advertised.
//
// When a configured user-controlled interface is created by
// the system, it is instantiated with the same name in the
// /interfaces/interface[name]/state list.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/name"
// Path from root: "/interfaces/interface/config/name"
func (n *InterfacePathAny) Name() *Interface_NamePathAny {
	return &Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/state/oper-status"
func (n *InterfacePath) OperStatus() *Interface_OperStatusPath {
	return &Interface_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/state/oper-status"
func (n *InterfacePathAny) OperStatus() *Interface_OperStatusPathAny {
	return &Interface_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "routed-vlan"
// Path from root: "/interfaces/interface/routed-vlan"
func (n *InterfacePath) RoutedVlan() *Interface_RoutedVlanPath {
	return &Interface_RoutedVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// RoutedVlan (container): Top-level container for routed vlan interfaces.  These
// logical interfaces are also known as SVI (switched virtual
// interface), IRB (integrated routing and bridging), RVI
// (routed VLAN interface)
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "routed-vlan"
// Path from root: "/interfaces/interface/routed-vlan"
func (n *InterfacePathAny) RoutedVlan() *Interface_RoutedVlanPathAny {
	return &Interface_RoutedVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"routed-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index (wildcarded): uint32
func (n *InterfacePath) SubinterfaceAny() *Interface_SubinterfacePathAny {
	return &Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// SubinterfaceAny (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index (wildcarded): uint32
func (n *InterfacePathAny) SubinterfaceAny() *Interface_SubinterfacePathAny {
	return &Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index: uint32
func (n *InterfacePath) Subinterface(Index uint32) *Interface_SubinterfacePath {
	return &Interface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Subinterface (list): The list of subinterfaces (logical interfaces) associated
// with a physical interface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "subinterfaces/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface"
// Index: uint32
func (n *InterfacePathAny) Subinterface(Index uint32) *Interface_SubinterfacePathAny {
	return &Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"subinterfaces", "subinterface"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/config/tpid"
func (n *InterfacePath) Tpid() *Interface_TpidPath {
	return &Interface_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally set the tag protocol identifier field (TPID) that
// is accepted on the VLAN
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/config/tpid"
func (n *InterfacePathAny) Tpid() *Interface_TpidPathAny {
	return &Interface_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tunnel (container): In the case that the interface is logical tunnel
// interface, the parameters for the tunnel are
// specified within this subtree. Tunnel interfaces
// have only a single logical subinterface associated
// with them.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "tunnel"
// Path from root: "/interfaces/interface/tunnel"
func (n *InterfacePath) Tunnel() *Interface_TunnelPath {
	return &Interface_TunnelPath{
		NodePath: ygot.NewNodePath(
			[]string{"tunnel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tunnel (container): In the case that the interface is logical tunnel
// interface, the parameters for the tunnel are
// specified within this subtree. Tunnel interfaces
// have only a single logical subinterface associated
// with them.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "tunnel"
// Path from root: "/interfaces/interface/tunnel"
func (n *InterfacePathAny) Tunnel() *Interface_TunnelPathAny {
	return &Interface_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnel"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/config/type"
func (n *InterfacePath) Type() *Interface_TypePath {
	return &Interface_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of the interface.
//
// When an interface entry is created, a server MAY
// initialize the type leaf with a valid value, e.g., if it
// is possible to derive the type from the name of the
// interface.
//
// If a client tries to set the type of an interface to a
// value that can never be used by the system, e.g., if the
// type is not supported or if the type does not match the
// name of the interface, the server MUST reject the request.
// A NETCONF server MUST reply with an rpc-error with the
// error-tag 'invalid-value' in this case.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/type"
// Path from root: "/interfaces/interface/config/type"
func (n *InterfacePathAny) Type() *Interface_TypePathAny {
	return &Interface_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_AggregationPath represents the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPath struct {
	*ygot.NodePath
}

// Interface_AggregationPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation YANG schema element.
type Interface_AggregationPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagSpeedPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/lag-speed YANG schema element.
type Interface_Aggregation_LagSpeedPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagTypePath represents the /openconfig-interfaces/interfaces/interface/aggregation/config/lag-type YANG schema element.
type Interface_Aggregation_LagTypePath struct {
	*ygot.NodePath
}

// Interface_Aggregation_LagTypePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/config/lag-type YANG schema element.
type Interface_Aggregation_LagTypePathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_MemberPath represents the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_MemberPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/state/member YANG schema element.
type Interface_Aggregation_MemberPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_MinLinksPath represents the /openconfig-interfaces/interfaces/interface/aggregation/config/min-links YANG schema element.
type Interface_Aggregation_MinLinksPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_MinLinksPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/config/min-links YANG schema element.
type Interface_Aggregation_MinLinksPathAny struct {
	*ygot.NodePath
}

// LagSpeed (leaf): Reports effective speed of the aggregate interface,
// based on speed of active member interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lag-speed"
// Path from root: "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPath) LagSpeed() *Interface_Aggregation_LagSpeedPath {
	return &Interface_Aggregation_LagSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// LagSpeed (leaf): Reports effective speed of the aggregate interface,
// based on speed of active member interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/lag-speed"
// Path from root: "/interfaces/interface/aggregation/state/lag-speed"
func (n *Interface_AggregationPathAny) LagSpeed() *Interface_Aggregation_LagSpeedPathAny {
	return &Interface_Aggregation_LagSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lag-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lag-type"
// Path from root: "/interfaces/interface/aggregation/config/lag-type"
func (n *Interface_AggregationPath) LagType() *Interface_Aggregation_LagTypePath {
	return &Interface_Aggregation_LagTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lag-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LagType (leaf): Sets the type of LAG, i.e., how it is
// configured / maintained
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lag-type"
// Path from root: "/interfaces/interface/aggregation/config/lag-type"
func (n *Interface_AggregationPathAny) LagType() *Interface_Aggregation_LagTypePathAny {
	return &Interface_Aggregation_LagTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lag-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/member"
// Path from root: "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPath) Member() *Interface_Aggregation_MemberPath {
	return &Interface_Aggregation_MemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
	}
}

// Member (leaf-list): List of current member interfaces for the aggregate,
// expressed as references to existing interfaces
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/member"
// Path from root: "/interfaces/interface/aggregation/state/member"
func (n *Interface_AggregationPathAny) Member() *Interface_Aggregation_MemberPathAny {
	return &Interface_Aggregation_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "member"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/min-links"
// Path from root: "/interfaces/interface/aggregation/config/min-links"
func (n *Interface_AggregationPath) MinLinks() *Interface_Aggregation_MinLinksPath {
	return &Interface_Aggregation_MinLinksPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-links"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinLinks (leaf): Specifies the mininum number of member
// interfaces that must be active for the aggregate interface
// to be available
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/min-links"
// Path from root: "/interfaces/interface/aggregation/config/min-links"
func (n *Interface_AggregationPathAny) MinLinks() *Interface_Aggregation_MinLinksPathAny {
	return &Interface_Aggregation_MinLinksPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-links"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPath) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPath {
	return &Interface_Aggregation_SwitchedVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan"
func (n *Interface_AggregationPathAny) SwitchedVlan() *Interface_Aggregation_SwitchedVlanPathAny {
	return &Interface_Aggregation_SwitchedVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Aggregation_SwitchedVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_AccessVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/access-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_AccessVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_InterfaceModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/interface-mode YANG schema element.
type Interface_Aggregation_SwitchedVlan_InterfaceModePathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_NativeVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/native-vlan YANG schema element.
type Interface_Aggregation_SwitchedVlan_NativeVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPath represents the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPath struct {
	*ygot.NodePath
}

// Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans YANG schema element.
type Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny struct {
	*ygot.NodePath
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/access-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPath {
	return &Interface_Aggregation_SwitchedVlan_AccessVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/access-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/access-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) AccessVlan() *Interface_Aggregation_SwitchedVlan_AccessVlanPathAny {
	return &Interface_Aggregation_SwitchedVlan_AccessVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface-mode"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPath) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePath {
	return &Interface_Aggregation_SwitchedVlan_InterfaceModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface-mode"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/interface-mode"
func (n *Interface_Aggregation_SwitchedVlanPathAny) InterfaceMode() *Interface_Aggregation_SwitchedVlan_InterfaceModePathAny {
	return &Interface_Aggregation_SwitchedVlan_InterfaceModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/native-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPath) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPath {
	return &Interface_Aggregation_SwitchedVlan_NativeVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/native-vlan"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/native-vlan"
func (n *Interface_Aggregation_SwitchedVlanPathAny) NativeVlan() *Interface_Aggregation_SwitchedVlan_NativeVlanPathAny {
	return &Interface_Aggregation_SwitchedVlan_NativeVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/trunk-vlans"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPath) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPath {
	return &Interface_Aggregation_SwitchedVlan_TrunkVlansPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/trunk-vlans"
// Path from root: "/interfaces/interface/aggregation/switched-vlan/config/trunk-vlans"
func (n *Interface_Aggregation_SwitchedVlanPathAny) TrunkVlans() *Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny {
	return &Interface_Aggregation_SwitchedVlan_TrunkVlansPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_CountersPath represents the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPath struct {
	*ygot.NodePath
}

// Interface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters YANG schema element.
type Interface_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPath struct {
	*ygot.NodePath
}

// Interface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/carrier-transitions YANG schema element.
type Interface_Counters_CarrierTransitionsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Counters_InBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-discards YANG schema element.
type Interface_Counters_InDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-errors YANG schema element.
type Interface_Counters_InErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-fcs-errors YANG schema element.
type Interface_Counters_InFcsErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-octets YANG schema element.
type Interface_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-pkts YANG schema element.
type Interface_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Counters_InUnicastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPath struct {
	*ygot.NodePath
}

// Interface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/in-unknown-protos YANG schema element.
type Interface_Counters_InUnknownProtosPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPath struct {
	*ygot.NodePath
}

// Interface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/last-clear YANG schema element.
type Interface_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Counters_OutBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-discards YANG schema element.
type Interface_Counters_OutDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-errors YANG schema element.
type Interface_Counters_OutErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-octets YANG schema element.
type Interface_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-pkts YANG schema element.
type Interface_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Counters_OutUnicastPktsPathAny struct {
	*ygot.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPath) CarrierTransitions() *Interface_Counters_CarrierTransitionsPath {
	return &Interface_Counters_CarrierTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/state/counters/carrier-transitions"
func (n *Interface_CountersPathAny) CarrierTransitions() *Interface_Counters_CarrierTransitionsPathAny {
	return &Interface_Counters_CarrierTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPath) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPath {
	return &Interface_Counters_InBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-broadcast-pkts"
func (n *Interface_CountersPathAny) InBroadcastPkts() *Interface_Counters_InBroadcastPktsPathAny {
	return &Interface_Counters_InBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPath) InDiscards() *Interface_Counters_InDiscardsPath {
	return &Interface_Counters_InDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/state/counters/in-discards"
func (n *Interface_CountersPathAny) InDiscards() *Interface_Counters_InDiscardsPathAny {
	return &Interface_Counters_InDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPath) InErrors() *Interface_Counters_InErrorsPath {
	return &Interface_Counters_InErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/state/counters/in-errors"
func (n *Interface_CountersPathAny) InErrors() *Interface_Counters_InErrorsPathAny {
	return &Interface_Counters_InErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPath) InFcsErrors() *Interface_Counters_InFcsErrorsPath {
	return &Interface_Counters_InFcsErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/state/counters/in-fcs-errors"
func (n *Interface_CountersPathAny) InFcsErrors() *Interface_Counters_InFcsErrorsPathAny {
	return &Interface_Counters_InFcsErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPath) InMulticastPkts() *Interface_Counters_InMulticastPktsPath {
	return &Interface_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-multicast-pkts"
func (n *Interface_CountersPathAny) InMulticastPkts() *Interface_Counters_InMulticastPktsPathAny {
	return &Interface_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPath) InOctets() *Interface_Counters_InOctetsPath {
	return &Interface_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/state/counters/in-octets"
func (n *Interface_CountersPathAny) InOctets() *Interface_Counters_InOctetsPathAny {
	return &Interface_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPath) InPkts() *Interface_Counters_InPktsPath {
	return &Interface_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/state/counters/in-pkts"
func (n *Interface_CountersPathAny) InPkts() *Interface_Counters_InPktsPathAny {
	return &Interface_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPath) InUnicastPkts() *Interface_Counters_InUnicastPktsPath {
	return &Interface_Counters_InUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/in-unicast-pkts"
func (n *Interface_CountersPathAny) InUnicastPkts() *Interface_Counters_InUnicastPktsPathAny {
	return &Interface_Counters_InUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPath) InUnknownProtos() *Interface_Counters_InUnknownProtosPath {
	return &Interface_Counters_InUnknownProtosPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/state/counters/in-unknown-protos"
func (n *Interface_CountersPathAny) InUnknownProtos() *Interface_Counters_InUnknownProtosPathAny {
	return &Interface_Counters_InUnknownProtosPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPath) LastClear() *Interface_Counters_LastClearPath {
	return &Interface_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/state/counters/last-clear"
func (n *Interface_CountersPathAny) LastClear() *Interface_Counters_LastClearPathAny {
	return &Interface_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPath) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPath {
	return &Interface_Counters_OutBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-broadcast-pkts"
func (n *Interface_CountersPathAny) OutBroadcastPkts() *Interface_Counters_OutBroadcastPktsPathAny {
	return &Interface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPath) OutDiscards() *Interface_Counters_OutDiscardsPath {
	return &Interface_Counters_OutDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/state/counters/out-discards"
func (n *Interface_CountersPathAny) OutDiscards() *Interface_Counters_OutDiscardsPathAny {
	return &Interface_Counters_OutDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPath) OutErrors() *Interface_Counters_OutErrorsPath {
	return &Interface_Counters_OutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/state/counters/out-errors"
func (n *Interface_CountersPathAny) OutErrors() *Interface_Counters_OutErrorsPathAny {
	return &Interface_Counters_OutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPath) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPath {
	return &Interface_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-multicast-pkts"
func (n *Interface_CountersPathAny) OutMulticastPkts() *Interface_Counters_OutMulticastPktsPathAny {
	return &Interface_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPath) OutOctets() *Interface_Counters_OutOctetsPath {
	return &Interface_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/state/counters/out-octets"
func (n *Interface_CountersPathAny) OutOctets() *Interface_Counters_OutOctetsPathAny {
	return &Interface_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPath) OutPkts() *Interface_Counters_OutPktsPath {
	return &Interface_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/state/counters/out-pkts"
func (n *Interface_CountersPathAny) OutPkts() *Interface_Counters_OutPktsPathAny {
	return &Interface_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPath) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPath {
	return &Interface_Counters_OutUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/state/counters/out-unicast-pkts"
func (n *Interface_CountersPathAny) OutUnicastPkts() *Interface_Counters_OutUnicastPktsPathAny {
	return &Interface_Counters_OutUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_EthernetPath represents the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_EthernetPath struct {
	*ygot.NodePath
}

// Interface_EthernetPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet YANG schema element.
type Interface_EthernetPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_AggregateIdPath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_AggregateIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/aggregate-id YANG schema element.
type Interface_Ethernet_AggregateIdPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_AutoNegotiatePath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_AutoNegotiatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/auto-negotiate YANG schema element.
type Interface_Ethernet_AutoNegotiatePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_DuplexModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_DuplexModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/duplex-mode YANG schema element.
type Interface_Ethernet_DuplexModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_EnableFlowControlPath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/enable-flow-control YANG schema element.
type Interface_Ethernet_EnableFlowControlPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_EnableFlowControlPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/enable-flow-control YANG schema element.
type Interface_Ethernet_EnableFlowControlPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_FecModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/fec-mode YANG schema element.
type Interface_Ethernet_FecModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_FecModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/fec-mode YANG schema element.
type Interface_Ethernet_FecModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_HwMacAddressPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/hw-mac-address YANG schema element.
type Interface_Ethernet_HwMacAddressPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_HwMacAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/hw-mac-address YANG schema element.
type Interface_Ethernet_HwMacAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_MacAddressPath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/mac-address YANG schema element.
type Interface_Ethernet_MacAddressPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_MacAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/mac-address YANG schema element.
type Interface_Ethernet_MacAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedDuplexModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-duplex-mode YANG schema element.
type Interface_Ethernet_NegotiatedDuplexModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedDuplexModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-duplex-mode YANG schema element.
type Interface_Ethernet_NegotiatedDuplexModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedPortSpeedPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-port-speed YANG schema element.
type Interface_Ethernet_NegotiatedPortSpeedPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_NegotiatedPortSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/negotiated-port-speed YANG schema element.
type Interface_Ethernet_NegotiatedPortSpeedPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_PortSpeedPath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/port-speed YANG schema element.
type Interface_Ethernet_PortSpeedPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_PortSpeedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/port-speed YANG schema element.
type Interface_Ethernet_PortSpeedPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_StandaloneLinkTrainingPath represents the /openconfig-interfaces/interfaces/interface/ethernet/config/standalone-link-training YANG schema element.
type Interface_Ethernet_StandaloneLinkTrainingPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_StandaloneLinkTrainingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/config/standalone-link-training YANG schema element.
type Interface_Ethernet_StandaloneLinkTrainingPathAny struct {
	*ygot.NodePath
}

// AggregateId (leaf): Specify the logical aggregate interface to which
// this interface belongs
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/aggregate-id"
// Path from root: "/interfaces/interface/ethernet/config/aggregate-id"
func (n *Interface_EthernetPath) AggregateId() *Interface_Ethernet_AggregateIdPath {
	return &Interface_Ethernet_AggregateIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "aggregate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// AggregateId (leaf): Specify the logical aggregate interface to which
// this interface belongs
// ----------------------------------------
// Defining module: "openconfig-if-aggregate"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/aggregate-id"
// Path from root: "/interfaces/interface/ethernet/config/aggregate-id"
func (n *Interface_EthernetPathAny) AggregateId() *Interface_Ethernet_AggregateIdPathAny {
	return &Interface_Ethernet_AggregateIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "aggregate-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoNegotiate (leaf): Set to TRUE to request the interface to auto-negotiate
// transmission parameters with its peer interface.  When
// set to FALSE, the transmission parameters are specified
// manually.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/auto-negotiate"
// Path from root: "/interfaces/interface/ethernet/config/auto-negotiate"
func (n *Interface_EthernetPath) AutoNegotiate() *Interface_Ethernet_AutoNegotiatePath {
	return &Interface_Ethernet_AutoNegotiatePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "auto-negotiate"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoNegotiate (leaf): Set to TRUE to request the interface to auto-negotiate
// transmission parameters with its peer interface.  When
// set to FALSE, the transmission parameters are specified
// manually.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/auto-negotiate"
// Path from root: "/interfaces/interface/ethernet/config/auto-negotiate"
func (n *Interface_EthernetPathAny) AutoNegotiate() *Interface_Ethernet_AutoNegotiatePathAny {
	return &Interface_Ethernet_AutoNegotiatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "auto-negotiate"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Ethernet interface counters
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/ethernet/state/counters"
func (n *Interface_EthernetPath) Counters() *Interface_Ethernet_CountersPath {
	return &Interface_Ethernet_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Ethernet interface counters
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/ethernet/state/counters"
func (n *Interface_EthernetPathAny) Counters() *Interface_Ethernet_CountersPathAny {
	return &Interface_Ethernet_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplexMode (leaf): When auto-negotiate is TRUE, this optionally sets the
// duplex mode that will be advertised to the peer.  If
// unspecified, the interface should negotiate the duplex mode
// directly (typically full-duplex).  When auto-negotiate is
// FALSE, this sets the duplex mode on the interface directly.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/duplex-mode"
// Path from root: "/interfaces/interface/ethernet/config/duplex-mode"
func (n *Interface_EthernetPath) DuplexMode() *Interface_Ethernet_DuplexModePath {
	return &Interface_Ethernet_DuplexModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplexMode (leaf): When auto-negotiate is TRUE, this optionally sets the
// duplex mode that will be advertised to the peer.  If
// unspecified, the interface should negotiate the duplex mode
// directly (typically full-duplex).  When auto-negotiate is
// FALSE, this sets the duplex mode on the interface directly.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/duplex-mode"
// Path from root: "/interfaces/interface/ethernet/config/duplex-mode"
func (n *Interface_EthernetPathAny) DuplexMode() *Interface_Ethernet_DuplexModePathAny {
	return &Interface_Ethernet_DuplexModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableFlowControl (leaf): Enable or disable flow control for this interface.
// Ethernet flow control is a mechanism by which a receiver
// may send PAUSE frames to a sender to stop transmission for
// a specified time.
//
// This setting should override auto-negotiated flow control
// settings.  If left unspecified, and auto-negotiate is TRUE,
// flow control mode is negotiated with the peer interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable-flow-control"
// Path from root: "/interfaces/interface/ethernet/config/enable-flow-control"
func (n *Interface_EthernetPath) EnableFlowControl() *Interface_Ethernet_EnableFlowControlPath {
	return &Interface_Ethernet_EnableFlowControlPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-flow-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnableFlowControl (leaf): Enable or disable flow control for this interface.
// Ethernet flow control is a mechanism by which a receiver
// may send PAUSE frames to a sender to stop transmission for
// a specified time.
//
// This setting should override auto-negotiated flow control
// settings.  If left unspecified, and auto-negotiate is TRUE,
// flow control mode is negotiated with the peer interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enable-flow-control"
// Path from root: "/interfaces/interface/ethernet/config/enable-flow-control"
func (n *Interface_EthernetPathAny) EnableFlowControl() *Interface_Ethernet_EnableFlowControlPathAny {
	return &Interface_Ethernet_EnableFlowControlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable-flow-control"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecMode (leaf): The FEC mode applied to the physical channels associated with
// the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/fec-mode"
// Path from root: "/interfaces/interface/ethernet/config/fec-mode"
func (n *Interface_EthernetPath) FecMode() *Interface_Ethernet_FecModePath {
	return &Interface_Ethernet_FecModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "fec-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// FecMode (leaf): The FEC mode applied to the physical channels associated with
// the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/fec-mode"
// Path from root: "/interfaces/interface/ethernet/config/fec-mode"
func (n *Interface_EthernetPathAny) FecMode() *Interface_Ethernet_FecModePathAny {
	return &Interface_Ethernet_FecModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "fec-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// HwMacAddress (leaf): Represents the 'burned-in', or system-assigned, MAC
// address for the Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hw-mac-address"
// Path from root: "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_EthernetPath) HwMacAddress() *Interface_Ethernet_HwMacAddressPath {
	return &Interface_Ethernet_HwMacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hw-mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// HwMacAddress (leaf): Represents the 'burned-in', or system-assigned, MAC
// address for the Ethernet interface.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/hw-mac-address"
// Path from root: "/interfaces/interface/ethernet/state/hw-mac-address"
func (n *Interface_EthernetPathAny) HwMacAddress() *Interface_Ethernet_HwMacAddressPathAny {
	return &Interface_Ethernet_HwMacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "hw-mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): Assigns a MAC address to the Ethernet interface.  If not
// specified, the corresponding operational state leaf is
// expected to show the system-assigned MAC address.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mac-address"
// Path from root: "/interfaces/interface/ethernet/config/mac-address"
func (n *Interface_EthernetPath) MacAddress() *Interface_Ethernet_MacAddressPath {
	return &Interface_Ethernet_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): Assigns a MAC address to the Ethernet interface.  If not
// specified, the corresponding operational state leaf is
// expected to show the system-assigned MAC address.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mac-address"
// Path from root: "/interfaces/interface/ethernet/config/mac-address"
func (n *Interface_EthernetPathAny) MacAddress() *Interface_Ethernet_MacAddressPathAny {
	return &Interface_Ethernet_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedDuplexMode (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the duplex mode that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-duplex-mode"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_EthernetPath) NegotiatedDuplexMode() *Interface_Ethernet_NegotiatedDuplexModePath {
	return &Interface_Ethernet_NegotiatedDuplexModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedDuplexMode (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the duplex mode that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-duplex-mode"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-duplex-mode"
func (n *Interface_EthernetPathAny) NegotiatedDuplexMode() *Interface_Ethernet_NegotiatedDuplexModePathAny {
	return &Interface_Ethernet_NegotiatedDuplexModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-duplex-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedPortSpeed (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the interface speed that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-port-speed"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_EthernetPath) NegotiatedPortSpeed() *Interface_Ethernet_NegotiatedPortSpeedPath {
	return &Interface_Ethernet_NegotiatedPortSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// NegotiatedPortSpeed (leaf): When auto-negotiate is set to TRUE, and the interface has
// completed auto-negotiation with the remote peer, this value
// shows the interface speed that has been negotiated.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/negotiated-port-speed"
// Path from root: "/interfaces/interface/ethernet/state/negotiated-port-speed"
func (n *Interface_EthernetPathAny) NegotiatedPortSpeed() *Interface_Ethernet_NegotiatedPortSpeedPathAny {
	return &Interface_Ethernet_NegotiatedPortSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "negotiated-port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortSpeed (leaf): When auto-negotiate is TRUE, this optionally sets the
// port-speed mode that will be advertised to the peer for
// negotiation.  If unspecified, it is expected that the
// interface will select the highest speed available based on
// negotiation.  When auto-negotiate is set to FALSE, sets the
// link speed to a fixed value -- supported values are defined
// by ETHERNET_SPEED identities
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/port-speed"
// Path from root: "/interfaces/interface/ethernet/config/port-speed"
func (n *Interface_EthernetPath) PortSpeed() *Interface_Ethernet_PortSpeedPath {
	return &Interface_Ethernet_PortSpeedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortSpeed (leaf): When auto-negotiate is TRUE, this optionally sets the
// port-speed mode that will be advertised to the peer for
// negotiation.  If unspecified, it is expected that the
// interface will select the highest speed available based on
// negotiation.  When auto-negotiate is set to FALSE, sets the
// link speed to a fixed value -- supported values are defined
// by ETHERNET_SPEED identities
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/port-speed"
// Path from root: "/interfaces/interface/ethernet/config/port-speed"
func (n *Interface_EthernetPathAny) PortSpeed() *Interface_Ethernet_PortSpeedPathAny {
	return &Interface_Ethernet_PortSpeedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "port-speed"},
			map[string]interface{}{},
			n,
		),
	}
}

// StandaloneLinkTraining (leaf): Link training is automatic tuning of the SerDes transmit and
// receive parameters to ensure an optimal connection over copper
// links. It is normally run as part of the auto negotiation
// sequence as specified in IEEE 802.3 Clause 73.
//
// Standalone link training is used when full auto negotiation is
// not desired on an Ethernet link but link training is needed.
// It is configured by setting the standalone-link-training leaf
// to TRUE and augo-negotiate leaf to FALSE.
//
// Note: If auto-negotiate is true, then the value of standalone
// link training leaf will be ignored.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/standalone-link-training"
// Path from root: "/interfaces/interface/ethernet/config/standalone-link-training"
func (n *Interface_EthernetPath) StandaloneLinkTraining() *Interface_Ethernet_StandaloneLinkTrainingPath {
	return &Interface_Ethernet_StandaloneLinkTrainingPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "standalone-link-training"},
			map[string]interface{}{},
			n,
		),
	}
}

// StandaloneLinkTraining (leaf): Link training is automatic tuning of the SerDes transmit and
// receive parameters to ensure an optimal connection over copper
// links. It is normally run as part of the auto negotiation
// sequence as specified in IEEE 802.3 Clause 73.
//
// Standalone link training is used when full auto negotiation is
// not desired on an Ethernet link but link training is needed.
// It is configured by setting the standalone-link-training leaf
// to TRUE and augo-negotiate leaf to FALSE.
//
// Note: If auto-negotiate is true, then the value of standalone
// link training leaf will be ignored.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/standalone-link-training"
// Path from root: "/interfaces/interface/ethernet/config/standalone-link-training"
func (n *Interface_EthernetPathAny) StandaloneLinkTraining() *Interface_Ethernet_StandaloneLinkTrainingPathAny {
	return &Interface_Ethernet_StandaloneLinkTrainingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "standalone-link-training"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan"
func (n *Interface_EthernetPath) SwitchedVlan() *Interface_Ethernet_SwitchedVlanPath {
	return &Interface_Ethernet_SwitchedVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// SwitchedVlan (container): Enclosing container for VLAN interface-specific
// data on Ethernet interfaces.  These are for standard
// L2, switched-style VLANs.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "switched-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan"
func (n *Interface_EthernetPathAny) SwitchedVlan() *Interface_Ethernet_SwitchedVlanPathAny {
	return &Interface_Ethernet_SwitchedVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"switched-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Ethernet_CountersPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_CountersPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters YANG schema element.
type Interface_Ethernet_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_In_8021QFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_In_8021QFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_In_8021QFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_In_8021QFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InBlockErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-block-errors YANG schema element.
type Interface_Ethernet_Counters_InBlockErrorsPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InBlockErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-block-errors YANG schema element.
type Interface_Ethernet_Counters_InBlockErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCarrierErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-carrier-errors YANG schema element.
type Interface_Ethernet_Counters_InCarrierErrorsPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCarrierErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-carrier-errors YANG schema element.
type Interface_Ethernet_Counters_InCarrierErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCrcErrorsPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-crc-errors YANG schema element.
type Interface_Ethernet_Counters_InCrcErrorsPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InCrcErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-crc-errors YANG schema element.
type Interface_Ethernet_Counters_InCrcErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InFragmentFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-fragment-frames YANG schema element.
type Interface_Ethernet_Counters_InFragmentFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InFragmentFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-fragment-frames YANG schema element.
type Interface_Ethernet_Counters_InFragmentFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InInterruptedTxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-interrupted-tx YANG schema element.
type Interface_Ethernet_Counters_InInterruptedTxPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InInterruptedTxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-interrupted-tx YANG schema element.
type Interface_Ethernet_Counters_InInterruptedTxPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InJabberFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-jabber-frames YANG schema element.
type Interface_Ethernet_Counters_InJabberFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InJabberFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-jabber-frames YANG schema element.
type Interface_Ethernet_Counters_InJabberFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InLateCollisionPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-late-collision YANG schema element.
type Interface_Ethernet_Counters_InLateCollisionPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InLateCollisionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-late-collision YANG schema element.
type Interface_Ethernet_Counters_InLateCollisionPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacControlFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_InMacControlFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacControlFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_InMacControlFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacErrorsRxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-errors-rx YANG schema element.
type Interface_Ethernet_Counters_InMacErrorsRxPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacErrorsRxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-errors-rx YANG schema element.
type Interface_Ethernet_Counters_InMacErrorsRxPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacPauseFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_InMacPauseFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMacPauseFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_InMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMaxsizeExceededPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded YANG schema element.
type Interface_Ethernet_Counters_InMaxsizeExceededPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InMaxsizeExceededPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded YANG schema element.
type Interface_Ethernet_Counters_InMaxsizeExceededPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InOversizeFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-oversize-frames YANG schema element.
type Interface_Ethernet_Counters_InOversizeFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InOversizeFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-oversize-frames YANG schema element.
type Interface_Ethernet_Counters_InOversizeFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSingleCollisionPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-single-collision YANG schema element.
type Interface_Ethernet_Counters_InSingleCollisionPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSingleCollisionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-single-collision YANG schema element.
type Interface_Ethernet_Counters_InSingleCollisionPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSymbolErrorPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-symbol-error YANG schema element.
type Interface_Ethernet_Counters_InSymbolErrorPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InSymbolErrorPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-symbol-error YANG schema element.
type Interface_Ethernet_Counters_InSymbolErrorPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InUndersizeFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-undersize-frames YANG schema element.
type Interface_Ethernet_Counters_InUndersizeFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_InUndersizeFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/in-undersize-frames YANG schema element.
type Interface_Ethernet_Counters_InUndersizeFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_Out_8021QFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_Out_8021QFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_Out_8021QFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-8021q-frames YANG schema element.
type Interface_Ethernet_Counters_Out_8021QFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacControlFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacControlFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacControlFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-control-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacControlFramesPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacErrorsTxPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-errors-tx YANG schema element.
type Interface_Ethernet_Counters_OutMacErrorsTxPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacErrorsTxPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-errors-tx YANG schema element.
type Interface_Ethernet_Counters_OutMacErrorsTxPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacPauseFramesPath represents the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacPauseFramesPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_Counters_OutMacPauseFramesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/state/counters/out-mac-pause-frames YANG schema element.
type Interface_Ethernet_Counters_OutMacPauseFramesPathAny struct {
	*ygot.NodePath
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_CountersPath) In_8021QFrames() *Interface_Ethernet_Counters_In_8021QFramesPath {
	return &Interface_Ethernet_Counters_In_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// In_8021QFrames (leaf): Number of 802.1q tagged frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-8021q-frames"
func (n *Interface_Ethernet_CountersPathAny) In_8021QFrames() *Interface_Ethernet_Counters_In_8021QFramesPathAny {
	return &Interface_Ethernet_Counters_In_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-block-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_CountersPath) InBlockErrors() *Interface_Ethernet_Counters_InBlockErrorsPath {
	return &Interface_Ethernet_Counters_InBlockErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBlockErrors (leaf): The number of received errored blocks. Error detection codes
// are capable of detecting whether one or more errors have
// occurred in a given sequence of bits – the block. It is
// normally not possible to determine the exact number of errored
// bits within the block
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-block-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-block-errors"
func (n *Interface_Ethernet_CountersPathAny) InBlockErrors() *Interface_Ethernet_Counters_InBlockErrorsPathAny {
	return &Interface_Ethernet_Counters_InBlockErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-block-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-carrier-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_CountersPath) InCarrierErrors() *Interface_Ethernet_Counters_InCarrierErrorsPath {
	return &Interface_Ethernet_Counters_InCarrierErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCarrierErrors (leaf): The number of received errored frames due to a carrier issue.
// The value refers to MIB counter for
// dot3StatsCarrierSenseErrors
// oid=1.3.6.1.2.1.10.7.2.1.11
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-carrier-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-carrier-errors"
func (n *Interface_Ethernet_CountersPathAny) InCarrierErrors() *Interface_Ethernet_Counters_InCarrierErrorsPathAny {
	return &Interface_Ethernet_Counters_InCarrierErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-carrier-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-crc-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_CountersPath) InCrcErrors() *Interface_Ethernet_Counters_InCrcErrorsPath {
	return &Interface_Ethernet_Counters_InCrcErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCrcErrors (leaf): The total number of frames received that
// had a length (excluding framing bits, but
// including FCS octets) of between 64 and 1518
// octets, inclusive, but had either a bad
// Frame Check Sequence (FCS) with an integral
// number of octets (FCS Error) or a bad FCS with
// a non-integral number of octets (Alignment Error)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-crc-errors"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-crc-errors"
func (n *Interface_Ethernet_CountersPathAny) InCrcErrors() *Interface_Ethernet_Counters_InCrcErrorsPathAny {
	return &Interface_Ethernet_Counters_InCrcErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-crc-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fragment-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_CountersPath) InFragmentFrames() *Interface_Ethernet_Counters_InFragmentFramesPath {
	return &Interface_Ethernet_Counters_InFragmentFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFragmentFrames (leaf): The total number of frames received that were less than
// 64 octets in length (excluding framing bits but including
// FCS octets) and had either a bad Frame Check Sequence
// (FCS) with an integral number of octets (FCS Error) or a
// bad FCS with a non-integral number of octets (Alignment
// Error).
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fragment-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-fragment-frames"
func (n *Interface_Ethernet_CountersPathAny) InFragmentFrames() *Interface_Ethernet_Counters_InFragmentFramesPathAny {
	return &Interface_Ethernet_Counters_InFragmentFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-fragment-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-interrupted-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_CountersPath) InInterruptedTx() *Interface_Ethernet_Counters_InInterruptedTxPath {
	return &Interface_Ethernet_Counters_InInterruptedTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InInterruptedTx (leaf): The number of received errored frames due to interrupted
// transmission issue. The value refers to MIB counter for
// dot3StatsDeferredTransmissions
// oid=1.3.6.1.2.1.10.7.2.1.7
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-interrupted-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-interrupted-tx"
func (n *Interface_Ethernet_CountersPathAny) InInterruptedTx() *Interface_Ethernet_Counters_InInterruptedTxPathAny {
	return &Interface_Ethernet_Counters_InInterruptedTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-interrupted-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-jabber-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_CountersPath) InJabberFrames() *Interface_Ethernet_Counters_InJabberFramesPath {
	return &Interface_Ethernet_Counters_InJabberFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InJabberFrames (leaf): Number of jabber frames received on the
// interface.  Jabber frames are typically defined as oversize
// frames which also have a bad CRC.  Implementations may use
// slightly different definitions of what constitutes a jabber
// frame.  Often indicative of a NIC hardware problem.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-jabber-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-jabber-frames"
func (n *Interface_Ethernet_CountersPathAny) InJabberFrames() *Interface_Ethernet_Counters_InJabberFramesPathAny {
	return &Interface_Ethernet_Counters_InJabberFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-jabber-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-late-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_CountersPath) InLateCollision() *Interface_Ethernet_Counters_InLateCollisionPath {
	return &Interface_Ethernet_Counters_InLateCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InLateCollision (leaf): The number of received errored frames due to late collision
// issue. The value refers to MIB counter for
// dot3StatsLateCollisions
// oid=1.3.6.1.2.1.10.7.2.1.8
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-late-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-late-collision"
func (n *Interface_Ethernet_CountersPathAny) InLateCollision() *Interface_Ethernet_Counters_InLateCollisionPathAny {
	return &Interface_Ethernet_Counters_InLateCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-late-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_CountersPath) InMacControlFrames() *Interface_Ethernet_Counters_InMacControlFramesPath {
	return &Interface_Ethernet_Counters_InMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacControlFrames (leaf): MAC layer control frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-control-frames"
func (n *Interface_Ethernet_CountersPathAny) InMacControlFrames() *Interface_Ethernet_Counters_InMacControlFramesPathAny {
	return &Interface_Ethernet_Counters_InMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-errors-rx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_CountersPath) InMacErrorsRx() *Interface_Ethernet_Counters_InMacErrorsRxPath {
	return &Interface_Ethernet_Counters_InMacErrorsRxPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacErrorsRx (leaf): The number of received errored frames due to MAC errors
// received. The value refers to MIB counter for
// dot3StatsInternalMacReceiveErrors
// oid=1.3.6.1.2.1.10.7.2.1.16
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-errors-rx"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-errors-rx"
func (n *Interface_Ethernet_CountersPathAny) InMacErrorsRx() *Interface_Ethernet_Counters_InMacErrorsRxPathAny {
	return &Interface_Ethernet_Counters_InMacErrorsRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-errors-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_CountersPath) InMacPauseFrames() *Interface_Ethernet_Counters_InMacPauseFramesPath {
	return &Interface_Ethernet_Counters_InMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMacPauseFrames (leaf): MAC layer PAUSE frames received on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-mac-pause-frames"
func (n *Interface_Ethernet_CountersPathAny) InMacPauseFrames() *Interface_Ethernet_Counters_InMacPauseFramesPathAny {
	return &Interface_Ethernet_Counters_InMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-maxsize-exceeded"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_CountersPath) InMaxsizeExceeded() *Interface_Ethernet_Counters_InMaxsizeExceededPath {
	return &Interface_Ethernet_Counters_InMaxsizeExceededPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMaxsizeExceeded (leaf): The total number frames received that are well-formed but
// dropped due to exceeding the maximum frame size on the interface
// (e.g., MTU or MRU)
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-maxsize-exceeded"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-maxsize-exceeded"
func (n *Interface_Ethernet_CountersPathAny) InMaxsizeExceeded() *Interface_Ethernet_Counters_InMaxsizeExceededPathAny {
	return &Interface_Ethernet_Counters_InMaxsizeExceededPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-maxsize-exceeded"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-oversize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_CountersPath) InOversizeFrames() *Interface_Ethernet_Counters_InOversizeFramesPath {
	return &Interface_Ethernet_Counters_InOversizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOversizeFrames (leaf): The total number of frames received that were
// longer than 1518 octets (excluding framing bits,
// but including FCS octets) and were otherwise
// well formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-oversize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-oversize-frames"
func (n *Interface_Ethernet_CountersPathAny) InOversizeFrames() *Interface_Ethernet_Counters_InOversizeFramesPathAny {
	return &Interface_Ethernet_Counters_InOversizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-oversize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-single-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_CountersPath) InSingleCollision() *Interface_Ethernet_Counters_InSingleCollisionPath {
	return &Interface_Ethernet_Counters_InSingleCollisionPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSingleCollision (leaf): The number of received errored frames due to single collision
// issue. The value refers to MIB counter for
// dot3StatsSingleCollisionFrames
// oid=1.3.6.1.2.1.10.7.2.1.4
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-single-collision"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-single-collision"
func (n *Interface_Ethernet_CountersPathAny) InSingleCollision() *Interface_Ethernet_Counters_InSingleCollisionPathAny {
	return &Interface_Ethernet_Counters_InSingleCollisionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-single-collision"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-symbol-error"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_CountersPath) InSymbolError() *Interface_Ethernet_Counters_InSymbolErrorPath {
	return &Interface_Ethernet_Counters_InSymbolErrorPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSymbolError (leaf): The number of received errored frames due to symbol error.
// The value refers to MIB counter for
// in-symbol-error
// oid=1.3.6.1.2.1.10.7.2.1.18
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-symbol-error"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-symbol-error"
func (n *Interface_Ethernet_CountersPathAny) InSymbolError() *Interface_Ethernet_Counters_InSymbolErrorPathAny {
	return &Interface_Ethernet_Counters_InSymbolErrorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-symbol-error"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-undersize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_CountersPath) InUndersizeFrames() *Interface_Ethernet_Counters_InUndersizeFramesPath {
	return &Interface_Ethernet_Counters_InUndersizeFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUndersizeFrames (leaf): The total number of frames received that were
// less than 64 octets long (excluding framing bits,
// but including FCS octets) and were otherwise well
// formed.
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-undersize-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/in-undersize-frames"
func (n *Interface_Ethernet_CountersPathAny) InUndersizeFrames() *Interface_Ethernet_Counters_InUndersizeFramesPathAny {
	return &Interface_Ethernet_Counters_InUndersizeFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-undersize-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_CountersPath) Out_8021QFrames() *Interface_Ethernet_Counters_Out_8021QFramesPath {
	return &Interface_Ethernet_Counters_Out_8021QFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Out_8021QFrames (leaf): Number of 802.1q tagged frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-8021q-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-8021q-frames"
func (n *Interface_Ethernet_CountersPathAny) Out_8021QFrames() *Interface_Ethernet_Counters_Out_8021QFramesPathAny {
	return &Interface_Ethernet_Counters_Out_8021QFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-8021q-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_CountersPath) OutMacControlFrames() *Interface_Ethernet_Counters_OutMacControlFramesPath {
	return &Interface_Ethernet_Counters_OutMacControlFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacControlFrames (leaf): MAC layer control frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-control-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-control-frames"
func (n *Interface_Ethernet_CountersPathAny) OutMacControlFrames() *Interface_Ethernet_Counters_OutMacControlFramesPathAny {
	return &Interface_Ethernet_Counters_OutMacControlFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-control-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-errors-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_CountersPath) OutMacErrorsTx() *Interface_Ethernet_Counters_OutMacErrorsTxPath {
	return &Interface_Ethernet_Counters_OutMacErrorsTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacErrorsTx (leaf): The number of sent errored frames due to MAC errors
// transmitted. The value refers to MIB counter for
// dot3StatsInternalMacTransmitErrors
// oid=1.3.6.1.2.1.10.7.2.1.10
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-errors-tx"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-errors-tx"
func (n *Interface_Ethernet_CountersPathAny) OutMacErrorsTx() *Interface_Ethernet_Counters_OutMacErrorsTxPathAny {
	return &Interface_Ethernet_Counters_OutMacErrorsTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-errors-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_CountersPath) OutMacPauseFrames() *Interface_Ethernet_Counters_OutMacPauseFramesPath {
	return &Interface_Ethernet_Counters_OutMacPauseFramesPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMacPauseFrames (leaf): MAC layer PAUSE frames sent on the interface
// ----------------------------------------
// Defining module: "openconfig-if-ethernet"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-mac-pause-frames"
// Path from root: "/interfaces/interface/ethernet/state/counters/out-mac-pause-frames"
func (n *Interface_Ethernet_CountersPathAny) OutMacPauseFrames() *Interface_Ethernet_Counters_OutMacPauseFramesPathAny {
	return &Interface_Ethernet_Counters_OutMacPauseFramesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mac-pause-frames"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Ethernet_SwitchedVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlanPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_AccessVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/access-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_AccessVlanPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_AccessVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/access-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_AccessVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_InterfaceModePath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/interface-mode YANG schema element.
type Interface_Ethernet_SwitchedVlan_InterfaceModePath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_InterfaceModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/interface-mode YANG schema element.
type Interface_Ethernet_SwitchedVlan_InterfaceModePathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_NativeVlanPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/native-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_NativeVlanPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_NativeVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/native-vlan YANG schema element.
type Interface_Ethernet_SwitchedVlan_NativeVlanPathAny struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_TrunkVlansPath represents the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans YANG schema element.
type Interface_Ethernet_SwitchedVlan_TrunkVlansPath struct {
	*ygot.NodePath
}

// Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans YANG schema element.
type Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny struct {
	*ygot.NodePath
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/access-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/access-vlan"
func (n *Interface_Ethernet_SwitchedVlanPath) AccessVlan() *Interface_Ethernet_SwitchedVlan_AccessVlanPath {
	return &Interface_Ethernet_SwitchedVlan_AccessVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// AccessVlan (leaf): Assign the access vlan to the access port.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/access-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/access-vlan"
func (n *Interface_Ethernet_SwitchedVlanPathAny) AccessVlan() *Interface_Ethernet_SwitchedVlan_AccessVlanPathAny {
	return &Interface_Ethernet_SwitchedVlan_AccessVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "access-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface-mode"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/interface-mode"
func (n *Interface_Ethernet_SwitchedVlanPath) InterfaceMode() *Interface_Ethernet_SwitchedVlan_InterfaceModePath {
	return &Interface_Ethernet_SwitchedVlan_InterfaceModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceMode (leaf): Set the interface to access or trunk mode for
// VLANs
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface-mode"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/interface-mode"
func (n *Interface_Ethernet_SwitchedVlanPathAny) InterfaceMode() *Interface_Ethernet_SwitchedVlan_InterfaceModePathAny {
	return &Interface_Ethernet_SwitchedVlan_InterfaceModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/native-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/native-vlan"
func (n *Interface_Ethernet_SwitchedVlanPath) NativeVlan() *Interface_Ethernet_SwitchedVlan_NativeVlanPath {
	return &Interface_Ethernet_SwitchedVlan_NativeVlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NativeVlan (leaf): Set the native VLAN id for untagged frames arriving on
// a trunk interface.  Tagged frames sent on an interface
// configured with a native VLAN should have their tags
// stripped prior to transmission. This configuration is only
// valid on a trunk interface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/native-vlan"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/native-vlan"
func (n *Interface_Ethernet_SwitchedVlanPathAny) NativeVlan() *Interface_Ethernet_SwitchedVlan_NativeVlanPathAny {
	return &Interface_Ethernet_SwitchedVlan_NativeVlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "native-vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/trunk-vlans"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlanPath) TrunkVlans() *Interface_Ethernet_SwitchedVlan_TrunkVlansPath {
	return &Interface_Ethernet_SwitchedVlan_TrunkVlansPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrunkVlans (leaf-list): Specify VLANs, or ranges thereof, that the interface may
// carry when in trunk mode.  If not specified, all VLANs are
// allowed on the interface. Ranges are specified in the form
// x..y, where x<y - ranges are assumed to be inclusive (such
// that the VLAN range is x <= range <= y.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/trunk-vlans"
// Path from root: "/interfaces/interface/ethernet/switched-vlan/config/trunk-vlans"
func (n *Interface_Ethernet_SwitchedVlanPathAny) TrunkVlans() *Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny {
	return &Interface_Ethernet_SwitchedVlan_TrunkVlansPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trunk-vlans"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_HoldTimePath represents the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTimePath struct {
	*ygot.NodePath
}

// Interface_HoldTimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time YANG schema element.
type Interface_HoldTimePathAny struct {
	*ygot.NodePath
}

// Interface_HoldTime_DownPath represents the /openconfig-interfaces/interfaces/interface/hold-time/config/down YANG schema element.
type Interface_HoldTime_DownPath struct {
	*ygot.NodePath
}

// Interface_HoldTime_DownPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time/config/down YANG schema element.
type Interface_HoldTime_DownPathAny struct {
	*ygot.NodePath
}

// Interface_HoldTime_UpPath represents the /openconfig-interfaces/interfaces/interface/hold-time/config/up YANG schema element.
type Interface_HoldTime_UpPath struct {
	*ygot.NodePath
}

// Interface_HoldTime_UpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/hold-time/config/up YANG schema element.
type Interface_HoldTime_UpPathAny struct {
	*ygot.NodePath
}

// Down (leaf): Dampens advertisement when the interface transitions from
// up to down.  A zero value means dampening is turned off,
// i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/down"
// Path from root: "/interfaces/interface/hold-time/config/down"
func (n *Interface_HoldTimePath) Down() *Interface_HoldTime_DownPath {
	return &Interface_HoldTime_DownPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "down"},
			map[string]interface{}{},
			n,
		),
	}
}

// Down (leaf): Dampens advertisement when the interface transitions from
// up to down.  A zero value means dampening is turned off,
// i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/down"
// Path from root: "/interfaces/interface/hold-time/config/down"
func (n *Interface_HoldTimePathAny) Down() *Interface_HoldTime_DownPathAny {
	return &Interface_HoldTime_DownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "down"},
			map[string]interface{}{},
			n,
		),
	}
}

// Up (leaf): Dampens advertisement when the interface
// transitions from down to up.  A zero value means dampening
// is turned off, i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/up"
// Path from root: "/interfaces/interface/hold-time/config/up"
func (n *Interface_HoldTimePath) Up() *Interface_HoldTime_UpPath {
	return &Interface_HoldTime_UpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up"},
			map[string]interface{}{},
			n,
		),
	}
}

// Up (leaf): Dampens advertisement when the interface
// transitions from down to up.  A zero value means dampening
// is turned off, i.e., immediate notification.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/up"
// Path from root: "/interfaces/interface/hold-time/config/up"
func (n *Interface_HoldTimePathAny) Up() *Interface_HoldTime_UpPathAny {
	return &Interface_HoldTime_UpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan YANG schema element.
type Interface_RoutedVlanPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_VlanPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan YANG schema element.
type Interface_RoutedVlan_VlanPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/config/vlan YANG schema element.
type Interface_RoutedVlan_VlanPathAny struct {
	*ygot.NodePath
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPath) Ipv4() *Interface_RoutedVlan_Ipv4Path {
	return &Interface_RoutedVlan_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/routed-vlan/ipv4"
func (n *Interface_RoutedVlanPathAny) Ipv4() *Interface_RoutedVlan_Ipv4PathAny {
	return &Interface_RoutedVlan_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPath) Ipv6() *Interface_RoutedVlan_Ipv6Path {
	return &Interface_RoutedVlan_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/routed-vlan/ipv6"
func (n *Interface_RoutedVlanPathAny) Ipv6() *Interface_RoutedVlan_Ipv6PathAny {
	return &Interface_RoutedVlan_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan"
// Path from root: "/interfaces/interface/routed-vlan/config/vlan"
func (n *Interface_RoutedVlanPath) Vlan() *Interface_RoutedVlan_VlanPath {
	return &Interface_RoutedVlan_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): References the VLAN for which this IP interface
// provides routing services -- similar to a switch virtual
// interface (SVI), or integrated routing and bridging interface
// (IRB) in some implementations.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan"
// Path from root: "/interfaces/interface/routed-vlan/config/vlan"
func (n *Interface_RoutedVlanPathAny) Vlan() *Interface_RoutedVlan_VlanPathAny {
	return &Interface_RoutedVlan_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4Path struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4 YANG schema element.
type Interface_RoutedVlan_Ipv4PathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv4_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv4_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4Path) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4PathAny) AddressAny() *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPath {
	return &Interface_RoutedVlan_Ipv4_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv4_AddressPathAny {
	return &Interface_RoutedVlan_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4Path) Counters() *Interface_RoutedVlan_Ipv4_CountersPath {
	return &Interface_RoutedVlan_Ipv4_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters"
func (n *Interface_RoutedVlan_Ipv4PathAny) Counters() *Interface_RoutedVlan_Ipv4_CountersPathAny {
	return &Interface_RoutedVlan_Ipv4_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4Path) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPath {
	return &Interface_RoutedVlan_Ipv4_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv4PathAny) DhcpClient() *Interface_RoutedVlan_Ipv4_DhcpClientPathAny {
	return &Interface_RoutedVlan_Ipv4_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/enabled"
func (n *Interface_RoutedVlan_Ipv4Path) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPath {
	return &Interface_RoutedVlan_Ipv4_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/enabled"
func (n *Interface_RoutedVlan_Ipv4PathAny) Enabled() *Interface_RoutedVlan_Ipv4_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv4_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/mtu"
func (n *Interface_RoutedVlan_Ipv4Path) Mtu() *Interface_RoutedVlan_Ipv4_MtuPath {
	return &Interface_RoutedVlan_Ipv4_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/config/mtu"
func (n *Interface_RoutedVlan_Ipv4PathAny) Mtu() *Interface_RoutedVlan_Ipv4_MtuPathAny {
	return &Interface_RoutedVlan_Ipv4_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4Path) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv4PathAny) NeighborAny() *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPath {
	return &Interface_RoutedVlan_Ipv4_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv4PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv4_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4Path) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPath {
	return &Interface_RoutedVlan_Ipv4_ProxyArpPath{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp"
func (n *Interface_RoutedVlan_Ipv4PathAny) ProxyArp() *Interface_RoutedVlan_Ipv4_ProxyArpPathAny {
	return &Interface_RoutedVlan_Ipv4_ProxyArpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4Path) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPath {
	return &Interface_RoutedVlan_Ipv4_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered"
func (n *Interface_RoutedVlan_Ipv4PathAny) Unnumbered() *Interface_RoutedVlan_Ipv4_UnnumberedPathAny {
	return &Interface_RoutedVlan_Ipv4_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv4_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPath {
	return &Interface_RoutedVlan_Ipv4_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv4_Address_IpPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPath {
	return &Interface_RoutedVlan_Ipv4_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv4_Address_OriginPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath {
	return &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv4_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPath {
	return &Interface_RoutedVlan_Ipv4_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv4_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny {
	return &Interface_RoutedVlan_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv4_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPath) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPath {
	return &Interface_RoutedVlan_Ipv4_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv4_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny {
	return &Interface_RoutedVlan_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPath) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePath {
	return &Interface_RoutedVlan_Ipv4_ProxyArp_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/proxy-arp/config/mode"
func (n *Interface_RoutedVlan_Ipv4_ProxyArpPathAny) Mode() *Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny {
	return &Interface_RoutedVlan_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv4_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_RoutedVlan_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6Path struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6 YANG schema element.
type Interface_RoutedVlan_Ipv6PathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dhcp-client YANG schema element.
type Interface_RoutedVlan_Ipv6_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/config/mtu YANG schema element.
type Interface_RoutedVlan_Ipv6_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6Path) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6PathAny) AddressAny() *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPath {
	return &Interface_RoutedVlan_Ipv6_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Address(Ip string) *Interface_RoutedVlan_Ipv6_AddressPathAny {
	return &Interface_RoutedVlan_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6Path) Counters() *Interface_RoutedVlan_Ipv6_CountersPath {
	return &Interface_RoutedVlan_Ipv6_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters"
func (n *Interface_RoutedVlan_Ipv6PathAny) Counters() *Interface_RoutedVlan_Ipv6_CountersPathAny {
	return &Interface_RoutedVlan_Ipv6_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6Path) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPath {
	return &Interface_RoutedVlan_Ipv6_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dhcp-client"
func (n *Interface_RoutedVlan_Ipv6PathAny) DhcpClient() *Interface_RoutedVlan_Ipv6_DhcpClientPathAny {
	return &Interface_RoutedVlan_Ipv6_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6Path) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath {
	return &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_RoutedVlan_Ipv6PathAny) DupAddrDetectTransmits() *Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny {
	return &Interface_RoutedVlan_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6Path) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPath {
	return &Interface_RoutedVlan_Ipv6_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/enabled"
func (n *Interface_RoutedVlan_Ipv6PathAny) Enabled() *Interface_RoutedVlan_Ipv6_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv6_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6Path) Mtu() *Interface_RoutedVlan_Ipv6_MtuPath {
	return &Interface_RoutedVlan_Ipv6_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/config/mtu"
func (n *Interface_RoutedVlan_Ipv6PathAny) Mtu() *Interface_RoutedVlan_Ipv6_MtuPathAny {
	return &Interface_RoutedVlan_Ipv6_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6Path) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_RoutedVlan_Ipv6PathAny) NeighborAny() *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6Path) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPath {
	return &Interface_RoutedVlan_Ipv6_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_RoutedVlan_Ipv6PathAny) Neighbor(Ip string) *Interface_RoutedVlan_Ipv6_NeighborPathAny {
	return &Interface_RoutedVlan_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6Path) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement"
func (n *Interface_RoutedVlan_Ipv6PathAny) RouterAdvertisement() *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6Path) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPath {
	return &Interface_RoutedVlan_Ipv6_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered"
func (n *Interface_RoutedVlan_Ipv6PathAny) Unnumbered() *Interface_RoutedVlan_Ipv6_UnnumberedPathAny {
	return &Interface_RoutedVlan_Ipv6_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address YANG schema element.
type Interface_RoutedVlan_Ipv6_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_StatusPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPath {
	return &Interface_RoutedVlan_Ipv6_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/ip"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Ip() *Interface_RoutedVlan_Ipv6_Address_IpPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPath {
	return &Interface_RoutedVlan_Ipv6_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/origin"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Origin() *Interface_RoutedVlan_Ipv6_Address_OriginPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath {
	return &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/config/prefix-length"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) PrefixLength() *Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPath) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPath {
	return &Interface_RoutedVlan_Ipv6_Address_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/state/status"
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) Status() *Interface_RoutedVlan_Ipv6_Address_StatusPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_RoutedVlan_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters YANG schema element.
type Interface_RoutedVlan_Ipv6_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts YANG schema element.
type Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InOctets() *Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/in-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) InPkts() *Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-error-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutErrorPkts() *Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-octets"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutOctets() *Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPath) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPath {
	return &Interface_RoutedVlan_Ipv6_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/state/counters/out-pkts"
func (n *Interface_RoutedVlan_Ipv6_CountersPathAny) OutPkts() *Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny {
	return &Interface_RoutedVlan_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor YANG schema element.
type Interface_RoutedVlan_Ipv6_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Ip() *Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) IsRouter() *Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) NeighborState() *Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPath) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPath {
	return &Interface_RoutedVlan_Ipv6_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_RoutedVlan_Ipv6_NeighborPathAny) Origin() *Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny {
	return &Interface_RoutedVlan_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygot.NodePath
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/interval"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/lifetime"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPath) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/router-advertisement/config/suppress"
func (n *Interface_RoutedVlan_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny {
	return &Interface_RoutedVlan_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered YANG schema element.
type Interface_RoutedVlan_Ipv6_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/config/enabled"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) Enabled() *Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPath) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref"
func (n *Interface_RoutedVlan_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/routed-vlan/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_RoutedVlan_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface YANG schema element.
type Interface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_AdminStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_AdminStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/admin-status YANG schema element.
type Interface_Subinterface_AdminStatusPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_CpuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_CpuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/cpu YANG schema element.
type Interface_Subinterface_CpuPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_DescriptionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/description YANG schema element.
type Interface_Subinterface_DescriptionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_DescriptionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/description YANG schema element.
type Interface_Subinterface_DescriptionPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/enabled YANG schema element.
type Interface_Subinterface_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/enabled YANG schema element.
type Interface_Subinterface_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_IfindexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_IfindexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/ifindex YANG schema element.
type Interface_Subinterface_IfindexPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_IndexPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/index YANG schema element.
type Interface_Subinterface_IndexPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_IndexPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/config/index YANG schema element.
type Interface_Subinterface_IndexPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_LastChangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_LastChangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/last-change YANG schema element.
type Interface_Subinterface_LastChangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_LogicalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_LogicalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/logical YANG schema element.
type Interface_Subinterface_LogicalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_ManagementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_ManagementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/management YANG schema element.
type Interface_Subinterface_ManagementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_NamePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_NamePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/name YANG schema element.
type Interface_Subinterface_NamePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_OperStatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_OperStatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/oper-status YANG schema element.
type Interface_Subinterface_OperStatusPathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePath) AdminStatus() *Interface_Subinterface_AdminStatusPath {
	return &Interface_Subinterface_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): The desired state of the interface.  In RFC 7223 this leaf
// has the same read semantics as ifAdminStatus.  Here, it
// reflects the administrative state as set by enabling or
// disabling the interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/admin-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/admin-status"
func (n *Interface_SubinterfacePathAny) AdminStatus() *Interface_Subinterface_AdminStatusPathAny {
	return &Interface_Subinterface_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePath) Counters() *Interface_Subinterface_CountersPath {
	return &Interface_Subinterface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): A collection of interface-related statistics objects.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters"
func (n *Interface_SubinterfacePathAny) Counters() *Interface_Subinterface_CountersPathAny {
	return &Interface_Subinterface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePath) Cpu() *Interface_Subinterface_CpuPath {
	return &Interface_Subinterface_CpuPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Cpu (leaf): When set to true, the interface is for traffic
// that is handled by the system CPU, sometimes also called the
// control plane interface.  On systems that represent the CPU
// interface as an Ethernet interface, for example, this leaf
// should be used to distinguish the CPU interface from dataplane
// interfaces.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/cpu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/cpu"
func (n *Interface_SubinterfacePathAny) Cpu() *Interface_Subinterface_CpuPathAny {
	return &Interface_Subinterface_CpuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "cpu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/description"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_SubinterfacePath) Description() *Interface_Subinterface_DescriptionPath {
	return &Interface_Subinterface_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A textual description of the interface.
//
// A server implementation MAY map this leaf to the ifAlias
// MIB object.  Such an implementation needs to use some
// mechanism to handle the differences in size and characters
// allowed between this leaf and ifAlias.  The definition of
// such a mechanism is outside the scope of this document.
//
// Since ifAlias is defined to be stored in non-volatile
// storage, the MIB implementation MUST map ifAlias to the
// value of 'description' in the persistently stored
// datastore.
//
// Specifically, if the device supports ':startup', when
// ifAlias is read the device MUST return the value of
// 'description' in the 'startup' datastore, and when it is
// written, it MUST be written to the 'running' and 'startup'
// datastores.  Note that it is up to the implementation to
//
// decide whether to modify this single leaf in 'startup' or
// perform an implicit copy-config from 'running' to
// 'startup'.
//
// If the device does not support ':startup', ifAlias MUST
// be mapped to the 'description' leaf in the 'running'
// datastore.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/description"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/description"
func (n *Interface_SubinterfacePathAny) Description() *Interface_Subinterface_DescriptionPathAny {
	return &Interface_Subinterface_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_SubinterfacePath) Enabled() *Interface_Subinterface_EnabledPath {
	return &Interface_Subinterface_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): This leaf contains the configured, desired state of the
// interface.
//
// Systems that implement the IF-MIB use the value of this
// leaf in the 'running' datastore to set
// IF-MIB.ifAdminStatus to 'up' or 'down' after an ifEntry
// has been initialized, as described in RFC 2863.
//
// Changes in this leaf in the 'running' datastore are
// reflected in ifAdminStatus, but if ifAdminStatus is
// changed over SNMP, this leaf is not affected.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/enabled"
func (n *Interface_SubinterfacePathAny) Enabled() *Interface_Subinterface_EnabledPathAny {
	return &Interface_Subinterface_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePath) Ifindex() *Interface_Subinterface_IfindexPath {
	return &Interface_Subinterface_IfindexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ifindex (leaf): System assigned number for each interface.  Corresponds to
// ifIndex object in SNMP Interface MIB
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/ifindex"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/ifindex"
func (n *Interface_SubinterfacePathAny) Ifindex() *Interface_Subinterface_IfindexPathAny {
	return &Interface_Subinterface_IfindexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ifindex"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/index"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_SubinterfacePath) Index() *Interface_Subinterface_IndexPath {
	return &Interface_Subinterface_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): The index of the subinterface, or logical interface number.
// On systems with no support for subinterfaces, or not using
// subinterfaces, this value should default to 0, i.e., the
// default subinterface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/index"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/config/index"
func (n *Interface_SubinterfacePathAny) Index() *Interface_Subinterface_IndexPathAny {
	return &Interface_Subinterface_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePath) Ipv4() *Interface_Subinterface_Ipv4Path {
	return &Interface_Subinterface_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4"
func (n *Interface_SubinterfacePathAny) Ipv4() *Interface_Subinterface_Ipv4PathAny {
	return &Interface_Subinterface_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePath) Ipv6() *Interface_Subinterface_Ipv6Path {
	return &Interface_Subinterface_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6"
func (n *Interface_SubinterfacePathAny) Ipv6() *Interface_Subinterface_Ipv6PathAny {
	return &Interface_Subinterface_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePath) LastChange() *Interface_Subinterface_LastChangePath {
	return &Interface_Subinterface_LastChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): This timestamp indicates the absolute time of the last
// state change of the interface (e.g., up-to-down transition).
// This is different than the SNMP ifLastChange object in the
// standard interface MIB in that it is not relative to the
// system boot time (i.e,. sysUpTime).
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/last-change"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/last-change"
func (n *Interface_SubinterfacePathAny) LastChange() *Interface_Subinterface_LastChangePathAny {
	return &Interface_Subinterface_LastChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePath) Logical() *Interface_Subinterface_LogicalPath {
	return &Interface_Subinterface_LogicalPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Logical (leaf): When set to true, the interface is a logical interface
// which does not have an associated physical port or
// channel on the system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/logical"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/logical"
func (n *Interface_SubinterfacePathAny) Logical() *Interface_Subinterface_LogicalPathAny {
	return &Interface_Subinterface_LogicalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "logical"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePath) Management() *Interface_Subinterface_ManagementPath {
	return &Interface_Subinterface_ManagementPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Management (leaf): When set to true, the interface is a dedicated
// management interface that is not connected to dataplane
// interfaces.  It may be used to connect the system to an
// out-of-band management network, for example.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/management"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/management"
func (n *Interface_SubinterfacePathAny) Management() *Interface_Subinterface_ManagementPathAny {
	return &Interface_Subinterface_ManagementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePath) Name() *Interface_Subinterface_NamePath {
	return &Interface_Subinterface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The system-assigned name for the sub-interface.  This MAY
// be a combination of the base interface name and the
// subinterface index, or some other convention used by the
// system.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/name"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/name"
func (n *Interface_SubinterfacePathAny) Name() *Interface_Subinterface_NamePathAny {
	return &Interface_Subinterface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePath) OperStatus() *Interface_Subinterface_OperStatusPath {
	return &Interface_Subinterface_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The current operational state of the interface.
//
// This leaf has the same semantics as ifOperStatus.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/oper-status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/oper-status"
func (n *Interface_SubinterfacePathAny) OperStatus() *Interface_Subinterface_OperStatusPathAny {
	return &Interface_Subinterface_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vlan"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePath) Vlan() *Interface_Subinterface_VlanPath {
	return &Interface_Subinterface_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (container): Enclosing container for VLAN interface-specific
// data on subinterfaces
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vlan"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan"
func (n *Interface_SubinterfacePathAny) Vlan() *Interface_Subinterface_VlanPathAny {
	return &Interface_Subinterface_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters YANG schema element.
type Interface_Subinterface_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_CarrierTransitionsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_CarrierTransitionsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions YANG schema element.
type Interface_Subinterface_Counters_CarrierTransitionsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_InBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards YANG schema element.
type Interface_Subinterface_Counters_InDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors YANG schema element.
type Interface_Subinterface_Counters_InErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InFcsErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InFcsErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors YANG schema element.
type Interface_Subinterface_Counters_InFcsErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_InUnicastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnknownProtosPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_InUnknownProtosPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos YANG schema element.
type Interface_Subinterface_Counters_InUnknownProtosPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_LastClearPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear YANG schema element.
type Interface_Subinterface_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutBroadcastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutBroadcastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutBroadcastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutDiscardsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutDiscardsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards YANG schema element.
type Interface_Subinterface_Counters_OutDiscardsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutErrorsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutErrorsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors YANG schema element.
type Interface_Subinterface_Counters_OutErrorsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutMulticastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutMulticastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutMulticastPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutUnicastPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Counters_OutUnicastPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts YANG schema element.
type Interface_Subinterface_Counters_OutUnicastPktsPathAny struct {
	*ygot.NodePath
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPath) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPath {
	return &Interface_Subinterface_Counters_CarrierTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// CarrierTransitions (leaf): Number of times the interface state has transitioned
// between up and down since the time the device restarted
// or the last-clear time, whichever is most recent.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "carrier-transitions"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/carrier-transitions"
func (n *Interface_Subinterface_CountersPathAny) CarrierTransitions() *Interface_Subinterface_Counters_CarrierTransitionsPathAny {
	return &Interface_Subinterface_Counters_CarrierTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"carrier-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPath {
	return &Interface_Subinterface_Counters_InBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InBroadcastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a broadcast
// address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InBroadcastPkts() *Interface_Subinterface_Counters_InBroadcastPktsPathAny {
	return &Interface_Subinterface_Counters_InBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPath) InDiscards() *Interface_Subinterface_Counters_InDiscardsPath {
	return &Interface_Subinterface_Counters_InDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscards (leaf): The number of inbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being deliverable to a higher-layer
// protocol.  One possible reason for discarding such a
// packet could be to free up buffer space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-discards"
func (n *Interface_Subinterface_CountersPathAny) InDiscards() *Interface_Subinterface_Counters_InDiscardsPathAny {
	return &Interface_Subinterface_Counters_InDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPath) InErrors() *Interface_Subinterface_Counters_InErrorsPath {
	return &Interface_Subinterface_Counters_InErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrors (leaf): For packet-oriented interfaces, the number of inbound
// packets that contained errors preventing them from being
// deliverable to a higher-layer protocol.  For character-
// oriented or fixed-length interfaces, the number of
// inbound transmission units that contained errors
// preventing them from being deliverable to a higher-layer
// protocol.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-errors"
func (n *Interface_Subinterface_CountersPathAny) InErrors() *Interface_Subinterface_Counters_InErrorsPathAny {
	return &Interface_Subinterface_Counters_InErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPath) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPath {
	return &Interface_Subinterface_Counters_InFcsErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InFcsErrors (leaf): Number of received packets which had errors in the
// frame check sequence (FCS), i.e., framing errors.
//
// Discontinuities in the value of this counter can occur
// when the device is re-initialization as indicated by the
// value of 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-fcs-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-fcs-errors"
func (n *Interface_Subinterface_CountersPathAny) InFcsErrors() *Interface_Subinterface_Counters_InFcsErrorsPathAny {
	return &Interface_Subinterface_Counters_InFcsErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-fcs-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPath {
	return &Interface_Subinterface_Counters_InMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMulticastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were addressed to a multicast
// address at this sub-layer.  For a MAC-layer protocol,
// this includes both Group and Functional addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InMulticastPkts() *Interface_Subinterface_Counters_InMulticastPktsPathAny {
	return &Interface_Subinterface_Counters_InMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPath) InOctets() *Interface_Subinterface_Counters_InOctetsPath {
	return &Interface_Subinterface_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received on the interface,
// including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-octets"
func (n *Interface_Subinterface_CountersPathAny) InOctets() *Interface_Subinterface_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPath) InPkts() *Interface_Subinterface_Counters_InPktsPath {
	return &Interface_Subinterface_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of packets received on the interface,
// including all unicast, multicast, broadcast and bad packets
// etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-pkts"
func (n *Interface_Subinterface_CountersPathAny) InPkts() *Interface_Subinterface_Counters_InPktsPathAny {
	return &Interface_Subinterface_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPath {
	return &Interface_Subinterface_Counters_InUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnicastPkts (leaf): The number of packets, delivered by this sub-layer to a
// higher (sub-)layer, that were not addressed to a
// multicast or broadcast address at this sub-layer.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) InUnicastPkts() *Interface_Subinterface_Counters_InUnicastPktsPathAny {
	return &Interface_Subinterface_Counters_InUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPath) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPath {
	return &Interface_Subinterface_Counters_InUnknownProtosPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// InUnknownProtos (leaf): For packet-oriented interfaces, the number of packets
// received via the interface that were discarded because
// of an unknown or unsupported protocol.  For
// character-oriented or fixed-length interfaces that
// support protocol multiplexing, the number of
// transmission units received via the interface that were
// discarded because of an unknown or unsupported protocol.
// For any interface that does not support protocol
// multiplexing, this counter is not present.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-unknown-protos"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/in-unknown-protos"
func (n *Interface_Subinterface_CountersPathAny) InUnknownProtos() *Interface_Subinterface_Counters_InUnknownProtosPathAny {
	return &Interface_Subinterface_Counters_InUnknownProtosPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-unknown-protos"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPath) LastClear() *Interface_Subinterface_Counters_LastClearPath {
	return &Interface_Subinterface_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Timestamp of the last time the interface counters were
// cleared.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "last-clear"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/last-clear"
func (n *Interface_Subinterface_CountersPathAny) LastClear() *Interface_Subinterface_Counters_LastClearPathAny {
	return &Interface_Subinterface_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPath) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPath {
	return &Interface_Subinterface_Counters_OutBroadcastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutBroadcastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// broadcast address at this sub-layer, including those
// that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-broadcast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-broadcast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutBroadcastPkts() *Interface_Subinterface_Counters_OutBroadcastPktsPathAny {
	return &Interface_Subinterface_Counters_OutBroadcastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-broadcast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPath) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPath {
	return &Interface_Subinterface_Counters_OutDiscardsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscards (leaf): The number of outbound packets that were chosen to be
// discarded even though no errors had been detected to
// prevent their being transmitted.  One possible reason
// for discarding such a packet could be to free up buffer
// space.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discards"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-discards"
func (n *Interface_Subinterface_CountersPathAny) OutDiscards() *Interface_Subinterface_Counters_OutDiscardsPathAny {
	return &Interface_Subinterface_Counters_OutDiscardsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discards"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPath) OutErrors() *Interface_Subinterface_Counters_OutErrorsPath {
	return &Interface_Subinterface_Counters_OutErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrors (leaf): For packet-oriented interfaces, the number of outbound
// packets that could not be transmitted because of errors.
// For character-oriented or fixed-length interfaces, the
// number of outbound transmission units that could not be
// transmitted because of errors.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-errors"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-errors"
func (n *Interface_Subinterface_CountersPathAny) OutErrors() *Interface_Subinterface_Counters_OutErrorsPathAny {
	return &Interface_Subinterface_Counters_OutErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPath {
	return &Interface_Subinterface_Counters_OutMulticastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMulticastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were addressed to a
// multicast address at this sub-layer, including those
// that were discarded or not sent.  For a MAC-layer
// protocol, this includes both Group and Functional
// addresses.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-multicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-multicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutMulticastPkts() *Interface_Subinterface_Counters_OutMulticastPktsPathAny {
	return &Interface_Subinterface_Counters_OutMulticastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-multicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPath) OutOctets() *Interface_Subinterface_Counters_OutOctetsPath {
	return &Interface_Subinterface_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets transmitted out of the
// interface, including framing characters.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-octets"
func (n *Interface_Subinterface_CountersPathAny) OutOctets() *Interface_Subinterface_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPath) OutPkts() *Interface_Subinterface_Counters_OutPktsPath {
	return &Interface_Subinterface_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of packets transmitted out of the
// interface, including all unicast, multicast, broadcast,
// and bad packets etc.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutPkts() *Interface_Subinterface_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPath) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPath {
	return &Interface_Subinterface_Counters_OutUnicastPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutUnicastPkts (leaf): The total number of packets that higher-level protocols
// requested be transmitted, and that were not addressed
// to a multicast or broadcast address at this sub-layer,
// including those that were discarded or not sent.
//
// Discontinuities in the value of this counter can occur
// at re-initialization of the management system, and at
// other times as indicated by the value of
// 'last-clear'.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-unicast-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/state/counters/out-unicast-pkts"
func (n *Interface_Subinterface_CountersPathAny) OutUnicastPkts() *Interface_Subinterface_Counters_OutUnicastPktsPathAny {
	return &Interface_Subinterface_Counters_OutUnicastPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-unicast-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4Path struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4 YANG schema element.
type Interface_Subinterface_Ipv4PathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv4_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu YANG schema element.
type Interface_Subinterface_Ipv4_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4Path) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4PathAny) AddressAny() *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv4Path) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPath {
	return &Interface_Subinterface_Ipv4_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Address(Ip string) *Interface_Subinterface_Ipv4_AddressPathAny {
	return &Interface_Subinterface_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4Path) Counters() *Interface_Subinterface_Ipv4_CountersPath {
	return &Interface_Subinterface_Ipv4_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters"
func (n *Interface_Subinterface_Ipv4PathAny) Counters() *Interface_Subinterface_Ipv4_CountersPathAny {
	return &Interface_Subinterface_Ipv4_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4Path) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPath {
	return &Interface_Subinterface_Ipv4_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/dhcp-client"
func (n *Interface_Subinterface_Ipv4PathAny) DhcpClient() *Interface_Subinterface_Ipv4_DhcpClientPathAny {
	return &Interface_Subinterface_Ipv4_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4Path) Enabled() *Interface_Subinterface_Ipv4_EnabledPath {
	return &Interface_Subinterface_Ipv4_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/enabled"
func (n *Interface_Subinterface_Ipv4PathAny) Enabled() *Interface_Subinterface_Ipv4_EnabledPathAny {
	return &Interface_Subinterface_Ipv4_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4Path) Mtu() *Interface_Subinterface_Ipv4_MtuPath {
	return &Interface_Subinterface_Ipv4_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/config/mtu"
func (n *Interface_Subinterface_Ipv4PathAny) Mtu() *Interface_Subinterface_Ipv4_MtuPathAny {
	return &Interface_Subinterface_Ipv4_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4Path) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv4PathAny) NeighborAny() *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv4Path) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPath {
	return &Interface_Subinterface_Ipv4_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv4PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv4_NeighborPathAny {
	return &Interface_Subinterface_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4Path) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPath {
	return &Interface_Subinterface_Ipv4_ProxyArpPath{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp"
func (n *Interface_Subinterface_Ipv4PathAny) ProxyArp() *Interface_Subinterface_Ipv4_ProxyArpPathAny {
	return &Interface_Subinterface_Ipv4_ProxyArpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4Path) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPath {
	return &Interface_Subinterface_Ipv4_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered"
func (n *Interface_Subinterface_Ipv4PathAny) Unnumbered() *Interface_Subinterface_Ipv4_UnnumberedPathAny {
	return &Interface_Subinterface_Ipv4_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address YANG schema element.
type Interface_Subinterface_Ipv4_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_AddressPath) Ip() *Interface_Subinterface_Ipv4_Address_IpPath {
	return &Interface_Subinterface_Ipv4_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Ip() *Interface_Subinterface_Ipv4_Address_IpPathAny {
	return &Interface_Subinterface_Ipv4_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPath) Origin() *Interface_Subinterface_Ipv4_Address_OriginPath {
	return &Interface_Subinterface_Ipv4_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) Origin() *Interface_Subinterface_Ipv4_Address_OriginPathAny {
	return &Interface_Subinterface_Ipv4_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPath) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPath {
	return &Interface_Subinterface_Ipv4_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv4_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny {
	return &Interface_Subinterface_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv4_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_Subinterface_Ipv4_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters YANG schema element.
type Interface_Subinterface_Ipv4_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv4_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InOctets() *Interface_Subinterface_Ipv4_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) InPkts() *Interface_Subinterface_Ipv4_Counters_InPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPath) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPath {
	return &Interface_Subinterface_Ipv4_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv4_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv4_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv4_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv4_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPath {
	return &Interface_Subinterface_Ipv4_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Ip() *Interface_Subinterface_Ipv4_Neighbor_IpPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath {
	return &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPath) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPath {
	return &Interface_Subinterface_Ipv4_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv4_NeighborPathAny) Origin() *Interface_Subinterface_Ipv4_Neighbor_OriginPathAny {
	return &Interface_Subinterface_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_Subinterface_Ipv4_ProxyArp_ModePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPath) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePath {
	return &Interface_Subinterface_Ipv4_ProxyArp_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/proxy-arp/config/mode"
func (n *Interface_Subinterface_Ipv4_ProxyArpPathAny) Mode() *Interface_Subinterface_Ipv4_ProxyArp_ModePathAny {
	return &Interface_Subinterface_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered YANG schema element.
type Interface_Subinterface_Ipv4_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPath {
	return &Interface_Subinterface_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Subinterface_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6Path struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6 YANG schema element.
type Interface_Subinterface_Ipv6PathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client YANG schema element.
type Interface_Subinterface_Ipv6_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu YANG schema element.
type Interface_Subinterface_Ipv6_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6Path) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6PathAny) AddressAny() *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv6Path) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPath {
	return &Interface_Subinterface_Ipv6_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address"
// Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Address(Ip string) *Interface_Subinterface_Ipv6_AddressPathAny {
	return &Interface_Subinterface_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Autoconf (container): Top-level container for IPv6 autoconf
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "autoconf"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6Path) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPath {
	return &Interface_Subinterface_Ipv6_AutoconfPath{
		NodePath: ygot.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// Autoconf (container): Top-level container for IPv6 autoconf
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "autoconf"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf"
func (n *Interface_Subinterface_Ipv6PathAny) Autoconf() *Interface_Subinterface_Ipv6_AutoconfPathAny {
	return &Interface_Subinterface_Ipv6_AutoconfPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"autoconf"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6Path) Counters() *Interface_Subinterface_Ipv6_CountersPath {
	return &Interface_Subinterface_Ipv6_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters"
func (n *Interface_Subinterface_Ipv6PathAny) Counters() *Interface_Subinterface_Ipv6_CountersPathAny {
	return &Interface_Subinterface_Ipv6_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client"
func (n *Interface_Subinterface_Ipv6Path) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPath {
	return &Interface_Subinterface_Ipv6_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dhcp-client"
func (n *Interface_Subinterface_Ipv6PathAny) DhcpClient() *Interface_Subinterface_Ipv6_DhcpClientPathAny {
	return &Interface_Subinterface_Ipv6_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6Path) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath {
	return &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Subinterface_Ipv6PathAny) DupAddrDetectTransmits() *Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny {
	return &Interface_Subinterface_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled"
func (n *Interface_Subinterface_Ipv6Path) Enabled() *Interface_Subinterface_Ipv6_EnabledPath {
	return &Interface_Subinterface_Ipv6_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/enabled"
func (n *Interface_Subinterface_Ipv6PathAny) Enabled() *Interface_Subinterface_Ipv6_EnabledPathAny {
	return &Interface_Subinterface_Ipv6_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu"
func (n *Interface_Subinterface_Ipv6Path) Mtu() *Interface_Subinterface_Ipv6_MtuPath {
	return &Interface_Subinterface_Ipv6_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/config/mtu"
func (n *Interface_Subinterface_Ipv6PathAny) Mtu() *Interface_Subinterface_Ipv6_MtuPathAny {
	return &Interface_Subinterface_Ipv6_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6Path) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Subinterface_Ipv6PathAny) NeighborAny() *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv6Path) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPath {
	return &Interface_Subinterface_Ipv6_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Subinterface_Ipv6PathAny) Neighbor(Ip string) *Interface_Subinterface_Ipv6_NeighborPathAny {
	return &Interface_Subinterface_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6Path) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement"
func (n *Interface_Subinterface_Ipv6PathAny) RouterAdvertisement() *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6Path) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPath {
	return &Interface_Subinterface_Ipv6_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered"
func (n *Interface_Subinterface_Ipv6PathAny) Unnumbered() *Interface_Subinterface_Ipv6_UnnumberedPathAny {
	return &Interface_Subinterface_Ipv6_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address YANG schema element.
type Interface_Subinterface_Ipv6_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status YANG schema element.
type Interface_Subinterface_Ipv6_Address_StatusPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv6_AddressPath) Ip() *Interface_Subinterface_Ipv6_Address_IpPath {
	return &Interface_Subinterface_Ipv6_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/ip"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Ip() *Interface_Subinterface_Ipv6_Address_IpPathAny {
	return &Interface_Subinterface_Ipv6_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPath) Origin() *Interface_Subinterface_Ipv6_Address_OriginPath {
	return &Interface_Subinterface_Ipv6_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/origin"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Origin() *Interface_Subinterface_Ipv6_Address_OriginPathAny {
	return &Interface_Subinterface_Ipv6_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPath) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPath {
	return &Interface_Subinterface_Ipv6_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) PrefixLength() *Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny {
	return &Interface_Subinterface_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPath) Status() *Interface_Subinterface_Ipv6_Address_StatusPath {
	return &Interface_Subinterface_Ipv6_Address_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/state/status"
func (n *Interface_Subinterface_Ipv6_AddressPathAny) Status() *Interface_Subinterface_Ipv6_Address_StatusPathAny {
	return &Interface_Subinterface_Ipv6_Address_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroupAny (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId (wildcarded): uint8
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroupAny() *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": "*"},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPath) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// VrrpGroup (list): List of VRRP groups, keyed by virtual router id
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "vrrp/vrrp-group"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group"
// VirtualRouterId: uint8
func (n *Interface_Subinterface_Ipv6_AddressPathAny) VrrpGroup(VirtualRouterId uint8) *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vrrp", "vrrp-group"},
			map[string]interface{}{"virtual-router-id": VirtualRouterId},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny struct {
	*ygot.NodePath
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AcceptMode (leaf): Configure whether packets destined for
// virtual addresses are accepted even when the virtual
// address is not owned by the router interface
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/accept-mode"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/accept-mode"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AcceptMode() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AcceptModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "accept-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdvertisementInterval (leaf): Sets the interval between successive VRRP
// advertisements -- RFC 5798 defines this as a 12-bit
// value expressed as 0.1 seconds, with default 100, i.e.,
// 1 second.  Several implementation express this in units of
// seconds
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/advertisement-interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/advertisement-interval"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) AdvertisementInterval() *Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_AdvertisementIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "advertisement-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPriority (leaf): Operational value of the priority for the
// interface in the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/current-priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/state/current-priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) CurrentPriority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_CurrentPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "current-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceTracking (container): Top-level container for VRRP interface tracking
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-tracking"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) InterfaceTracking() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-tracking"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preempt (leaf): When set to true, enables preemption by a higher
// priority backup router of a lower priority master router
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Preempt() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// PreemptDelay (leaf): Set the delay the higher priority router waits
// before preempting
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/preempt-delay"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/preempt-delay"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) PreemptDelay() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PreemptDelayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preempt-delay"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Priority (leaf): Specifies the sending VRRP interface's priority
// for the virtual router.  Higher values equal higher
// priority
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/priority"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) Priority() *Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_PriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualAddress (leaf-list): Configure one or more virtual addresses for the
// VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-address"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualAddress() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualLinkLocal (leaf): For VRRP on IPv6 interfaces, sets the virtual link local
// address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-link-local"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-link-local"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualLinkLocal() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualLinkLocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-link-local"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPath) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualRouterId (leaf): Set the virtual router id for use by the VRRP group.  This
// usually also determines the virtual MAC address that is
// generated for the VRRP group
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/virtual-router-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/config/virtual-router-id"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroupPathAny) VirtualRouterId() *Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_VirtualRouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface YANG schema element.
type Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny struct {
	*ygot.NodePath
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// PriorityDecrement (leaf): Set the value to subtract from priority when
// the tracked interface goes down
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/priority-decrement"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/priority-decrement"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) PriorityDecrement() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_PriorityDecrementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "priority-decrement"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPath) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// TrackInterface (leaf-list): Sets a list of one or more interfaces that should
// be tracked for up/down events to dynamically change the
// priority state of the VRRP group, and potentially
// change the mastership if the tracked interface going
// down lowers the priority sufficiently.  Any of the tracked
// interfaces going down will cause the priority to be lowered.
// Some implementations may only support a single
// tracked interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/track-interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/addresses/address/vrrp/vrrp-group/interface-tracking/config/track-interface"
func (n *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTrackingPathAny) TrackInterface() *Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny {
	return &Interface_Subinterface_Ipv6_Address_VrrpGroup_InterfaceTracking_TrackInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "track-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_AutoconfPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_AutoconfPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf YANG schema element.
type Interface_Subinterface_Ipv6_AutoconfPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime YANG schema element.
type Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny struct {
	*ygot.NodePath
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-global-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateGlobalAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates global addresses as
// described in RFC 4862.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-global-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-global-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateGlobalAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateGlobalAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-global-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-temporary-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// CreateTemporaryAddresses (leaf): [adapted from IETF IP model RFC 7277]
//
// If enabled, the host creates temporary addresses as
// described in RFC 4941.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/create-temporary-addresses"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/create-temporary-addresses"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) CreateTemporaryAddresses() *Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_CreateTemporaryAddressesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "create-temporary-addresses"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryPreferredLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address is
// preferred.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-preferred-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-preferred-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryPreferredLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryPreferredLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-preferred-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPath) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// TemporaryValidLifetime (leaf): [adapted from IETF IP model RFC 7277]
//
// The time period during which the temporary address
// is valid.
// ----------------------------------------
// Defining module: "openconfig-if-ip-ext"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/temporary-valid-lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/autoconf/config/temporary-valid-lifetime"
func (n *Interface_Subinterface_Ipv6_AutoconfPathAny) TemporaryValidLifetime() *Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny {
	return &Interface_Subinterface_Ipv6_Autoconf_TemporaryValidLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "temporary-valid-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters YANG schema element.
type Interface_Subinterface_Ipv6_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Subinterface_Ipv6_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InErrorPkts() *Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedOctets() *Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InForwardedPkts() *Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InOctets() *Interface_Subinterface_Ipv6_Counters_InOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/in-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) InPkts() *Interface_Subinterface_Ipv6_Counters_InPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-error-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutErrorPkts() *Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-octets"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutOctets() *Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPath) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPath {
	return &Interface_Subinterface_Ipv6_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/state/counters/out-pkts"
func (n *Interface_Subinterface_Ipv6_CountersPathAny) OutPkts() *Interface_Subinterface_Ipv6_Counters_OutPktsPathAny {
	return &Interface_Subinterface_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor YANG schema element.
type Interface_Subinterface_Ipv6_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Subinterface_Ipv6_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPath {
	return &Interface_Subinterface_Ipv6_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Ip() *Interface_Subinterface_Ipv6_Neighbor_IpPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPath) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPath {
	return &Interface_Subinterface_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) IsRouter() *Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPath) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath {
	return &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPath) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath {
	return &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) NeighborState() *Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPath) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPath {
	return &Interface_Subinterface_Ipv6_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Subinterface_Ipv6_NeighborPathAny) Origin() *Interface_Subinterface_Ipv6_Neighbor_OriginPathAny {
	return &Interface_Subinterface_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygot.NodePath
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/interval"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPath) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/router-advertisement/config/suppress"
func (n *Interface_Subinterface_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny {
	return &Interface_Subinterface_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered YANG schema element.
type Interface_Subinterface_Ipv6_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPath {
	return &Interface_Subinterface_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/config/enabled"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) Enabled() *Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPath) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref"
func (n *Interface_Subinterface_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Subinterface_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_VlanPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_VlanPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan YANG schema element.
type Interface_Subinterface_VlanPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_VlanIdPathAny struct {
	*ygot.NodePath
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "egress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPath) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPath {
	return &Interface_Subinterface_Vlan_EgressMappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// EgressMapping (container): Egress VLAN and label behaviors for packets that are
// destined for output via this subinterface.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "egress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping"
func (n *Interface_Subinterface_VlanPathAny) EgressMapping() *Interface_Subinterface_Vlan_EgressMappingPathAny {
	return &Interface_Subinterface_Vlan_EgressMappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"egress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ingress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPath) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPath {
	return &Interface_Subinterface_Vlan_IngressMappingPath{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// IngressMapping (container): Ingress VLAN stack behaviors for packets that arrive on
// this subinterface after their VLAN idenitifer(s) have been
// matched.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ingress-mapping"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping"
func (n *Interface_Subinterface_VlanPathAny) IngressMapping() *Interface_Subinterface_Vlan_IngressMappingPathAny {
	return &Interface_Subinterface_Vlan_IngressMappingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ingress-mapping"},
			map[string]interface{}{},
			n,
		),
	}
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "match"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPath) Match() *Interface_Subinterface_Vlan_MatchPath {
	return &Interface_Subinterface_Vlan_MatchPath{
		NodePath: ygot.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
}

// Match (container): Configuration for various VLAN tag matching schemes,
// including single-tagged 802.1q packets and double-tagged
// 802.1ad 'Q-in-Q' packets. Typically only one of the subordinate
// containers should be specified.
//
// Wildcards may be matched by specifying range values of 2-4094.
// If implementations have a more efficient way to match Wildcards
// then they should recognize this pattern and translate accordingly.
//
// Implementations are expected to return errors for combinations
// that they do not support, or provide deviations to the same effect.
//
// For simple VLAN configurations without an 'egress-mapping' then
// using the 'single-tagged' and 'double-tagged' VLAN matches that
// resolve to specific values, these specify the VLAN identifiers
// applied to packets on egress.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "match"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match"
func (n *Interface_Subinterface_VlanPathAny) Match() *Interface_Subinterface_Vlan_MatchPathAny {
	return &Interface_Subinterface_Vlan_MatchPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"match"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_VlanPath) VlanId() *Interface_Subinterface_Vlan_VlanIdPath {
	return &Interface_Subinterface_Vlan_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN id for the subinterface -- specified inline for the
// case of a local VLAN.  The id is scoped to the
// subinterface, and could be repeated on different
// subinterfaces.
// Deprecation note: See adjacent elements in the 'vlan' container for
// making more expressive VLAN matches.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/config/vlan-id"
func (n *Interface_Subinterface_VlanPathAny) VlanId() *Interface_Subinterface_Vlan_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_EgressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping YANG schema element.
type Interface_Subinterface_Vlan_EgressMappingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny struct {
	*ygot.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPath {
	return &Interface_Subinterface_Vlan_EgressMapping_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_EgressMapping_TpidPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPath {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'POP' then a VLAN identifier is removed from the stack but the
// value of this leaf is used instead. This value must be non-zero if
// the 'vlan-stack-action' is one of 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/egress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_EgressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny {
	return &Interface_Subinterface_Vlan_EgressMapping_VlanStackActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_IngressMappingPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMappingPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping YANG schema element.
type Interface_Subinterface_Vlan_IngressMappingPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_TpidPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_TpidPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action YANG schema element.
type Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny struct {
	*ygot.NodePath
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPath {
	return &Interface_Subinterface_Vlan_IngressMapping_TpidPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tpid (leaf): Optionally override the tag protocol identifier field (TPID) that
// is used by the action configured by 'vlan-stack-action' when
// modifying the VLAN stack.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/tpid"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/tpid"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) Tpid() *Interface_Subinterface_Vlan_IngressMapping_TpidPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_TpidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tpid"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPath {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): Optionally specifies a fixed VLAN identifier that is used by the
// action configured in 'vlan-stack-action'. For example, if the action
// is 'PUSH' then this VLAN identifier is added to the the stack.
// This value must be non-zero if the 'vlan-stack-action' is one of
// 'PUSH' or 'SWAP'.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-id"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanId() *Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPath) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanStackAction (leaf): The action to take on the VLAN stack of a packet. This is
// optionally used in conjunction with adjacent leaves to override
// the values of the action.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-stack-action"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/ingress-mapping/config/vlan-stack-action"
func (n *Interface_Subinterface_Vlan_IngressMappingPathAny) VlanStackAction() *Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny {
	return &Interface_Subinterface_Vlan_IngressMapping_VlanStackActionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-stack-action"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_MatchPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_MatchPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match YANG schema element.
type Interface_Subinterface_Vlan_MatchPathAny struct {
	*ygot.NodePath
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTagged (container): Match double-tagged packets against inner exact and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTagged() *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerList (container): Match double-tagged packets against an inner list and outer exact
// VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerList() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerOuterRange (container): Match double-tagged packets against an inner range and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedInnerRange (container): Match double-tagged packets against an inner range and outer
// exact VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-inner-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedInnerRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-inner-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterList (container): Match double-tagged packets against an inner exact and outer list
// of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterList() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPath) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// DoubleTaggedOuterRange (container): Match double-tagged packets against an inner exact and an outer
// range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "double-tagged-outer-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) DoubleTaggedOuterRange() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"double-tagged-outer-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedPath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTagged (container): Match single-tagged packets with an exact VLAN identifier.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTagged() *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedListPath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedList (container): Match single-tagged packets with a list of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-list"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedList() *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-list"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPath) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRangePath{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleTaggedRange (container): Match single-tagged packets with a range of VLAN identifiers.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "single-tagged-range"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range"
func (n *Interface_Subinterface_Vlan_MatchPathAny) SingleTaggedRange() *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"single-tagged-range"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTagged_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanIds (leaf-list): Inner VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/inner-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) InnerVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_InnerVlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf): Outer VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-list/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerListPathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerList_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_InnerLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerHighVlanId (leaf): The high-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerLowVlanId (leaf): The low-value inner VLAN identifier in a range for double-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/inner-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) InnerLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_InnerLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePath) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanId (leaf-list): Outer VLAN identifier of double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-inner-range/config/outer-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRangePathAny) OuterVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedInnerRange_OuterVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPath) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterVlanIds (leaf-list): Outer VLAN identifiers for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-list/config/outer-vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterListPathAny) OuterVlanIds() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterList_OuterVlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny struct {
	*ygot.NodePath
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InnerVlanId (leaf): Inner VLAN identifier for double-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/inner-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/inner-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) InnerVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_InnerVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "inner-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterHighVlanId (leaf): The high-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterHighVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterHighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePath) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuterLowVlanId (leaf): The low-value outer VLAN identifier for double-tagged packets.
// The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/outer-low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/double-tagged-outer-range/config/outer-low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRangePathAny) OuterLowVlanId() *Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_DoubleTaggedOuterRange_OuterLowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "outer-low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny struct {
	*ygot.NodePath
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPath) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanId (leaf): VLAN identifier for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged/config/vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedPathAny) VlanId() *Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTagged_VlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny struct {
	*ygot.NodePath
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPath) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanIds (leaf-list): VLAN identifiers for single-tagged packets.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/vlan-ids"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-list/config/vlan-ids"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedListPathAny) VlanIds() *Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedList_VlanIdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan-ids"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath represents the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath struct {
	*ygot.NodePath
}

// Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id YANG schema element.
type Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny struct {
	*ygot.NodePath
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// HighVlanId (leaf): The high-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/high-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/high-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) HighVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_HighVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "high-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePath) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowVlanId (leaf): The low-value VLAN identifier in a range for single-tagged
// packets. The range is matched inclusively.
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/low-vlan-id"
// Path from root: "/interfaces/interface/subinterfaces/subinterface/vlan/match/single-tagged-range/config/low-vlan-id"
func (n *Interface_Subinterface_Vlan_Match_SingleTaggedRangePathAny) LowVlanId() *Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny {
	return &Interface_Subinterface_Vlan_Match_SingleTaggedRange_LowVlanIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "low-vlan-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_TunnelPath represents the /openconfig-interfaces/interfaces/interface/tunnel YANG schema element.
type Interface_TunnelPath struct {
	*ygot.NodePath
}

// Interface_TunnelPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel YANG schema element.
type Interface_TunnelPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_DstPath represents the /openconfig-interfaces/interfaces/interface/tunnel/config/dst YANG schema element.
type Interface_Tunnel_DstPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_DstPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/config/dst YANG schema element.
type Interface_Tunnel_DstPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_GreKeyPath represents the /openconfig-interfaces/interfaces/interface/tunnel/config/gre-key YANG schema element.
type Interface_Tunnel_GreKeyPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_GreKeyPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/config/gre-key YANG schema element.
type Interface_Tunnel_GreKeyPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_SrcPath represents the /openconfig-interfaces/interfaces/interface/tunnel/config/src YANG schema element.
type Interface_Tunnel_SrcPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_SrcPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/config/src YANG schema element.
type Interface_Tunnel_SrcPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_TtlPath represents the /openconfig-interfaces/interfaces/interface/tunnel/config/ttl YANG schema element.
type Interface_Tunnel_TtlPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_TtlPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/config/ttl YANG schema element.
type Interface_Tunnel_TtlPathAny struct {
	*ygot.NodePath
}

// Dst (leaf): The destination address for the tunnel.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dst"
// Path from root: "/interfaces/interface/tunnel/config/dst"
func (n *Interface_TunnelPath) Dst() *Interface_Tunnel_DstPath {
	return &Interface_Tunnel_DstPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dst"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dst (leaf): The destination address for the tunnel.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dst"
// Path from root: "/interfaces/interface/tunnel/config/dst"
func (n *Interface_TunnelPathAny) Dst() *Interface_Tunnel_DstPathAny {
	return &Interface_Tunnel_DstPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dst"},
			map[string]interface{}{},
			n,
		),
	}
}

// GreKey (leaf): The GRE key to be specified for the tunnel. The
// key is used to identify a traffic flow within
// a tunnel.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/gre-key"
// Path from root: "/interfaces/interface/tunnel/config/gre-key"
func (n *Interface_TunnelPath) GreKey() *Interface_Tunnel_GreKeyPath {
	return &Interface_Tunnel_GreKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "gre-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// GreKey (leaf): The GRE key to be specified for the tunnel. The
// key is used to identify a traffic flow within
// a tunnel.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/gre-key"
// Path from root: "/interfaces/interface/tunnel/config/gre-key"
func (n *Interface_TunnelPathAny) GreKey() *Interface_Tunnel_GreKeyPathAny {
	return &Interface_Tunnel_GreKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "gre-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/tunnel/ipv4"
func (n *Interface_TunnelPath) Ipv4() *Interface_Tunnel_Ipv4Path {
	return &Interface_Tunnel_Ipv4Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4 (container): Parameters for the IPv4 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv4"
// Path from root: "/interfaces/interface/tunnel/ipv4"
func (n *Interface_TunnelPathAny) Ipv4() *Interface_Tunnel_Ipv4PathAny {
	return &Interface_Tunnel_Ipv4PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/tunnel/ipv6"
func (n *Interface_TunnelPath) Ipv6() *Interface_Tunnel_Ipv6Path {
	return &Interface_Tunnel_Ipv6Path{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6 (container): Parameters for the IPv6 address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "ipv6"
// Path from root: "/interfaces/interface/tunnel/ipv6"
func (n *Interface_TunnelPathAny) Ipv6() *Interface_Tunnel_Ipv6PathAny {
	return &Interface_Tunnel_Ipv6PathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
}

// Src (leaf): The source address that should be used for the
// tunnel.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/src"
// Path from root: "/interfaces/interface/tunnel/config/src"
func (n *Interface_TunnelPath) Src() *Interface_Tunnel_SrcPath {
	return &Interface_Tunnel_SrcPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "src"},
			map[string]interface{}{},
			n,
		),
	}
}

// Src (leaf): The source address that should be used for the
// tunnel.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/src"
// Path from root: "/interfaces/interface/tunnel/config/src"
func (n *Interface_TunnelPathAny) Src() *Interface_Tunnel_SrcPathAny {
	return &Interface_Tunnel_SrcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "src"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (or hop limit) that should be utilised
// for the IP packets used for the tunnel transport.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ttl"
// Path from root: "/interfaces/interface/tunnel/config/ttl"
func (n *Interface_TunnelPath) Ttl() *Interface_Tunnel_TtlPath {
	return &Interface_Tunnel_TtlPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (or hop limit) that should be utilised
// for the IP packets used for the tunnel transport.
// ----------------------------------------
// Defining module: "openconfig-if-tunnel"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ttl"
// Path from root: "/interfaces/interface/tunnel/config/ttl"
func (n *Interface_TunnelPathAny) Ttl() *Interface_Tunnel_TtlPathAny {
	return &Interface_Tunnel_TtlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv4Path represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4 YANG schema element.
type Interface_Tunnel_Ipv4Path struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4 YANG schema element.
type Interface_Tunnel_Ipv4PathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/config/dhcp-client YANG schema element.
type Interface_Tunnel_Ipv4_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/config/dhcp-client YANG schema element.
type Interface_Tunnel_Ipv4_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_EnabledPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/config/enabled YANG schema element.
type Interface_Tunnel_Ipv4_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/config/enabled YANG schema element.
type Interface_Tunnel_Ipv4_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_MtuPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/config/mtu YANG schema element.
type Interface_Tunnel_Ipv4_MtuPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/config/mtu YANG schema element.
type Interface_Tunnel_Ipv4_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv4Path) AddressAny() *Interface_Tunnel_Ipv4_AddressPathAny {
	return &Interface_Tunnel_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv4PathAny) AddressAny() *Interface_Tunnel_Ipv4_AddressPathAny {
	return &Interface_Tunnel_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address"
// Ip: string
func (n *Interface_Tunnel_Ipv4Path) Address(Ip string) *Interface_Tunnel_Ipv4_AddressPath {
	return &Interface_Tunnel_Ipv4_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv4 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address"
// Ip: string
func (n *Interface_Tunnel_Ipv4PathAny) Address(Ip string) *Interface_Tunnel_Ipv4_AddressPathAny {
	return &Interface_Tunnel_Ipv4_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters"
func (n *Interface_Tunnel_Ipv4Path) Counters() *Interface_Tunnel_Ipv4_CountersPath {
	return &Interface_Tunnel_Ipv4_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters"
func (n *Interface_Tunnel_Ipv4PathAny) Counters() *Interface_Tunnel_Ipv4_CountersPathAny {
	return &Interface_Tunnel_Ipv4_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/tunnel/ipv4/config/dhcp-client"
func (n *Interface_Tunnel_Ipv4Path) DhcpClient() *Interface_Tunnel_Ipv4_DhcpClientPath {
	return &Interface_Tunnel_Ipv4_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/tunnel/ipv4/config/dhcp-client"
func (n *Interface_Tunnel_Ipv4PathAny) DhcpClient() *Interface_Tunnel_Ipv4_DhcpClientPathAny {
	return &Interface_Tunnel_Ipv4_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv4/config/enabled"
func (n *Interface_Tunnel_Ipv4Path) Enabled() *Interface_Tunnel_Ipv4_EnabledPath {
	return &Interface_Tunnel_Ipv4_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv4 is enabled or disabled on this
// interface.  When IPv4 is enabled, this interface is
// connected to an IPv4 stack, and the interface can send
// and receive IPv4 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv4/config/enabled"
func (n *Interface_Tunnel_Ipv4PathAny) Enabled() *Interface_Tunnel_Ipv4_EnabledPathAny {
	return &Interface_Tunnel_Ipv4_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/tunnel/ipv4/config/mtu"
func (n *Interface_Tunnel_Ipv4Path) Mtu() *Interface_Tunnel_Ipv4_MtuPath {
	return &Interface_Tunnel_Ipv4_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv4 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/tunnel/ipv4/config/mtu"
func (n *Interface_Tunnel_Ipv4PathAny) Mtu() *Interface_Tunnel_Ipv4_MtuPathAny {
	return &Interface_Tunnel_Ipv4_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv4Path) NeighborAny() *Interface_Tunnel_Ipv4_NeighborPathAny {
	return &Interface_Tunnel_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv4PathAny) NeighborAny() *Interface_Tunnel_Ipv4_NeighborPathAny {
	return &Interface_Tunnel_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Tunnel_Ipv4Path) Neighbor(Ip string) *Interface_Tunnel_Ipv4_NeighborPath {
	return &Interface_Tunnel_Ipv4_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): A list of mappings from IPv4 addresses to
// link-layer addresses.
//
// Entries in this list are used as static entries in the
// ARP Cache.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor"
// Ip: string
func (n *Interface_Tunnel_Ipv4PathAny) Neighbor(Ip string) *Interface_Tunnel_Ipv4_NeighborPathAny {
	return &Interface_Tunnel_Ipv4_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/tunnel/ipv4/proxy-arp"
func (n *Interface_Tunnel_Ipv4Path) ProxyArp() *Interface_Tunnel_Ipv4_ProxyArpPath {
	return &Interface_Tunnel_Ipv4_ProxyArpPath{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProxyArp (container): Configuration and operational state parameters
// relating to proxy ARP. This functionality allows a
// system to respond to ARP requests that are not
// explicitly destined to the local system.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "proxy-arp"
// Path from root: "/interfaces/interface/tunnel/ipv4/proxy-arp"
func (n *Interface_Tunnel_Ipv4PathAny) ProxyArp() *Interface_Tunnel_Ipv4_ProxyArpPathAny {
	return &Interface_Tunnel_Ipv4_ProxyArpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"proxy-arp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered"
func (n *Interface_Tunnel_Ipv4Path) Unnumbered() *Interface_Tunnel_Ipv4_UnnumberedPath {
	return &Interface_Tunnel_Ipv4_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered"
func (n *Interface_Tunnel_Ipv4PathAny) Unnumbered() *Interface_Tunnel_Ipv4_UnnumberedPathAny {
	return &Interface_Tunnel_Ipv4_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv4_AddressPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address YANG schema element.
type Interface_Tunnel_Ipv4_AddressPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address YANG schema element.
type Interface_Tunnel_Ipv4_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address/config/ip YANG schema element.
type Interface_Tunnel_Ipv4_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address/config/ip YANG schema element.
type Interface_Tunnel_Ipv4_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Tunnel_Ipv4_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address/state/origin YANG schema element.
type Interface_Tunnel_Ipv4_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_Tunnel_Ipv4_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/addresses/address/config/prefix-length YANG schema element.
type Interface_Tunnel_Ipv4_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address/config/ip"
func (n *Interface_Tunnel_Ipv4_AddressPath) Ip() *Interface_Tunnel_Ipv4_Address_IpPath {
	return &Interface_Tunnel_Ipv4_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address/config/ip"
func (n *Interface_Tunnel_Ipv4_AddressPathAny) Ip() *Interface_Tunnel_Ipv4_Address_IpPathAny {
	return &Interface_Tunnel_Ipv4_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address/state/origin"
func (n *Interface_Tunnel_Ipv4_AddressPath) Origin() *Interface_Tunnel_Ipv4_Address_OriginPath {
	return &Interface_Tunnel_Ipv4_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., statically configured,
// assigned by DHCP, etc..
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address/state/origin"
func (n *Interface_Tunnel_Ipv4_AddressPathAny) Origin() *Interface_Tunnel_Ipv4_Address_OriginPathAny {
	return &Interface_Tunnel_Ipv4_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Tunnel_Ipv4_AddressPath) PrefixLength() *Interface_Tunnel_Ipv4_Address_PrefixLengthPath {
	return &Interface_Tunnel_Ipv4_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/tunnel/ipv4/addresses/address/config/prefix-length"
func (n *Interface_Tunnel_Ipv4_AddressPathAny) PrefixLength() *Interface_Tunnel_Ipv4_Address_PrefixLengthPathAny {
	return &Interface_Tunnel_Ipv4_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv4_CountersPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters YANG schema element.
type Interface_Tunnel_Ipv4_CountersPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters YANG schema element.
type Interface_Tunnel_Ipv4_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-error-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/in-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-error-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-octets YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/state/counters/out-pkts YANG schema element.
type Interface_Tunnel_Ipv4_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) InDiscardedPkts() *Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-discarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) InDiscardedPkts() *Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-error-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) InErrorPkts() *Interface_Tunnel_Ipv4_Counters_InErrorPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-error-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) InErrorPkts() *Interface_Tunnel_Ipv4_Counters_InErrorPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Tunnel_Ipv4_CountersPath) InForwardedOctets() *Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPath {
	return &Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-octets"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) InForwardedOctets() *Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) InForwardedPkts() *Interface_Tunnel_Ipv4_Counters_InForwardedPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-forwarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) InForwardedPkts() *Interface_Tunnel_Ipv4_Counters_InForwardedPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-octets"
func (n *Interface_Tunnel_Ipv4_CountersPath) InOctets() *Interface_Tunnel_Ipv4_Counters_InOctetsPath {
	return &Interface_Tunnel_Ipv4_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-octets"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) InOctets() *Interface_Tunnel_Ipv4_Counters_InOctetsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) InPkts() *Interface_Tunnel_Ipv4_Counters_InPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/in-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) InPkts() *Interface_Tunnel_Ipv4_Counters_InPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) OutDiscardedPkts() *Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-discarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) OutDiscardedPkts() *Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-error-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) OutErrorPkts() *Interface_Tunnel_Ipv4_Counters_OutErrorPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-error-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) OutErrorPkts() *Interface_Tunnel_Ipv4_Counters_OutErrorPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Tunnel_Ipv4_CountersPath) OutForwardedOctets() *Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPath {
	return &Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-octets"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) OutForwardedOctets() *Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) OutForwardedPkts() *Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-forwarded-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) OutForwardedPkts() *Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-octets"
func (n *Interface_Tunnel_Ipv4_CountersPath) OutOctets() *Interface_Tunnel_Ipv4_Counters_OutOctetsPath {
	return &Interface_Tunnel_Ipv4_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-octets"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) OutOctets() *Interface_Tunnel_Ipv4_Counters_OutOctetsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPath) OutPkts() *Interface_Tunnel_Ipv4_Counters_OutPktsPath {
	return &Interface_Tunnel_Ipv4_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv4/state/counters/out-pkts"
func (n *Interface_Tunnel_Ipv4_CountersPathAny) OutPkts() *Interface_Tunnel_Ipv4_Counters_OutPktsPathAny {
	return &Interface_Tunnel_Ipv4_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv4_NeighborPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor YANG schema element.
type Interface_Tunnel_Ipv4_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor YANG schema element.
type Interface_Tunnel_Ipv4_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_Tunnel_Ipv4_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/ip YANG schema element.
type Interface_Tunnel_Ipv4_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Tunnel_Ipv4_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/neighbors/neighbor/state/origin YANG schema element.
type Interface_Tunnel_Ipv4_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Tunnel_Ipv4_NeighborPath) Ip() *Interface_Tunnel_Ipv4_Neighbor_IpPath {
	return &Interface_Tunnel_Ipv4_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv4 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/ip"
func (n *Interface_Tunnel_Ipv4_NeighborPathAny) Ip() *Interface_Tunnel_Ipv4_Neighbor_IpPathAny {
	return &Interface_Tunnel_Ipv4_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Tunnel_Ipv4_NeighborPath) LinkLayerAddress() *Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPath {
	return &Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Tunnel_Ipv4_NeighborPathAny) LinkLayerAddress() *Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Tunnel_Ipv4_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Tunnel_Ipv4_NeighborPath) Origin() *Interface_Tunnel_Ipv4_Neighbor_OriginPath {
	return &Interface_Tunnel_Ipv4_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry, static or dynamic.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv4/neighbors/neighbor/state/origin"
func (n *Interface_Tunnel_Ipv4_NeighborPathAny) Origin() *Interface_Tunnel_Ipv4_Neighbor_OriginPathAny {
	return &Interface_Tunnel_Ipv4_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv4_ProxyArpPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/proxy-arp YANG schema element.
type Interface_Tunnel_Ipv4_ProxyArpPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_ProxyArpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/proxy-arp YANG schema element.
type Interface_Tunnel_Ipv4_ProxyArpPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_ProxyArp_ModePath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_Tunnel_Ipv4_ProxyArp_ModePath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_ProxyArp_ModePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/proxy-arp/config/mode YANG schema element.
type Interface_Tunnel_Ipv4_ProxyArp_ModePathAny struct {
	*ygot.NodePath
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/tunnel/ipv4/proxy-arp/config/mode"
func (n *Interface_Tunnel_Ipv4_ProxyArpPath) Mode() *Interface_Tunnel_Ipv4_ProxyArp_ModePath {
	return &Interface_Tunnel_Ipv4_ProxyArp_ModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mode (leaf): When set to a value other than DISABLE, the local system should
// respond to ARP requests that are for target addresses other than
// those that are configured on the local subinterface using its own
// MAC address as the target hardware address. If the REMOTE_ONLY
// value is specified, replies are only sent when the target address
// falls outside the locally configured subnets on the interface,
// whereas with the ALL value, all requests, regardless of their
// target address are replied to.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mode"
// Path from root: "/interfaces/interface/tunnel/ipv4/proxy-arp/config/mode"
func (n *Interface_Tunnel_Ipv4_ProxyArpPathAny) Mode() *Interface_Tunnel_Ipv4_ProxyArp_ModePathAny {
	return &Interface_Tunnel_Ipv4_ProxyArp_ModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv4_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered YANG schema element.
type Interface_Tunnel_Ipv4_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered YANG schema element.
type Interface_Tunnel_Ipv4_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/config/enabled YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/config/enabled"
func (n *Interface_Tunnel_Ipv4_UnnumberedPath) Enabled() *Interface_Tunnel_Ipv4_Unnumbered_EnabledPath {
	return &Interface_Tunnel_Ipv4_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/config/enabled"
func (n *Interface_Tunnel_Ipv4_UnnumberedPathAny) Enabled() *Interface_Tunnel_Ipv4_Unnumbered_EnabledPathAny {
	return &Interface_Tunnel_Ipv4_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref"
func (n *Interface_Tunnel_Ipv4_UnnumberedPath) InterfaceRef() *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPath {
	return &Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref"
func (n *Interface_Tunnel_Ipv4_UnnumberedPathAny) InterfaceRef() *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPathAny {
	return &Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}
