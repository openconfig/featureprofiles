/*
Package fpoc is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by /usr/local/google/home/sthesayi/go/pkg/mod/github.com/openconfig/ygot@v0.23.1/genutil/names.go
using the following YANG input files:
  - google-bgp-timers.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-if-sdn-ext.yang
  - public/release/models/interfaces/openconfig-if-tunnel.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/macsec/openconfig-macsec.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/p4rt/openconfig-p4rt.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/policy/openconfig-routing-policy.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/platform/openconfig-platform-port.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/relay-agent/openconfig-relay-agent.yang
  - public/release/models/sampling/openconfig-sampling-sflow.yang
  - public/release/models/stp/openconfig-spanning-tree.yang
  - public/release/models/system/openconfig-aaa.yang
  - public/release/models/system/openconfig-aaa-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
*/
package fpoc

import (
	"github.com/openconfig/ygot/ygot"
)

// Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPath) Interface() *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/interface"
func (n *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/tunnel/ipv4/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Tunnel_Ipv4_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv6Path represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6 YANG schema element.
type Interface_Tunnel_Ipv6Path struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6PathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6 YANG schema element.
type Interface_Tunnel_Ipv6PathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_DhcpClientPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/dhcp-client YANG schema element.
type Interface_Tunnel_Ipv6_DhcpClientPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_DhcpClientPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/dhcp-client YANG schema element.
type Interface_Tunnel_Ipv6_DhcpClientPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/dup-addr-detect-transmits YANG schema element.
type Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_EnabledPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/enabled YANG schema element.
type Interface_Tunnel_Ipv6_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/enabled YANG schema element.
type Interface_Tunnel_Ipv6_EnabledPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_MtuPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/mtu YANG schema element.
type Interface_Tunnel_Ipv6_MtuPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_MtuPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/config/mtu YANG schema element.
type Interface_Tunnel_Ipv6_MtuPathAny struct {
	*ygot.NodePath
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv6Path) AddressAny() *Interface_Tunnel_Ipv6_AddressPathAny {
	return &Interface_Tunnel_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// AddressAny (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv6PathAny) AddressAny() *Interface_Tunnel_Ipv6_AddressPathAny {
	return &Interface_Tunnel_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address"
// Ip: string
func (n *Interface_Tunnel_Ipv6Path) Address(Ip string) *Interface_Tunnel_Ipv6_AddressPath {
	return &Interface_Tunnel_Ipv6_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Address (list): The list of configured IPv6 addresses on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "addresses/address"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address"
// Ip: string
func (n *Interface_Tunnel_Ipv6PathAny) Address(Ip string) *Interface_Tunnel_Ipv6_AddressPathAny {
	return &Interface_Tunnel_Ipv6_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"addresses", "address"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters"
func (n *Interface_Tunnel_Ipv6Path) Counters() *Interface_Tunnel_Ipv6_CountersPath {
	return &Interface_Tunnel_Ipv6_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Packet and byte counters for IP transmission and
// reception for the address family.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/counters"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters"
func (n *Interface_Tunnel_Ipv6PathAny) Counters() *Interface_Tunnel_Ipv6_CountersPathAny {
	return &Interface_Tunnel_Ipv6_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/dhcp-client"
func (n *Interface_Tunnel_Ipv6Path) DhcpClient() *Interface_Tunnel_Ipv6_DhcpClientPath {
	return &Interface_Tunnel_Ipv6_DhcpClientPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DhcpClient (leaf): Enables a DHCP client on the interface in order to request
// an address
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dhcp-client"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/dhcp-client"
func (n *Interface_Tunnel_Ipv6PathAny) DhcpClient() *Interface_Tunnel_Ipv6_DhcpClientPathAny {
	return &Interface_Tunnel_Ipv6_DhcpClientPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dhcp-client"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Tunnel_Ipv6Path) DupAddrDetectTransmits() *Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPath {
	return &Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// DupAddrDetectTransmits (leaf): The number of consecutive Neighbor Solicitation messages
// sent while performing Duplicate Address Detection on a
// tentative address.  A value of zero indicates that
// Duplicate Address Detection is not performed on
// tentative addresses.  A value of one indicates a single
// transmission with no follow-up retransmissions.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/dup-addr-detect-transmits"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/dup-addr-detect-transmits"
func (n *Interface_Tunnel_Ipv6PathAny) DupAddrDetectTransmits() *Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPathAny {
	return &Interface_Tunnel_Ipv6_DupAddrDetectTransmitsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "dup-addr-detect-transmits"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/enabled"
func (n *Interface_Tunnel_Ipv6Path) Enabled() *Interface_Tunnel_Ipv6_EnabledPath {
	return &Interface_Tunnel_Ipv6_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Controls whether IPv6 is enabled or disabled on this
// interface.  When IPv6 is enabled, this interface is
// connected to an IPv6 stack, and the interface can send
// and receive IPv6 packets.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/enabled"
func (n *Interface_Tunnel_Ipv6PathAny) Enabled() *Interface_Tunnel_Ipv6_EnabledPathAny {
	return &Interface_Tunnel_Ipv6_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/mtu"
func (n *Interface_Tunnel_Ipv6Path) Mtu() *Interface_Tunnel_Ipv6_MtuPath {
	return &Interface_Tunnel_Ipv6_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The size, in octets, of the largest IPv6 packet that the
// interface will send and receive.
//
// The server may restrict the allowed values for this leaf,
// depending on the interface's type.
//
// If this leaf is not configured, the operationally used MTU
// depends on the interface's type.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/mtu"
// Path from root: "/interfaces/interface/tunnel/ipv6/config/mtu"
func (n *Interface_Tunnel_Ipv6PathAny) Mtu() *Interface_Tunnel_Ipv6_MtuPathAny {
	return &Interface_Tunnel_Ipv6_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv6Path) NeighborAny() *Interface_Tunnel_Ipv6_NeighborPathAny {
	return &Interface_Tunnel_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor"
// Ip (wildcarded): string
func (n *Interface_Tunnel_Ipv6PathAny) NeighborAny() *Interface_Tunnel_Ipv6_NeighborPathAny {
	return &Interface_Tunnel_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": "*"},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Tunnel_Ipv6Path) Neighbor(Ip string) *Interface_Tunnel_Ipv6_NeighborPath {
	return &Interface_Tunnel_Ipv6_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// Neighbor (list): List of IPv6 neighbors
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "neighbors/neighbor"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor"
// Ip: string
func (n *Interface_Tunnel_Ipv6PathAny) Neighbor(Ip string) *Interface_Tunnel_Ipv6_NeighborPathAny {
	return &Interface_Tunnel_Ipv6_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"ip": Ip},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement"
func (n *Interface_Tunnel_Ipv6Path) RouterAdvertisement() *Interface_Tunnel_Ipv6_RouterAdvertisementPath {
	return &Interface_Tunnel_Ipv6_RouterAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterAdvertisement (container): Configuration and operational state parameters relating to
// router advertisements.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "router-advertisement"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement"
func (n *Interface_Tunnel_Ipv6PathAny) RouterAdvertisement() *Interface_Tunnel_Ipv6_RouterAdvertisementPathAny {
	return &Interface_Tunnel_Ipv6_RouterAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"router-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered"
func (n *Interface_Tunnel_Ipv6Path) Unnumbered() *Interface_Tunnel_Ipv6_UnnumberedPath {
	return &Interface_Tunnel_Ipv6_UnnumberedPath{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Unnumbered (container): Top-level container for setting unnumbered interfaces.
// Includes reference the interface that provides the
// address information
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "unnumbered"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered"
func (n *Interface_Tunnel_Ipv6PathAny) Unnumbered() *Interface_Tunnel_Ipv6_UnnumberedPathAny {
	return &Interface_Tunnel_Ipv6_UnnumberedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unnumbered"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv6_AddressPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address YANG schema element.
type Interface_Tunnel_Ipv6_AddressPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_AddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address YANG schema element.
type Interface_Tunnel_Ipv6_AddressPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_IpPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/config/ip YANG schema element.
type Interface_Tunnel_Ipv6_Address_IpPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/config/ip YANG schema element.
type Interface_Tunnel_Ipv6_Address_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_OriginPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Tunnel_Ipv6_Address_OriginPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/state/origin YANG schema element.
type Interface_Tunnel_Ipv6_Address_OriginPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_PrefixLengthPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_Tunnel_Ipv6_Address_PrefixLengthPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_PrefixLengthPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/config/prefix-length YANG schema element.
type Interface_Tunnel_Ipv6_Address_PrefixLengthPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_StatusPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/state/status YANG schema element.
type Interface_Tunnel_Ipv6_Address_StatusPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Address_StatusPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/addresses/address/state/status YANG schema element.
type Interface_Tunnel_Ipv6_Address_StatusPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/config/ip"
func (n *Interface_Tunnel_Ipv6_AddressPath) Ip() *Interface_Tunnel_Ipv6_Address_IpPath {
	return &Interface_Tunnel_Ipv6_Address_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address on the interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/config/ip"
func (n *Interface_Tunnel_Ipv6_AddressPathAny) Ip() *Interface_Tunnel_Ipv6_Address_IpPathAny {
	return &Interface_Tunnel_Ipv6_Address_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/state/origin"
func (n *Interface_Tunnel_Ipv6_AddressPath) Origin() *Interface_Tunnel_Ipv6_Address_OriginPath {
	return &Interface_Tunnel_Ipv6_Address_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this address, e.g., static, dhcp, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/state/origin"
func (n *Interface_Tunnel_Ipv6_AddressPathAny) Origin() *Interface_Tunnel_Ipv6_Address_OriginPathAny {
	return &Interface_Tunnel_Ipv6_Address_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Tunnel_Ipv6_AddressPath) PrefixLength() *Interface_Tunnel_Ipv6_Address_PrefixLengthPath {
	return &Interface_Tunnel_Ipv6_Address_PrefixLengthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// PrefixLength (leaf): The length of the subnet prefix.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/prefix-length"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/config/prefix-length"
func (n *Interface_Tunnel_Ipv6_AddressPathAny) PrefixLength() *Interface_Tunnel_Ipv6_Address_PrefixLengthPathAny {
	return &Interface_Tunnel_Ipv6_Address_PrefixLengthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "prefix-length"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/state/status"
func (n *Interface_Tunnel_Ipv6_AddressPath) Status() *Interface_Tunnel_Ipv6_Address_StatusPath {
	return &Interface_Tunnel_Ipv6_Address_StatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Status (leaf): The status of an address.  Most of the states correspond
// to states from the IPv6 Stateless Address
// Autoconfiguration protocol.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/status"
// Path from root: "/interfaces/interface/tunnel/ipv6/addresses/address/state/status"
func (n *Interface_Tunnel_Ipv6_AddressPathAny) Status() *Interface_Tunnel_Ipv6_Address_StatusPathAny {
	return &Interface_Tunnel_Ipv6_Address_StatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv6_CountersPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters YANG schema element.
type Interface_Tunnel_Ipv6_CountersPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_CountersPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters YANG schema element.
type Interface_Tunnel_Ipv6_CountersPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-error-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_InPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/in-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_InPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-discarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutErrorPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutErrorPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutErrorPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-error-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutErrorPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutOctetsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutOctetsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutOctetsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-octets YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutOctetsPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutPktsPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutPktsPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Counters_OutPktsPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/state/counters/out-pkts YANG schema element.
type Interface_Tunnel_Ipv6_Counters_OutPktsPathAny struct {
	*ygot.NodePath
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) InDiscardedPkts() *Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InDiscardedPkts (leaf): The number of input IP packets for the
// specified address family, for which no problems were
// encountered to prevent their continued processing, but
// were discarded (e.g., for lack of buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-discarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) InDiscardedPkts() *Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_InDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-error-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) InErrorPkts() *Interface_Tunnel_Ipv6_Counters_InErrorPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_InErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InErrorPkts (leaf): Number of IP packets discarded due to errors for the
// specified address family, including errors in the IP
// header, no route found to the IP destination, invalid
// address, unknown protocol, etc.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-error-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) InErrorPkts() *Interface_Tunnel_Ipv6_Counters_InErrorPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_InErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Tunnel_Ipv6_CountersPath) InForwardedOctets() *Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPath {
	return &Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedOctets (leaf): The number of octets received in input IP packets
// for the specified address family for which the device was
// not their final IP destination and for which the
// device attempted to find a route to forward them to that
// final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-octets"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) InForwardedOctets() *Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_InForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) InForwardedPkts() *Interface_Tunnel_Ipv6_Counters_InForwardedPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_InForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InForwardedPkts (leaf): The number of input packets for which the device was not
// their final IP destination and for which the device
// attempted to find a route to forward them to that final
// destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-forwarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) InForwardedPkts() *Interface_Tunnel_Ipv6_Counters_InForwardedPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_InForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-octets"
func (n *Interface_Tunnel_Ipv6_CountersPath) InOctets() *Interface_Tunnel_Ipv6_Counters_InOctetsPath {
	return &Interface_Tunnel_Ipv6_Counters_InOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InOctets (leaf): The total number of octets received in input IP packets
// for the specified address family, including those received
// in error.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-octets"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) InOctets() *Interface_Tunnel_Ipv6_Counters_InOctetsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_InOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) InPkts() *Interface_Tunnel_Ipv6_Counters_InPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_InPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// InPkts (leaf): The total number of IP packets received for the specified
// address family, including those received in error
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "in-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/in-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) InPkts() *Interface_Tunnel_Ipv6_Counters_InPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_InPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) OutDiscardedPkts() *Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutDiscardedPkts (leaf): The number of output IP packets for the
// specified address family for which no problem was
// encountered to prevent their transmission to their
// destination, but were discarded (e.g., for lack of
// buffer space).
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-discarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-discarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) OutDiscardedPkts() *Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_OutDiscardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-discarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-error-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) OutErrorPkts() *Interface_Tunnel_Ipv6_Counters_OutErrorPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_OutErrorPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutErrorPkts (leaf): Number of IP packets for the specified address family
// locally generated and discarded due to errors, including
// no route found to the IP destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-error-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-error-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) OutErrorPkts() *Interface_Tunnel_Ipv6_Counters_OutErrorPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_OutErrorPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-error-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Tunnel_Ipv6_CountersPath) OutForwardedOctets() *Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPath {
	return &Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedOctets (leaf): The number of octets in packets for which this entity was
// not their final IP destination and for which it was
// successful in finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-octets"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) OutForwardedOctets() *Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_OutForwardedOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) OutForwardedPkts() *Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutForwardedPkts (leaf): The number of packets for which this entity was not their
// final IP destination and for which it was successful in
// finding a path to their final destination.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-forwarded-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-forwarded-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) OutForwardedPkts() *Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_OutForwardedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-forwarded-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-octets"
func (n *Interface_Tunnel_Ipv6_CountersPath) OutOctets() *Interface_Tunnel_Ipv6_Counters_OutOctetsPath {
	return &Interface_Tunnel_Ipv6_Counters_OutOctetsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutOctets (leaf): The total number of octets in IP packets for the
// specified address family that the device
// supplied to the lower layers for transmission.  This
// includes packets generated locally and those forwarded by
// the device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-octets"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-octets"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) OutOctets() *Interface_Tunnel_Ipv6_Counters_OutOctetsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_OutOctetsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-octets"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPath) OutPkts() *Interface_Tunnel_Ipv6_Counters_OutPktsPath {
	return &Interface_Tunnel_Ipv6_Counters_OutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutPkts (leaf): The total number of IP packets for the
// specified address family that the device supplied
// to the lower layers for transmission.  This includes
// packets generated locally and those forwarded by the
// device.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "out-pkts"
// Path from root: "/interfaces/interface/tunnel/ipv6/state/counters/out-pkts"
func (n *Interface_Tunnel_Ipv6_CountersPathAny) OutPkts() *Interface_Tunnel_Ipv6_Counters_OutPktsPathAny {
	return &Interface_Tunnel_Ipv6_Counters_OutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv6_NeighborPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor YANG schema element.
type Interface_Tunnel_Ipv6_NeighborPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_NeighborPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor YANG schema element.
type Interface_Tunnel_Ipv6_NeighborPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_IpPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_IpPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_IpPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/ip YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_IpPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_IsRouterPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_IsRouterPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_IsRouterPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/is-router YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_IsRouterPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/link-layer-address YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_NeighborStatePath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_NeighborStatePath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_NeighborStatePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/neighbor-state YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_NeighborStatePathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_OriginPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_OriginPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Neighbor_OriginPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/origin YANG schema element.
type Interface_Tunnel_Ipv6_Neighbor_OriginPathAny struct {
	*ygot.NodePath
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Tunnel_Ipv6_NeighborPath) Ip() *Interface_Tunnel_Ipv6_Neighbor_IpPath {
	return &Interface_Tunnel_Ipv6_Neighbor_IpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ip (leaf): The IPv6 address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/ip"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/ip"
func (n *Interface_Tunnel_Ipv6_NeighborPathAny) Ip() *Interface_Tunnel_Ipv6_Neighbor_IpPathAny {
	return &Interface_Tunnel_Ipv6_Neighbor_IpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Tunnel_Ipv6_NeighborPath) IsRouter() *Interface_Tunnel_Ipv6_Neighbor_IsRouterPath {
	return &Interface_Tunnel_Ipv6_Neighbor_IsRouterPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// IsRouter (leaf): Indicates that the neighbor node acts as a router.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/is-router"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/is-router"
func (n *Interface_Tunnel_Ipv6_NeighborPathAny) IsRouter() *Interface_Tunnel_Ipv6_Neighbor_IsRouterPathAny {
	return &Interface_Tunnel_Ipv6_Neighbor_IsRouterPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "is-router"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Tunnel_Ipv6_NeighborPath) LinkLayerAddress() *Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPath {
	return &Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// LinkLayerAddress (leaf): The link-layer address of the neighbor node.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/link-layer-address"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/config/link-layer-address"
func (n *Interface_Tunnel_Ipv6_NeighborPathAny) LinkLayerAddress() *Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPathAny {
	return &Interface_Tunnel_Ipv6_Neighbor_LinkLayerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "link-layer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Tunnel_Ipv6_NeighborPath) NeighborState() *Interface_Tunnel_Ipv6_Neighbor_NeighborStatePath {
	return &Interface_Tunnel_Ipv6_Neighbor_NeighborStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborState (leaf): The Neighbor Unreachability Detection state of this
// entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/neighbor-state"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/neighbor-state"
func (n *Interface_Tunnel_Ipv6_NeighborPathAny) NeighborState() *Interface_Tunnel_Ipv6_Neighbor_NeighborStatePathAny {
	return &Interface_Tunnel_Ipv6_Neighbor_NeighborStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "neighbor-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Tunnel_Ipv6_NeighborPath) Origin() *Interface_Tunnel_Ipv6_Neighbor_OriginPath {
	return &Interface_Tunnel_Ipv6_Neighbor_OriginPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Origin (leaf): The origin of this neighbor entry.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "state/origin"
// Path from root: "/interfaces/interface/tunnel/ipv6/neighbors/neighbor/state/origin"
func (n *Interface_Tunnel_Ipv6_NeighborPathAny) Origin() *Interface_Tunnel_Ipv6_Neighbor_OriginPathAny {
	return &Interface_Tunnel_Ipv6_Neighbor_OriginPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv6_RouterAdvertisementPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisementPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_RouterAdvertisementPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisementPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement/config/interval YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement/config/lifetime YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/router-advertisement/config/suppress YANG schema element.
type Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPathAny struct {
	*ygot.NodePath
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement/config/interval"
func (n *Interface_Tunnel_Ipv6_RouterAdvertisementPath) Interval() *Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPath {
	return &Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): The interval between periodic router advertisement neighbor
// discovery messages sent on this interface expressed in
// seconds.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interval"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement/config/interval"
func (n *Interface_Tunnel_Ipv6_RouterAdvertisementPathAny) Interval() *Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPathAny {
	return &Interface_Tunnel_Ipv6_RouterAdvertisement_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Tunnel_Ipv6_RouterAdvertisementPath) Lifetime() *Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePath {
	return &Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lifetime (leaf): The lifetime advertised in the router advertisement neighbor
// discovery message on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/lifetime"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement/config/lifetime"
func (n *Interface_Tunnel_Ipv6_RouterAdvertisementPathAny) Lifetime() *Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePathAny {
	return &Interface_Tunnel_Ipv6_RouterAdvertisement_LifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement/config/suppress"
func (n *Interface_Tunnel_Ipv6_RouterAdvertisementPath) Suppress() *Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPath {
	return &Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Suppress (leaf): When set to true, router advertisement neighbor discovery
// messages are not transmitted on this interface.
// ----------------------------------------
// Defining module: "openconfig-if-ip"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/suppress"
// Path from root: "/interfaces/interface/tunnel/ipv6/router-advertisement/config/suppress"
func (n *Interface_Tunnel_Ipv6_RouterAdvertisementPathAny) Suppress() *Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPathAny {
	return &Interface_Tunnel_Ipv6_RouterAdvertisement_SuppressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv6_UnnumberedPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered YANG schema element.
type Interface_Tunnel_Ipv6_UnnumberedPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_UnnumberedPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered YANG schema element.
type Interface_Tunnel_Ipv6_UnnumberedPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Unnumbered_EnabledPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_EnabledPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Unnumbered_EnabledPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/config/enabled YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_EnabledPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/config/enabled"
func (n *Interface_Tunnel_Ipv6_UnnumberedPath) Enabled() *Interface_Tunnel_Ipv6_Unnumbered_EnabledPath {
	return &Interface_Tunnel_Ipv6_Unnumbered_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates that the subinterface is unnumbered.  By default
// the subinterface is numbered, i.e., expected to have an
// IP address configuration.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/enabled"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/config/enabled"
func (n *Interface_Tunnel_Ipv6_UnnumberedPathAny) Enabled() *Interface_Tunnel_Ipv6_Unnumbered_EnabledPathAny {
	return &Interface_Tunnel_Ipv6_Unnumbered_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref"
func (n *Interface_Tunnel_Ipv6_UnnumberedPath) InterfaceRef() *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPath {
	return &Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "interface-ref"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref"
func (n *Interface_Tunnel_Ipv6_UnnumberedPathAny) InterfaceRef() *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPathAny {
	return &Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/interface YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath represents the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-interfaces/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/subinterface YANG schema element.
type Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPath) Interface() *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePath {
	return &Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/interface"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/interface"
func (n *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPathAny) Interface() *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny {
	return &Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPath) Subinterface() *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath {
	return &Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-interfaces"
// Path from parent: "config/subinterface"
// Path from root: "/interfaces/interface/tunnel/ipv6/unnumbered/interface-ref/config/subinterface"
func (n *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRefPathAny) Subinterface() *Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny {
	return &Interface_Tunnel_Ipv6_Unnumbered_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeychainPath represents the /openconfig-keychain/keychains/keychain YANG schema element.
type KeychainPath struct {
	*ygot.NodePath
}

// KeychainPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain YANG schema element.
type KeychainPathAny struct {
	*ygot.NodePath
}

// Keychain_NamePath represents the /openconfig-keychain/keychains/keychain/config/name YANG schema element.
type Keychain_NamePath struct {
	*ygot.NodePath
}

// Keychain_NamePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/config/name YANG schema element.
type Keychain_NamePathAny struct {
	*ygot.NodePath
}

// Keychain_TolerancePath represents the /openconfig-keychain/keychains/keychain/config/tolerance YANG schema element.
type Keychain_TolerancePath struct {
	*ygot.NodePath
}

// Keychain_TolerancePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/config/tolerance YANG schema element.
type Keychain_TolerancePathAny struct {
	*ygot.NodePath
}

// KeyAny (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId (wildcarded): uint64
func (n *KeychainPath) KeyAny() *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// KeyAny (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId (wildcarded): uint64
func (n *KeychainPathAny) KeyAny() *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": "*"},
			n,
		),
	}
}

// Key (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId: uint64
func (n *KeychainPath) Key(KeyId uint64) *Keychain_KeyPath {
	return &Keychain_KeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// Key (list): List of configured keys for the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "keys/key"
// Path from root: "/keychains/keychain/keys/key"
// KeyId: uint64
func (n *KeychainPathAny) Key(KeyId uint64) *Keychain_KeyPathAny {
	return &Keychain_KeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"keys", "key"},
			map[string]interface{}{"key-id": KeyId},
			n,
		),
	}
}

// Name (leaf): Keychain name.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/name"
// Path from root: "/keychains/keychain/config/name"
func (n *KeychainPath) Name() *Keychain_NamePath {
	return &Keychain_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Keychain name.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/name"
// Path from root: "/keychains/keychain/config/name"
func (n *KeychainPathAny) Name() *Keychain_NamePathAny {
	return &Keychain_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tolerance (leaf): Tolerance (overlap time) that a receive key should be accepted.  May be
// expressed as range in seconds, or using the FOREVER value to indicate
// that the key does not expire.  The default value should be 0, i.e., no
// tolerance.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/tolerance"
// Path from root: "/keychains/keychain/config/tolerance"
func (n *KeychainPath) Tolerance() *Keychain_TolerancePath {
	return &Keychain_TolerancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tolerance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Tolerance (leaf): Tolerance (overlap time) that a receive key should be accepted.  May be
// expressed as range in seconds, or using the FOREVER value to indicate
// that the key does not expire.  The default value should be 0, i.e., no
// tolerance.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/tolerance"
// Path from root: "/keychains/keychain/config/tolerance"
func (n *KeychainPathAny) Tolerance() *Keychain_TolerancePathAny {
	return &Keychain_TolerancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "tolerance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keychain_KeyPath represents the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPath struct {
	*ygot.NodePath
}

// Keychain_KeyPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key YANG schema element.
type Keychain_KeyPathAny struct {
	*ygot.NodePath
}

// Keychain_Key_CryptoAlgorithmPath represents the /openconfig-keychain/keychains/keychain/keys/key/config/crypto-algorithm YANG schema element.
type Keychain_Key_CryptoAlgorithmPath struct {
	*ygot.NodePath
}

// Keychain_Key_CryptoAlgorithmPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/config/crypto-algorithm YANG schema element.
type Keychain_Key_CryptoAlgorithmPathAny struct {
	*ygot.NodePath
}

// Keychain_Key_KeyIdPath represents the /openconfig-keychain/keychains/keychain/keys/key/config/key-id YANG schema element.
type Keychain_Key_KeyIdPath struct {
	*ygot.NodePath
}

// Keychain_Key_KeyIdPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/config/key-id YANG schema element.
type Keychain_Key_KeyIdPathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SecretKeyPath represents the /openconfig-keychain/keychains/keychain/keys/key/config/secret-key YANG schema element.
type Keychain_Key_SecretKeyPath struct {
	*ygot.NodePath
}

// Keychain_Key_SecretKeyPathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/config/secret-key YANG schema element.
type Keychain_Key_SecretKeyPathAny struct {
	*ygot.NodePath
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/crypto-algorithm"
// Path from root: "/keychains/keychain/keys/key/config/crypto-algorithm"
func (n *Keychain_KeyPath) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPath {
	return &Keychain_Key_CryptoAlgorithmPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
	}
}

// CryptoAlgorithm (leaf): Cryptographic algorithm associated with the key.  Note that not all cryptographic
// algorithms are available in all contexts (e.g., across different protocols).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/crypto-algorithm"
// Path from root: "/keychains/keychain/keys/key/config/crypto-algorithm"
func (n *Keychain_KeyPathAny) CryptoAlgorithm() *Keychain_Key_CryptoAlgorithmPathAny {
	return &Keychain_Key_CryptoAlgorithmPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "crypto-algorithm"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Identifier for the key within the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/key-id"
// Path from root: "/keychains/keychain/keys/key/config/key-id"
func (n *Keychain_KeyPath) KeyId() *Keychain_Key_KeyIdPath {
	return &Keychain_Key_KeyIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyId (leaf): Identifier for the key within the keychain.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/key-id"
// Path from root: "/keychains/keychain/keys/key/config/key-id"
func (n *Keychain_KeyPathAny) KeyId() *Keychain_Key_KeyIdPathAny {
	return &Keychain_Key_KeyIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "receive-lifetime"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPath) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePath {
	return &Keychain_Key_ReceiveLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReceiveLifetime (container): Specify the validity lifetime of the key in the receive direction.
// Some platforms may only support symmetric send and receive lifetimes,
// in which case the receive-lifetime is typically not specified.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "receive-lifetime"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime"
func (n *Keychain_KeyPathAny) ReceiveLifetime() *Keychain_Key_ReceiveLifetimePathAny {
	return &Keychain_Key_ReceiveLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"receive-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/secret-key"
// Path from root: "/keychains/keychain/keys/key/config/secret-key"
func (n *Keychain_KeyPath) SecretKey() *Keychain_Key_SecretKeyPath {
	return &Keychain_Key_SecretKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SecretKey (leaf): Authentication key supplied as an encrypted value.  The system should store and
// return the key in encrypted form.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/secret-key"
// Path from root: "/keychains/keychain/keys/key/config/secret-key"
func (n *Keychain_KeyPathAny) SecretKey() *Keychain_Key_SecretKeyPathAny {
	return &Keychain_Key_SecretKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "secret-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "send-lifetime"
// Path from root: "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPath) SendLifetime() *Keychain_Key_SendLifetimePath {
	return &Keychain_Key_SendLifetimePath{
		NodePath: ygot.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendLifetime (container): Specifies the lifetime of the key for sending authentication
// information to the peer.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "send-lifetime"
// Path from root: "/keychains/keychain/keys/key/send-lifetime"
func (n *Keychain_KeyPathAny) SendLifetime() *Keychain_Key_SendLifetimePathAny {
	return &Keychain_Key_SendLifetimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"send-lifetime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keychain_Key_ReceiveLifetimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type Keychain_Key_ReceiveLifetimePath struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime YANG schema element.
type Keychain_Key_ReceiveLifetimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_EndTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_EndTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/end-time YANG schema element.
type Keychain_Key_ReceiveLifetime_EndTimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_StartTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/start-time YANG schema element.
type Keychain_Key_ReceiveLifetime_StartTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_ReceiveLifetime_StartTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/receive-lifetime/config/start-time YANG schema element.
type Keychain_Key_ReceiveLifetime_StartTimePathAny struct {
	*ygot.NodePath
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetimePath) EndTime() *Keychain_Key_ReceiveLifetime_EndTimePath {
	return &Keychain_Key_ReceiveLifetime_EndTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/end-time"
func (n *Keychain_Key_ReceiveLifetimePathAny) EndTime() *Keychain_Key_ReceiveLifetime_EndTimePathAny {
	return &Keychain_Key_ReceiveLifetime_EndTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/start-time"
func (n *Keychain_Key_ReceiveLifetimePath) StartTime() *Keychain_Key_ReceiveLifetime_StartTimePath {
	return &Keychain_Key_ReceiveLifetime_StartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/receive-lifetime/config/start-time"
func (n *Keychain_Key_ReceiveLifetimePathAny) StartTime() *Keychain_Key_ReceiveLifetime_StartTimePathAny {
	return &Keychain_Key_ReceiveLifetime_StartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Keychain_Key_SendLifetimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type Keychain_Key_SendLifetimePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime YANG schema element.
type Keychain_Key_SendLifetimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_EndTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/end-time YANG schema element.
type Keychain_Key_SendLifetime_EndTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_EndTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/end-time YANG schema element.
type Keychain_Key_SendLifetime_EndTimePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_SendAndReceivePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/send-and-receive YANG schema element.
type Keychain_Key_SendLifetime_SendAndReceivePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_SendAndReceivePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/send-and-receive YANG schema element.
type Keychain_Key_SendLifetime_SendAndReceivePathAny struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_StartTimePath represents the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/start-time YANG schema element.
type Keychain_Key_SendLifetime_StartTimePath struct {
	*ygot.NodePath
}

// Keychain_Key_SendLifetime_StartTimePathAny represents the wildcard version of the /openconfig-keychain/keychains/keychain/keys/key/send-lifetime/config/start-time YANG schema element.
type Keychain_Key_SendLifetime_StartTimePathAny struct {
	*ygot.NodePath
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/end-time"
func (n *Keychain_Key_SendLifetimePath) EndTime() *Keychain_Key_SendLifetime_EndTimePath {
	return &Keychain_Key_SendLifetime_EndTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndTime (leaf): The time at which the key becomes invalid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
// Leaving this value unset, or setting it to 0, indicates that
// the key remains valid forever (no end time).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/end-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/end-time"
func (n *Keychain_Key_SendLifetimePathAny) EndTime() *Keychain_Key_SendLifetime_EndTimePathAny {
	return &Keychain_Key_SendLifetime_EndTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "end-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendAndReceive (leaf): When this is set to true (the default value), the specified
// send lifetime is also used in the receive direction.  When set
// to false, the device should use the specified receive-lifetime
// for the receive direction (asymmetric mode).  If send-and-receive
// is false, and the device does not support asymmetric configuration,
// the config should be rejected as unsupported.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/send-and-receive"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/send-and-receive"
func (n *Keychain_Key_SendLifetimePath) SendAndReceive() *Keychain_Key_SendLifetime_SendAndReceivePath {
	return &Keychain_Key_SendLifetime_SendAndReceivePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "send-and-receive"},
			map[string]interface{}{},
			n,
		),
	}
}

// SendAndReceive (leaf): When this is set to true (the default value), the specified
// send lifetime is also used in the receive direction.  When set
// to false, the device should use the specified receive-lifetime
// for the receive direction (asymmetric mode).  If send-and-receive
// is false, and the device does not support asymmetric configuration,
// the config should be rejected as unsupported.
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/send-and-receive"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/send-and-receive"
func (n *Keychain_Key_SendLifetimePathAny) SendAndReceive() *Keychain_Key_SendLifetime_SendAndReceivePathAny {
	return &Keychain_Key_SendLifetime_SendAndReceivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "send-and-receive"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/start-time"
func (n *Keychain_Key_SendLifetimePath) StartTime() *Keychain_Key_SendLifetime_StartTimePath {
	return &Keychain_Key_SendLifetime_StartTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// StartTime (leaf): The time at which the key becomes valid for use.
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-keychain"
// Instantiating module: "openconfig-keychain"
// Path from parent: "config/start-time"
// Path from root: "/keychains/keychain/keys/key/send-lifetime/config/start-time"
func (n *Keychain_Key_SendLifetimePathAny) StartTime() *Keychain_Key_SendLifetime_StartTimePathAny {
	return &Keychain_Key_SendLifetime_StartTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "start-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpPath represents the /openconfig-lacp/lacp YANG schema element.
type LacpPath struct {
	*ygot.NodePath
}

// LacpPathAny represents the wildcard version of the /openconfig-lacp/lacp YANG schema element.
type LacpPathAny struct {
	*ygot.NodePath
}

// Lacp_SystemPriorityPath represents the /openconfig-lacp/lacp/config/system-priority YANG schema element.
type Lacp_SystemPriorityPath struct {
	*ygot.NodePath
}

// Lacp_SystemPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/config/system-priority YANG schema element.
type Lacp_SystemPriorityPathAny struct {
	*ygot.NodePath
}

// InterfaceAny (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name (wildcarded): string
func (n *LacpPath) InterfaceAny() *Lacp_InterfacePathAny {
	return &Lacp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name (wildcarded): string
func (n *LacpPathAny) InterfaceAny() *Lacp_InterfacePathAny {
	return &Lacp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name: string
func (n *LacpPath) Interface(Name string) *Lacp_InterfacePath {
	return &Lacp_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of aggregate interfaces managed by LACP
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "interfaces/interface"
// Path from root: "/lacp/interfaces/interface"
// Name: string
func (n *LacpPathAny) Interface(Name string) *Lacp_InterfacePathAny {
	return &Lacp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/config/system-priority"
func (n *LacpPath) SystemPriority() *Lacp_SystemPriorityPath {
	return &Lacp_SystemPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/config/system-priority"
func (n *LacpPathAny) SystemPriority() *Lacp_SystemPriorityPathAny {
	return &Lacp_SystemPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lacp_InterfacePath represents the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePath struct {
	*ygot.NodePath
}

// Lacp_InterfacePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface YANG schema element.
type Lacp_InterfacePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_IntervalPath represents the /openconfig-lacp/lacp/interfaces/interface/config/interval YANG schema element.
type Lacp_Interface_IntervalPath struct {
	*ygot.NodePath
}

// Lacp_Interface_IntervalPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/interval YANG schema element.
type Lacp_Interface_IntervalPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_LacpModePath represents the /openconfig-lacp/lacp/interfaces/interface/config/lacp-mode YANG schema element.
type Lacp_Interface_LacpModePath struct {
	*ygot.NodePath
}

// Lacp_Interface_LacpModePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/lacp-mode YANG schema element.
type Lacp_Interface_LacpModePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_NamePath represents the /openconfig-lacp/lacp/interfaces/interface/config/name YANG schema element.
type Lacp_Interface_NamePath struct {
	*ygot.NodePath
}

// Lacp_Interface_NamePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/name YANG schema element.
type Lacp_Interface_NamePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemIdMacPath represents the /openconfig-lacp/lacp/interfaces/interface/config/system-id-mac YANG schema element.
type Lacp_Interface_SystemIdMacPath struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemIdMacPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/system-id-mac YANG schema element.
type Lacp_Interface_SystemIdMacPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemPriorityPath represents the /openconfig-lacp/lacp/interfaces/interface/config/system-priority YANG schema element.
type Lacp_Interface_SystemPriorityPath struct {
	*ygot.NodePath
}

// Lacp_Interface_SystemPriorityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/config/system-priority YANG schema element.
type Lacp_Interface_SystemPriorityPathAny struct {
	*ygot.NodePath
}

// Interval (leaf): Set the period between LACP messages -- uses
// the lacp-period-type enumeration.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/interval"
// Path from root: "/lacp/interfaces/interface/config/interval"
func (n *Lacp_InterfacePath) Interval() *Lacp_Interface_IntervalPath {
	return &Lacp_Interface_IntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interval (leaf): Set the period between LACP messages -- uses
// the lacp-period-type enumeration.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/interval"
// Path from root: "/lacp/interfaces/interface/config/interval"
func (n *Lacp_InterfacePathAny) Interval() *Lacp_Interface_IntervalPathAny {
	return &Lacp_Interface_IntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpMode (leaf): ACTIVE is to initiate the transmission of LACP packets.
// PASSIVE is to wait for peer to initiate the transmission of
// LACP packets.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/lacp-mode"
// Path from root: "/lacp/interfaces/interface/config/lacp-mode"
func (n *Lacp_InterfacePath) LacpMode() *Lacp_Interface_LacpModePath {
	return &Lacp_Interface_LacpModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lacp-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpMode (leaf): ACTIVE is to initiate the transmission of LACP packets.
// PASSIVE is to wait for peer to initiate the transmission of
// LACP packets.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/lacp-mode"
// Path from root: "/lacp/interfaces/interface/config/lacp-mode"
func (n *Lacp_InterfacePathAny) LacpMode() *Lacp_Interface_LacpModePathAny {
	return &Lacp_Interface_LacpModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lacp-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// MemberAny (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface (wildcarded): string
func (n *Lacp_InterfacePath) MemberAny() *Lacp_Interface_MemberPathAny {
	return &Lacp_Interface_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
}

// MemberAny (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface (wildcarded): string
func (n *Lacp_InterfacePathAny) MemberAny() *Lacp_Interface_MemberPathAny {
	return &Lacp_Interface_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": "*"},
			n,
		),
	}
}

// Member (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface: string
func (n *Lacp_InterfacePath) Member(Interface string) *Lacp_Interface_MemberPath {
	return &Lacp_Interface_MemberPath{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
}

// Member (list): List of member interfaces and their associated status for
// a LACP-controlled aggregate interface.  Member list is not
// configurable here -- each interface indicates items
// its participation in the LAG.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "members/member"
// Path from root: "/lacp/interfaces/interface/members/member"
// Interface: string
func (n *Lacp_InterfacePathAny) Member(Interface string) *Lacp_Interface_MemberPathAny {
	return &Lacp_Interface_MemberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"members", "member"},
			map[string]interface{}{"interface": Interface},
			n,
		),
	}
}

// Name (leaf): Reference to the interface on which LACP should be
// configured.   The type of the target interface must be
// ieee8023adLag
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/name"
// Path from root: "/lacp/interfaces/interface/config/name"
func (n *Lacp_InterfacePath) Name() *Lacp_Interface_NamePath {
	return &Lacp_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the interface on which LACP should be
// configured.   The type of the target interface must be
// ieee8023adLag
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/name"
// Path from root: "/lacp/interfaces/interface/config/name"
func (n *Lacp_InterfacePathAny) Name() *Lacp_Interface_NamePathAny {
	return &Lacp_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemIdMac (leaf): The MAC address portion of the node's System ID. This is
// combined with the system priority to construct the 8-octet
// system-id
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-id-mac"
// Path from root: "/lacp/interfaces/interface/config/system-id-mac"
func (n *Lacp_InterfacePath) SystemIdMac() *Lacp_Interface_SystemIdMacPath {
	return &Lacp_Interface_SystemIdMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-id-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemIdMac (leaf): The MAC address portion of the node's System ID. This is
// combined with the system priority to construct the 8-octet
// system-id
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-id-mac"
// Path from root: "/lacp/interfaces/interface/config/system-id-mac"
func (n *Lacp_InterfacePathAny) SystemIdMac() *Lacp_Interface_SystemIdMacPathAny {
	return &Lacp_Interface_SystemIdMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-id-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/interfaces/interface/config/system-priority"
func (n *Lacp_InterfacePath) SystemPriority() *Lacp_Interface_SystemPriorityPath {
	return &Lacp_Interface_SystemPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemPriority (leaf): Sytem priority used by the node on this LAG interface.
// Lower value is higher priority for determining which node
// is the controlling system.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "config/system-priority"
// Path from root: "/lacp/interfaces/interface/config/system-priority"
func (n *Lacp_InterfacePathAny) SystemPriority() *Lacp_Interface_SystemPriorityPathAny {
	return &Lacp_Interface_SystemPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lacp_Interface_MemberPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPath struct {
	*ygot.NodePath
}

// Lacp_Interface_MemberPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member YANG schema element.
type Lacp_Interface_MemberPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_ActivityPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/activity YANG schema element.
type Lacp_Interface_Member_ActivityPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_ActivityPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/activity YANG schema element.
type Lacp_Interface_Member_ActivityPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_AggregatablePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/aggregatable YANG schema element.
type Lacp_Interface_Member_AggregatablePath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_AggregatablePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/aggregatable YANG schema element.
type Lacp_Interface_Member_AggregatablePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_CollectingPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/collecting YANG schema element.
type Lacp_Interface_Member_CollectingPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_CollectingPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/collecting YANG schema element.
type Lacp_Interface_Member_CollectingPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_DistributingPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/distributing YANG schema element.
type Lacp_Interface_Member_DistributingPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_DistributingPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/distributing YANG schema element.
type Lacp_Interface_Member_DistributingPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_InterfacePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/interface YANG schema element.
type Lacp_Interface_Member_InterfacePath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_InterfacePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/interface YANG schema element.
type Lacp_Interface_Member_InterfacePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_LastChangePath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/last-change YANG schema element.
type Lacp_Interface_Member_LastChangePath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_LastChangePathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/last-change YANG schema element.
type Lacp_Interface_Member_LastChangePathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_OperKeyPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/oper-key YANG schema element.
type Lacp_Interface_Member_OperKeyPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_OperKeyPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/oper-key YANG schema element.
type Lacp_Interface_Member_OperKeyPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerIdPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-id YANG schema element.
type Lacp_Interface_Member_PartnerIdPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerIdPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-id YANG schema element.
type Lacp_Interface_Member_PartnerIdPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerKeyPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-key YANG schema element.
type Lacp_Interface_Member_PartnerKeyPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerKeyPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-key YANG schema element.
type Lacp_Interface_Member_PartnerKeyPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerPortNumPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-num YANG schema element.
type Lacp_Interface_Member_PartnerPortNumPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PartnerPortNumPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/partner-port-num YANG schema element.
type Lacp_Interface_Member_PartnerPortNumPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PortNumPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-num YANG schema element.
type Lacp_Interface_Member_PortNumPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_PortNumPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/port-num YANG schema element.
type Lacp_Interface_Member_PortNumPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SynchronizationPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/synchronization YANG schema element.
type Lacp_Interface_Member_SynchronizationPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SynchronizationPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/synchronization YANG schema element.
type Lacp_Interface_Member_SynchronizationPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SystemIdPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/system-id YANG schema element.
type Lacp_Interface_Member_SystemIdPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_SystemIdPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/system-id YANG schema element.
type Lacp_Interface_Member_SystemIdPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_TimeoutPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/timeout YANG schema element.
type Lacp_Interface_Member_TimeoutPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_TimeoutPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/timeout YANG schema element.
type Lacp_Interface_Member_TimeoutPathAny struct {
	*ygot.NodePath
}

// Activity (leaf): Indicates participant is active or passive
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/activity"
// Path from root: "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_MemberPath) Activity() *Lacp_Interface_Member_ActivityPath {
	return &Lacp_Interface_Member_ActivityPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Activity (leaf): Indicates participant is active or passive
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/activity"
// Path from root: "/lacp/interfaces/interface/members/member/state/activity"
func (n *Lacp_Interface_MemberPathAny) Activity() *Lacp_Interface_Member_ActivityPathAny {
	return &Lacp_Interface_Member_ActivityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "activity"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/aggregatable"
// Path from root: "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_MemberPath) Aggregatable() *Lacp_Interface_Member_AggregatablePath {
	return &Lacp_Interface_Member_AggregatablePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Aggregatable (leaf): A true value indicates that the participant will allow
// the link to be used as part of the aggregate. A false
// value indicates the link should be used as an individual
// link
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/aggregatable"
// Path from root: "/lacp/interfaces/interface/members/member/state/aggregatable"
func (n *Lacp_Interface_MemberPathAny) Aggregatable() *Lacp_Interface_Member_AggregatablePathAny {
	return &Lacp_Interface_Member_AggregatablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "aggregatable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/collecting"
// Path from root: "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_MemberPath) Collecting() *Lacp_Interface_Member_CollectingPath {
	return &Lacp_Interface_Member_CollectingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Collecting (leaf): If true, the participant is collecting incoming frames
// on the link, otherwise false
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/collecting"
// Path from root: "/lacp/interfaces/interface/members/member/state/collecting"
func (n *Lacp_Interface_MemberPathAny) Collecting() *Lacp_Interface_Member_CollectingPathAny {
	return &Lacp_Interface_Member_CollectingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "collecting"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): LACP protocol counters
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/counters"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters"
func (n *Lacp_Interface_MemberPath) Counters() *Lacp_Interface_Member_CountersPath {
	return &Lacp_Interface_Member_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): LACP protocol counters
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/counters"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters"
func (n *Lacp_Interface_MemberPathAny) Counters() *Lacp_Interface_Member_CountersPathAny {
	return &Lacp_Interface_Member_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/distributing"
// Path from root: "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_MemberPath) Distributing() *Lacp_Interface_Member_DistributingPath {
	return &Lacp_Interface_Member_DistributingPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
	}
}

// Distributing (leaf): When true, the participant is distributing outgoing
// frames; when false, distribution is disabled
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/distributing"
// Path from root: "/lacp/interfaces/interface/members/member/state/distributing"
func (n *Lacp_Interface_MemberPathAny) Distributing() *Lacp_Interface_Member_DistributingPathAny {
	return &Lacp_Interface_Member_DistributingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "distributing"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to interface member of the LACP aggregate
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/interface"
// Path from root: "/lacp/interfaces/interface/members/member/state/interface"
func (n *Lacp_Interface_MemberPath) Interface() *Lacp_Interface_Member_InterfacePath {
	return &Lacp_Interface_Member_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to interface member of the LACP aggregate
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/interface"
// Path from root: "/lacp/interfaces/interface/members/member/state/interface"
func (n *Lacp_Interface_MemberPathAny) Interface() *Lacp_Interface_Member_InterfacePathAny {
	return &Lacp_Interface_Member_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): The timestamp indicates the absolute time of the last state
// change of a LACP timeout. The last state change of the LACP
// timeout is defined as what is reported as the operating state
// to the system. The state change is both a timeout event and
// when the timeout event is no longer active. The value is the
// timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/last-change"
// Path from root: "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_MemberPath) LastChange() *Lacp_Interface_Member_LastChangePath {
	return &Lacp_Interface_Member_LastChangePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastChange (leaf): The timestamp indicates the absolute time of the last state
// change of a LACP timeout. The last state change of the LACP
// timeout is defined as what is reported as the operating state
// to the system. The state change is both a timeout event and
// when the timeout event is no longer active. The value is the
// timestamp in nanoseconds relative to the Unix Epoch
// (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/last-change"
// Path from root: "/lacp/interfaces/interface/members/member/state/last-change"
func (n *Lacp_Interface_MemberPathAny) LastChange() *Lacp_Interface_Member_LastChangePathAny {
	return &Lacp_Interface_Member_LastChangePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-change"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/oper-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_MemberPath) OperKey() *Lacp_Interface_Member_OperKeyPath {
	return &Lacp_Interface_Member_OperKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperKey (leaf): Current operational value of the key for the aggregate
// interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/oper-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/oper-key"
func (n *Lacp_Interface_MemberPathAny) OperKey() *Lacp_Interface_Member_OperKeyPathAny {
	return &Lacp_Interface_Member_OperKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_MemberPath) PartnerId() *Lacp_Interface_Member_PartnerIdPath {
	return &Lacp_Interface_Member_PartnerIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerId (leaf): MAC address representing the protocol partner's interface
// system ID
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-id"
func (n *Lacp_Interface_MemberPathAny) PartnerId() *Lacp_Interface_Member_PartnerIdPathAny {
	return &Lacp_Interface_Member_PartnerIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerKey (leaf): Operational value of the protocol partner's key
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_MemberPath) PartnerKey() *Lacp_Interface_Member_PartnerKeyPath {
	return &Lacp_Interface_Member_PartnerKeyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerKey (leaf): Operational value of the protocol partner's key
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-key"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-key"
func (n *Lacp_Interface_MemberPathAny) PartnerKey() *Lacp_Interface_Member_PartnerKeyPathAny {
	return &Lacp_Interface_Member_PartnerKeyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_MemberPath) PartnerPortNum() *Lacp_Interface_Member_PartnerPortNumPath {
	return &Lacp_Interface_Member_PartnerPortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PartnerPortNum (leaf): Port number of the partner (remote) port for this member
// port
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/partner-port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/partner-port-num"
func (n *Lacp_Interface_MemberPathAny) PartnerPortNum() *Lacp_Interface_Member_PartnerPortNumPathAny {
	return &Lacp_Interface_Member_PartnerPortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "partner-port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): Port number of the local (actor) aggregation member
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_MemberPath) PortNum() *Lacp_Interface_Member_PortNumPath {
	return &Lacp_Interface_Member_PortNumPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortNum (leaf): Port number of the local (actor) aggregation member
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/port-num"
// Path from root: "/lacp/interfaces/interface/members/member/state/port-num"
func (n *Lacp_Interface_MemberPathAny) PortNum() *Lacp_Interface_Member_PortNumPathAny {
	return &Lacp_Interface_Member_PortNumPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-num"},
			map[string]interface{}{},
			n,
		),
	}
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/synchronization"
// Path from root: "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_MemberPath) Synchronization() *Lacp_Interface_Member_SynchronizationPath {
	return &Lacp_Interface_Member_SynchronizationPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
	}
}

// Synchronization (leaf): Indicates whether the participant is in-sync or
// out-of-sync
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/synchronization"
// Path from root: "/lacp/interfaces/interface/members/member/state/synchronization"
func (n *Lacp_Interface_MemberPathAny) Synchronization() *Lacp_Interface_Member_SynchronizationPathAny {
	return &Lacp_Interface_Member_SynchronizationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "synchronization"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/system-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_MemberPath) SystemId() *Lacp_Interface_Member_SystemIdPath {
	return &Lacp_Interface_Member_SystemIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemId (leaf): MAC address that defines the local system ID for the
// aggregate interface
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/system-id"
// Path from root: "/lacp/interfaces/interface/members/member/state/system-id"
func (n *Lacp_Interface_MemberPathAny) SystemId() *Lacp_Interface_Member_SystemIdPathAny {
	return &Lacp_Interface_Member_SystemIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/timeout"
// Path from root: "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_MemberPath) Timeout() *Lacp_Interface_Member_TimeoutPath {
	return &Lacp_Interface_Member_TimeoutPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Timeout (leaf): The timeout type (short or long) used by the
// participant
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "state/timeout"
// Path from root: "/lacp/interfaces/interface/members/member/state/timeout"
func (n *Lacp_Interface_MemberPathAny) Timeout() *Lacp_Interface_Member_TimeoutPathAny {
	return &Lacp_Interface_Member_TimeoutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "timeout"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lacp_Interface_Member_CountersPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters YANG schema element.
type Lacp_Interface_Member_CountersPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_CountersPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters YANG schema element.
type Lacp_Interface_Member_CountersPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpErrorsPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpErrorsPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpInPktsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpInPktsPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpInPktsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpInPktsPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpOutPktsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpOutPktsPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpOutPktsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts YANG schema element.
type Lacp_Interface_Member_Counters_LacpOutPktsPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpRxErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpRxErrorsPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpRxErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpRxErrorsPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions YANG schema element.
type Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions YANG schema element.
type Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpTxErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpTxErrorsPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpTxErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpTxErrorsPathAny struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpUnknownErrorsPath represents the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpUnknownErrorsPath struct {
	*ygot.NodePath
}

// Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny represents the wildcard version of the /openconfig-lacp/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors YANG schema element.
type Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny struct {
	*ygot.NodePath
}

// LacpErrors (leaf): Number of LACPDU illegal packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpErrors() *Lacp_Interface_Member_Counters_LacpErrorsPath {
	return &Lacp_Interface_Member_Counters_LacpErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpErrors (leaf): Number of LACPDU illegal packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpErrors() *Lacp_Interface_Member_Counters_LacpErrorsPathAny {
	return &Lacp_Interface_Member_Counters_LacpErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpInPkts (leaf): Number of LACPDUs received
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-in-pkts"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"
func (n *Lacp_Interface_Member_CountersPath) LacpInPkts() *Lacp_Interface_Member_Counters_LacpInPktsPath {
	return &Lacp_Interface_Member_Counters_LacpInPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpInPkts (leaf): Number of LACPDUs received
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-in-pkts"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-in-pkts"
func (n *Lacp_Interface_Member_CountersPathAny) LacpInPkts() *Lacp_Interface_Member_Counters_LacpInPktsPathAny {
	return &Lacp_Interface_Member_Counters_LacpInPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-in-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpOutPkts (leaf): Number of LACPDUs transmitted
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-out-pkts"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"
func (n *Lacp_Interface_Member_CountersPath) LacpOutPkts() *Lacp_Interface_Member_Counters_LacpOutPktsPath {
	return &Lacp_Interface_Member_Counters_LacpOutPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpOutPkts (leaf): Number of LACPDUs transmitted
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-out-pkts"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-out-pkts"
func (n *Lacp_Interface_Member_CountersPathAny) LacpOutPkts() *Lacp_Interface_Member_Counters_LacpOutPktsPathAny {
	return &Lacp_Interface_Member_Counters_LacpOutPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-out-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpRxErrors (leaf): Number of LACPDU receive packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-rx-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpRxErrors() *Lacp_Interface_Member_Counters_LacpRxErrorsPath {
	return &Lacp_Interface_Member_Counters_LacpRxErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-rx-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpRxErrors (leaf): Number of LACPDU receive packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-rx-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-rx-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpRxErrors() *Lacp_Interface_Member_Counters_LacpRxErrorsPathAny {
	return &Lacp_Interface_Member_Counters_LacpRxErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-rx-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpTimeoutTransitions (leaf): Number of times the LACP state has transitioned
// with a timeout since the time the device restarted
// or the interface was brought up, whichever is most
// recent. The last state change of the LACP timeout
// is defined as what is reported as the operating state
// to the system. The state change is both a timeout
// event and when the timeout event is no longer active.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-timeout-transitions"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions"
func (n *Lacp_Interface_Member_CountersPath) LacpTimeoutTransitions() *Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath {
	return &Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-timeout-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpTimeoutTransitions (leaf): Number of times the LACP state has transitioned
// with a timeout since the time the device restarted
// or the interface was brought up, whichever is most
// recent. The last state change of the LACP timeout
// is defined as what is reported as the operating state
// to the system. The state change is both a timeout
// event and when the timeout event is no longer active.
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-timeout-transitions"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-timeout-transitions"
func (n *Lacp_Interface_Member_CountersPathAny) LacpTimeoutTransitions() *Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny {
	return &Lacp_Interface_Member_Counters_LacpTimeoutTransitionsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-timeout-transitions"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpTxErrors (leaf): Number of LACPDU transmit packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-tx-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpTxErrors() *Lacp_Interface_Member_Counters_LacpTxErrorsPath {
	return &Lacp_Interface_Member_Counters_LacpTxErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-tx-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpTxErrors (leaf): Number of LACPDU transmit packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-tx-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-tx-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpTxErrors() *Lacp_Interface_Member_Counters_LacpTxErrorsPathAny {
	return &Lacp_Interface_Member_Counters_LacpTxErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-tx-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpUnknownErrors (leaf): Number of LACPDU unknown packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-unknown-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"
func (n *Lacp_Interface_Member_CountersPath) LacpUnknownErrors() *Lacp_Interface_Member_Counters_LacpUnknownErrorsPath {
	return &Lacp_Interface_Member_Counters_LacpUnknownErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-unknown-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LacpUnknownErrors (leaf): Number of LACPDU unknown packet errors
// ----------------------------------------
// Defining module: "openconfig-lacp"
// Instantiating module: "openconfig-lacp"
// Path from parent: "lacp-unknown-errors"
// Path from root: "/lacp/interfaces/interface/members/member/state/counters/lacp-unknown-errors"
func (n *Lacp_Interface_Member_CountersPathAny) LacpUnknownErrors() *Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny {
	return &Lacp_Interface_Member_Counters_LacpUnknownErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lacp-unknown-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// LldpPath represents the /openconfig-lldp/lldp YANG schema element.
type LldpPath struct {
	*ygot.NodePath
}

// LldpPathAny represents the wildcard version of the /openconfig-lldp/lldp YANG schema element.
type LldpPathAny struct {
	*ygot.NodePath
}

// Lldp_ChassisIdPath represents the /openconfig-lldp/lldp/config/chassis-id YANG schema element.
type Lldp_ChassisIdPath struct {
	*ygot.NodePath
}

// Lldp_ChassisIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/config/chassis-id YANG schema element.
type Lldp_ChassisIdPathAny struct {
	*ygot.NodePath
}

// Lldp_ChassisIdTypePath represents the /openconfig-lldp/lldp/config/chassis-id-type YANG schema element.
type Lldp_ChassisIdTypePath struct {
	*ygot.NodePath
}

// Lldp_ChassisIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/config/chassis-id-type YANG schema element.
type Lldp_ChassisIdTypePathAny struct {
	*ygot.NodePath
}

// Lldp_EnabledPath represents the /openconfig-lldp/lldp/config/enabled YANG schema element.
type Lldp_EnabledPath struct {
	*ygot.NodePath
}

// Lldp_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/config/enabled YANG schema element.
type Lldp_EnabledPathAny struct {
	*ygot.NodePath
}

// Lldp_HelloTimerPath represents the /openconfig-lldp/lldp/config/hello-timer YANG schema element.
type Lldp_HelloTimerPath struct {
	*ygot.NodePath
}

// Lldp_HelloTimerPathAny represents the wildcard version of the /openconfig-lldp/lldp/config/hello-timer YANG schema element.
type Lldp_HelloTimerPathAny struct {
	*ygot.NodePath
}

// Lldp_SuppressTlvAdvertisementPath represents the /openconfig-lldp/lldp/config/suppress-tlv-advertisement YANG schema element.
type Lldp_SuppressTlvAdvertisementPath struct {
	*ygot.NodePath
}

// Lldp_SuppressTlvAdvertisementPathAny represents the wildcard version of the /openconfig-lldp/lldp/config/suppress-tlv-advertisement YANG schema element.
type Lldp_SuppressTlvAdvertisementPathAny struct {
	*ygot.NodePath
}

// Lldp_SystemDescriptionPath represents the /openconfig-lldp/lldp/config/system-description YANG schema element.
type Lldp_SystemDescriptionPath struct {
	*ygot.NodePath
}

// Lldp_SystemDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/config/system-description YANG schema element.
type Lldp_SystemDescriptionPathAny struct {
	*ygot.NodePath
}

// Lldp_SystemNamePath represents the /openconfig-lldp/lldp/config/system-name YANG schema element.
type Lldp_SystemNamePath struct {
	*ygot.NodePath
}

// Lldp_SystemNamePathAny represents the wildcard version of the /openconfig-lldp/lldp/config/system-name YANG schema element.
type Lldp_SystemNamePathAny struct {
	*ygot.NodePath
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/chassis-id"
// Path from root: "/lldp/config/chassis-id"
func (n *LldpPath) ChassisId() *Lldp_ChassisIdPath {
	return &Lldp_ChassisIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/chassis-id"
// Path from root: "/lldp/config/chassis-id"
func (n *LldpPathAny) ChassisId() *Lldp_ChassisIdPathAny {
	return &Lldp_ChassisIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/chassis-id-type"
// Path from root: "/lldp/config/chassis-id-type"
func (n *LldpPath) ChassisIdType() *Lldp_ChassisIdTypePath {
	return &Lldp_ChassisIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/chassis-id-type"
// Path from root: "/lldp/config/chassis-id-type"
func (n *LldpPathAny) ChassisIdType() *Lldp_ChassisIdTypePathAny {
	return &Lldp_ChassisIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Global LLDP counters
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/counters"
// Path from root: "/lldp/state/counters"
func (n *LldpPath) Counters() *Lldp_CountersPath {
	return &Lldp_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Global LLDP counters
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/counters"
// Path from root: "/lldp/state/counters"
func (n *LldpPathAny) Counters() *Lldp_CountersPathAny {
	return &Lldp_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): System level state of the LLDP protocol.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/enabled"
// Path from root: "/lldp/config/enabled"
func (n *LldpPath) Enabled() *Lldp_EnabledPath {
	return &Lldp_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): System level state of the LLDP protocol.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/enabled"
// Path from root: "/lldp/config/enabled"
func (n *LldpPathAny) Enabled() *Lldp_EnabledPathAny {
	return &Lldp_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTimer (leaf): System level hello timer for the LLDP protocol.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/hello-timer"
// Path from root: "/lldp/config/hello-timer"
func (n *LldpPath) HelloTimer() *Lldp_HelloTimerPath {
	return &Lldp_HelloTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// HelloTimer (leaf): System level hello timer for the LLDP protocol.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/hello-timer"
// Path from root: "/lldp/config/hello-timer"
func (n *LldpPathAny) HelloTimer() *Lldp_HelloTimerPathAny {
	return &Lldp_HelloTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hello-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which LLDP is enabled / available
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "interfaces/interface"
// Path from root: "/lldp/interfaces/interface"
// Name (wildcarded): string
func (n *LldpPath) InterfaceAny() *Lldp_InterfacePathAny {
	return &Lldp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which LLDP is enabled / available
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "interfaces/interface"
// Path from root: "/lldp/interfaces/interface"
// Name (wildcarded): string
func (n *LldpPathAny) InterfaceAny() *Lldp_InterfacePathAny {
	return &Lldp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which LLDP is enabled / available
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "interfaces/interface"
// Path from root: "/lldp/interfaces/interface"
// Name: string
func (n *LldpPath) Interface(Name string) *Lldp_InterfacePath {
	return &Lldp_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of interfaces on which LLDP is enabled / available
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "interfaces/interface"
// Path from root: "/lldp/interfaces/interface"
// Name: string
func (n *LldpPathAny) Interface(Name string) *Lldp_InterfacePathAny {
	return &Lldp_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// SuppressTlvAdvertisement (leaf-list): Indicates whether the local system should suppress the
// advertisement of particular TLVs with the LLDP PDUs that it
// transmits. Where a TLV type is specified within this list, it
// should not be included in any LLDP PDU transmitted by the
// local agent.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/suppress-tlv-advertisement"
// Path from root: "/lldp/config/suppress-tlv-advertisement"
func (n *LldpPath) SuppressTlvAdvertisement() *Lldp_SuppressTlvAdvertisementPath {
	return &Lldp_SuppressTlvAdvertisementPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress-tlv-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// SuppressTlvAdvertisement (leaf-list): Indicates whether the local system should suppress the
// advertisement of particular TLVs with the LLDP PDUs that it
// transmits. Where a TLV type is specified within this list, it
// should not be included in any LLDP PDU transmitted by the
// local agent.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/suppress-tlv-advertisement"
// Path from root: "/lldp/config/suppress-tlv-advertisement"
func (n *LldpPathAny) SuppressTlvAdvertisement() *Lldp_SuppressTlvAdvertisementPathAny {
	return &Lldp_SuppressTlvAdvertisementPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "suppress-tlv-advertisement"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/system-description"
// Path from root: "/lldp/config/system-description"
func (n *LldpPath) SystemDescription() *Lldp_SystemDescriptionPath {
	return &Lldp_SystemDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/system-description"
// Path from root: "/lldp/config/system-description"
func (n *LldpPathAny) SystemDescription() *Lldp_SystemDescriptionPathAny {
	return &Lldp_SystemDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/system-name"
// Path from root: "/lldp/config/system-name"
func (n *LldpPath) SystemName() *Lldp_SystemNamePath {
	return &Lldp_SystemNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/system-name"
// Path from root: "/lldp/config/system-name"
func (n *LldpPathAny) SystemName() *Lldp_SystemNamePathAny {
	return &Lldp_SystemNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp_CountersPath represents the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_CountersPath struct {
	*ygot.NodePath
}

// Lldp_CountersPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters YANG schema element.
type Lldp_CountersPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_EntriesAgedOutPath represents the /openconfig-lldp/lldp/state/counters/entries-aged-out YANG schema element.
type Lldp_Counters_EntriesAgedOutPath struct {
	*ygot.NodePath
}

// Lldp_Counters_EntriesAgedOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/entries-aged-out YANG schema element.
type Lldp_Counters_EntriesAgedOutPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameDiscardPath represents the /openconfig-lldp/lldp/state/counters/frame-discard YANG schema element.
type Lldp_Counters_FrameDiscardPath struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-discard YANG schema element.
type Lldp_Counters_FrameDiscardPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameErrorInPath represents the /openconfig-lldp/lldp/state/counters/frame-error-in YANG schema element.
type Lldp_Counters_FrameErrorInPath struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-error-in YANG schema element.
type Lldp_Counters_FrameErrorInPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameInPath represents the /openconfig-lldp/lldp/state/counters/frame-in YANG schema element.
type Lldp_Counters_FrameInPath struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameInPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-in YANG schema element.
type Lldp_Counters_FrameInPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameOutPath represents the /openconfig-lldp/lldp/state/counters/frame-out YANG schema element.
type Lldp_Counters_FrameOutPath struct {
	*ygot.NodePath
}

// Lldp_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/frame-out YANG schema element.
type Lldp_Counters_FrameOutPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_LastClearPath represents the /openconfig-lldp/lldp/state/counters/last-clear YANG schema element.
type Lldp_Counters_LastClearPath struct {
	*ygot.NodePath
}

// Lldp_Counters_LastClearPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/last-clear YANG schema element.
type Lldp_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_TlvAcceptedPath represents the /openconfig-lldp/lldp/state/counters/tlv-accepted YANG schema element.
type Lldp_Counters_TlvAcceptedPath struct {
	*ygot.NodePath
}

// Lldp_Counters_TlvAcceptedPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-accepted YANG schema element.
type Lldp_Counters_TlvAcceptedPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_TlvDiscardPath represents the /openconfig-lldp/lldp/state/counters/tlv-discard YANG schema element.
type Lldp_Counters_TlvDiscardPath struct {
	*ygot.NodePath
}

// Lldp_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-discard YANG schema element.
type Lldp_Counters_TlvDiscardPathAny struct {
	*ygot.NodePath
}

// Lldp_Counters_TlvUnknownPath represents the /openconfig-lldp/lldp/state/counters/tlv-unknown YANG schema element.
type Lldp_Counters_TlvUnknownPath struct {
	*ygot.NodePath
}

// Lldp_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-lldp/lldp/state/counters/tlv-unknown YANG schema element.
type Lldp_Counters_TlvUnknownPathAny struct {
	*ygot.NodePath
}

// EntriesAgedOut (leaf): The number of entries aged out due to timeout.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "entries-aged-out"
// Path from root: "/lldp/state/counters/entries-aged-out"
func (n *Lldp_CountersPath) EntriesAgedOut() *Lldp_Counters_EntriesAgedOutPath {
	return &Lldp_Counters_EntriesAgedOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries-aged-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntriesAgedOut (leaf): The number of entries aged out due to timeout.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "entries-aged-out"
// Path from root: "/lldp/state/counters/entries-aged-out"
func (n *Lldp_CountersPathAny) EntriesAgedOut() *Lldp_Counters_EntriesAgedOutPathAny {
	return &Lldp_Counters_EntriesAgedOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries-aged-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-discard"
// Path from root: "/lldp/state/counters/frame-discard"
func (n *Lldp_CountersPath) FrameDiscard() *Lldp_Counters_FrameDiscardPath {
	return &Lldp_Counters_FrameDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-discard"
// Path from root: "/lldp/state/counters/frame-discard"
func (n *Lldp_CountersPathAny) FrameDiscard() *Lldp_Counters_FrameDiscardPathAny {
	return &Lldp_Counters_FrameDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-error-in"
// Path from root: "/lldp/state/counters/frame-error-in"
func (n *Lldp_CountersPath) FrameErrorIn() *Lldp_Counters_FrameErrorInPath {
	return &Lldp_Counters_FrameErrorInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-error-in"
// Path from root: "/lldp/state/counters/frame-error-in"
func (n *Lldp_CountersPathAny) FrameErrorIn() *Lldp_Counters_FrameErrorInPathAny {
	return &Lldp_Counters_FrameErrorInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-in"
// Path from root: "/lldp/state/counters/frame-in"
func (n *Lldp_CountersPath) FrameIn() *Lldp_Counters_FrameInPath {
	return &Lldp_Counters_FrameInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-in"
// Path from root: "/lldp/state/counters/frame-in"
func (n *Lldp_CountersPathAny) FrameIn() *Lldp_Counters_FrameInPathAny {
	return &Lldp_Counters_FrameInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-out"
// Path from root: "/lldp/state/counters/frame-out"
func (n *Lldp_CountersPath) FrameOut() *Lldp_Counters_FrameOutPath {
	return &Lldp_Counters_FrameOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-out"
// Path from root: "/lldp/state/counters/frame-out"
func (n *Lldp_CountersPathAny) FrameOut() *Lldp_Counters_FrameOutPathAny {
	return &Lldp_Counters_FrameOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "last-clear"
// Path from root: "/lldp/state/counters/last-clear"
func (n *Lldp_CountersPath) LastClear() *Lldp_Counters_LastClearPath {
	return &Lldp_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "last-clear"
// Path from root: "/lldp/state/counters/last-clear"
func (n *Lldp_CountersPathAny) LastClear() *Lldp_Counters_LastClearPathAny {
	return &Lldp_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvAccepted (leaf): The number of valid TLVs received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-accepted"
// Path from root: "/lldp/state/counters/tlv-accepted"
func (n *Lldp_CountersPath) TlvAccepted() *Lldp_Counters_TlvAcceptedPath {
	return &Lldp_Counters_TlvAcceptedPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-accepted"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvAccepted (leaf): The number of valid TLVs received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-accepted"
// Path from root: "/lldp/state/counters/tlv-accepted"
func (n *Lldp_CountersPathAny) TlvAccepted() *Lldp_Counters_TlvAcceptedPathAny {
	return &Lldp_Counters_TlvAcceptedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-accepted"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-discard"
// Path from root: "/lldp/state/counters/tlv-discard"
func (n *Lldp_CountersPath) TlvDiscard() *Lldp_Counters_TlvDiscardPath {
	return &Lldp_Counters_TlvDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-discard"
// Path from root: "/lldp/state/counters/tlv-discard"
func (n *Lldp_CountersPathAny) TlvDiscard() *Lldp_Counters_TlvDiscardPathAny {
	return &Lldp_Counters_TlvDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-unknown"
// Path from root: "/lldp/state/counters/tlv-unknown"
func (n *Lldp_CountersPath) TlvUnknown() *Lldp_Counters_TlvUnknownPath {
	return &Lldp_Counters_TlvUnknownPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-unknown"
// Path from root: "/lldp/state/counters/tlv-unknown"
func (n *Lldp_CountersPathAny) TlvUnknown() *Lldp_Counters_TlvUnknownPathAny {
	return &Lldp_Counters_TlvUnknownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp_InterfacePath represents the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePath struct {
	*ygot.NodePath
}

// Lldp_InterfacePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface YANG schema element.
type Lldp_InterfacePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_EnabledPath represents the /openconfig-lldp/lldp/interfaces/interface/config/enabled YANG schema element.
type Lldp_Interface_EnabledPath struct {
	*ygot.NodePath
}

// Lldp_Interface_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/config/enabled YANG schema element.
type Lldp_Interface_EnabledPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_NamePath represents the /openconfig-lldp/lldp/interfaces/interface/config/name YANG schema element.
type Lldp_Interface_NamePath struct {
	*ygot.NodePath
}

// Lldp_Interface_NamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/config/name YANG schema element.
type Lldp_Interface_NamePathAny struct {
	*ygot.NodePath
}

// Counters (container): LLDP counters on each interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/counters"
// Path from root: "/lldp/interfaces/interface/state/counters"
func (n *Lldp_InterfacePath) Counters() *Lldp_Interface_CountersPath {
	return &Lldp_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): LLDP counters on each interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/counters"
// Path from root: "/lldp/interfaces/interface/state/counters"
func (n *Lldp_InterfacePathAny) Counters() *Lldp_Interface_CountersPathAny {
	return &Lldp_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable or disable the LLDP protocol on the interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/enabled"
// Path from root: "/lldp/interfaces/interface/config/enabled"
func (n *Lldp_InterfacePath) Enabled() *Lldp_Interface_EnabledPath {
	return &Lldp_Interface_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Enable or disable the LLDP protocol on the interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/enabled"
// Path from root: "/lldp/interfaces/interface/config/enabled"
func (n *Lldp_InterfacePathAny) Enabled() *Lldp_Interface_EnabledPathAny {
	return &Lldp_Interface_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the LLDP Ethernet interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/name"
// Path from root: "/lldp/interfaces/interface/config/name"
func (n *Lldp_InterfacePath) Name() *Lldp_Interface_NamePath {
	return &Lldp_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the LLDP Ethernet interface
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "config/name"
// Path from root: "/lldp/interfaces/interface/config/name"
func (n *Lldp_InterfacePathAny) Name() *Lldp_Interface_NamePathAny {
	return &Lldp_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// NeighborAny (list): List of LLDP neighbors
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "neighbors/neighbor"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor"
// Id (wildcarded): string
func (n *Lldp_InterfacePath) NeighborAny() *Lldp_Interface_NeighborPathAny {
	return &Lldp_Interface_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NeighborAny (list): List of LLDP neighbors
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "neighbors/neighbor"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor"
// Id (wildcarded): string
func (n *Lldp_InterfacePathAny) NeighborAny() *Lldp_Interface_NeighborPathAny {
	return &Lldp_Interface_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Neighbor (list): List of LLDP neighbors
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "neighbors/neighbor"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor"
// Id: string
func (n *Lldp_InterfacePath) Neighbor(Id string) *Lldp_Interface_NeighborPath {
	return &Lldp_Interface_NeighborPath{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Neighbor (list): List of LLDP neighbors
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "neighbors/neighbor"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor"
// Id: string
func (n *Lldp_InterfacePathAny) Neighbor(Id string) *Lldp_Interface_NeighborPathAny {
	return &Lldp_Interface_NeighborPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Lldp_Interface_CountersPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters YANG schema element.
type Lldp_Interface_CountersPath struct {
	*ygot.NodePath
}

// Lldp_Interface_CountersPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters YANG schema element.
type Lldp_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameDiscardPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-discard YANG schema element.
type Lldp_Interface_Counters_FrameDiscardPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-discard YANG schema element.
type Lldp_Interface_Counters_FrameDiscardPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameErrorInPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-in YANG schema element.
type Lldp_Interface_Counters_FrameErrorInPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameErrorInPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-in YANG schema element.
type Lldp_Interface_Counters_FrameErrorInPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameErrorOutPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-out YANG schema element.
type Lldp_Interface_Counters_FrameErrorOutPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameErrorOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-error-out YANG schema element.
type Lldp_Interface_Counters_FrameErrorOutPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameInPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-in YANG schema element.
type Lldp_Interface_Counters_FrameInPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameInPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-in YANG schema element.
type Lldp_Interface_Counters_FrameInPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameOutPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-out YANG schema element.
type Lldp_Interface_Counters_FrameOutPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_FrameOutPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/frame-out YANG schema element.
type Lldp_Interface_Counters_FrameOutPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_LastClearPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/last-clear YANG schema element.
type Lldp_Interface_Counters_LastClearPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_LastClearPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/last-clear YANG schema element.
type Lldp_Interface_Counters_LastClearPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_TlvDiscardPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-discard YANG schema element.
type Lldp_Interface_Counters_TlvDiscardPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_TlvDiscardPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-discard YANG schema element.
type Lldp_Interface_Counters_TlvDiscardPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_TlvUnknownPath represents the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-unknown YANG schema element.
type Lldp_Interface_Counters_TlvUnknownPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Counters_TlvUnknownPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/state/counters/tlv-unknown YANG schema element.
type Lldp_Interface_Counters_TlvUnknownPathAny struct {
	*ygot.NodePath
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-discard"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-discard"
func (n *Lldp_Interface_CountersPath) FrameDiscard() *Lldp_Interface_Counters_FrameDiscardPath {
	return &Lldp_Interface_Counters_FrameDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameDiscard (leaf): The number of LLDP frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-discard"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-discard"
func (n *Lldp_Interface_CountersPathAny) FrameDiscard() *Lldp_Interface_Counters_FrameDiscardPathAny {
	return &Lldp_Interface_Counters_FrameDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-error-in"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-error-in"
func (n *Lldp_Interface_CountersPath) FrameErrorIn() *Lldp_Interface_Counters_FrameErrorInPath {
	return &Lldp_Interface_Counters_FrameErrorInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorIn (leaf): The number of LLDP frames received with errors.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-error-in"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-error-in"
func (n *Lldp_Interface_CountersPathAny) FrameErrorIn() *Lldp_Interface_Counters_FrameErrorInPathAny {
	return &Lldp_Interface_Counters_FrameErrorInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-error-out"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-error-out"
func (n *Lldp_Interface_CountersPath) FrameErrorOut() *Lldp_Interface_Counters_FrameErrorOutPath {
	return &Lldp_Interface_Counters_FrameErrorOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameErrorOut (leaf): The number of frame transmit errors on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-error-out"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-error-out"
func (n *Lldp_Interface_CountersPathAny) FrameErrorOut() *Lldp_Interface_Counters_FrameErrorOutPathAny {
	return &Lldp_Interface_Counters_FrameErrorOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-error-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-in"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-in"
func (n *Lldp_Interface_CountersPath) FrameIn() *Lldp_Interface_Counters_FrameInPath {
	return &Lldp_Interface_Counters_FrameInPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameIn (leaf): The number of lldp frames received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-in"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-in"
func (n *Lldp_Interface_CountersPathAny) FrameIn() *Lldp_Interface_Counters_FrameInPathAny {
	return &Lldp_Interface_Counters_FrameInPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-in"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-out"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-out"
func (n *Lldp_Interface_CountersPath) FrameOut() *Lldp_Interface_Counters_FrameOutPath {
	return &Lldp_Interface_Counters_FrameOutPath{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// FrameOut (leaf): The number of frames transmitted out.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "frame-out"
// Path from root: "/lldp/interfaces/interface/state/counters/frame-out"
func (n *Lldp_Interface_CountersPathAny) FrameOut() *Lldp_Interface_Counters_FrameOutPathAny {
	return &Lldp_Interface_Counters_FrameOutPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"frame-out"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "last-clear"
// Path from root: "/lldp/interfaces/interface/state/counters/last-clear"
func (n *Lldp_Interface_CountersPath) LastClear() *Lldp_Interface_Counters_LastClearPath {
	return &Lldp_Interface_Counters_LastClearPath{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastClear (leaf): Indicates the last time the counters were
// cleared.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "last-clear"
// Path from root: "/lldp/interfaces/interface/state/counters/last-clear"
func (n *Lldp_Interface_CountersPathAny) LastClear() *Lldp_Interface_Counters_LastClearPathAny {
	return &Lldp_Interface_Counters_LastClearPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"last-clear"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-discard"
// Path from root: "/lldp/interfaces/interface/state/counters/tlv-discard"
func (n *Lldp_Interface_CountersPath) TlvDiscard() *Lldp_Interface_Counters_TlvDiscardPath {
	return &Lldp_Interface_Counters_TlvDiscardPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvDiscard (leaf): The number of TLV frames received and discarded.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-discard"
// Path from root: "/lldp/interfaces/interface/state/counters/tlv-discard"
func (n *Lldp_Interface_CountersPathAny) TlvDiscard() *Lldp_Interface_Counters_TlvDiscardPathAny {
	return &Lldp_Interface_Counters_TlvDiscardPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-discard"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-unknown"
// Path from root: "/lldp/interfaces/interface/state/counters/tlv-unknown"
func (n *Lldp_Interface_CountersPath) TlvUnknown() *Lldp_Interface_Counters_TlvUnknownPath {
	return &Lldp_Interface_Counters_TlvUnknownPath{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvUnknown (leaf): The number of frames received with unknown TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "tlv-unknown"
// Path from root: "/lldp/interfaces/interface/state/counters/tlv-unknown"
func (n *Lldp_Interface_CountersPathAny) TlvUnknown() *Lldp_Interface_Counters_TlvUnknownPathAny {
	return &Lldp_Interface_Counters_TlvUnknownPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tlv-unknown"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp_Interface_NeighborPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPath struct {
	*ygot.NodePath
}

// Lldp_Interface_NeighborPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor YANG schema element.
type Lldp_Interface_NeighborPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_AgePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/age YANG schema element.
type Lldp_Interface_Neighbor_AgePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_AgePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/age YANG schema element.
type Lldp_Interface_Neighbor_AgePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdTypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ChassisIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type YANG schema element.
type Lldp_Interface_Neighbor_ChassisIdTypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_IdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/id YANG schema element.
type Lldp_Interface_Neighbor_IdPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_IdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/id YANG schema element.
type Lldp_Interface_Neighbor_IdPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_LastUpdatePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/last-update YANG schema element.
type Lldp_Interface_Neighbor_LastUpdatePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_LastUpdatePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/last-update YANG schema element.
type Lldp_Interface_Neighbor_LastUpdatePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressTypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_ManagementAddressTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type YANG schema element.
type Lldp_Interface_Neighbor_ManagementAddressTypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortDescriptionPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-description YANG schema element.
type Lldp_Interface_Neighbor_PortDescriptionPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-description YANG schema element.
type Lldp_Interface_Neighbor_PortDescriptionPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id YANG schema element.
type Lldp_Interface_Neighbor_PortIdPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id YANG schema element.
type Lldp_Interface_Neighbor_PortIdPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdTypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type YANG schema element.
type Lldp_Interface_Neighbor_PortIdTypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_PortIdTypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type YANG schema element.
type Lldp_Interface_Neighbor_PortIdTypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemDescriptionPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-description YANG schema element.
type Lldp_Interface_Neighbor_SystemDescriptionPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemDescriptionPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-description YANG schema element.
type Lldp_Interface_Neighbor_SystemDescriptionPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemNamePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-name YANG schema element.
type Lldp_Interface_Neighbor_SystemNamePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_SystemNamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/system-name YANG schema element.
type Lldp_Interface_Neighbor_SystemNamePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_TtlPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_TtlPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/state/ttl YANG schema element.
type Lldp_Interface_Neighbor_TtlPathAny struct {
	*ygot.NodePath
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/age"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPath) Age() *Lldp_Interface_Neighbor_AgePath {
	return &Lldp_Interface_Neighbor_AgePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// Age (leaf): Age since discovery
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/age"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/age"
func (n *Lldp_Interface_NeighborPathAny) Age() *Lldp_Interface_Neighbor_AgePathAny {
	return &Lldp_Interface_Neighbor_AgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name (wildcarded): E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPath) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	return &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// CapabilityAny (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name (wildcarded): E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPathAny) CapabilityAny() *Lldp_Interface_Neighbor_CapabilityPathAny {
	return &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name: E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPath) Capability(Name E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPath {
	return &Lldp_Interface_Neighbor_CapabilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Capability (list): List of LLDP system capabilities advertised by the
// neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "capabilities/capability"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability"
// Name: E_LldpTypes_LLDP_SYSTEM_CAPABILITY
func (n *Lldp_Interface_NeighborPathAny) Capability(Name E_LldpTypes_LLDP_SYSTEM_CAPABILITY) *Lldp_Interface_Neighbor_CapabilityPathAny {
	return &Lldp_Interface_Neighbor_CapabilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"capabilities", "capability"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPath) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPath {
	return &Lldp_Interface_Neighbor_ChassisIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisId (leaf): The Chassis ID is a mandatory TLV which identifies the
// chassis component of the endpoint identifier associated with
// the transmitting LLDP agent
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id"
func (n *Lldp_Interface_NeighborPathAny) ChassisId() *Lldp_Interface_Neighbor_ChassisIdPathAny {
	return &Lldp_Interface_Neighbor_ChassisIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPath) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePath {
	return &Lldp_Interface_Neighbor_ChassisIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ChassisIdType (leaf): This field identifies the format and source of the chassis
// identifier string. It is an enumerator defined by the
// LldpChassisIdSubtype object from IEEE 802.1AB MIB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/chassis-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/chassis-id-type"
func (n *Lldp_Interface_NeighborPathAny) ChassisIdType() *Lldp_Interface_Neighbor_ChassisIdTypePathAny {
	return &Lldp_Interface_Neighbor_ChassisIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "chassis-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/id"
func (n *Lldp_Interface_NeighborPath) Id() *Lldp_Interface_Neighbor_IdPath {
	return &Lldp_Interface_Neighbor_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): System generated identifier for the neighbor on the
// interface.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/id"
func (n *Lldp_Interface_NeighborPathAny) Id() *Lldp_Interface_Neighbor_IdPathAny {
	return &Lldp_Interface_Neighbor_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/last-update"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPath) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePath {
	return &Lldp_Interface_Neighbor_LastUpdatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// LastUpdate (leaf): Seconds since last update received.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/last-update"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/last-update"
func (n *Lldp_Interface_NeighborPathAny) LastUpdate() *Lldp_Interface_Neighbor_LastUpdatePathAny {
	return &Lldp_Interface_Neighbor_LastUpdatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "last-update"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPath) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPath {
	return &Lldp_Interface_Neighbor_ManagementAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddress (leaf): The Management Address is a mandatory TLV which identifies a
// network address associated with the local LLDP agent, which
// can be used to reach the agent on the port identified in the
// Port ID TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddress() *Lldp_Interface_Neighbor_ManagementAddressPathAny {
	return &Lldp_Interface_Neighbor_ManagementAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPath) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePath {
	return &Lldp_Interface_Neighbor_ManagementAddressTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ManagementAddressType (leaf): The enumerated value for the network address type
// identified in this TLV. This enumeration is defined in the
// 'Assigned Numbers' RFC [RFC3232] and the
// ianaAddressFamilyNumbers object.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/management-address-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/management-address-type"
func (n *Lldp_Interface_NeighborPathAny) ManagementAddressType() *Lldp_Interface_Neighbor_ManagementAddressTypePathAny {
	return &Lldp_Interface_Neighbor_ManagementAddressTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "management-address-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPath) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPath {
	return &Lldp_Interface_Neighbor_PortDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortDescription (leaf): The binary string containing the actual port identifier for
// the port which this LLDP PDU was transmitted. The source and
// format of this field is defined by PtopoPortId from
// RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-description"
func (n *Lldp_Interface_NeighborPathAny) PortDescription() *Lldp_Interface_Neighbor_PortDescriptionPathAny {
	return &Lldp_Interface_Neighbor_PortDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPath) PortId() *Lldp_Interface_Neighbor_PortIdPath {
	return &Lldp_Interface_Neighbor_PortIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortId (leaf): The Port ID is a mandatory TLV which identifies the port
// component of the endpoint identifier associated with the
// transmitting LLDP agent. If the specified port is an IEEE
// 802.3 Repeater port, then this TLV is optional.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id"
func (n *Lldp_Interface_NeighborPathAny) PortId() *Lldp_Interface_Neighbor_PortIdPathAny {
	return &Lldp_Interface_Neighbor_PortIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPath) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePath {
	return &Lldp_Interface_Neighbor_PortIdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// PortIdType (leaf): This field identifies the format and source of the port
// identifier string. It is an enumerator defined by the
// PtopoPortIdType object from RFC2922.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/port-id-type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/port-id-type"
func (n *Lldp_Interface_NeighborPathAny) PortIdType() *Lldp_Interface_Neighbor_PortIdTypePathAny {
	return &Lldp_Interface_Neighbor_PortIdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "port-id-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPath) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPath {
	return &Lldp_Interface_Neighbor_SystemDescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemDescription (leaf): The system description field shall contain an alpha-numeric
// string that is the textual description of the network entity.
// The system description should include the full name and
// version identification of the system's hardware type,
// software operating system, and networking software. If
// implementations support IETF RFC 3418, the sysDescr object
// should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-description"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-description"
func (n *Lldp_Interface_NeighborPathAny) SystemDescription() *Lldp_Interface_Neighbor_SystemDescriptionPathAny {
	return &Lldp_Interface_Neighbor_SystemDescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-description"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPath) SystemName() *Lldp_Interface_Neighbor_SystemNamePath {
	return &Lldp_Interface_Neighbor_SystemNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SystemName (leaf): The system name field shall contain an alpha-numeric string
// that indicates the system's administratively assigned name.
// The system name should be the system's fully qualified domain
// name. If implementations support IETF RFC 3418, the sysName
// object should be used for this field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/system-name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/system-name"
func (n *Lldp_Interface_NeighborPathAny) SystemName() *Lldp_Interface_Neighbor_SystemNamePathAny {
	return &Lldp_Interface_Neighbor_SystemNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "system-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAny (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAny() *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAnyOuiAnyOuiSubtype(Type int32) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyOuiAnyOuiSubtype(Type int32) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAnyTypeAnyOuiSubtype(Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyTypeAnyOuiSubtype(Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPath) TlvAnyOuiSubtype(Type int32, Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyOuiSubtype (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype (wildcarded): string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyOuiSubtype(Type int32, Oui string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": "*"},
			n,
		),
	}
}

// TlvAnyTypeAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) TlvAnyTypeAnyOui(OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyTypeAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyTypeAnyOui(OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) TlvAnyOui(Type int32, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyOui (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui (wildcarded): string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyOui(Type int32, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": "*", "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyType (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) TlvAnyType(Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// TlvAnyType (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type (wildcarded): int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) TlvAnyType(Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": "*", "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPath) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPath {
	return &Lldp_Interface_Neighbor_TlvPath{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Tlv (list): List of custom LLDP TLVs from a neighbor
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "custom-tlvs/tlv"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv"
// Type: int32
// Oui: string
// OuiSubtype: string
func (n *Lldp_Interface_NeighborPathAny) Tlv(Type int32, Oui string, OuiSubtype string) *Lldp_Interface_Neighbor_TlvPathAny {
	return &Lldp_Interface_Neighbor_TlvPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"custom-tlvs", "tlv"},
			map[string]interface{}{"type": Type, "oui": Oui, "oui-subtype": OuiSubtype},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/ttl"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPath) Ttl() *Lldp_Interface_Neighbor_TtlPath {
	return &Lldp_Interface_Neighbor_TtlPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ttl (leaf): The time-to-live (TTL) is a mandatory TLV which indicates
// how long information from the neighbor should be considered
// valid.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/ttl"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/state/ttl"
func (n *Lldp_Interface_NeighborPathAny) Ttl() *Lldp_Interface_Neighbor_TtlPathAny {
	return &Lldp_Interface_Neighbor_TtlPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ttl"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp_Interface_Neighbor_CapabilityPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_CapabilityPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability YANG schema element.
type Lldp_Interface_Neighbor_CapabilityPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_EnabledPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_EnabledPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled YANG schema element.
type Lldp_Interface_Neighbor_Capability_EnabledPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_NamePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Capability_NamePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name YANG schema element.
type Lldp_Interface_Neighbor_Capability_NamePathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/enabled"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPath {
	return &Lldp_Interface_Neighbor_Capability_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Indicates whether the corresponding system capability is
// enabled on the neighbor.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/enabled"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/enabled"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Enabled() *Lldp_Interface_Neighbor_Capability_EnabledPathAny {
	return &Lldp_Interface_Neighbor_Capability_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_CapabilityPath) Name() *Lldp_Interface_Neighbor_Capability_NamePath {
	return &Lldp_Interface_Neighbor_Capability_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the system capability advertised by the neighbor.
// Capabilities are represented in a bitmap that defines the
// primary functions of the system. The capabilities are
// defined in IEEE 802.1AB.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/name"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/capabilities/capability/state/name"
func (n *Lldp_Interface_Neighbor_CapabilityPathAny) Name() *Lldp_Interface_Neighbor_Capability_NamePathAny {
	return &Lldp_Interface_Neighbor_Capability_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lldp_Interface_Neighbor_TlvPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_TlvPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv YANG schema element.
type Lldp_Interface_Neighbor_TlvPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiPath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiPathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiPathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype YANG schema element.
type Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_TypePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type Lldp_Interface_Neighbor_Tlv_TypePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_TypePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type YANG schema element.
type Lldp_Interface_Neighbor_Tlv_TypePathAny struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_ValuePath represents the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type Lldp_Interface_Neighbor_Tlv_ValuePath struct {
	*ygot.NodePath
}

// Lldp_Interface_Neighbor_Tlv_ValuePathAny represents the wildcard version of the /openconfig-lldp/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value YANG schema element.
type Lldp_Interface_Neighbor_Tlv_ValuePathAny struct {
	*ygot.NodePath
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_TlvPath) Oui() *Lldp_Interface_Neighbor_Tlv_OuiPath {
	return &Lldp_Interface_Neighbor_Tlv_OuiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// Oui (leaf): The organizationally unique identifier field shall contain
// the organization's OUI as defined in Clause 9 of IEEE Std
// 802. The high-order octet is 0 and the low-order 3 octets
// are the SMI Network Management Private Enterprise Code of
// the Vendor in network byte order, as defined in the
// 'Assigned Numbers' RFC [RFC3232].
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Oui() *Lldp_Interface_Neighbor_Tlv_OuiPathAny {
	return &Lldp_Interface_Neighbor_Tlv_OuiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui-subtype"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_TlvPath) OuiSubtype() *Lldp_Interface_Neighbor_Tlv_OuiSubtypePath {
	return &Lldp_Interface_Neighbor_Tlv_OuiSubtypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// OuiSubtype (leaf): The organizationally defined subtype field shall contain a
// unique subtype value assigned by the defining organization.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/oui-subtype"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/oui-subtype"
func (n *Lldp_Interface_Neighbor_TlvPathAny) OuiSubtype() *Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny {
	return &Lldp_Interface_Neighbor_Tlv_OuiSubtypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oui-subtype"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *Lldp_Interface_Neighbor_TlvPath) Type() *Lldp_Interface_Neighbor_Tlv_TypePath {
	return &Lldp_Interface_Neighbor_Tlv_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The integer value identifying the type of information
// contained in the value field.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/type"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/type"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Type() *Lldp_Interface_Neighbor_Tlv_TypePathAny {
	return &Lldp_Interface_Neighbor_Tlv_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/value"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_TlvPath) Value() *Lldp_Interface_Neighbor_Tlv_ValuePath {
	return &Lldp_Interface_Neighbor_Tlv_ValuePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// Value (leaf): A variable-length octet-string containing the
// instance-specific information for this TLV.
// ----------------------------------------
// Defining module: "openconfig-lldp"
// Instantiating module: "openconfig-lldp"
// Path from parent: "state/value"
// Path from root: "/lldp/interfaces/interface/neighbors/neighbor/custom-tlvs/tlv/state/value"
func (n *Lldp_Interface_Neighbor_TlvPathAny) Value() *Lldp_Interface_Neighbor_Tlv_ValuePathAny {
	return &Lldp_Interface_Neighbor_Tlv_ValuePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacsecPath represents the /openconfig-macsec/macsec YANG schema element.
type MacsecPath struct {
	*ygot.NodePath
}

// MacsecPathAny represents the wildcard version of the /openconfig-macsec/macsec YANG schema element.
type MacsecPathAny struct {
	*ygot.NodePath
}

// InterfaceAny (list): List of interfaces on which MACsec is enabled / available
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "interfaces/interface"
// Path from root: "/macsec/interfaces/interface"
// Name (wildcarded): string
func (n *MacsecPath) InterfaceAny() *Macsec_InterfacePathAny {
	return &Macsec_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of interfaces on which MACsec is enabled / available
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "interfaces/interface"
// Path from root: "/macsec/interfaces/interface"
// Name (wildcarded): string
func (n *MacsecPathAny) InterfaceAny() *Macsec_InterfacePathAny {
	return &Macsec_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Interface (list): List of interfaces on which MACsec is enabled / available
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "interfaces/interface"
// Path from root: "/macsec/interfaces/interface"
// Name: string
func (n *MacsecPath) Interface(Name string) *Macsec_InterfacePath {
	return &Macsec_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Interface (list): List of interfaces on which MACsec is enabled / available
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "interfaces/interface"
// Path from root: "/macsec/interfaces/interface"
// Name: string
func (n *MacsecPathAny) Interface(Name string) *Macsec_InterfacePathAny {
	return &Macsec_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Mka (container): The MKA
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "mka"
// Path from root: "/macsec/mka"
func (n *MacsecPath) Mka() *Macsec_MkaPath {
	return &Macsec_MkaPath{
		NodePath: ygot.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mka (container): The MKA
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "mka"
// Path from root: "/macsec/mka"
func (n *MacsecPathAny) Mka() *Macsec_MkaPathAny {
	return &Macsec_MkaPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_InterfacePath represents the /openconfig-macsec/macsec/interfaces/interface YANG schema element.
type Macsec_InterfacePath struct {
	*ygot.NodePath
}

// Macsec_InterfacePathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface YANG schema element.
type Macsec_InterfacePathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_EnablePath represents the /openconfig-macsec/macsec/interfaces/interface/config/enable YANG schema element.
type Macsec_Interface_EnablePath struct {
	*ygot.NodePath
}

// Macsec_Interface_EnablePathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/config/enable YANG schema element.
type Macsec_Interface_EnablePathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_NamePath represents the /openconfig-macsec/macsec/interfaces/interface/config/name YANG schema element.
type Macsec_Interface_NamePath struct {
	*ygot.NodePath
}

// Macsec_Interface_NamePathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/config/name YANG schema element.
type Macsec_Interface_NamePathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ReplayProtectionPath represents the /openconfig-macsec/macsec/interfaces/interface/config/replay-protection YANG schema element.
type Macsec_Interface_ReplayProtectionPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ReplayProtectionPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/config/replay-protection YANG schema element.
type Macsec_Interface_ReplayProtectionPathAny struct {
	*ygot.NodePath
}

// Counters (container): MACsec interface counters
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/state/counters"
func (n *Macsec_InterfacePath) Counters() *Macsec_Interface_CountersPath {
	return &Macsec_Interface_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): MACsec interface counters
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/state/counters"
func (n *Macsec_InterfacePathAny) Counters() *Macsec_Interface_CountersPathAny {
	return &Macsec_Interface_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable MACsec on an interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/enable"
// Path from root: "/macsec/interfaces/interface/config/enable"
func (n *Macsec_InterfacePath) Enable() *Macsec_Interface_EnablePath {
	return &Macsec_Interface_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable MACsec on an interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/enable"
// Path from root: "/macsec/interfaces/interface/config/enable"
func (n *Macsec_InterfacePathAny) Enable() *Macsec_Interface_EnablePathAny {
	return &Macsec_Interface_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mka (container): Enclosing container for the MKA interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "mka"
// Path from root: "/macsec/interfaces/interface/mka"
func (n *Macsec_InterfacePath) Mka() *Macsec_Interface_MkaPath {
	return &Macsec_Interface_MkaPath{
		NodePath: ygot.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mka (container): Enclosing container for the MKA interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "mka"
// Path from root: "/macsec/interfaces/interface/mka"
func (n *Macsec_InterfacePathAny) Mka() *Macsec_Interface_MkaPathAny {
	return &Macsec_Interface_MkaPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mka"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the MACsec Ethernet interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/name"
// Path from root: "/macsec/interfaces/interface/config/name"
func (n *Macsec_InterfacePath) Name() *Macsec_Interface_NamePath {
	return &Macsec_Interface_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Reference to the MACsec Ethernet interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/name"
// Path from root: "/macsec/interfaces/interface/config/name"
func (n *Macsec_InterfacePathAny) Name() *Macsec_Interface_NamePathAny {
	return &Macsec_Interface_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplayProtection (leaf): MACsec window size, as defined by the number of out-of-order frames
// that are accepted. A value of 0 means that frames are accepted only in
// the correct order.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/replay-protection"
// Path from root: "/macsec/interfaces/interface/config/replay-protection"
func (n *Macsec_InterfacePath) ReplayProtection() *Macsec_Interface_ReplayProtectionPath {
	return &Macsec_Interface_ReplayProtectionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "replay-protection"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplayProtection (leaf): MACsec window size, as defined by the number of out-of-order frames
// that are accepted. A value of 0 means that frames are accepted only in
// the correct order.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/replay-protection"
// Path from root: "/macsec/interfaces/interface/config/replay-protection"
func (n *Macsec_InterfacePathAny) ReplayProtection() *Macsec_Interface_ReplayProtectionPathAny {
	return &Macsec_Interface_ReplayProtectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "replay-protection"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScsaRxAny (list): RX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-rx/scsa-rx"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx"
// SciRx (wildcarded): string
func (n *Macsec_InterfacePath) ScsaRxAny() *Macsec_Interface_ScsaRxPathAny {
	return &Macsec_Interface_ScsaRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": "*"},
			n,
		),
	}
}

// ScsaRxAny (list): RX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-rx/scsa-rx"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx"
// SciRx (wildcarded): string
func (n *Macsec_InterfacePathAny) ScsaRxAny() *Macsec_Interface_ScsaRxPathAny {
	return &Macsec_Interface_ScsaRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": "*"},
			n,
		),
	}
}

// ScsaRx (list): RX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-rx/scsa-rx"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx"
// SciRx: string
func (n *Macsec_InterfacePath) ScsaRx(SciRx string) *Macsec_Interface_ScsaRxPath {
	return &Macsec_Interface_ScsaRxPath{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": SciRx},
			n,
		),
	}
}

// ScsaRx (list): RX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-rx/scsa-rx"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx"
// SciRx: string
func (n *Macsec_InterfacePathAny) ScsaRx(SciRx string) *Macsec_Interface_ScsaRxPathAny {
	return &Macsec_Interface_ScsaRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-rx", "scsa-rx"},
			map[string]interface{}{"sci-rx": SciRx},
			n,
		),
	}
}

// ScsaTxAny (list): TX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-tx/scsa-tx"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx"
// SciTx (wildcarded): string
func (n *Macsec_InterfacePath) ScsaTxAny() *Macsec_Interface_ScsaTxPathAny {
	return &Macsec_Interface_ScsaTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": "*"},
			n,
		),
	}
}

// ScsaTxAny (list): TX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-tx/scsa-tx"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx"
// SciTx (wildcarded): string
func (n *Macsec_InterfacePathAny) ScsaTxAny() *Macsec_Interface_ScsaTxPathAny {
	return &Macsec_Interface_ScsaTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": "*"},
			n,
		),
	}
}

// ScsaTx (list): TX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-tx/scsa-tx"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx"
// SciTx: string
func (n *Macsec_InterfacePath) ScsaTx(SciTx string) *Macsec_Interface_ScsaTxPath {
	return &Macsec_Interface_ScsaTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": SciTx},
			n,
		),
	}
}

// ScsaTx (list): TX Secure Channel and Secure Association Statistics
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "scsa-tx/scsa-tx"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx"
// SciTx: string
func (n *Macsec_InterfacePathAny) ScsaTx(SciTx string) *Macsec_Interface_ScsaTxPathAny {
	return &Macsec_Interface_ScsaTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"scsa-tx", "scsa-tx"},
			map[string]interface{}{"sci-tx": SciTx},
			n,
		),
	}
}

// Macsec_Interface_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters YANG schema element.
type Macsec_Interface_CountersPath struct {
	*ygot.NodePath
}

// Macsec_Interface_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters YANG schema element.
type Macsec_Interface_CountersPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxBadtagPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-badtag-pkts YANG schema element.
type Macsec_Interface_Counters_RxBadtagPktsPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxBadtagPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-badtag-pkts YANG schema element.
type Macsec_Interface_Counters_RxBadtagPktsPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxNosciPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-nosci-pkts YANG schema element.
type Macsec_Interface_Counters_RxNosciPktsPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxNosciPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-nosci-pkts YANG schema element.
type Macsec_Interface_Counters_RxNosciPktsPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxUnknownsciPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts YANG schema element.
type Macsec_Interface_Counters_RxUnknownsciPktsPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxUnknownsciPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts YANG schema element.
type Macsec_Interface_Counters_RxUnknownsciPktsPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxUntaggedPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_RxUntaggedPktsPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_RxUntaggedPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/rx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_RxUntaggedPktsPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_TxUntaggedPktsPath represents the /openconfig-macsec/macsec/interfaces/interface/state/counters/tx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_TxUntaggedPktsPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Counters_TxUntaggedPktsPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/state/counters/tx-untagged-pkts YANG schema element.
type Macsec_Interface_Counters_TxUntaggedPktsPathAny struct {
	*ygot.NodePath
}

// RxBadtagPkts (leaf): MACsec interface level Receive Bad Tag Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet has incorrect MACsec tag.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-badtag-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-badtag-pkts"
func (n *Macsec_Interface_CountersPath) RxBadtagPkts() *Macsec_Interface_Counters_RxBadtagPktsPath {
	return &Macsec_Interface_Counters_RxBadtagPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"rx-badtag-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RxBadtagPkts (leaf): MACsec interface level Receive Bad Tag Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet has incorrect MACsec tag.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-badtag-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-badtag-pkts"
func (n *Macsec_Interface_CountersPathAny) RxBadtagPkts() *Macsec_Interface_Counters_RxBadtagPktsPathAny {
	return &Macsec_Interface_Counters_RxBadtagPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rx-badtag-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RxNosciPkts (leaf): MACsec interface level Receive No SCI Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet does not have SCI field in MACsec tag.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-nosci-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-nosci-pkts"
func (n *Macsec_Interface_CountersPath) RxNosciPkts() *Macsec_Interface_Counters_RxNosciPktsPath {
	return &Macsec_Interface_Counters_RxNosciPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"rx-nosci-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RxNosciPkts (leaf): MACsec interface level Receive No SCI Packets counter.
// This counter will increment if MACsec is enabled on interface and
// incoming packet does not have SCI field in MACsec tag.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-nosci-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-nosci-pkts"
func (n *Macsec_Interface_CountersPathAny) RxNosciPkts() *Macsec_Interface_Counters_RxNosciPktsPathAny {
	return &Macsec_Interface_Counters_RxNosciPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rx-nosci-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RxUnknownsciPkts (leaf): MACsec interface level Receive Unknown SCI Packets counter.
// This counter will increment if MACsec is enabled on the interface and
// SCI present in the MACsec tag of the incoming packet does not match any
// SCI present in ingress SCI table.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-unknownsci-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts"
func (n *Macsec_Interface_CountersPath) RxUnknownsciPkts() *Macsec_Interface_Counters_RxUnknownsciPktsPath {
	return &Macsec_Interface_Counters_RxUnknownsciPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"rx-unknownsci-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RxUnknownsciPkts (leaf): MACsec interface level Receive Unknown SCI Packets counter.
// This counter will increment if MACsec is enabled on the interface and
// SCI present in the MACsec tag of the incoming packet does not match any
// SCI present in ingress SCI table.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-unknownsci-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-unknownsci-pkts"
func (n *Macsec_Interface_CountersPathAny) RxUnknownsciPkts() *Macsec_Interface_Counters_RxUnknownsciPktsPathAny {
	return &Macsec_Interface_Counters_RxUnknownsciPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rx-unknownsci-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RxUntaggedPkts (leaf): MACsec interface level Receive untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// incoming packet does not have MACsec tag.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-untagged-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-untagged-pkts"
func (n *Macsec_Interface_CountersPath) RxUntaggedPkts() *Macsec_Interface_Counters_RxUntaggedPktsPath {
	return &Macsec_Interface_Counters_RxUntaggedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"rx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// RxUntaggedPkts (leaf): MACsec interface level Receive untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// incoming packet does not have MACsec tag.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "rx-untagged-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/rx-untagged-pkts"
func (n *Macsec_Interface_CountersPathAny) RxUntaggedPkts() *Macsec_Interface_Counters_RxUntaggedPktsPathAny {
	return &Macsec_Interface_Counters_RxUntaggedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"rx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// TxUntaggedPkts (leaf): MACsec interface level Transmit untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// outgoing packet is not tagged with MACsec header.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "tx-untagged-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/tx-untagged-pkts"
func (n *Macsec_Interface_CountersPath) TxUntaggedPkts() *Macsec_Interface_Counters_TxUntaggedPktsPath {
	return &Macsec_Interface_Counters_TxUntaggedPktsPath{
		NodePath: ygot.NewNodePath(
			[]string{"tx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// TxUntaggedPkts (leaf): MACsec interface level Transmit untagged Packets counter.
// This counter will increment if MACsec is enabled on interface and the
// outgoing packet is not tagged with MACsec header.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "tx-untagged-pkts"
// Path from root: "/macsec/interfaces/interface/state/counters/tx-untagged-pkts"
func (n *Macsec_Interface_CountersPathAny) TxUntaggedPkts() *Macsec_Interface_Counters_TxUntaggedPktsPathAny {
	return &Macsec_Interface_Counters_TxUntaggedPktsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tx-untagged-pkts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_Interface_MkaPath represents the /openconfig-macsec/macsec/interfaces/interface/mka YANG schema element.
type Macsec_Interface_MkaPath struct {
	*ygot.NodePath
}

// Macsec_Interface_MkaPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka YANG schema element.
type Macsec_Interface_MkaPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_KeyChainPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/config/key-chain YANG schema element.
type Macsec_Interface_Mka_KeyChainPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_KeyChainPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/config/key-chain YANG schema element.
type Macsec_Interface_Mka_KeyChainPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_MkaPolicyPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/config/mka-policy YANG schema element.
type Macsec_Interface_Mka_MkaPolicyPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_MkaPolicyPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/config/mka-policy YANG schema element.
type Macsec_Interface_Mka_MkaPolicyPathAny struct {
	*ygot.NodePath
}

// Counters (container): MKA interface counters
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/mka/state/counters"
func (n *Macsec_Interface_MkaPath) Counters() *Macsec_Interface_Mka_CountersPath {
	return &Macsec_Interface_Mka_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): MKA interface counters
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/mka/state/counters"
func (n *Macsec_Interface_MkaPathAny) Counters() *Macsec_Interface_Mka_CountersPathAny {
	return &Macsec_Interface_Mka_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyChain (leaf): Configure Key Chain name
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/key-chain"
// Path from root: "/macsec/interfaces/interface/mka/config/key-chain"
func (n *Macsec_Interface_MkaPath) KeyChain() *Macsec_Interface_Mka_KeyChainPath {
	return &Macsec_Interface_Mka_KeyChainPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-chain"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyChain (leaf): Configure Key Chain name
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/key-chain"
// Path from root: "/macsec/interfaces/interface/mka/config/key-chain"
func (n *Macsec_Interface_MkaPathAny) KeyChain() *Macsec_Interface_Mka_KeyChainPathAny {
	return &Macsec_Interface_Mka_KeyChainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-chain"},
			map[string]interface{}{},
			n,
		),
	}
}

// MkaPolicy (leaf): Apply MKA policy on the interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/mka-policy"
// Path from root: "/macsec/interfaces/interface/mka/config/mka-policy"
func (n *Macsec_Interface_MkaPath) MkaPolicy() *Macsec_Interface_Mka_MkaPolicyPath {
	return &Macsec_Interface_Mka_MkaPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mka-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// MkaPolicy (leaf): Apply MKA policy on the interface
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/mka-policy"
// Path from root: "/macsec/interfaces/interface/mka/config/mka-policy"
func (n *Macsec_Interface_MkaPathAny) MkaPolicy() *Macsec_Interface_Mka_MkaPolicyPathAny {
	return &Macsec_Interface_Mka_MkaPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mka-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_Interface_Mka_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters YANG schema element.
type Macsec_Interface_Mka_CountersPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters YANG schema element.
type Macsec_Interface_Mka_CountersPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_InCakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InCakMkpduPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_InCakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InCakMkpduPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_InMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InMkpduPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_InMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InMkpduPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_InSakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InSakMkpduPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_InSakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_InSakMkpduPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_OutCakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutCakMkpduPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_OutCakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutCakMkpduPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_OutMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutMkpduPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_OutMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutMkpduPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_OutSakMkpduPath represents the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutSakMkpduPath struct {
	*ygot.NodePath
}

// Macsec_Interface_Mka_Counters_OutSakMkpduPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu YANG schema element.
type Macsec_Interface_Mka_Counters_OutSakMkpduPathAny struct {
	*ygot.NodePath
}

// InCakMkpdu (leaf): Validated MKPDU received CAK count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-cak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) InCakMkpdu() *Macsec_Interface_Mka_Counters_InCakMkpduPath {
	return &Macsec_Interface_Mka_Counters_InCakMkpduPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// InCakMkpdu (leaf): Validated MKPDU received CAK count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-cak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/in-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) InCakMkpdu() *Macsec_Interface_Mka_Counters_InCakMkpduPathAny {
	return &Macsec_Interface_Mka_Counters_InCakMkpduPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpdu (leaf): Validated MKPDU received count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/in-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) InMkpdu() *Macsec_Interface_Mka_Counters_InMkpduPath {
	return &Macsec_Interface_Mka_Counters_InMkpduPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpdu (leaf): Validated MKPDU received count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/in-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) InMkpdu() *Macsec_Interface_Mka_Counters_InMkpduPathAny {
	return &Macsec_Interface_Mka_Counters_InMkpduPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSakMkpdu (leaf): Validated MKPDU received SAK count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-sak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) InSakMkpdu() *Macsec_Interface_Mka_Counters_InSakMkpduPath {
	return &Macsec_Interface_Mka_Counters_InSakMkpduPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// InSakMkpdu (leaf): Validated MKPDU received SAK count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-sak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/in-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) InSakMkpdu() *Macsec_Interface_Mka_Counters_InSakMkpduPathAny {
	return &Macsec_Interface_Mka_Counters_InSakMkpduPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutCakMkpdu (leaf): MKPDU CAK sent count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-cak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) OutCakMkpdu() *Macsec_Interface_Mka_Counters_OutCakMkpduPath {
	return &Macsec_Interface_Mka_Counters_OutCakMkpduPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutCakMkpdu (leaf): MKPDU CAK sent count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-cak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/out-cak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) OutCakMkpdu() *Macsec_Interface_Mka_Counters_OutCakMkpduPathAny {
	return &Macsec_Interface_Mka_Counters_OutCakMkpduPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-cak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMkpdu (leaf): MKPDU sent count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/out-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) OutMkpdu() *Macsec_Interface_Mka_Counters_OutMkpduPath {
	return &Macsec_Interface_Mka_Counters_OutMkpduPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMkpdu (leaf): MKPDU sent count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/out-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) OutMkpdu() *Macsec_Interface_Mka_Counters_OutMkpduPathAny {
	return &Macsec_Interface_Mka_Counters_OutMkpduPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutSakMkpdu (leaf): MKPDU SAK sent count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-sak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPath) OutSakMkpdu() *Macsec_Interface_Mka_Counters_OutSakMkpduPath {
	return &Macsec_Interface_Mka_Counters_OutSakMkpduPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutSakMkpdu (leaf): MKPDU SAK sent count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-sak-mkpdu"
// Path from root: "/macsec/interfaces/interface/mka/state/counters/out-sak-mkpdu"
func (n *Macsec_Interface_Mka_CountersPathAny) OutSakMkpdu() *Macsec_Interface_Mka_Counters_OutSakMkpduPathAny {
	return &Macsec_Interface_Mka_Counters_OutSakMkpduPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-sak-mkpdu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_Interface_ScsaRxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx YANG schema element.
type Macsec_Interface_ScsaRxPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx YANG schema element.
type Macsec_Interface_ScsaRxPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_SciRxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx YANG schema element.
type Macsec_Interface_ScsaRx_SciRxPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_SciRxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx YANG schema element.
type Macsec_Interface_ScsaRx_SciRxPathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters container for macsec-scsa-rx-interface-stats
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters"
func (n *Macsec_Interface_ScsaRxPath) Counters() *Macsec_Interface_ScsaRx_CountersPath {
	return &Macsec_Interface_ScsaRx_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters container for macsec-scsa-rx-interface-stats
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters"
func (n *Macsec_Interface_ScsaRxPathAny) Counters() *Macsec_Interface_ScsaRx_CountersPathAny {
	return &Macsec_Interface_ScsaRx_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// SciRx (leaf): Secure Channel Identifier.
// Every Receive Channel is uniquely identified using this field.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/sci-rx"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx"
func (n *Macsec_Interface_ScsaRxPath) SciRx() *Macsec_Interface_ScsaRx_SciRxPath {
	return &Macsec_Interface_ScsaRx_SciRxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sci-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// SciRx (leaf): Secure Channel Identifier.
// Every Receive Channel is uniquely identified using this field.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/sci-rx"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/sci-rx"
func (n *Macsec_Interface_ScsaRxPathAny) SciRx() *Macsec_Interface_ScsaRx_SciRxPathAny {
	return &Macsec_Interface_ScsaRx_SciRxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sci-rx"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_Interface_ScsaRx_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters YANG schema element.
type Macsec_Interface_ScsaRx_CountersPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters YANG schema element.
type Macsec_Interface_ScsaRx_CountersPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_SaInvalidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaInvalidPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_SaValidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaValidPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_SaValidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_SaValidPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_ScInvalidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScInvalidPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_ScValidPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScValidPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaRx_Counters_ScValidPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid YANG schema element.
type Macsec_Interface_ScsaRx_Counters_ScValidPathAny struct {
	*ygot.NodePath
}

// SaInvalid (leaf): Invalid Secure Association RX Packets counter.
// This counter reflects the number of integrity check fails for received
// packets in a secure association.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-invalid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPath) SaInvalid() *Macsec_Interface_ScsaRx_Counters_SaInvalidPath {
	return &Macsec_Interface_ScsaRx_Counters_SaInvalidPath{
		NodePath: ygot.NewNodePath(
			[]string{"sa-invalid"},
			map[string]interface{}{},
			n,
		),
	}
}

// SaInvalid (leaf): Invalid Secure Association RX Packets counter.
// This counter reflects the number of integrity check fails for received
// packets in a secure association.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-invalid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) SaInvalid() *Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny {
	return &Macsec_Interface_ScsaRx_Counters_SaInvalidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sa-invalid"},
			map[string]interface{}{},
			n,
		),
	}
}

// SaValid (leaf): Secure Association Valid RX Packets counter.
// This counter reflects the number of packets in a secure association
// that passed integrity check.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-valid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid"
func (n *Macsec_Interface_ScsaRx_CountersPath) SaValid() *Macsec_Interface_ScsaRx_Counters_SaValidPath {
	return &Macsec_Interface_ScsaRx_Counters_SaValidPath{
		NodePath: ygot.NewNodePath(
			[]string{"sa-valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// SaValid (leaf): Secure Association Valid RX Packets counter.
// This counter reflects the number of packets in a secure association
// that passed integrity check.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-valid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sa-valid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) SaValid() *Macsec_Interface_ScsaRx_Counters_SaValidPathAny {
	return &Macsec_Interface_ScsaRx_Counters_SaValidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sa-valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScInvalid (leaf): Invalid Secure Channel RX Packets counter.
// This counter reflects the number of invalid received packets in a
// secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-invalid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPath) ScInvalid() *Macsec_Interface_ScsaRx_Counters_ScInvalidPath {
	return &Macsec_Interface_ScsaRx_Counters_ScInvalidPath{
		NodePath: ygot.NewNodePath(
			[]string{"sc-invalid"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScInvalid (leaf): Invalid Secure Channel RX Packets counter.
// This counter reflects the number of invalid received packets in a
// secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-invalid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-invalid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) ScInvalid() *Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny {
	return &Macsec_Interface_ScsaRx_Counters_ScInvalidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sc-invalid"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScValid (leaf): Valid Secure Channel RX Packets counter.
// This counter reflects the number of valid received packets in a
// secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-valid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid"
func (n *Macsec_Interface_ScsaRx_CountersPath) ScValid() *Macsec_Interface_ScsaRx_Counters_ScValidPath {
	return &Macsec_Interface_ScsaRx_Counters_ScValidPath{
		NodePath: ygot.NewNodePath(
			[]string{"sc-valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScValid (leaf): Valid Secure Channel RX Packets counter.
// This counter reflects the number of valid received packets in a
// secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-valid"
// Path from root: "/macsec/interfaces/interface/scsa-rx/scsa-rx/state/counters/sc-valid"
func (n *Macsec_Interface_ScsaRx_CountersPathAny) ScValid() *Macsec_Interface_ScsaRx_Counters_ScValidPathAny {
	return &Macsec_Interface_ScsaRx_Counters_ScValidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sc-valid"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_Interface_ScsaTxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx YANG schema element.
type Macsec_Interface_ScsaTxPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx YANG schema element.
type Macsec_Interface_ScsaTxPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_SciTxPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx YANG schema element.
type Macsec_Interface_ScsaTx_SciTxPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_SciTxPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx YANG schema element.
type Macsec_Interface_ScsaTx_SciTxPathAny struct {
	*ygot.NodePath
}

// Counters (container): Counters container for macsec-scsa-tx-interface-stats
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters"
func (n *Macsec_Interface_ScsaTxPath) Counters() *Macsec_Interface_ScsaTx_CountersPath {
	return &Macsec_Interface_ScsaTx_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Counters container for macsec-scsa-tx-interface-stats
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters"
func (n *Macsec_Interface_ScsaTxPathAny) Counters() *Macsec_Interface_ScsaTx_CountersPathAny {
	return &Macsec_Interface_ScsaTx_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// SciTx (leaf): Secure Channel Identifier.
// Every Transmit Channel is uniquely identified using this field.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/sci-tx"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx"
func (n *Macsec_Interface_ScsaTxPath) SciTx() *Macsec_Interface_ScsaTx_SciTxPath {
	return &Macsec_Interface_ScsaTx_SciTxPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sci-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// SciTx (leaf): Secure Channel Identifier.
// Every Transmit Channel is uniquely identified using this field.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/sci-tx"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/sci-tx"
func (n *Macsec_Interface_ScsaTxPathAny) SciTx() *Macsec_Interface_ScsaTx_SciTxPathAny {
	return &Macsec_Interface_ScsaTx_SciTxPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sci-tx"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_Interface_ScsaTx_CountersPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters YANG schema element.
type Macsec_Interface_ScsaTx_CountersPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters YANG schema element.
type Macsec_Interface_ScsaTx_CountersPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_SaEncryptedPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaEncryptedPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_ScEncryptedPath represents the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScEncryptedPath struct {
	*ygot.NodePath
}

// Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny represents the wildcard version of the /openconfig-macsec/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted YANG schema element.
type Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny struct {
	*ygot.NodePath
}

// SaAuthOnly (leaf): Secure Association Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only, transmitted
// packets in a secure association.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-auth-only"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPath) SaAuthOnly() *Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath {
	return &Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPath{
		NodePath: ygot.NewNodePath(
			[]string{"sa-auth-only"},
			map[string]interface{}{},
			n,
		),
	}
}

// SaAuthOnly (leaf): Secure Association Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only, transmitted
// packets in a secure association.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-auth-only"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) SaAuthOnly() *Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny {
	return &Macsec_Interface_ScsaTx_Counters_SaAuthOnlyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sa-auth-only"},
			map[string]interface{}{},
			n,
		),
	}
}

// SaEncrypted (leaf): Secure Association Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure association.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-encrypted"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPath) SaEncrypted() *Macsec_Interface_ScsaTx_Counters_SaEncryptedPath {
	return &Macsec_Interface_ScsaTx_Counters_SaEncryptedPath{
		NodePath: ygot.NewNodePath(
			[]string{"sa-encrypted"},
			map[string]interface{}{},
			n,
		),
	}
}

// SaEncrypted (leaf): Secure Association Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure association.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sa-encrypted"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sa-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) SaEncrypted() *Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny {
	return &Macsec_Interface_ScsaTx_Counters_SaEncryptedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sa-encrypted"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScAuthOnly (leaf): Secure Channel Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only transmitted
// packets in a secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-auth-only"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPath) ScAuthOnly() *Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath {
	return &Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPath{
		NodePath: ygot.NewNodePath(
			[]string{"sc-auth-only"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScAuthOnly (leaf): Secure Channel Authenticated only TX Packets counter.
// This counter reflects the number of authenticated only transmitted
// packets in a secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-auth-only"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-auth-only"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) ScAuthOnly() *Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny {
	return &Macsec_Interface_ScsaTx_Counters_ScAuthOnlyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sc-auth-only"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScEncrypted (leaf): Secure Channel Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-encrypted"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPath) ScEncrypted() *Macsec_Interface_ScsaTx_Counters_ScEncryptedPath {
	return &Macsec_Interface_ScsaTx_Counters_ScEncryptedPath{
		NodePath: ygot.NewNodePath(
			[]string{"sc-encrypted"},
			map[string]interface{}{},
			n,
		),
	}
}

// ScEncrypted (leaf): Secure Channel Encrypted TX Packets counter.
// This counter reflects the number of encrypted and authenticated
// transmitted packets in a secure channel.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sc-encrypted"
// Path from root: "/macsec/interfaces/interface/scsa-tx/scsa-tx/state/counters/sc-encrypted"
func (n *Macsec_Interface_ScsaTx_CountersPathAny) ScEncrypted() *Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny {
	return &Macsec_Interface_ScsaTx_Counters_ScEncryptedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sc-encrypted"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_MkaPath represents the /openconfig-macsec/macsec/mka YANG schema element.
type Macsec_MkaPath struct {
	*ygot.NodePath
}

// Macsec_MkaPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka YANG schema element.
type Macsec_MkaPathAny struct {
	*ygot.NodePath
}

// Counters (container): MKA global counters
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/mka/state/counters"
func (n *Macsec_MkaPath) Counters() *Macsec_Mka_CountersPath {
	return &Macsec_Mka_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): MKA global counters
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "state/counters"
// Path from root: "/macsec/mka/state/counters"
func (n *Macsec_MkaPathAny) Counters() *Macsec_Mka_CountersPathAny {
	return &Macsec_Mka_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyAny (list): List of MKA policies
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "policies/policy"
// Path from root: "/macsec/mka/policies/policy"
// Name (wildcarded): string
func (n *Macsec_MkaPath) PolicyAny() *Macsec_Mka_PolicyPathAny {
	return &Macsec_Mka_PolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// PolicyAny (list): List of MKA policies
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "policies/policy"
// Path from root: "/macsec/mka/policies/policy"
// Name (wildcarded): string
func (n *Macsec_MkaPathAny) PolicyAny() *Macsec_Mka_PolicyPathAny {
	return &Macsec_Mka_PolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Policy (list): List of MKA policies
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "policies/policy"
// Path from root: "/macsec/mka/policies/policy"
// Name: string
func (n *Macsec_MkaPath) Policy(Name string) *Macsec_Mka_PolicyPath {
	return &Macsec_Mka_PolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Policy (list): List of MKA policies
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "policies/policy"
// Path from root: "/macsec/mka/policies/policy"
// Name: string
func (n *Macsec_MkaPathAny) Policy(Name string) *Macsec_Mka_PolicyPathAny {
	return &Macsec_Mka_PolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Macsec_Mka_CountersPath represents the /openconfig-macsec/macsec/mka/state/counters YANG schema element.
type Macsec_Mka_CountersPath struct {
	*ygot.NodePath
}

// Macsec_Mka_CountersPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters YANG schema element.
type Macsec_Mka_CountersPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduBadPeerErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-bad-peer-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduBadPeerErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-bad-peer-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-icv-verification-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-icv-verification-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduPeerListErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-peer-list-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduPeerListErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-peer-list-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduValidationErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-validation-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduValidationErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_InMkpduValidationErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/in-mkpdu-validation-errors YANG schema element.
type Macsec_Mka_Counters_InMkpduValidationErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_OutMkpduErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/out-mkpdu-errors YANG schema element.
type Macsec_Mka_Counters_OutMkpduErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_OutMkpduErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/out-mkpdu-errors YANG schema element.
type Macsec_Mka_Counters_OutMkpduErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakCipherMismatchErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-cipher-mismatch-errors YANG schema element.
type Macsec_Mka_Counters_SakCipherMismatchErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-cipher-mismatch-errors YANG schema element.
type Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakDecryptionErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-decryption-errors YANG schema element.
type Macsec_Mka_Counters_SakDecryptionErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakDecryptionErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-decryption-errors YANG schema element.
type Macsec_Mka_Counters_SakDecryptionErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakEncryptionErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-encryption-errors YANG schema element.
type Macsec_Mka_Counters_SakEncryptionErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakEncryptionErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-encryption-errors YANG schema element.
type Macsec_Mka_Counters_SakEncryptionErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakGenerationErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-generation-errors YANG schema element.
type Macsec_Mka_Counters_SakGenerationErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakGenerationErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-generation-errors YANG schema element.
type Macsec_Mka_Counters_SakGenerationErrorsPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakHashErrorsPath represents the /openconfig-macsec/macsec/mka/state/counters/sak-hash-errors YANG schema element.
type Macsec_Mka_Counters_SakHashErrorsPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Counters_SakHashErrorsPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/state/counters/sak-hash-errors YANG schema element.
type Macsec_Mka_Counters_SakHashErrorsPathAny struct {
	*ygot.NodePath
}

// InMkpduBadPeerErrors (leaf): MKPDU RX bad peer message number error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-bad-peer-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-bad-peer-errors"
func (n *Macsec_Mka_CountersPath) InMkpduBadPeerErrors() *Macsec_Mka_Counters_InMkpduBadPeerErrorsPath {
	return &Macsec_Mka_Counters_InMkpduBadPeerErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-bad-peer-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpduBadPeerErrors (leaf): MKPDU RX bad peer message number error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-bad-peer-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-bad-peer-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduBadPeerErrors() *Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny {
	return &Macsec_Mka_Counters_InMkpduBadPeerErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-bad-peer-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpduIcvVerificationErrors (leaf): MKPDU RX ICV verification error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-icv-verification-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-icv-verification-errors"
func (n *Macsec_Mka_CountersPath) InMkpduIcvVerificationErrors() *Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath {
	return &Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-icv-verification-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpduIcvVerificationErrors (leaf): MKPDU RX ICV verification error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-icv-verification-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-icv-verification-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduIcvVerificationErrors() *Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny {
	return &Macsec_Mka_Counters_InMkpduIcvVerificationErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-icv-verification-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpduPeerListErrors (leaf): MKPDU RX non-recent peer list Message Number error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-peer-list-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-peer-list-errors"
func (n *Macsec_Mka_CountersPath) InMkpduPeerListErrors() *Macsec_Mka_Counters_InMkpduPeerListErrorsPath {
	return &Macsec_Mka_Counters_InMkpduPeerListErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-peer-list-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpduPeerListErrors (leaf): MKPDU RX non-recent peer list Message Number error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-peer-list-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-peer-list-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduPeerListErrors() *Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny {
	return &Macsec_Mka_Counters_InMkpduPeerListErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-peer-list-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpduValidationErrors (leaf): MKPDU RX validation error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-validation-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-validation-errors"
func (n *Macsec_Mka_CountersPath) InMkpduValidationErrors() *Macsec_Mka_Counters_InMkpduValidationErrorsPath {
	return &Macsec_Mka_Counters_InMkpduValidationErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-validation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// InMkpduValidationErrors (leaf): MKPDU RX validation error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "in-mkpdu-validation-errors"
// Path from root: "/macsec/mka/state/counters/in-mkpdu-validation-errors"
func (n *Macsec_Mka_CountersPathAny) InMkpduValidationErrors() *Macsec_Mka_Counters_InMkpduValidationErrorsPathAny {
	return &Macsec_Mka_Counters_InMkpduValidationErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"in-mkpdu-validation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMkpduErrors (leaf): MKPDU TX error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-mkpdu-errors"
// Path from root: "/macsec/mka/state/counters/out-mkpdu-errors"
func (n *Macsec_Mka_CountersPath) OutMkpduErrors() *Macsec_Mka_Counters_OutMkpduErrorsPath {
	return &Macsec_Mka_Counters_OutMkpduErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"out-mkpdu-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// OutMkpduErrors (leaf): MKPDU TX error count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "out-mkpdu-errors"
// Path from root: "/macsec/mka/state/counters/out-mkpdu-errors"
func (n *Macsec_Mka_CountersPathAny) OutMkpduErrors() *Macsec_Mka_Counters_OutMkpduErrorsPathAny {
	return &Macsec_Mka_Counters_OutMkpduErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"out-mkpdu-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakCipherMismatchErrors (leaf): MKA error SAK cipher mismatch count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-cipher-mismatch-errors"
// Path from root: "/macsec/mka/state/counters/sak-cipher-mismatch-errors"
func (n *Macsec_Mka_CountersPath) SakCipherMismatchErrors() *Macsec_Mka_Counters_SakCipherMismatchErrorsPath {
	return &Macsec_Mka_Counters_SakCipherMismatchErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"sak-cipher-mismatch-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakCipherMismatchErrors (leaf): MKA error SAK cipher mismatch count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-cipher-mismatch-errors"
// Path from root: "/macsec/mka/state/counters/sak-cipher-mismatch-errors"
func (n *Macsec_Mka_CountersPathAny) SakCipherMismatchErrors() *Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny {
	return &Macsec_Mka_Counters_SakCipherMismatchErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sak-cipher-mismatch-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakDecryptionErrors (leaf): MKA error SAK decryption/unwrap count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-decryption-errors"
// Path from root: "/macsec/mka/state/counters/sak-decryption-errors"
func (n *Macsec_Mka_CountersPath) SakDecryptionErrors() *Macsec_Mka_Counters_SakDecryptionErrorsPath {
	return &Macsec_Mka_Counters_SakDecryptionErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"sak-decryption-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakDecryptionErrors (leaf): MKA error SAK decryption/unwrap count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-decryption-errors"
// Path from root: "/macsec/mka/state/counters/sak-decryption-errors"
func (n *Macsec_Mka_CountersPathAny) SakDecryptionErrors() *Macsec_Mka_Counters_SakDecryptionErrorsPathAny {
	return &Macsec_Mka_Counters_SakDecryptionErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sak-decryption-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakEncryptionErrors (leaf): MKA error SAK encryption/wrap count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-encryption-errors"
// Path from root: "/macsec/mka/state/counters/sak-encryption-errors"
func (n *Macsec_Mka_CountersPath) SakEncryptionErrors() *Macsec_Mka_Counters_SakEncryptionErrorsPath {
	return &Macsec_Mka_Counters_SakEncryptionErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"sak-encryption-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakEncryptionErrors (leaf): MKA error SAK encryption/wrap count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-encryption-errors"
// Path from root: "/macsec/mka/state/counters/sak-encryption-errors"
func (n *Macsec_Mka_CountersPathAny) SakEncryptionErrors() *Macsec_Mka_Counters_SakEncryptionErrorsPathAny {
	return &Macsec_Mka_Counters_SakEncryptionErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sak-encryption-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakGenerationErrors (leaf): MKA error SAK generation count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-generation-errors"
// Path from root: "/macsec/mka/state/counters/sak-generation-errors"
func (n *Macsec_Mka_CountersPath) SakGenerationErrors() *Macsec_Mka_Counters_SakGenerationErrorsPath {
	return &Macsec_Mka_Counters_SakGenerationErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"sak-generation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakGenerationErrors (leaf): MKA error SAK generation count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-generation-errors"
// Path from root: "/macsec/mka/state/counters/sak-generation-errors"
func (n *Macsec_Mka_CountersPathAny) SakGenerationErrors() *Macsec_Mka_Counters_SakGenerationErrorsPathAny {
	return &Macsec_Mka_Counters_SakGenerationErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sak-generation-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakHashErrors (leaf): MKA error Hash Key generation count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-hash-errors"
// Path from root: "/macsec/mka/state/counters/sak-hash-errors"
func (n *Macsec_Mka_CountersPath) SakHashErrors() *Macsec_Mka_Counters_SakHashErrorsPath {
	return &Macsec_Mka_Counters_SakHashErrorsPath{
		NodePath: ygot.NewNodePath(
			[]string{"sak-hash-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakHashErrors (leaf): MKA error Hash Key generation count
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "sak-hash-errors"
// Path from root: "/macsec/mka/state/counters/sak-hash-errors"
func (n *Macsec_Mka_CountersPathAny) SakHashErrors() *Macsec_Mka_Counters_SakHashErrorsPathAny {
	return &Macsec_Mka_Counters_SakHashErrorsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"sak-hash-errors"},
			map[string]interface{}{},
			n,
		),
	}
}

// Macsec_Mka_PolicyPath represents the /openconfig-macsec/macsec/mka/policies/policy YANG schema element.
type Macsec_Mka_PolicyPath struct {
	*ygot.NodePath
}

// Macsec_Mka_PolicyPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy YANG schema element.
type Macsec_Mka_PolicyPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_ConfidentialityOffsetPath represents the /openconfig-macsec/macsec/mka/policies/policy/config/confidentiality-offset YANG schema element.
type Macsec_Mka_Policy_ConfidentialityOffsetPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_ConfidentialityOffsetPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/confidentiality-offset YANG schema element.
type Macsec_Mka_Policy_ConfidentialityOffsetPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_DelayProtectionPath represents the /openconfig-macsec/macsec/mka/policies/policy/config/delay-protection YANG schema element.
type Macsec_Mka_Policy_DelayProtectionPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_DelayProtectionPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/delay-protection YANG schema element.
type Macsec_Mka_Policy_DelayProtectionPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_IncludeIcvIndicatorPath represents the /openconfig-macsec/macsec/mka/policies/policy/config/include-icv-indicator YANG schema element.
type Macsec_Mka_Policy_IncludeIcvIndicatorPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_IncludeIcvIndicatorPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/include-icv-indicator YANG schema element.
type Macsec_Mka_Policy_IncludeIcvIndicatorPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_KeyServerPriorityPath represents the /openconfig-macsec/macsec/mka/policies/policy/config/key-server-priority YANG schema element.
type Macsec_Mka_Policy_KeyServerPriorityPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_KeyServerPriorityPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/key-server-priority YANG schema element.
type Macsec_Mka_Policy_KeyServerPriorityPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_MacsecCipherSuitePath represents the /openconfig-macsec/macsec/mka/policies/policy/config/macsec-cipher-suite YANG schema element.
type Macsec_Mka_Policy_MacsecCipherSuitePath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_MacsecCipherSuitePathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/macsec-cipher-suite YANG schema element.
type Macsec_Mka_Policy_MacsecCipherSuitePathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_NamePath represents the /openconfig-macsec/macsec/mka/policies/policy/config/name YANG schema element.
type Macsec_Mka_Policy_NamePath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_NamePathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/name YANG schema element.
type Macsec_Mka_Policy_NamePathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_SakRekeyIntervalPath represents the /openconfig-macsec/macsec/mka/policies/policy/config/sak-rekey-interval YANG schema element.
type Macsec_Mka_Policy_SakRekeyIntervalPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_SakRekeyIntervalPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/sak-rekey-interval YANG schema element.
type Macsec_Mka_Policy_SakRekeyIntervalPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath represents the /openconfig-macsec/macsec/mka/policies/policy/config/sak-rekey-on-live-peer-loss YANG schema element.
type Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/sak-rekey-on-live-peer-loss YANG schema element.
type Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_UseUpdatedEthHeaderPath represents the /openconfig-macsec/macsec/mka/policies/policy/config/use-updated-eth-header YANG schema element.
type Macsec_Mka_Policy_UseUpdatedEthHeaderPath struct {
	*ygot.NodePath
}

// Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny represents the wildcard version of the /openconfig-macsec/macsec/mka/policies/policy/config/use-updated-eth-header YANG schema element.
type Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny struct {
	*ygot.NodePath
}

// ConfidentialityOffset (leaf): The confidentiality offset specifies a number of octets in an Ethernet
// frame that are sent in unencrypted plain-text
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/confidentiality-offset"
// Path from root: "/macsec/mka/policies/policy/config/confidentiality-offset"
func (n *Macsec_Mka_PolicyPath) ConfidentialityOffset() *Macsec_Mka_Policy_ConfidentialityOffsetPath {
	return &Macsec_Mka_Policy_ConfidentialityOffsetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "confidentiality-offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConfidentialityOffset (leaf): The confidentiality offset specifies a number of octets in an Ethernet
// frame that are sent in unencrypted plain-text
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/confidentiality-offset"
// Path from root: "/macsec/mka/policies/policy/config/confidentiality-offset"
func (n *Macsec_Mka_PolicyPathAny) ConfidentialityOffset() *Macsec_Mka_Policy_ConfidentialityOffsetPathAny {
	return &Macsec_Mka_Policy_ConfidentialityOffsetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "confidentiality-offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// DelayProtection (leaf): Traffic delayed longer than 2 seconds is rejected by the interfaces
// enabled with delay protection.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/delay-protection"
// Path from root: "/macsec/mka/policies/policy/config/delay-protection"
func (n *Macsec_Mka_PolicyPath) DelayProtection() *Macsec_Mka_Policy_DelayProtectionPath {
	return &Macsec_Mka_Policy_DelayProtectionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "delay-protection"},
			map[string]interface{}{},
			n,
		),
	}
}

// DelayProtection (leaf): Traffic delayed longer than 2 seconds is rejected by the interfaces
// enabled with delay protection.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/delay-protection"
// Path from root: "/macsec/mka/policies/policy/config/delay-protection"
func (n *Macsec_Mka_PolicyPathAny) DelayProtection() *Macsec_Mka_Policy_DelayProtectionPathAny {
	return &Macsec_Mka_Policy_DelayProtectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "delay-protection"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeIcvIndicator (leaf): Generate and include an Integrity Check Value (ICV) field in the MKPDU.
// For compatibility with previous MACsec implementation that do not
// require an ICV
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/include-icv-indicator"
// Path from root: "/macsec/mka/policies/policy/config/include-icv-indicator"
func (n *Macsec_Mka_PolicyPath) IncludeIcvIndicator() *Macsec_Mka_Policy_IncludeIcvIndicatorPath {
	return &Macsec_Mka_Policy_IncludeIcvIndicatorPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-icv-indicator"},
			map[string]interface{}{},
			n,
		),
	}
}

// IncludeIcvIndicator (leaf): Generate and include an Integrity Check Value (ICV) field in the MKPDU.
// For compatibility with previous MACsec implementation that do not
// require an ICV
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/include-icv-indicator"
// Path from root: "/macsec/mka/policies/policy/config/include-icv-indicator"
func (n *Macsec_Mka_PolicyPathAny) IncludeIcvIndicator() *Macsec_Mka_Policy_IncludeIcvIndicatorPathAny {
	return &Macsec_Mka_Policy_IncludeIcvIndicatorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "include-icv-indicator"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyServerPriority (leaf): Specifies the key server priority used by the MACsec Key Agreement
// (MKA) protocol to select the key server when MACsec is enabled using
// static connectivity association key (CAK) security mode. The switch with
// the lower priority-number is selected as the key server. If the
// priority-number is identical on both sides of a point-to-point link, the
// MKA protocol selects the device with the lower MAC address as the key
// server
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/key-server-priority"
// Path from root: "/macsec/mka/policies/policy/config/key-server-priority"
func (n *Macsec_Mka_PolicyPath) KeyServerPriority() *Macsec_Mka_Policy_KeyServerPriorityPath {
	return &Macsec_Mka_Policy_KeyServerPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-server-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// KeyServerPriority (leaf): Specifies the key server priority used by the MACsec Key Agreement
// (MKA) protocol to select the key server when MACsec is enabled using
// static connectivity association key (CAK) security mode. The switch with
// the lower priority-number is selected as the key server. If the
// priority-number is identical on both sides of a point-to-point link, the
// MKA protocol selects the device with the lower MAC address as the key
// server
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/key-server-priority"
// Path from root: "/macsec/mka/policies/policy/config/key-server-priority"
func (n *Macsec_Mka_PolicyPathAny) KeyServerPriority() *Macsec_Mka_Policy_KeyServerPriorityPathAny {
	return &Macsec_Mka_Policy_KeyServerPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "key-server-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacsecCipherSuite (leaf-list): Set Cipher suite(s) for SAK derivation
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/macsec-cipher-suite"
// Path from root: "/macsec/mka/policies/policy/config/macsec-cipher-suite"
func (n *Macsec_Mka_PolicyPath) MacsecCipherSuite() *Macsec_Mka_Policy_MacsecCipherSuitePath {
	return &Macsec_Mka_Policy_MacsecCipherSuitePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "macsec-cipher-suite"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacsecCipherSuite (leaf-list): Set Cipher suite(s) for SAK derivation
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/macsec-cipher-suite"
// Path from root: "/macsec/mka/policies/policy/config/macsec-cipher-suite"
func (n *Macsec_Mka_PolicyPathAny) MacsecCipherSuite() *Macsec_Mka_Policy_MacsecCipherSuitePathAny {
	return &Macsec_Mka_Policy_MacsecCipherSuitePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "macsec-cipher-suite"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the MKA policy.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/name"
// Path from root: "/macsec/mka/policies/policy/config/name"
func (n *Macsec_Mka_PolicyPath) Name() *Macsec_Mka_Policy_NamePath {
	return &Macsec_Mka_Policy_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Name of the MKA policy.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/name"
// Path from root: "/macsec/mka/policies/policy/config/name"
func (n *Macsec_Mka_PolicyPathAny) Name() *Macsec_Mka_Policy_NamePathAny {
	return &Macsec_Mka_Policy_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakRekeyInterval (leaf): SAK Rekey interval in seconds. The default value is 0 where no rekey is
// performed.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/sak-rekey-interval"
// Path from root: "/macsec/mka/policies/policy/config/sak-rekey-interval"
func (n *Macsec_Mka_PolicyPath) SakRekeyInterval() *Macsec_Mka_Policy_SakRekeyIntervalPath {
	return &Macsec_Mka_Policy_SakRekeyIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sak-rekey-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakRekeyInterval (leaf): SAK Rekey interval in seconds. The default value is 0 where no rekey is
// performed.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/sak-rekey-interval"
// Path from root: "/macsec/mka/policies/policy/config/sak-rekey-interval"
func (n *Macsec_Mka_PolicyPathAny) SakRekeyInterval() *Macsec_Mka_Policy_SakRekeyIntervalPathAny {
	return &Macsec_Mka_Policy_SakRekeyIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sak-rekey-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakRekeyOnLivePeerLoss (leaf): Rekey on peer loss
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/sak-rekey-on-live-peer-loss"
// Path from root: "/macsec/mka/policies/policy/config/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_PolicyPath) SakRekeyOnLivePeerLoss() *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath {
	return &Macsec_Mka_Policy_SakRekeyOnLivePeerLossPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sak-rekey-on-live-peer-loss"},
			map[string]interface{}{},
			n,
		),
	}
}

// SakRekeyOnLivePeerLoss (leaf): Rekey on peer loss
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/sak-rekey-on-live-peer-loss"
// Path from root: "/macsec/mka/policies/policy/config/sak-rekey-on-live-peer-loss"
func (n *Macsec_Mka_PolicyPathAny) SakRekeyOnLivePeerLoss() *Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny {
	return &Macsec_Mka_Policy_SakRekeyOnLivePeerLossPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sak-rekey-on-live-peer-loss"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseUpdatedEthHeader (leaf): Use updated ethernet header for ICV calculation. In case the Ethernet
// frame headers change, use the updated headers to calculate the ICV.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/use-updated-eth-header"
// Path from root: "/macsec/mka/policies/policy/config/use-updated-eth-header"
func (n *Macsec_Mka_PolicyPath) UseUpdatedEthHeader() *Macsec_Mka_Policy_UseUpdatedEthHeaderPath {
	return &Macsec_Mka_Policy_UseUpdatedEthHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-updated-eth-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// UseUpdatedEthHeader (leaf): Use updated ethernet header for ICV calculation. In case the Ethernet
// frame headers change, use the updated headers to calculate the ICV.
// ----------------------------------------
// Defining module: "openconfig-macsec"
// Instantiating module: "openconfig-macsec"
// Path from parent: "config/use-updated-eth-header"
// Path from root: "/macsec/mka/policies/policy/config/use-updated-eth-header"
func (n *Macsec_Mka_PolicyPathAny) UseUpdatedEthHeader() *Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny {
	return &Macsec_Mka_Policy_UseUpdatedEthHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "use-updated-eth-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePath struct {
	*ygot.NodePath
}

// NetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/config/description YANG schema element.
type NetworkInstance_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/description YANG schema element.
type NetworkInstance_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/config/enabled YANG schema element.
type NetworkInstance_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/enabled YANG schema element.
type NetworkInstance_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledAddressFamiliesPath represents the /openconfig-network-instance/network-instances/network-instance/config/enabled-address-families YANG schema element.
type NetworkInstance_EnabledAddressFamiliesPath struct {
	*ygot.NodePath
}

// NetworkInstance_EnabledAddressFamiliesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/enabled-address-families YANG schema element.
type NetworkInstance_EnabledAddressFamiliesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_MtuPath represents the /openconfig-network-instance/network-instances/network-instance/config/mtu YANG schema element.
type NetworkInstance_MtuPath struct {
	*ygot.NodePath
}

// NetworkInstance_MtuPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/mtu YANG schema element.
type NetworkInstance_MtuPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_NamePath represents the /openconfig-network-instance/network-instances/network-instance/config/name YANG schema element.
type NetworkInstance_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/name YANG schema element.
type NetworkInstance_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/config/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/config/router-id YANG schema element.
type NetworkInstance_RouterIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/router-id YANG schema element.
type NetworkInstance_RouterIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_TypePath represents the /openconfig-network-instance/network-instances/network-instance/config/type YANG schema element.
type NetworkInstance_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/config/type YANG schema element.
type NetworkInstance_TypePathAny struct {
	*ygot.NodePath
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afts"
// Path from root: "/network-instances/network-instance/afts"
func (n *NetworkInstancePath) Afts() *NetworkInstance_AftsPath {
	return &NetworkInstance_AftsPath{
		NodePath: ygot.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "afts"
// Path from root: "/network-instances/network-instance/afts"
func (n *NetworkInstancePathAny) Afts() *NetworkInstance_AftsPathAny {
	return &NetworkInstance_AftsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId (wildcarded): string
func (n *NetworkInstancePath) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	return &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId (wildcarded): string
func (n *NetworkInstancePathAny) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	return &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId: string
func (n *NetworkInstancePath) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPath {
	return &NetworkInstance_ConnectionPointPath{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "connection-points/connection-point"
// Path from root: "/network-instances/network-instance/connection-points/connection-point"
// ConnectionPointId: string
func (n *NetworkInstancePathAny) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPathAny {
	return &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/config/description"
func (n *NetworkInstancePath) Description() *NetworkInstance_DescriptionPath {
	return &NetworkInstance_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/config/description"
func (n *NetworkInstancePathAny) Description() *NetworkInstance_DescriptionPathAny {
	return &NetworkInstance_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the network instance should be configured to be
// active on the network element
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/config/enabled"
func (n *NetworkInstancePath) Enabled() *NetworkInstance_EnabledPath {
	return &NetworkInstance_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): Whether the network instance should be configured to be
// active on the network element
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/config/enabled"
func (n *NetworkInstancePathAny) Enabled() *NetworkInstance_EnabledPathAny {
	return &NetworkInstance_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnabledAddressFamilies (leaf-list): The address families that are to be enabled for this
// network instance.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled-address-families"
// Path from root: "/network-instances/network-instance/config/enabled-address-families"
func (n *NetworkInstancePath) EnabledAddressFamilies() *NetworkInstance_EnabledAddressFamiliesPath {
	return &NetworkInstance_EnabledAddressFamiliesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// EnabledAddressFamilies (leaf-list): The address families that are to be enabled for this
// network instance.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled-address-families"
// Path from root: "/network-instances/network-instance/config/enabled-address-families"
func (n *NetworkInstancePathAny) EnabledAddressFamilies() *NetworkInstance_EnabledAddressFamiliesPathAny {
	return &NetworkInstance_EnabledAddressFamiliesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "encapsulation"
// Path from root: "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePath) Encapsulation() *NetworkInstance_EncapsulationPath {
	return &NetworkInstance_EncapsulationPath{
		NodePath: ygot.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "encapsulation"
// Path from root: "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePathAny) Encapsulation() *NetworkInstance_EncapsulationPathAny {
	return &NetworkInstance_EncapsulationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn"
// Path from root: "/network-instances/network-instance/evpn"
func (n *NetworkInstancePath) Evpn() *NetworkInstance_EvpnPath {
	return &NetworkInstance_EvpnPath{
		NodePath: ygot.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn"
// Path from root: "/network-instances/network-instance/evpn"
func (n *NetworkInstancePathAny) Evpn() *NetworkInstance_EvpnPathAny {
	return &NetworkInstance_EvpnPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "fdb"
// Path from root: "/network-instances/network-instance/fdb"
func (n *NetworkInstancePath) Fdb() *NetworkInstance_FdbPath {
	return &NetworkInstance_FdbPath{
		NodePath: ygot.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "fdb"
// Path from root: "/network-instances/network-instance/fdb"
func (n *NetworkInstancePathAny) Fdb() *NetworkInstance_FdbPathAny {
	return &NetworkInstance_FdbPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "inter-instance-policies"
// Path from root: "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePath) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPath {
	return &NetworkInstance_InterInstancePoliciesPath{
		NodePath: ygot.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "inter-instance-policies"
// Path from root: "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePathAny) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPathAny {
	return &NetworkInstance_InterInstancePoliciesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id (wildcarded): string
func (n *NetworkInstancePath) InterfaceAny() *NetworkInstance_InterfacePathAny {
	return &NetworkInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id (wildcarded): string
func (n *NetworkInstancePathAny) InterfaceAny() *NetworkInstance_InterfacePathAny {
	return &NetworkInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Interface (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id: string
func (n *NetworkInstancePath) Interface(Id string) *NetworkInstance_InterfacePath {
	return &NetworkInstance_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Interface (list): An interface associated with the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interfaces/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface"
// Id: string
func (n *NetworkInstancePathAny) Interface(Id string) *NetworkInstance_InterfacePathAny {
	return &NetworkInstance_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls"
// Path from root: "/network-instances/network-instance/mpls"
func (n *NetworkInstancePath) Mpls() *NetworkInstance_MplsPath {
	return &NetworkInstance_MplsPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls"
// Path from root: "/network-instances/network-instance/mpls"
func (n *NetworkInstancePathAny) Mpls() *NetworkInstance_MplsPathAny {
	return &NetworkInstance_MplsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The maximum frame size which should be supported for this
// instance for Layer 2 frames
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mtu"
// Path from root: "/network-instances/network-instance/config/mtu"
func (n *NetworkInstancePath) Mtu() *NetworkInstance_MtuPath {
	return &NetworkInstance_MtuPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Mtu (leaf): The maximum frame size which should be supported for this
// instance for Layer 2 frames
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mtu"
// Path from root: "/network-instances/network-instance/config/mtu"
func (n *NetworkInstancePathAny) Mtu() *NetworkInstance_MtuPathAny {
	return &NetworkInstance_MtuPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mtu"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/config/name"
func (n *NetworkInstancePath) Name() *NetworkInstance_NamePath {
	return &NetworkInstance_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/config/name"
func (n *NetworkInstancePathAny) Name() *NetworkInstance_NamePathAny {
	return &NetworkInstance_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
// ----------------------------------------
// Defining module: "openconfig-policy-forwarding"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding"
// Path from root: "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePath) PolicyForwarding() *NetworkInstance_PolicyForwardingPath {
	return &NetworkInstance_PolicyForwardingPath{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
// ----------------------------------------
// Defining module: "openconfig-policy-forwarding"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding"
// Path from root: "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePathAny) PolicyForwarding() *NetworkInstance_PolicyForwardingPathAny {
	return &NetworkInstance_PolicyForwardingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePath) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePathAny) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
}

// ProtocolAnyName (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePath) ProtocolAnyName(Identifier E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": "*"},
			n,
		),
	}
}

// ProtocolAnyName (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name (wildcarded): string
func (n *NetworkInstancePathAny) ProtocolAnyName(Identifier E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": "*"},
			n,
		),
	}
}

// ProtocolAnyIdentifier (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePath) ProtocolAnyIdentifier(Name string) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": Name},
			n,
		),
	}
}

// ProtocolAnyIdentifier (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePathAny) ProtocolAnyIdentifier(Name string) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": Name},
			n,
		),
	}
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePath) Protocol(Identifier E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPath {
	return &NetworkInstance_ProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "protocols/protocol"
// Path from root: "/network-instances/network-instance/protocols/protocol"
// Identifier: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// Name: string
func (n *NetworkInstancePathAny) Protocol(Identifier E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPathAny {
	return &NetworkInstance_ProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/route-distinguisher"
// Path from root: "/network-instances/network-instance/config/route-distinguisher"
func (n *NetworkInstancePath) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPath {
	return &NetworkInstance_RouteDistinguisherPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/route-distinguisher"
// Path from root: "/network-instances/network-instance/config/route-distinguisher"
func (n *NetworkInstancePathAny) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPathAny {
	return &NetworkInstance_RouteDistinguisherPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteLimitAny (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	return &NetworkInstance_RouteLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
}

// RouteLimitAny (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	return &NetworkInstance_RouteLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
}

// RouteLimit (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) RouteLimit(Afi E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPath {
	return &NetworkInstance_RouteLimitPath{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
}

// RouteLimit (list): A route limit applying to a particular address family.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l3"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "route-limits/route-limit"
// Path from root: "/network-instances/network-instance/route-limits/route-limit"
// Afi: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) RouteLimit(Afi E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPathAny {
	return &NetworkInstance_RouteLimitPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/router-id"
// Path from root: "/network-instances/network-instance/config/router-id"
func (n *NetworkInstancePath) RouterId() *NetworkInstance_RouterIdPath {
	return &NetworkInstance_RouterIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/router-id"
// Path from root: "/network-instances/network-instance/config/router-id"
func (n *NetworkInstancePathAny) RouterId() *NetworkInstance_RouterIdPathAny {
	return &NetworkInstance_RouterIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "router-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePath) SegmentRouting() *NetworkInstance_SegmentRoutingPath {
	return &NetworkInstance_SegmentRoutingPath{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
// ----------------------------------------
// Defining module: "openconfig-segment-routing"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "segment-routing"
// Path from root: "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePathAny) SegmentRouting() *NetworkInstance_SegmentRoutingPathAny {
	return &NetworkInstance_SegmentRoutingPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableAny() *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableAny() *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableAnyAddressFamily (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableAnyAddressFamily(Protocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": "*"},
			n,
		),
	}
}

// TableAnyAddressFamily (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableAnyAddressFamily(Protocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": "*"},
			n,
		),
	}
}

// TableAnyProtocol (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableAnyProtocol(AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableAnyProtocol (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableAnyProtocol(AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) Table(Protocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePath {
	return &NetworkInstance_TablePath{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tables/table"
// Path from root: "/network-instances/network-instance/tables/table"
// Protocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) Table(Protocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	return &NetworkInstance_TablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyDstProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnyDstProtocolAnyAddressFamily(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyDstProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnyDstProtocolAnyAddressFamily(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnySrcProtocolAnyAddressFamily(DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnySrcProtocolAnyAddressFamily(DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnyAddressFamily(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnyAddressFamily (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily (wildcarded): E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnyAddressFamily(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": "*"},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnySrcProtocolAnyDstProtocol(AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnySrcProtocolAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnySrcProtocolAnyDstProtocol(AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnyDstProtocol(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnyDstProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnyDstProtocol(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": "*", "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnySrcProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnectionAnySrcProtocol(DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnectionAnySrcProtocol (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol (wildcarded): E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnectionAnySrcProtocol(DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnection(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPath {
	return &NetworkInstance_TableConnectionPath{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "table-connections/table-connection"
// Path from root: "/network-instances/network-instance/table-connections/table-connection"
// SrcProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// DstProtocol: E_PolicyTypes_INSTALL_PROTOCOL_TYPE
// AddressFamily: E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnection(SrcProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	return &NetworkInstance_TableConnectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/config/type"
func (n *NetworkInstancePath) Type() *NetworkInstance_TypePath {
	return &NetworkInstance_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/config/type"
func (n *NetworkInstancePathAny) Type() *NetworkInstance_TypePathAny {
	return &NetworkInstance_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VlanAny (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId (wildcarded): uint16
func (n *NetworkInstancePath) VlanAny() *NetworkInstance_VlanPathAny {
	return &NetworkInstance_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
}

// VlanAny (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId (wildcarded): uint16
func (n *NetworkInstancePathAny) VlanAny() *NetworkInstance_VlanPathAny {
	return &NetworkInstance_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
}

// Vlan (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId: uint16
func (n *NetworkInstancePath) Vlan(VlanId uint16) *NetworkInstance_VlanPath {
	return &NetworkInstance_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
}

// Vlan (list): Configured VLANs keyed by id
// ----------------------------------------
// Defining module: "openconfig-vlan"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vlans/vlan"
// Path from root: "/network-instances/network-instance/vlans/vlan"
// VlanId: uint16
func (n *NetworkInstancePathAny) Vlan(VlanId uint16) *NetworkInstance_VlanPathAny {
	return &NetworkInstance_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
}

// NetworkInstance_AftsPath represents the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPath struct {
	*ygot.NodePath
}

// NetworkInstance_AftsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPathAny struct {
	*ygot.NodePath
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPath) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	return &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPathAny) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	return &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix: string
func (n *NetworkInstance_AftsPath) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPath {
	return &NetworkInstance_Afts_Ipv4EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv4-unicast/ipv4-entry"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
// Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPathAny {
	return &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPath) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	return &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix (wildcarded): string
func (n *NetworkInstance_AftsPathAny) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	return &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix: string
func (n *NetworkInstance_AftsPath) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPath {
	return &NetworkInstance_Afts_Ipv6EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ipv6-unicast/ipv6-entry"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
// Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPathAny {
	return &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label (wildcarded): [UnionUint32, E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPath) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	return &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label (wildcarded): [UnionUint32, E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPathAny) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	return &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label: [UnionUint32, E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPath) LabelEntry(Label NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPath {
	return &NetworkInstance_Afts_LabelEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mpls/label-entry"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry"
// Label: [UnionUint32, E_MplsTypes_MplsLabel_Enum]
func (n *NetworkInstance_AftsPathAny) LabelEntry(Label NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPathAny {
	return &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_AftsPath) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	return &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_AftsPathAny) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	return &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress: string
func (n *NetworkInstance_AftsPath) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPath {
	return &NetworkInstance_Afts_MacEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet/mac-entry"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry"
// MacAddress: string
func (n *NetworkInstance_AftsPathAny) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPathAny {
	return &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPath) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPathAny) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_AftsPath) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPath {
	return &NetworkInstance_Afts_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): A next-hop associated with the forwarding instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_AftsPathAny) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id (wildcarded): uint64
func (n *NetworkInstance_AftsPath) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id (wildcarded): uint64
func (n *NetworkInstance_AftsPathAny) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id: uint64
func (n *NetworkInstance_AftsPath) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPath {
	return &NetworkInstance_Afts_NextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hop-groups/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
// Id: uint64
func (n *NetworkInstance_AftsPathAny) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPath) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index (wildcarded): uint64
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index: uint64
func (n *NetworkInstance_AftsPath) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPath {
	return &NetworkInstance_Afts_PolicyForwardingEntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "policy-forwarding/policy-forwarding-entry"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
// Index: uint64
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-synced"
// Path from root: "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPath) StateSynced() *NetworkInstance_Afts_StateSyncedPath {
	return &NetworkInstance_Afts_StateSyncedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
// ----------------------------------------
// Defining module: "openconfig-aft"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-synced"
// Path from root: "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPathAny) StateSynced() *NetworkInstance_Afts_StateSyncedPathAny {
	return &NetworkInstance_Afts_StateSyncedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv4EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_PrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_PrefixPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv4EntryPath) Counters() *NetworkInstance_Afts_Ipv4Entry_CountersPath {
	return &NetworkInstance_Afts_Ipv4Entry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) Counters() *NetworkInstance_Afts_Ipv4Entry_CountersPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv4EntryPath) DecapsulateHeader() *NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath {
	return &NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) DecapsulateHeader() *NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_DecapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv4EntryPath) EntryMetadata() *NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath {
	return &NetworkInstance_Afts_Ipv4Entry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) EntryMetadata() *NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv4EntryPath) OriginProtocol() *NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath {
	return &NetworkInstance_Afts_Ipv4Entry_OriginProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) OriginProtocol() *NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_OriginProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv4 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv4EntryPath) Prefix() *NetworkInstance_Afts_Ipv4Entry_PrefixPath {
	return &NetworkInstance_Afts_Ipv4Entry_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv4 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv4"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) Prefix() *NetworkInstance_Afts_Ipv4Entry_PrefixPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv4Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv6EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_PrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_PrefixPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv6EntryPath) Counters() *NetworkInstance_Afts_Ipv6Entry_CountersPath {
	return &NetworkInstance_Afts_Ipv6Entry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) Counters() *NetworkInstance_Afts_Ipv6Entry_CountersPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv6EntryPath) DecapsulateHeader() *NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath {
	return &NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/decapsulate-header"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) DecapsulateHeader() *NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_DecapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv6EntryPath) EntryMetadata() *NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath {
	return &NetworkInstance_Afts_Ipv6Entry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) EntryMetadata() *NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv6EntryPath) OriginProtocol() *NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath {
	return &NetworkInstance_Afts_Ipv6Entry_OriginProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/origin-protocol"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) OriginProtocol() *NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_OriginProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv6 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv6EntryPath) Prefix() *NetworkInstance_Afts_Ipv6Entry_PrefixPath {
	return &NetworkInstance_Afts_Ipv6Entry_PrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// Prefix (leaf): The IPv6 destination prefix that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-ipv6"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/prefix"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/prefix"
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) Prefix() *NetworkInstance_Afts_Ipv6Entry_PrefixPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_PrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_Ipv6Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_LabelEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_LabelEntry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/label YANG schema element.
type NetworkInstance_Afts_LabelEntry_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/label YANG schema element.
type NetworkInstance_Afts_LabelEntry_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters"
func (n *NetworkInstance_Afts_LabelEntryPath) Counters() *NetworkInstance_Afts_LabelEntry_CountersPath {
	return &NetworkInstance_Afts_LabelEntry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters"
func (n *NetworkInstance_Afts_LabelEntryPathAny) Counters() *NetworkInstance_Afts_LabelEntry_CountersPathAny {
	return &NetworkInstance_Afts_LabelEntry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_LabelEntryPath) EntryMetadata() *NetworkInstance_Afts_LabelEntry_EntryMetadataPath {
	return &NetworkInstance_Afts_LabelEntry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_LabelEntryPathAny) EntryMetadata() *NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_LabelEntry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): The top-most MPLS label that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/label"
func (n *NetworkInstance_Afts_LabelEntryPath) Label() *NetworkInstance_Afts_LabelEntry_LabelPath {
	return &NetworkInstance_Afts_LabelEntry_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): The top-most MPLS label that should be matched to
// utilise the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/label"
func (n *NetworkInstance_Afts_LabelEntryPathAny) Label() *NetworkInstance_Afts_LabelEntry_LabelPathAny {
	return &NetworkInstance_Afts_LabelEntry_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoppedMplsLabelStack (leaf-list): The MPLS label stack to be popped from the packet when
// switched by the system. The stack is encoded as a leaf-list
// such that the first entry is the label that is outer-most (i.e.,
// furthest from the bottom of the stack).
//
// If the local system pops the outer-most label 400, then the
// value of this list is [400,]. If the local system removes two
// labels, the outer-most being 500, and the second of which is
// 400, then the value of the list is [500, 400].
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/popped-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack"
func (n *NetworkInstance_Afts_LabelEntryPath) PoppedMplsLabelStack() *NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath {
	return &NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "popped-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// PoppedMplsLabelStack (leaf-list): The MPLS label stack to be popped from the packet when
// switched by the system. The stack is encoded as a leaf-list
// such that the first entry is the label that is outer-most (i.e.,
// furthest from the bottom of the stack).
//
// If the local system pops the outer-most label 400, then the
// value of this list is [400,]. If the local system removes two
// labels, the outer-most being 500, and the second of which is
// 400, then the value of the list is [500, 400].
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/popped-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/popped-mpls-label-stack"
func (n *NetworkInstance_Afts_LabelEntryPathAny) PoppedMplsLabelStack() *NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny {
	return &NetworkInstance_Afts_LabelEntry_PoppedMplsLabelStackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "popped-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_LabelEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_MacEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_MacEntry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_MacEntry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_MacEntry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_MacEntry_MacAddressPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters"
func (n *NetworkInstance_Afts_MacEntryPath) Counters() *NetworkInstance_Afts_MacEntry_CountersPath {
	return &NetworkInstance_Afts_MacEntry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters"
func (n *NetworkInstance_Afts_MacEntryPathAny) Counters() *NetworkInstance_Afts_MacEntry_CountersPathAny {
	return &NetworkInstance_Afts_MacEntry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_MacEntryPath) EntryMetadata() *NetworkInstance_Afts_MacEntry_EntryMetadataPath {
	return &NetworkInstance_Afts_MacEntry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_MacEntryPathAny) EntryMetadata() *NetworkInstance_Afts_MacEntry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_MacEntry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The outer MAC address of the Ethernet frame that must
// be matched for the AFT entry to be utilised.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address"
func (n *NetworkInstance_Afts_MacEntryPath) MacAddress() *NetworkInstance_Afts_MacEntry_MacAddressPath {
	return &NetworkInstance_Afts_MacEntry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The outer MAC address of the Ethernet frame that must
// be matched for the AFT entry to be utilised.
// ----------------------------------------
// Defining module: "openconfig-aft-ethernet"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/mac-address"
func (n *NetworkInstance_Afts_MacEntryPathAny) MacAddress() *NetworkInstance_Afts_MacEntry_MacAddressPathAny {
	return &NetworkInstance_Afts_MacEntry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_MacEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_DecapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_DecapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_EncapsulateHeaderPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapsulateHeaderPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header YANG schema element.
type NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_IpAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_IpAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_LspNamePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name YANG schema element.
type NetworkInstance_Afts_NextHop_LspNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_LspNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name YANG schema element.
type NetworkInstance_Afts_NextHop_LspNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_Afts_NextHop_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address YANG schema element.
type NetworkInstance_Afts_NextHop_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_OriginProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_NextHop_OriginProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_OriginProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol YANG schema element.
type NetworkInstance_Afts_NextHop_OriginProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PopTopLabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_Afts_NextHop_PopTopLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PopTopLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label YANG schema element.
type NetworkInstance_Afts_NextHop_PopTopLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_ProgrammedIndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_Afts_NextHop_ProgrammedIndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index YANG schema element.
type NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack YANG schema element.
type NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address YANG schema element.
type NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_VniLabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label YANG schema element.
type NetworkInstance_Afts_NextHop_VniLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_VniLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label YANG schema element.
type NetworkInstance_Afts_NextHop_VniLabelPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters"
func (n *NetworkInstance_Afts_NextHopPath) Counters() *NetworkInstance_Afts_NextHop_CountersPath {
	return &NetworkInstance_Afts_NextHop_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters"
func (n *NetworkInstance_Afts_NextHopPathAny) Counters() *NetworkInstance_Afts_NextHop_CountersPathAny {
	return &NetworkInstance_Afts_NextHop_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_Afts_NextHopPath) DecapsulateHeader() *NetworkInstance_Afts_NextHop_DecapsulateHeaderPath {
	return &NetworkInstance_Afts_NextHop_DecapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// DecapsulateHeader (leaf): When forwarding a packet to the specified next-hop, the local
// system performs a decapsulation of the packet - removing the
// specified header type. In the case that no next-hop is
// specified, the packet header is removed, and a subsequent
// forwarding lookup is performed on the packet encapsulated
// within the header, matched within the relevant AFT within the
// specified network-instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/decapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/decapsulate-header"
func (n *NetworkInstance_Afts_NextHopPathAny) DecapsulateHeader() *NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny {
	return &NetworkInstance_Afts_NextHop_DecapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "decapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_Afts_NextHopPath) EncapsulateHeader() *NetworkInstance_Afts_NextHop_EncapsulateHeaderPath {
	return &NetworkInstance_Afts_NextHop_EncapsulateHeaderPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulateHeader (leaf): When forwarding a packet to the specified next-hop the local
// system performs an encapsulation of the packet - adding the
// specified header type.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/encapsulate-header"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/encapsulate-header"
func (n *NetworkInstance_Afts_NextHopPathAny) EncapsulateHeader() *NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny {
	return &NetworkInstance_Afts_NextHop_EncapsulateHeaderPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "encapsulate-header"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopPath) Index() *NetworkInstance_Afts_NextHop_IndexPath {
	return &NetworkInstance_Afts_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopPathAny) Index() *NetworkInstance_Afts_NextHop_IndexPathAny {
	return &NetworkInstance_Afts_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Afts_NextHopPath) InterfaceRef() *NetworkInstance_Afts_NextHop_InterfaceRefPath {
	return &NetworkInstance_Afts_NextHop_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref"
func (n *NetworkInstance_Afts_NextHopPathAny) InterfaceRef() *NetworkInstance_Afts_NextHop_InterfaceRefPathAny {
	return &NetworkInstance_Afts_NextHop_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpAddress (leaf): The IP address of the next-hop system.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_Afts_NextHopPath) IpAddress() *NetworkInstance_Afts_NextHop_IpAddressPath {
	return &NetworkInstance_Afts_NextHop_IpAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpAddress (leaf): The IP address of the next-hop system.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/ip-address"
func (n *NetworkInstance_Afts_NextHopPathAny) IpAddress() *NetworkInstance_Afts_NextHop_IpAddressPathAny {
	return &NetworkInstance_Afts_NextHop_IpAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpInIp (container): When specified, the packet has an IP-in-IP header applied to it before
// forwarding to the specified next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ip-in-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip"
func (n *NetworkInstance_Afts_NextHopPath) IpInIp() *NetworkInstance_Afts_NextHop_IpInIpPath {
	return &NetworkInstance_Afts_NextHop_IpInIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"ip-in-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpInIp (container): When specified, the packet has an IP-in-IP header applied to it before
// forwarding to the specified next-hop.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ip-in-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip"
func (n *NetworkInstance_Afts_NextHopPathAny) IpInIp() *NetworkInstance_Afts_NextHop_IpInIpPathAny {
	return &NetworkInstance_Afts_NextHop_IpInIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ip-in-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// LspName (leaf): Where applicable, the protocol name for the next-hop labelled
// forwarding entry. This leaf is applicable only to next-hops
// which include MPLS label information, and its value typically
// corresponds to the RSVP-TE LSP name.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsp-name"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name"
func (n *NetworkInstance_Afts_NextHopPath) LspName() *NetworkInstance_Afts_NextHop_LspNamePath {
	return &NetworkInstance_Afts_NextHop_LspNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsp-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// LspName (leaf): Where applicable, the protocol name for the next-hop labelled
// forwarding entry. This leaf is applicable only to next-hops
// which include MPLS label information, and its value typically
// corresponds to the RSVP-TE LSP name.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/lsp-name"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/lsp-name"
func (n *NetworkInstance_Afts_NextHopPathAny) LspName() *NetworkInstance_Afts_NextHop_LspNamePathAny {
	return &NetworkInstance_Afts_NextHop_LspNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "lsp-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_Afts_NextHopPath) MacAddress() *NetworkInstance_Afts_NextHop_MacAddressPath {
	return &NetworkInstance_Afts_NextHop_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address of the next-hop if resolved by the local
// network instance.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/mac-address"
func (n *NetworkInstance_Afts_NextHopPathAny) MacAddress() *NetworkInstance_Afts_NextHop_MacAddressPathAny {
	return &NetworkInstance_Afts_NextHop_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_Afts_NextHopPath) OriginProtocol() *NetworkInstance_Afts_NextHop_OriginProtocolPath {
	return &NetworkInstance_Afts_NextHop_OriginProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// OriginProtocol (leaf): The protocol from which the AFT entry was learned.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/origin-protocol"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/origin-protocol"
func (n *NetworkInstance_Afts_NextHopPathAny) OriginProtocol() *NetworkInstance_Afts_NextHop_OriginProtocolPathAny {
	return &NetworkInstance_Afts_NextHop_OriginProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "origin-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pop-top-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_Afts_NextHopPath) PopTopLabel() *NetworkInstance_Afts_NextHop_PopTopLabelPath {
	return &NetworkInstance_Afts_NextHop_PopTopLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PopTopLabel (leaf): Flag that controls pop action, i.e., the top-most MPLS label
// should be popped from the packet when switched by the system.
//
// The top-most MPLS label associated with pop action is equal to
// the label key used in 'mpls' AFT 'label-entry' list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pop-top-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pop-top-label"
func (n *NetworkInstance_Afts_NextHopPathAny) PopTopLabel() *NetworkInstance_Afts_NextHop_PopTopLabelPathAny {
	return &NetworkInstance_Afts_NextHop_PopTopLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pop-top-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_Afts_NextHopPath) ProgrammedIndex() *NetworkInstance_Afts_NextHop_ProgrammedIndexPath {
	return &NetworkInstance_Afts_NextHop_ProgrammedIndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedIndex (leaf): In some routing protocols, or route injection mechanisms it
// is possible to set the index of the next-hop via configuration
// or the protocol itself. In some systems it may not be possible
// to maintain the index provided by an external client when
// advertising the same entry via telemetry.
//
// This leaf reflects the configured or client-supplied index of
// the next-hop. This allows a client to create an assocation or
// mapping back to the original index pushed by the client, and
// the ID used as a key in the next-hop AFT list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-index"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/programmed-index"
func (n *NetworkInstance_Afts_NextHopPathAny) ProgrammedIndex() *NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny {
	return &NetworkInstance_Afts_NextHop_ProgrammedIndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-index"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
//   - the stack is encoded as a leaf list whereby the order of the
//     entries is such that the first entry in the list is the
//     label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pushed-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_Afts_NextHopPath) PushedMplsLabelStack() *NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath {
	return &NetworkInstance_Afts_NextHop_PushedMplsLabelStackPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// PushedMplsLabelStack (leaf-list): The MPLS label stack imposed when forwarding packets to the
// next-hop
//   - the stack is encoded as a leaf list whereby the order of the
//     entries is such that the first entry in the list is the
//     label at the bottom of the stack to be pushed.
//
// To this end, a packet which is to forwarded to a device using
// a service label of 42, and a transport label of 8072 will be
// represented with a label stack list of [42, 8072].
//
// The MPLS label stack list is ordered by the user, such that no
// system re-ordering of leaves is permitted by the system.
//
// A swap operation is reflected by entries in the
// popped-mpls-label-stack and pushed-mpls-label-stack nodes.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/pushed-mpls-label-stack"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/pushed-mpls-label-stack"
func (n *NetworkInstance_Afts_NextHopPathAny) PushedMplsLabelStack() *NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny {
	return &NetworkInstance_Afts_NextHop_PushedMplsLabelStackPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "pushed-mpls-label-stack"},
			map[string]interface{}{},
			n,
		),
	}
}

// TunnelSrcIpAddress (leaf): Where applicable this represents the tunnel source ip address.
// For VXLAN this represents the source VTEP ip address
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tunnel-src-ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHopPath) TunnelSrcIpAddress() *NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath {
	return &NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// TunnelSrcIpAddress (leaf): Where applicable this represents the tunnel source ip address.
// For VXLAN this represents the source VTEP ip address
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/tunnel-src-ip-address"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/tunnel-src-ip-address"
func (n *NetworkInstance_Afts_NextHopPathAny) TunnelSrcIpAddress() *NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny {
	return &NetworkInstance_Afts_NextHop_TunnelSrcIpAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "tunnel-src-ip-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniLabel (leaf): Where applicable, the next hop label representing the virtual
// network identifier (VNI) for the forwarding entry. This leaf is
// applicable only to next-hops which include VXLAN encapsulation
// header information
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label"
func (n *NetworkInstance_Afts_NextHopPath) VniLabel() *NetworkInstance_Afts_NextHop_VniLabelPath {
	return &NetworkInstance_Afts_NextHop_VniLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniLabel (leaf): Where applicable, the next hop label representing the virtual
// network identifier (VNI) for the forwarding entry. This leaf is
// applicable only to next-hops which include VXLAN encapsulation
// header information
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-label"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/vni-label"
func (n *NetworkInstance_Afts_NextHopPathAny) VniLabel() *NetworkInstance_Afts_NextHop_VniLabelPathAny {
	return &NetworkInstance_Afts_NextHop_VniLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ColorPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ColorPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ColorPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ColorPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny struct {
	*ygot.NodePath
}

// BackupNextHopGroup (leaf): The backup next-hop-group for the current group. When all
// entries within the next-hop group become unusable, the backup
// next-hop group is used if specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/backup-next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroupPath) BackupNextHopGroup() *NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath {
	return &NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "backup-next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackupNextHopGroup (leaf): The backup next-hop-group for the current group. When all
// entries within the next-hop group become unusable, the backup
// next-hop group is used if specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/backup-next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/backup-next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) BackupNextHopGroup() *NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroup_BackupNextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "backup-next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// Color (leaf): An arbitrary colour that is used as an identifier for the next-hop
// group. Some next-hop resolutions may utilise the colour to select
// the particular next-hop-group that a routing entry should be resolved
// to. In this case, next-hop-group selection may be based on colour
// matches rather than the protocol specified next-hop.
//
// Regardless of whether the next-hop-group's specified colour is
// used to select an AFT's active forwarding entry, the next-hop-group
// referenced by an entry should be the currently active value.
//
// Next-hop-groups that are installed on the system through a protocol
// that allows injection of such entries (e.g., BGP using the SR-TE
// Policy SAFI, or gRPC-based RIB programming) should have the colour
// specified in the injecting protocol within this leaf.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/color"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color"
func (n *NetworkInstance_Afts_NextHopGroupPath) Color() *NetworkInstance_Afts_NextHopGroup_ColorPath {
	return &NetworkInstance_Afts_NextHopGroup_ColorPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "color"},
			map[string]interface{}{},
			n,
		),
	}
}

// Color (leaf): An arbitrary colour that is used as an identifier for the next-hop
// group. Some next-hop resolutions may utilise the colour to select
// the particular next-hop-group that a routing entry should be resolved
// to. In this case, next-hop-group selection may be based on colour
// matches rather than the protocol specified next-hop.
//
// Regardless of whether the next-hop-group's specified colour is
// used to select an AFT's active forwarding entry, the next-hop-group
// referenced by an entry should be the currently active value.
//
// Next-hop-groups that are installed on the system through a protocol
// that allows injection of such entries (e.g., BGP using the SR-TE
// Policy SAFI, or gRPC-based RIB programming) should have the colour
// specified in the injecting protocol within this leaf.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/color"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/color"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) Color() *NetworkInstance_Afts_NextHopGroup_ColorPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ColorPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "color"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConditionAny (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) ConditionAny() *NetworkInstance_Afts_NextHopGroup_ConditionPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// ConditionAny (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) ConditionAny() *NetworkInstance_Afts_NextHopGroup_ConditionPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// Condition (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id: uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) Condition(Id uint64) *NetworkInstance_Afts_NextHopGroup_ConditionPath {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPath{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Condition (list): A conditional next-hop-group that is used by the AFT
// entry. The conditions that are specified within the
// group are logically ANDed together. If a condition
// is a leaf-list field its contents are logically ORed.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "conditional/condition"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition"
// Id: uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) Condition(Id uint64) *NetworkInstance_Afts_NextHopGroup_ConditionPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ConditionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"conditional", "condition"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index
// is not expected to be consistent across reboots, or
// reprogramming of the next-hop-group. When updating
// a next-hop-group, if the group is removed by the system
// or assigned an alternate identifier, the system should
// send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group
// is changed, all AFT entries that reference it must
// also be updated.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Afts_NextHopGroupPath) Id() *NetworkInstance_Afts_NextHopGroup_IdPath {
	return &NetworkInstance_Afts_NextHopGroup_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the next-hop-group. This index
// is not expected to be consistent across reboots, or
// reprogramming of the next-hop-group. When updating
// a next-hop-group, if the group is removed by the system
// or assigned an alternate identifier, the system should
// send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group
// is changed, all AFT entries that reference it must
// also be updated.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) Id() *NetworkInstance_Afts_NextHopGroup_IdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) NextHopAny() *NetworkInstance_Afts_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Afts_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Afts_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Afts_NextHopGroup_NextHopPath {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): An individual next-hop within the next-hop-group. Each
// next-hop is a reference to an entry within the next-hop
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Afts_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Afts_NextHopGroup_NextHopPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ProgrammedId (leaf): In some routing protocols or route injection mechanisms it
// is possible to supply the ID of the next-hop-group via
// configuration or the protocol itself. In some systems, it
// may not be possible to use this same ID when returning the
// NHG via telemetry.
//
// This leaf reflects the ID of the next-hop group that was
// used by the original programming mechanism.
//
// This leaf allows a client to create an association between
// a programmed next-hop's original ID, and the ID that is
// extracted via telemetry as a key in the next-hop-group AFT
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id"
func (n *NetworkInstance_Afts_NextHopGroupPath) ProgrammedId() *NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath {
	return &NetworkInstance_Afts_NextHopGroup_ProgrammedIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProgrammedId (leaf): In some routing protocols or route injection mechanisms it
// is possible to supply the ID of the next-hop-group via
// configuration or the protocol itself. In some systems, it
// may not be possible to use this same ID when returning the
// NHG via telemetry.
//
// This leaf reflects the ID of the next-hop group that was
// used by the original programming mechanism.
//
// This leaf allows a client to create an association between
// a programmed next-hop's original ID, and the ID that is
// extracted via telemetry as a key in the next-hop-group AFT
// list.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/programmed-id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/state/programmed-id"
func (n *NetworkInstance_Afts_NextHopGroupPathAny) ProgrammedId() *NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_ProgrammedIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "programmed-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroup_ConditionPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny struct {
	*ygot.NodePath
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_DscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dscp"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the conditional criteria.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for the conditional criteria.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id (wildcarded): string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id (wildcarded): string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "input-interfaces/input-interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
// Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop-group"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Id (leaf): A unique reference for the input interface.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique reference for the input interface.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/id"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny {
	return &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny struct {
	*ygot.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/weight"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/weight"
// Path from root: "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny {
	return &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHop_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_NextHop_IpInIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny struct {
	*ygot.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dst-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPath {
	return &NetworkInstance_Afts_NextHop_IpInIp_DstIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/dst-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny {
	return &NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/src-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath {
	return &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/src-ip"
// Path from root: "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny {
	return &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_PolicyForwardingEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny struct {
	*ygot.NodePath
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) Counters() *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): Surrounding container for counters.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) Counters() *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) EntryMetadata() *NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryMetadata (leaf): Metadata persistently stored with the entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-metadata"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/entry-metadata"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) EntryMetadata() *NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_EntryMetadataPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-metadata"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): An arbitrary 64-bit index identifying the policy forwarding
// AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) Index() *NetworkInstance_Afts_PolicyForwardingEntry_IndexPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): An arbitrary 64-bit index identifying the policy forwarding
// AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/index"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) Index() *NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpDscp (leaf): The value of the differentiated services code point (DSCP) to
// be matched for the forwarding entry. The value is specified in
// cases where specific class-based forwarding based on IP is
// implemented by the device.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-dscp"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) IpDscp() *NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpDscp (leaf): The value of the differentiated services code point (DSCP) to
// be matched for the forwarding entry. The value is specified in
// cases where specific class-based forwarding based on IP is
// implemented by the device.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-dscp"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-dscp"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) IpDscp() *NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpDscpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-dscp"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The IP prefix that the forwarding entry matches.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-prefix"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) IpPrefix() *NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpPrefix (leaf): The IP prefix that the forwarding entry matches.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-prefix"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-prefix"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) IpPrefix() *NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpPrefixPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpProtocol (leaf): The value of the IP protocol field of an IPv4 packet, or the
// next-header field of an IPv6 packet which is to be matched by
// the AFT entry. This field is utilised where forwarding is
// performed based on L4 information.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-protocol"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) IpProtocol() *NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpProtocol (leaf): The value of the IP protocol field of an IPv4 packet, or the
// next-header field of an IPv6 packet which is to be matched by
// the AFT entry. This field is utilised where forwarding is
// performed based on L4 information.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ip-protocol"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/ip-protocol"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) IpProtocol() *NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_IpProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ip-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4DstPort (leaf): The value of the destination port field of the transport
// header that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-dst-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) L4DstPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-dst-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4DstPort (leaf): The value of the destination port field of the transport
// header that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-dst-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-dst-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) L4DstPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4DstPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-dst-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4SrcPort (leaf): The value of the source port field of the transport header
// that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-src-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) L4SrcPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-src-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// L4SrcPort (leaf): The value of the source port field of the transport header
// that is to be matched by the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l4-src-port"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/l4-src-port"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) L4SrcPort() *NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_L4SrcPortPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l4-src-port"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address that the forwarding entry matches. Used for
// Layer 2 forwarding entries, e.g., within a VSI instance.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) MacAddress() *NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): The MAC address that the forwarding entry matches. Used for
// Layer 2 forwarding entries, e.g., within a VSI instance.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mac-address"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) MacAddress() *NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label that the forwarding entry matches. Used for
// MPLS forwarding entries, whereby the local device acts as an
// LSR.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) MplsLabel() *NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsLabel (leaf): The MPLS label that the forwarding entry matches. Used for
// MPLS forwarding entries, whereby the local device acts as an
// LSR.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-label"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-label"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) MplsLabel() *NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTc (leaf): The value of the MPLS Traffic Class bits (formerly known as
// the MPLS experimental bits) that are to be matched by the AFT
// entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-tc"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) MplsTc() *NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsTc (leaf): The value of the MPLS Traffic Class bits (formerly known as
// the MPLS experimental bits) that are to be matched by the AFT
// entry.
// ----------------------------------------
// Defining module: "openconfig-aft-pf"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mpls-tc"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/mpls-tc"
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) MplsTc() *NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_MplsTcPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mpls-tc"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny struct {
	*ygot.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "octets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
// ----------------------------------------
// Defining module: "openconfig-aft-common"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets-forwarded"
// Path from root: "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny {
	return &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Afts_StateSyncedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSyncedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPath struct {
	*ygot.NodePath
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny struct {
	*ygot.NodePath
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv4-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPath {
	return &NetworkInstance_Afts_StateSynced_Ipv4UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv4-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny {
	return &NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv6-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPath {
	return &NetworkInstance_Afts_StateSynced_Ipv6UnicastPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
// ----------------------------------------
// Defining module: "openconfig-aft-state-synced"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/ipv6-unicast"
// Path from root: "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny {
	return &NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/config/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/config/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny struct {
	*ygot.NodePath
}

// ConnectionPointId (leaf): An identifier for a connection point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/connection-point-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/config/connection-point-id"
func (n *NetworkInstance_ConnectionPointPath) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPath {
	return &NetworkInstance_ConnectionPoint_ConnectionPointIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConnectionPointId (leaf): An identifier for a connection point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/connection-point-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/config/connection-point-id"
func (n *NetworkInstance_ConnectionPointPathAny) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny {
	return &NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId (wildcarded): string
func (n *NetworkInstance_ConnectionPointPath) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	return &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId (wildcarded): string
func (n *NetworkInstance_ConnectionPointPathAny) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	return &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId: string
func (n *NetworkInstance_ConnectionPointPath) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPath {
	return &NetworkInstance_ConnectionPoint_EndpointPath{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoints/endpoint"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
// EndpointId: string
func (n *NetworkInstance_ConnectionPointPathAny) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPathAny {
	return &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_EndpointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePathAny struct {
	*ygot.NodePath
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_ActivePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/active"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointId (leaf): An identifier for the endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/endpoint-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointId (leaf): An identifier for the endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/endpoint-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_LocalPath{
		NodePath: ygot.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "local"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/precedence"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "precedence"},
			map[string]interface{}{},
			n,
		),
	}
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/precedence"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "precedence"},
			map[string]interface{}{},
			n,
		),
	}
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "remote"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_RemotePath{
		NodePath: ygot.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "remote"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_VxlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-label-block-offset"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-label-block-offset"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-label-block-size"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-label-block-size"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny struct {
	*ygot.NodePath
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/remote-system"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/remote-system"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "remote-system"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/site-id"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "site-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/virtual-circuit-identifier"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/virtual-circuit-identifier"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny struct {
	*ygot.NodePath
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress (wildcarded): string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress (wildcarded): string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
}

// EndpointPeer (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
}

// EndpointPeer (list): List of VTEP peers and associated state information
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-peers/endpoint-peer"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
// PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni (wildcarded): uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni (wildcarded): uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "endpoint-vnis/endpoint-vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
// Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
}

// SourceInterface (leaf): Source loopback interface name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/source-interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// SourceInterface (leaf): Source loopback interface name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/source-interface"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny struct {
	*ygot.NodePath
}

// ControlPlaneVnis (leaf): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/control-plane-vnis"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
	}
}

// ControlPlaneVnis (leaf): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/control-plane-vnis"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-address"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-address"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterMac (leaf): MAC address of the remote VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-mac"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouterMac (leaf): MAC address of the remote VTEP
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/router-mac"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/uptime"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
	}
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/uptime"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny struct {
	*ygot.NodePath
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bridge-domain"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
	}
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/bridge-domain"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vrf-name"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vrf-name"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/learning-mode"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/learning-mode"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multidestination-traffic"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/multidestination-traffic"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
	}
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/svi-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/svi-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): L2VNI or L3VNI Identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): L2VNI or L3VNI Identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-state"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniType (leaf): The type of virtual network identfier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// VniType (leaf): The type of virtual network identfier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vni-type"
// Path from root: "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny {
	return &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_EncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPath struct {
	*ygot.NodePath
}

// NetworkInstance_EncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_ControlWordPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/config/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPath struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_ControlWordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/config/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/config/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/config/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_LabelAllocationModePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/config/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Encapsulation_LabelAllocationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/config/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePathAny struct {
	*ygot.NodePath
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/control-word"
// Path from root: "/network-instances/network-instance/encapsulation/config/control-word"
func (n *NetworkInstance_EncapsulationPath) ControlWord() *NetworkInstance_Encapsulation_ControlWordPath {
	return &NetworkInstance_Encapsulation_ControlWordPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "control-word"},
			map[string]interface{}{},
			n,
		),
	}
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/control-word"
// Path from root: "/network-instances/network-instance/encapsulation/config/control-word"
func (n *NetworkInstance_EncapsulationPathAny) ControlWord() *NetworkInstance_Encapsulation_ControlWordPathAny {
	return &NetworkInstance_Encapsulation_ControlWordPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "control-word"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/encapsulation-type"
// Path from root: "/network-instances/network-instance/encapsulation/config/encapsulation-type"
func (n *NetworkInstance_EncapsulationPath) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePath {
	return &NetworkInstance_Encapsulation_EncapsulationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/encapsulation-type"
// Path from root: "/network-instances/network-instance/encapsulation/config/encapsulation-type"
func (n *NetworkInstance_EncapsulationPathAny) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePathAny {
	return &NetworkInstance_Encapsulation_EncapsulationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/label-allocation-mode"
// Path from root: "/network-instances/network-instance/encapsulation/config/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPath) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePath {
	return &NetworkInstance_Encapsulation_LabelAllocationModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/label-allocation-mode"
// Path from root: "/network-instances/network-instance/encapsulation/config/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPathAny) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePathAny {
	return &NetworkInstance_Encapsulation_LabelAllocationModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_EvpnPath represents the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPath struct {
	*ygot.NodePath
}

// NetworkInstance_EvpnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPathAny struct {
	*ygot.NodePath
}

// EthernetSegmentAny (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name (wildcarded): string
func (n *NetworkInstance_EvpnPath) EthernetSegmentAny() *NetworkInstance_Evpn_EthernetSegmentPathAny {
	return &NetworkInstance_Evpn_EthernetSegmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// EthernetSegmentAny (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name (wildcarded): string
func (n *NetworkInstance_EvpnPathAny) EthernetSegmentAny() *NetworkInstance_Evpn_EthernetSegmentPathAny {
	return &NetworkInstance_Evpn_EthernetSegmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// EthernetSegment (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name: string
func (n *NetworkInstance_EvpnPath) EthernetSegment(Name string) *NetworkInstance_Evpn_EthernetSegmentPath {
	return &NetworkInstance_Evpn_EthernetSegmentPath{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// EthernetSegment (list): List of Ethernet Segments.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "ethernet-segments/ethernet-segment"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment"
// Name: string
func (n *NetworkInstance_EvpnPathAny) EthernetSegment(Name string) *NetworkInstance_Evpn_EthernetSegmentPathAny {
	return &NetworkInstance_Evpn_EthernetSegmentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"ethernet-segments", "ethernet-segment"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi (wildcarded): string
func (n *NetworkInstance_EvpnPath) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi (wildcarded): string
func (n *NetworkInstance_EvpnPathAny) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi: string
func (n *NetworkInstance_EvpnPath) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePath {
	return &NetworkInstance_Evpn_EvpnInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "evpn-instances/evpn-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
// Evi: string
func (n *NetworkInstance_EvpnPathAny) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
}

// NetworkInstance_Evpn_EthernetSegmentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment YANG schema element.
type NetworkInstance_Evpn_EthernetSegmentPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegmentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment YANG schema element.
type NetworkInstance_Evpn_EthernetSegmentPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi-type YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi-type YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/interface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/interface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_NamePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/name YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/name YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_RedundancyModePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/redundancy-mode YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_RedundancyModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/redundancy-mode YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/subinterface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/subinterface YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny struct {
	*ygot.NodePath
}

// DfElection (container): Top container for the configuration and state parameters
// for the Designated forwarding Election
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "df-election"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) DfElection() *NetworkInstance_Evpn_EthernetSegment_DfElectionPath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElectionPath{
		NodePath: ygot.NewNodePath(
			[]string{"df-election"},
			map[string]interface{}{},
			n,
		),
	}
}

// DfElection (container): Top container for the configuration and state parameters
// for the Designated forwarding Election
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "df-election"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) DfElection() *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"df-election"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI) value.
// For ESI Type 0: The esi leaf value is directly configured by the operator.
// For ESI Type 1: The AUTO enum must be used.
// For ESI Type 2: The AUTO enum must be used.
// For ESI Type 3: The directly configured or AUTO enum must be used.
// For ESI Type 4: The directly configured or AUTO enum must be used.
// For ESI Type 5: The directly configured or AUTO enum must be used.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/esi"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Esi() *NetworkInstance_Evpn_EthernetSegment_EsiPath {
	return &NetworkInstance_Evpn_EthernetSegment_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier (ESI) value.
// For ESI Type 0: The esi leaf value is directly configured by the operator.
// For ESI Type 1: The AUTO enum must be used.
// For ESI Type 2: The AUTO enum must be used.
// For ESI Type 3: The directly configured or AUTO enum must be used.
// For ESI Type 4: The directly configured or AUTO enum must be used.
// For ESI Type 5: The directly configured or AUTO enum must be used.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/esi"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Esi() *NetworkInstance_Evpn_EthernetSegment_EsiPathAny {
	return &NetworkInstance_Evpn_EthernetSegment_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// EsiType (leaf): ESI Type is a 1-octet field (most significant octet) that
// specifies the format of the remaining 9 octets (ESI Value).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/esi-type"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi-type"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) EsiType() *NetworkInstance_Evpn_EthernetSegment_EsiTypePath {
	return &NetworkInstance_Evpn_EthernetSegment_EsiTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "esi-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EsiType (leaf): ESI Type is a 1-octet field (most significant octet) that
// specifies the format of the remaining 9 octets (ESI Value).
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/esi-type"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/esi-type"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) EsiType() *NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_EsiTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "esi-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/interface"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Interface() *NetworkInstance_Evpn_EthernetSegment_InterfacePath {
	return &NetworkInstance_Evpn_EthernetSegment_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/interface"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Interface() *NetworkInstance_Evpn_EthernetSegment_InterfacePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Ethernet Segment name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/name"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Name() *NetworkInstance_Evpn_EthernetSegment_NamePath {
	return &NetworkInstance_Evpn_EthernetSegment_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): Ethernet Segment name
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/name"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Name() *NetworkInstance_Evpn_EthernetSegment_NamePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedundancyMode (leaf): Multihoming options for load balancing of
// traffic in the Ethernet Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/redundancy-mode"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/redundancy-mode"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) RedundancyMode() *NetworkInstance_Evpn_EthernetSegment_RedundancyModePath {
	return &NetworkInstance_Evpn_EthernetSegment_RedundancyModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "redundancy-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// RedundancyMode (leaf): Multihoming options for load balancing of
// traffic in the Ethernet Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/redundancy-mode"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/redundancy-mode"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) RedundancyMode() *NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_RedundancyModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "redundancy-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/subinterface"
func (n *NetworkInstance_Evpn_EthernetSegmentPath) Subinterface() *NetworkInstance_Evpn_EthernetSegment_SubinterfacePath {
	return &NetworkInstance_Evpn_EthernetSegment_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/config/subinterface"
func (n *NetworkInstance_Evpn_EthernetSegmentPathAny) Subinterface() *NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EthernetSegment_DfElectionPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElectionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/df-election-method YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/df-election-method YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/election-wait-time YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/election-wait-time YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/preference YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/preference YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/revertive YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/revertive YANG schema element.
type NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny struct {
	*ygot.NodePath
}

// DfElectionMethod (leaf): Select the Designated Forwarder Election (DF) election method
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/df-election-method"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/df-election-method"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) DfElectionMethod() *NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "df-election-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// DfElectionMethod (leaf): Select the Designated Forwarder Election (DF) election method
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/df-election-method"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/df-election-method"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) DfElectionMethod() *NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_DfElectionMethodPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "df-election-method"},
			map[string]interface{}{},
			n,
		),
	}
}

// ElectionWaitTime (leaf): Designated Forwarder Election wait-time. When the DF timer expires,
// the PE device selects the DF based on the highest preference value
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/election-wait-time"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/election-wait-time"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) ElectionWaitTime() *NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "election-wait-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// ElectionWaitTime (leaf): Designated Forwarder Election wait-time. When the DF timer expires,
// the PE device selects the DF based on the highest preference value
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/election-wait-time"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/election-wait-time"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) ElectionWaitTime() *NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_ElectionWaitTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "election-wait-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Defines a 2-octet value that indicates the PE
// preference to become the DF in the Ethernet-Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/preference"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) Preference() *NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Defines a 2-octet value that indicates the PE
// preference to become the DF in the Ethernet-Segment.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/preference"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) Preference() *NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Revertive (leaf): The 'preempt' or 'revertive' behavior. This option will allow a
// non-revertive behavior in the DF election.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/revertive"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/revertive"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPath) Revertive() *NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "revertive"},
			map[string]interface{}{},
			n,
		),
	}
}

// Revertive (leaf): The 'preempt' or 'revertive' behavior. This option will allow a
// non-revertive behavior in the DF election.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/revertive"
// Path from root: "/network-instances/network-instance/evpn/ethernet-segments/ethernet-segment/df-election/config/revertive"
func (n *NetworkInstance_Evpn_EthernetSegment_DfElectionPathAny) Revertive() *NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny {
	return &NetworkInstance_Evpn_EthernetSegment_DfElection_RevertivePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "revertive"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EviPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny struct {
	*ygot.NodePath
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName (wildcarded): string
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName (wildcarded): string
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "pbb/b-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
// BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/encapsulation-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath {
	return &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/encapsulation-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance (EVI) identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/evi"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPath {
	return &NetworkInstance_Evpn_EvpnInstance_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance (EVI) identifier
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/evi"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/replication-mode"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath {
	return &NetworkInstance_Evpn_EvpnInstance_ReplicationModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "replication-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/replication-mode"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "replication-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/route-distinguisher"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePath) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath {
	return &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/route-distinguisher"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/service-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath {
	return &NetworkInstance_Evpn_EvpnInstance_ServiceTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/service-type"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "service-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPath {
	return &NetworkInstance_Evpn_EvpnInstance_VxlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "vxlan"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_VxlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny struct {
	*ygot.NodePath
}

// BComponentName (leaf): Type of the associated b-component
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/b-component-name"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "b-component-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// BComponentName (leaf): Type of the associated b-component
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/b-component-name"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "b-component-name"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/backbone-src-mac"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/backbone-src-mac"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// IComponentAny (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid (wildcarded): uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
}

// IComponentAny (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid (wildcarded): uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
}

// IComponent (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
}

// IComponent (list): list of i-components
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "i-components/i-component"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
// ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny struct {
	*ygot.NodePath
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/i-sid"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "i-sid"},
			map[string]interface{}{},
			n,
		),
	}
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/i-sid"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "i-sid"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygot.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-route-target"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny struct {
	*ygot.NodePath
}

// AnycastSourceInterface (container): Anycast source interface references
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "anycast-source-interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// AnycastSourceInterface (container): Anycast source interface references
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "anycast-source-interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/host-reachability-bgp"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/host-reachability-bgp"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-group"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// MulticastMask (leaf): Multicast group address mask
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/multicast-mask"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overlay-endpoint"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overlay-endpoint"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overlay-endpoint-network-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overlay-endpoint-network-instance"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vni"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vni"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny {
	return &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_FdbPath represents the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPath struct {
	*ygot.NodePath
}

// NetworkInstance_FdbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_AnycastGatewayMacPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/config/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_AnycastGatewayMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/config/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacAgingTimePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/config/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacAgingTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/config/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacLearningPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/config/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacLearningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/config/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MaximumEntriesPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/config/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MaximumEntriesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/config/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPathAny struct {
	*ygot.NodePath
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/anycast-gateway-mac"
// Path from root: "/network-instances/network-instance/fdb/config/anycast-gateway-mac"
func (n *NetworkInstance_FdbPath) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPath {
	return &NetworkInstance_Fdb_AnycastGatewayMacPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/anycast-gateway-mac"
// Path from root: "/network-instances/network-instance/fdb/config/anycast-gateway-mac"
func (n *NetworkInstance_FdbPathAny) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPathAny {
	return &NetworkInstance_Fdb_AnycastGatewayMacPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
	}
}

// ArpProxy (container): Top Container related to ARP-Proxy
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "arp-proxy"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPath) ArpProxy() *NetworkInstance_Fdb_ArpProxyPath {
	return &NetworkInstance_Fdb_ArpProxyPath{
		NodePath: ygot.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ArpProxy (container): Top Container related to ARP-Proxy
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "arp-proxy"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPathAny) ArpProxy() *NetworkInstance_Fdb_ArpProxyPathAny {
	return &NetworkInstance_Fdb_ArpProxyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flood-unknown-unicast-supression"
// Path from root: "/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPath) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath {
	return &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
	}
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/flood-unknown-unicast-supression"
// Path from root: "/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPathAny) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny {
	return &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2rib"
// Path from root: "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPath) L2Rib() *NetworkInstance_Fdb_L2RibPath {
	return &NetworkInstance_Fdb_L2RibPath{
		NodePath: ygot.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "l2rib"
// Path from root: "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPathAny) L2Rib() *NetworkInstance_Fdb_L2RibPathAny {
	return &NetworkInstance_Fdb_L2RibPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-aging-time"
// Path from root: "/network-instances/network-instance/fdb/config/mac-aging-time"
func (n *NetworkInstance_FdbPath) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePath {
	return &NetworkInstance_Fdb_MacAgingTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-aging-time"
// Path from root: "/network-instances/network-instance/fdb/config/mac-aging-time"
func (n *NetworkInstance_FdbPathAny) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePathAny {
	return &NetworkInstance_Fdb_MacAgingTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-learning"
// Path from root: "/network-instances/network-instance/fdb/config/mac-learning"
func (n *NetworkInstance_FdbPath) MacLearning() *NetworkInstance_Fdb_MacLearningPath {
	return &NetworkInstance_Fdb_MacLearningPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-learning"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-learning"
// Path from root: "/network-instances/network-instance/fdb/config/mac-learning"
func (n *NetworkInstance_FdbPathAny) MacLearning() *NetworkInstance_Fdb_MacLearningPathAny {
	return &NetworkInstance_Fdb_MacLearningPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-learning"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPath) MacMobility() *NetworkInstance_Fdb_MacMobilityPath {
	return &NetworkInstance_Fdb_MacMobilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPathAny) MacMobility() *NetworkInstance_Fdb_MacMobilityPathAny {
	return &NetworkInstance_Fdb_MacMobilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPath) MacTable() *NetworkInstance_Fdb_MacTablePath {
	return &NetworkInstance_Fdb_MacTablePath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPathAny) MacTable() *NetworkInstance_Fdb_MacTablePathAny {
	return &NetworkInstance_Fdb_MacTablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum-entries"
// Path from root: "/network-instances/network-instance/fdb/config/maximum-entries"
func (n *NetworkInstance_FdbPath) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPath {
	return &NetworkInstance_Fdb_MaximumEntriesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/maximum-entries"
// Path from root: "/network-instances/network-instance/fdb/config/maximum-entries"
func (n *NetworkInstance_FdbPathAny) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPathAny {
	return &NetworkInstance_Fdb_MaximumEntriesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdProxy (container): Top Container related to ND-Proxy.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "nd-proxy"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPath) NdProxy() *NetworkInstance_Fdb_NdProxyPath {
	return &NetworkInstance_Fdb_NdProxyPath{
		NodePath: ygot.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdProxy (container): Top Container related to ND-Proxy.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "nd-proxy"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPathAny) NdProxy() *NetworkInstance_Fdb_NdProxyPathAny {
	return &NetworkInstance_Fdb_NdProxyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_ArpProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/arp-suppression"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPath) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath {
	return &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/arp-suppression"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny {
	return &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enable"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/enable"
func (n *NetworkInstance_Fdb_ArpProxyPath) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePath {
	return &NetworkInstance_Fdb_ArpProxy_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enable"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/enable"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePathAny {
	return &NetworkInstance_Fdb_ArpProxy_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2RibPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2RibPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPathAny struct {
	*ygot.NodePath
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-ip-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTablePath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-ip-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePath {
	return &NetworkInstance_Fdb_L2Rib_MacTablePath{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "mac-table"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
}

// EntryAnyHostIp (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAnyHostIp(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": "*"},
			n,
		),
	}
}

// EntryAnyHostIp (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAnyHostIp(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": "*"},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAnyMacAddress(HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": HostIp},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress (wildcarded): string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAnyMacAddress(HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": HostIp},
			n,
		),
	}
}

// Entry (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
}

// Entry (list): List of learned MAC-IP addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
// MacAddress: string
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/host-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "host-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l3-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer (wildcarded): E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer (wildcarded): E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer: E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Producer(Producer E_NetworkInstance_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
// Producer: E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Producer(Producer E_NetworkInstance_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny struct {
	*ygot.NodePath
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress (wildcarded): string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index (wildcarded): uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-hops/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
// Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/l2-vni"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mac-address"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer (wildcarded): E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// ProducerAny (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer (wildcarded): E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer: E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Producer(Producer E_NetworkInstance_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Producer (list): List of producers for each MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "producers/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
// Producer: E_NetworkInstance_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Producer(Producer E_NetworkInstance_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/vlan"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny struct {
	*ygot.NodePath
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/derived-from-mac-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/derived-from-mac-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/directly-received"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/directly-received"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Esi (leaf): Ethernet Segment Identifier for local and remote routes
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/esi"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/mobility-state"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/next-hop"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Producer (leaf): Source of the learned L2RIB route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/producer"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "producer"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/seq-number"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/sticky"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): A unique entry for the next-hop.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/index"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// Label (leaf): Next hop label representing the l2vni for the route
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/label"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// PeerIp (leaf): Next hop peer address
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/peer-ip"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/subinterface"
// Path from root: "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny {
	return &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny struct {
	*ygot.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-window"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-mobility-window"
// Path from root: "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny {
	return &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePathAny struct {
	*ygot.NodePath
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
}

// EntryAny (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
}

// EntryAnyVlan (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAnyVlan(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": "*"},
			n,
		),
	}
}

// EntryAnyVlan (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan (wildcarded): uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAnyVlan(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": "*"},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) EntryAnyMacAddress(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": Vlan},
			n,
		),
	}
}

// EntryAnyMacAddress (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress (wildcarded): string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAnyMacAddress(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": Vlan},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPath {
	return &NetworkInstance_Fdb_MacTable_EntryPath{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
}

// Entry (list): List of learned MAC addresses
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "entries/entry"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry"
// MacAddress: string
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	return &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_AgePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_AgePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPathAny struct {
	*ygot.NodePath
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/age"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePath {
	return &NetworkInstance_Fdb_MacTable_Entry_AgePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/age"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_AgePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-type"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePath {
	return &NetworkInstance_Fdb_MacTable_Entry_EntryTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/entry-type"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPath {
	return &NetworkInstance_Fdb_MacTable_Entry_EviPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/evi"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_EviPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-address"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath {
	return &NetworkInstance_Fdb_MacTable_Entry_MacAddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-address"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vlan"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPath {
	return &NetworkInstance_Fdb_MacTable_Entry_VlanPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
// ----------------------------------------
// Defining module: "openconfig-network-instance-l2"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/vlan"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_VlanPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "vlan"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny struct {
	*ygot.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Fdb_NdProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny struct {
	*ygot.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath {
	return &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/duplicate-ip-detection-interval"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny {
	return &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enable"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxyPath) Enable() *NetworkInstance_Fdb_NdProxy_EnablePath {
	return &NetworkInstance_Fdb_NdProxy_EnablePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enable"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxyPathAny) Enable() *NetworkInstance_Fdb_NdProxy_EnablePathAny {
	return &NetworkInstance_Fdb_NdProxy_EnablePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enable"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath {
	return &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ip-mobility-threshold"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny {
	return &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/nd-suppression"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPath) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPath {
	return &NetworkInstance_Fdb_NdProxy_NdSuppressionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/nd-suppression"
// Path from root: "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPathAny) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny {
	return &NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePoliciesPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePoliciesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPathAny struct {
	*ygot.NodePath
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "apply-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "apply-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "import-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny struct {
	*ygot.NodePath
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/default-import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
// ----------------------------------------
// Defining module: "openconfig-routing-policy"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-policy"
// Path from root: "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny {
	return &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-policy"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygot.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygot.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/export-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "export-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
// ----------------------------------------
// Defining module: "openconfig-evpn"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/import-route-target"
// Path from root: "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny {
	return &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "import-route-target"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/id YANG schema element.
type NetworkInstance_Interface_IdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/id YANG schema element.
type NetworkInstance_Interface_IdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/interface YANG schema element.
type NetworkInstance_Interface_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/interface YANG schema element.
type NetworkInstance_Interface_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IrbAnycastGatewayPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_IrbAnycastGatewayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_MacPinningPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_MacPinningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/config/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePathAny struct {
	*ygot.NodePath
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/associated-address-families"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_InterfacePath) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPath {
	return &NetworkInstance_Interface_AssociatedAddressFamiliesPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/associated-address-families"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_InterfacePathAny) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny {
	return &NetworkInstance_Interface_AssociatedAddressFamiliesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/id"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_InterfacePath) Id() *NetworkInstance_Interface_IdPath {
	return &NetworkInstance_Interface_IdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/id"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_InterfacePathAny) Id() *NetworkInstance_Interface_IdPathAny {
	return &NetworkInstance_Interface_IdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "id"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_InterfacePath) Interface() *NetworkInstance_Interface_InterfacePath {
	return &NetworkInstance_Interface_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_InterfacePathAny) Interface() *NetworkInstance_Interface_InterfacePathAny {
	return &NetworkInstance_Interface_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/irb-anycast-gateway"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePath) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPath {
	return &NetworkInstance_Interface_IrbAnycastGatewayPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
	}
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/irb-anycast-gateway"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePathAny) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPathAny {
	return &NetworkInstance_Interface_IrbAnycastGatewayPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-pinning"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_InterfacePath) MacPinning() *NetworkInstance_Interface_MacPinningPath {
	return &NetworkInstance_Interface_MacPinningPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
	}
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
// ----------------------------------------
// Defining module: "openconfig-network-instance"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mac-pinning"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_InterfacePathAny) MacPinning() *NetworkInstance_Interface_MacPinningPathAny {
	return &NetworkInstance_Interface_MacPinningPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_InterfacePath) Subinterface() *NetworkInstance_Interface_SubinterfacePath {
	return &NetworkInstance_Interface_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_InterfacePathAny) Subinterface() *NetworkInstance_Interface_SubinterfacePathAny {
	return &NetworkInstance_Interface_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPath struct {
	*ygot.NodePath
}

// NetworkInstance_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPathAny struct {
	*ygot.NodePath
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPath) Global() *NetworkInstance_Mpls_GlobalPath {
	return &NetworkInstance_Mpls_GlobalPath{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "global"
// Path from root: "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPathAny) Global() *NetworkInstance_Mpls_GlobalPathAny {
	return &NetworkInstance_Mpls_GlobalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_MplsPath) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_MplsPathAny) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_MplsPath) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePath {
	return &NetworkInstance_Mpls_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_MplsPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePathAny {
	return &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Lsps (container): LSP definitions and configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "lsps"
// Path from root: "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPath) Lsps() *NetworkInstance_Mpls_LspsPath {
	return &NetworkInstance_Mpls_LspsPath{
		NodePath: ygot.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
}

// Lsps (container): LSP definitions and configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "lsps"
// Path from root: "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPathAny) Lsps() *NetworkInstance_Mpls_LspsPathAny {
	return &NetworkInstance_Mpls_LspsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocols (container): top-level signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "signaling-protocols"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPath) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPath {
	return &NetworkInstance_Mpls_SignalingProtocolsPath{
		NodePath: ygot.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocols (container): top-level signaling protocol configuration
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "signaling-protocols"
// Path from root: "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPathAny) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPathAny {
	return &NetworkInstance_Mpls_SignalingProtocolsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeGlobalAttributes (container): traffic-engineering global attributes
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-global-attributes"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPath) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPath {
	return &NetworkInstance_Mpls_TeGlobalAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeGlobalAttributes (container): traffic-engineering global attributes
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "te-global-attributes"
// Path from root: "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPathAny) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPathAny {
	return &NetworkInstance_Mpls_TeGlobalAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_NullLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_NullLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_PwEncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_PwEncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_TtlPropagationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_TtlPropagationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/config/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPathAny struct {
	*ygot.NodePath
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPath) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// InterfaceAny (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPathAny) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPath) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePath {
	return &NetworkInstance_Mpls_Global_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// Interface (list): List of TE interfaces
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-attributes/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface"
// InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
}

// NullLabel (leaf): The null-label type used, implicit or explicit
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/null-label"
// Path from root: "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_GlobalPath) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPath {
	return &NetworkInstance_Mpls_Global_NullLabelPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "null-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// NullLabel (leaf): The null-label type used, implicit or explicit
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/null-label"
// Path from root: "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_GlobalPathAny) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPathAny {
	return &NetworkInstance_Mpls_Global_NullLabelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "null-label"},
			map[string]interface{}{},
			n,
		),
	}
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/pw-encapsulation"
// Path from root: "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPath) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPath {
	return &NetworkInstance_Mpls_Global_PwEncapsulationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/pw-encapsulation"
// Path from root: "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPathAny) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPathAny {
	return &NetworkInstance_Mpls_Global_PwEncapsulationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId (wildcarded): string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId: string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPath{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "reserved-label-blocks/reserved-label-block"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
// LocalId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ttl-propagation"
// Path from root: "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPath) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPath {
	return &NetworkInstance_Mpls_Global_TtlPropagationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/ttl-propagation"
// Path from root: "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPathAny) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPathAny {
	return &NetworkInstance_Mpls_Global_TtlPropagationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny struct {
	*ygot.NodePath
}

// InterfaceId (leaf): Indentifier for the MPLS interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Indentifier for the MPLS interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-enabled"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePath) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPath {
	return &NetworkInstance_Mpls_Global_Interface_MplsEnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/mpls-enabled"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny {
	return &NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny struct {
	*ygot.NodePath
}

// LocalId (leaf): A local identifier for the global label block allocation.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LocalId (leaf): A local identifier for the global label block allocation.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/local-id"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "local-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/lower-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lower-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/lower-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "lower-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/upper-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/upper-bound"
// Path from root: "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny {
	return &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "upper-bound"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_TeMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_TeMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPathAny struct {
	*ygot.NodePath
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_InterfacePath) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPath {
	return &NetworkInstance_Mpls_Interface_AdminGroupPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-group"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_InterfacePathAny) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPathAny {
	return &NetworkInstance_Mpls_Interface_AdminGroupPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-group"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igp-flooding-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePath) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "igp-flooding-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePathAny) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPath {
	return &NetworkInstance_Mpls_Interface_InterfaceIdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceId (leaf): Id of the interface
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface-id"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceIdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface-id"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPath {
	return &NetworkInstance_Mpls_Interface_InterfaceRefPath{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// InterfaceRef (container): Reference to an interface or subinterface
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "interface-ref"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRefPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-membership"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePath) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPath {
	return &NetworkInstance_Mpls_Interface_SrlgMembershipPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/srlg-membership"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePathAny) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny {
	return &NetworkInstance_Mpls_Interface_SrlgMembershipPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/te-metric"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_InterfacePath) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPath {
	return &NetworkInstance_Mpls_Interface_TeMetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// TeMetric (leaf): TE specific metric for the link
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/te-metric"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_InterfacePathAny) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPathAny {
	return &NetworkInstance_Mpls_Interface_TeMetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "te-metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny struct {
	*ygot.NodePath
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/delta-percentage"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/delta-percentage"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
	}
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-specification"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-specification"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-type"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/threshold-type"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "threshold-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-down-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/up-thresholds"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny {
	return &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygot.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/interface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "interface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
// ----------------------------------------
// Defining module: "openconfig-interfaces"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/subinterface"
// Path from root: "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny {
	return &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "subinterface"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_LspsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_LspsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPathAny struct {
	*ygot.NodePath
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "constrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPath) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "constrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// StaticLspAny (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_LspsPath) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StaticLspAny (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// StaticLsp (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name: string
func (n *NetworkInstance_Mpls_LspsPath) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPath {
	return &NetworkInstance_Mpls_Lsps_StaticLspPath{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// StaticLsp (list): list of defined static LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-static"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "static-lsps/static-lsp"
// Path from root: "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
// Name: string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	return &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unconstrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPath) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
// ----------------------------------------
// Defining module: "openconfig-mpls"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "unconstrained-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny {
	return &NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny struct {
	*ygot.NodePath
}

// NamedExplicitPathAny (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NamedExplicitPathAny (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// NamedExplicitPath (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NamedExplicitPath (list): A list of explicit paths
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "named-explicit-paths/named-explicit-path"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name (wildcarded): string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "tunnels/tunnel"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
// Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny struct {
	*ygot.NodePath
}

// ExplicitRouteObjectAny (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObjectAny (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index (wildcarded): uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
}

// ExplicitRouteObject (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// ExplicitRouteObject (list): List of explicit route objects
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "explicit-route-objects/explicit-route-object"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
// Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-protection-required"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-protection-required"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-selection-mode"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-sr"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/sid-selection-mode"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny struct {
	*ygot.NodePath
}

// Address (leaf): router hop for the LSP path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// Address (leaf): router hop for the LSP path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/address"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "address"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopType (leaf): strict or loose hop
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hop-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// HopType (leaf): strict or loose hop
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hop-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hop-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/index"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/index"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "index"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny struct {
	*ygot.NodePath
}

// AdminStatus (leaf): TE tunnel administrative state.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdminStatus (leaf): TE tunnel administrative state.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/admin-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "admin-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/auto-generated"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/auto-generated"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/counters"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): optional text description for the tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// Description (leaf): optional text description for the tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/description"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "description"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/hold-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "hold-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/metric-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "metric-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The tunnel name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// Name (leaf): The tunnel name
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/name"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "name"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The operational status of the TE tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/oper-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// OperStatus (leaf): The operational status of the TE tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/oper-status"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-tunnel-attributes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "p2p-tunnel-attributes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/preference"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "preference"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/protection-style-requested"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/reoptimize-timer"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/role"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/role"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/setup-priority"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "setup-priority"},
			map[string]interface{}{},
			n,
		),
	}
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/shortcut-eligible"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
	}
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/shortcut-eligible"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/signaling-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/signaling-protocol"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/soft-preemption"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): RSVP-TE tunnel source address
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/source"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Source (leaf): RSVP-TE tunnel source address
// ----------------------------------------
// Defining module: "openconfig-mpls-rsvp"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/source"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "source"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Tunnel type, p2p or p2mp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// Type (leaf): Tunnel type, p2p or p2mp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny struct {
	*ygot.NodePath
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "auto-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "auto-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/set-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/set-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaled-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/signaled-bandwidth"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/specification-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "specification-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/specification-type"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "specification-type"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny struct {
	*ygot.NodePath
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-interval"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-interval"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/adjust-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interval-high-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state/interval-high-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/max-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/max-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "max-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/min-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/min-bw"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "min-bw"},
			map[string]interface{}{},
			n,
		),
	}
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "overflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath{
		NodePath: ygot.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "overflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "underflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath{
		NodePath: ygot.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "underflow"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/overflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny struct {
	*ygot.NodePath
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/enabled"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "enabled"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/trigger-event-count"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/underflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath{
		NodePath: ygot.NewNodePath(
			[]string{"config", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "config/underflow-threshold"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"config", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
	}
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath struct {
	*ygot.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny struct {
	*ygot.NodePath
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bytes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath{
		NodePath: ygot.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "bytes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "current-path-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "current-path-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-reoptimization-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "next-reoptimization-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "online-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath{
		NodePath: ygot.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "online-time"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny{
		NodePath: ygot.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
	}
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath{
		NodePath: ygot.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "packets"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathChanges (leaf): Number of path changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// PathChanges (leaf): Number of path changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "path-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateChanges (leaf): Number of state changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath{
		NodePath: ygot.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
	}
}

// StateChanges (leaf): Number of state changes for the label switched path
// ----------------------------------------
// Defining module: "openconfig-mpls-te"
// Instantiating module: "openconfig-network-instance"
// Path from parent: "state-changes"
// Path from root: "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny {
	return &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny{
		NodePath: ygot.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
	}
}
