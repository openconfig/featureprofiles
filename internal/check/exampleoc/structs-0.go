// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package exampleoc is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was true
in this case).

This package was generated by ygnmi version: v0.8.1: (ygot: v0.29.0)
using the following YANG input files:
  - yang/openconfig-simple.yang
  - yang/openconfig-nested.yang

Imported modules were sourced from:
*/
package exampleoc

import (
	"encoding/json"
	"fmt"
	"reflect"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// Binary is a type that is used for fields that have a YANG type of
// binary. It is used such that binary fields can be distinguished from
// leaf-lists of uint8s (which are mapped to []uint8, equivalent to
// []byte in reflection).
type Binary []byte

// YANGEmpty is a type that is used for fields that have a YANG type of
// empty. It is used such that empty fields can be distinguished from boolean fields
// in the generated code.
type YANGEmpty bool

// UnionInt8 is an int8 type assignable to unions of which it is a subtype.
type UnionInt8 int8

// UnionInt16 is an int16 type assignable to unions of which it is a subtype.
type UnionInt16 int16

// UnionInt32 is an int32 type assignable to unions of which it is a subtype.
type UnionInt32 int32

// UnionInt64 is an int64 type assignable to unions of which it is a subtype.
type UnionInt64 int64

// UnionUint8 is a uint8 type assignable to unions of which it is a subtype.
type UnionUint8 uint8

// UnionUint16 is a uint16 type assignable to unions of which it is a subtype.
type UnionUint16 uint16

// UnionUint32 is a uint32 type assignable to unions of which it is a subtype.
type UnionUint32 uint32

// UnionUint64 is a uint64 type assignable to unions of which it is a subtype.
type UnionUint64 uint64

// UnionFloat64 is a float64 type assignable to unions of which it is a subtype.
type UnionFloat64 float64

// UnionString is a string type assignable to unions of which it is a subtype.
type UnionString string

// UnionBool is a bool type assignable to unions of which it is a subtype.
type UnionBool bool

// UnionUnsupported is an interface{} wrapper type for unsupported types. It is
// assignable to unions of which it is a subtype.
type UnionUnsupported struct {
	Value interface{}
}

var (
	SchemaTree map[string]*yang.Entry
	ΛEnumTypes map[string][]reflect.Type
)

func init() {
	var err error
	initΛEnumTypes()
	if SchemaTree, err = UnzipSchema(); err != nil {
		panic("schema error: " + err.Error())
	}
}

// Schema returns the details of the generated schema.
func Schema() (*ytypes.Schema, error) {
	uzp, err := UnzipSchema()
	if err != nil {
		return nil, fmt.Errorf("cannot unzip schema, %v", err)
	}

	return &ytypes.Schema{
		Root:       &Root{},
		SchemaTree: uzp,
		Unmarshal:  Unmarshal,
	}, nil
}

// UnzipSchema unzips the zipped schema and returns a map of yang.Entry nodes,
// keyed by the name of the struct that the yang.Entry describes the schema for.
func UnzipSchema() (map[string]*yang.Entry, error) {
	var schemaTree map[string]*yang.Entry
	var err error
	if schemaTree, err = ygot.GzipToSchema(ySchema); err != nil {
		return nil, fmt.Errorf("could not unzip the schema; %v", err)
	}
	return schemaTree, nil
}

// Unmarshal unmarshals data, which must be RFC7951 JSON format, into
// destStruct, which must be non-nil and the correct GoStruct type. It returns
// an error if the destStruct is not found in the schema or the data cannot be
// unmarshaled. The supplied options (opts) are used to control the behaviour
// of the unmarshal function - for example, determining whether errors are
// thrown for unknown fields in the input JSON.
func Unmarshal(data []byte, destStruct ygot.GoStruct, opts ...ytypes.UnmarshalOpt) error {
	tn := reflect.TypeOf(destStruct).Elem().Name()
	schema, ok := SchemaTree[tn]
	if !ok {
		return fmt.Errorf("could not find schema for type %s", tn)
	}
	var jsonTree interface{}
	if err := json.Unmarshal([]byte(data), &jsonTree); err != nil {
		return err
	}
	return ytypes.Unmarshal(schema, destStruct, jsonTree, opts...)
}

// A represents the /openconfig-nested/a YANG schema element.
type A struct {
	B *A_B `path:"b" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A) IsYANGGoStruct() {}

// GetOrCreateB retrieves the value of the B field
// or returns the existing field if it already exists.
func (t *A) GetOrCreateB() *A_B {
	if t.B != nil {
		return t.B
	}
	t.B = &A_B{}
	return t.B
}

// GetB returns the value of the B struct pointer
// from A. If the receiver or the field B is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A) GetB() *A_B {
	if t != nil && t.B != nil {
		return t.B
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.B.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A.
func (*A) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B represents the /openconfig-nested/a/b YANG schema element.
type A_B struct {
	C *A_B_C `path:"c" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B) IsYANGGoStruct() {}

// GetOrCreateC retrieves the value of the C field
// or returns the existing field if it already exists.
func (t *A_B) GetOrCreateC() *A_B_C {
	if t.C != nil {
		return t.C
	}
	t.C = &A_B_C{}
	return t.C
}

// GetC returns the value of the C struct pointer
// from A_B. If the receiver or the field C is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B) GetC() *A_B_C {
	if t != nil && t.C != nil {
		return t.C
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.C.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B.
func (*A_B) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C represents the /openconfig-nested/a/b/c YANG schema element.
type A_B_C struct {
	D *A_B_C_D `path:"d" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C) IsYANGGoStruct() {}

// GetOrCreateD retrieves the value of the D field
// or returns the existing field if it already exists.
func (t *A_B_C) GetOrCreateD() *A_B_C_D {
	if t.D != nil {
		return t.D
	}
	t.D = &A_B_C_D{}
	return t.D
}

// GetD returns the value of the D struct pointer
// from A_B_C. If the receiver or the field D is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C) GetD() *A_B_C_D {
	if t != nil && t.D != nil {
		return t.D
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.D.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C.
func (*A_B_C) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D represents the /openconfig-nested/a/b/c/d YANG schema element.
type A_B_C_D struct {
	E *A_B_C_D_E `path:"e" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D) IsYANGGoStruct() {}

// GetOrCreateE retrieves the value of the E field
// or returns the existing field if it already exists.
func (t *A_B_C_D) GetOrCreateE() *A_B_C_D_E {
	if t.E != nil {
		return t.E
	}
	t.E = &A_B_C_D_E{}
	return t.E
}

// GetE returns the value of the E struct pointer
// from A_B_C_D. If the receiver or the field E is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D) GetE() *A_B_C_D_E {
	if t != nil && t.E != nil {
		return t.E
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.E.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D.
func (*A_B_C_D) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E represents the /openconfig-nested/a/b/c/d/e YANG schema element.
type A_B_C_D_E struct {
	F *A_B_C_D_E_F `path:"f" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E) IsYANGGoStruct() {}

// GetOrCreateF retrieves the value of the F field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E) GetOrCreateF() *A_B_C_D_E_F {
	if t.F != nil {
		return t.F
	}
	t.F = &A_B_C_D_E_F{}
	return t.F
}

// GetF returns the value of the F struct pointer
// from A_B_C_D_E. If the receiver or the field F is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E) GetF() *A_B_C_D_E_F {
	if t != nil && t.F != nil {
		return t.F
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.F.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E.
func (*A_B_C_D_E) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F represents the /openconfig-nested/a/b/c/d/e/f YANG schema element.
type A_B_C_D_E_F struct {
	G *A_B_C_D_E_F_G `path:"g" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F) IsYANGGoStruct() {}

// GetOrCreateG retrieves the value of the G field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E_F) GetOrCreateG() *A_B_C_D_E_F_G {
	if t.G != nil {
		return t.G
	}
	t.G = &A_B_C_D_E_F_G{}
	return t.G
}

// GetG returns the value of the G struct pointer
// from A_B_C_D_E_F. If the receiver or the field G is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E_F) GetG() *A_B_C_D_E_F_G {
	if t != nil && t.G != nil {
		return t.G
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.G.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F.
func (*A_B_C_D_E_F) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F_G represents the /openconfig-nested/a/b/c/d/e/f/g YANG schema element.
type A_B_C_D_E_F_G struct {
	H *A_B_C_D_E_F_G_H `path:"h" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F_G implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F_G) IsYANGGoStruct() {}

// GetOrCreateH retrieves the value of the H field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E_F_G) GetOrCreateH() *A_B_C_D_E_F_G_H {
	if t.H != nil {
		return t.H
	}
	t.H = &A_B_C_D_E_F_G_H{}
	return t.H
}

// GetH returns the value of the H struct pointer
// from A_B_C_D_E_F_G. If the receiver or the field H is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E_F_G) GetH() *A_B_C_D_E_F_G_H {
	if t != nil && t.H != nil {
		return t.H
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F_G
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F_G) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.H.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F_G"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F_G) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F_G.
func (*A_B_C_D_E_F_G) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F_G_H represents the /openconfig-nested/a/b/c/d/e/f/g/h YANG schema element.
type A_B_C_D_E_F_G_H struct {
	I *A_B_C_D_E_F_G_H_I `path:"i" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F_G_H implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F_G_H) IsYANGGoStruct() {}

// GetOrCreateI retrieves the value of the I field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E_F_G_H) GetOrCreateI() *A_B_C_D_E_F_G_H_I {
	if t.I != nil {
		return t.I
	}
	t.I = &A_B_C_D_E_F_G_H_I{}
	return t.I
}

// GetI returns the value of the I struct pointer
// from A_B_C_D_E_F_G_H. If the receiver or the field I is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E_F_G_H) GetI() *A_B_C_D_E_F_G_H_I {
	if t != nil && t.I != nil {
		return t.I
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F_G_H
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F_G_H) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.I.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F_G_H"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F_G_H) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F_G_H.
func (*A_B_C_D_E_F_G_H) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F_G_H_I represents the /openconfig-nested/a/b/c/d/e/f/g/h/i YANG schema element.
type A_B_C_D_E_F_G_H_I struct {
	J *A_B_C_D_E_F_G_H_I_J `path:"j" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F_G_H_I implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F_G_H_I) IsYANGGoStruct() {}

// GetOrCreateJ retrieves the value of the J field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E_F_G_H_I) GetOrCreateJ() *A_B_C_D_E_F_G_H_I_J {
	if t.J != nil {
		return t.J
	}
	t.J = &A_B_C_D_E_F_G_H_I_J{}
	return t.J
}

// GetJ returns the value of the J struct pointer
// from A_B_C_D_E_F_G_H_I. If the receiver or the field J is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E_F_G_H_I) GetJ() *A_B_C_D_E_F_G_H_I_J {
	if t != nil && t.J != nil {
		return t.J
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F_G_H_I
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F_G_H_I) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.J.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F_G_H_I"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F_G_H_I) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F_G_H_I.
func (*A_B_C_D_E_F_G_H_I) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F_G_H_I_J represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j YANG schema element.
type A_B_C_D_E_F_G_H_I_J struct {
	K *A_B_C_D_E_F_G_H_I_J_K `path:"k" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F_G_H_I_J implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F_G_H_I_J) IsYANGGoStruct() {}

// GetOrCreateK retrieves the value of the K field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E_F_G_H_I_J) GetOrCreateK() *A_B_C_D_E_F_G_H_I_J_K {
	if t.K != nil {
		return t.K
	}
	t.K = &A_B_C_D_E_F_G_H_I_J_K{}
	return t.K
}

// GetK returns the value of the K struct pointer
// from A_B_C_D_E_F_G_H_I_J. If the receiver or the field K is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E_F_G_H_I_J) GetK() *A_B_C_D_E_F_G_H_I_J_K {
	if t != nil && t.K != nil {
		return t.K
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F_G_H_I_J
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F_G_H_I_J) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.K.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F_G_H_I_J"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F_G_H_I_J) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F_G_H_I_J.
func (*A_B_C_D_E_F_G_H_I_J) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F_G_H_I_J_K represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K struct {
	L *A_B_C_D_E_F_G_H_I_J_K_L `path:"l" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F_G_H_I_J_K implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F_G_H_I_J_K) IsYANGGoStruct() {}

// GetOrCreateL retrieves the value of the L field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E_F_G_H_I_J_K) GetOrCreateL() *A_B_C_D_E_F_G_H_I_J_K_L {
	if t.L != nil {
		return t.L
	}
	t.L = &A_B_C_D_E_F_G_H_I_J_K_L{}
	return t.L
}

// GetL returns the value of the L struct pointer
// from A_B_C_D_E_F_G_H_I_J_K. If the receiver or the field L is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E_F_G_H_I_J_K) GetL() *A_B_C_D_E_F_G_H_I_J_K_L {
	if t != nil && t.L != nil {
		return t.L
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F_G_H_I_J_K
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F_G_H_I_J_K) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J_K) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F_G_H_I_J_K"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J_K) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F_G_H_I_J_K) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F_G_H_I_J_K.
func (*A_B_C_D_E_F_G_H_I_J_K) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F_G_H_I_J_K_L represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_L struct {
	M *A_B_C_D_E_F_G_H_I_J_K_L_M `path:"m" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F_G_H_I_J_K_L implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F_G_H_I_J_K_L) IsYANGGoStruct() {}

// GetOrCreateM retrieves the value of the M field
// or returns the existing field if it already exists.
func (t *A_B_C_D_E_F_G_H_I_J_K_L) GetOrCreateM() *A_B_C_D_E_F_G_H_I_J_K_L_M {
	if t.M != nil {
		return t.M
	}
	t.M = &A_B_C_D_E_F_G_H_I_J_K_L_M{}
	return t.M
}

// GetM returns the value of the M struct pointer
// from A_B_C_D_E_F_G_H_I_J_K_L. If the receiver or the field M is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *A_B_C_D_E_F_G_H_I_J_K_L) GetM() *A_B_C_D_E_F_G_H_I_J_K_L_M {
	if t != nil && t.M != nil {
		return t.M
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F_G_H_I_J_K_L
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F_G_H_I_J_K_L) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.M.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J_K_L) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F_G_H_I_J_K_L"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J_K_L) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F_G_H_I_J_K_L) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F_G_H_I_J_K_L.
func (*A_B_C_D_E_F_G_H_I_J_K_L) ΛBelongingModule() string {
	return "openconfig-nested"
}

// A_B_C_D_E_F_G_H_I_J_K_L_M represents the /openconfig-nested/a/b/c/d/e/f/g/h/i/j/k/l/m YANG schema element.
type A_B_C_D_E_F_G_H_I_J_K_L_M struct {
	Foo *string `path:"state/foo" module:"openconfig-nested/openconfig-nested"`
}

// IsYANGGoStruct ensures that A_B_C_D_E_F_G_H_I_J_K_L_M implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*A_B_C_D_E_F_G_H_I_J_K_L_M) IsYANGGoStruct() {}

// GetFoo retrieves the value of the leaf Foo from the A_B_C_D_E_F_G_H_I_J_K_L_M
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Foo is set, it can
// safely use t.GetFoo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Foo == nil' before retrieving the leaf's value.
func (t *A_B_C_D_E_F_G_H_I_J_K_L_M) GetFoo() string {
	if t == nil || t.Foo == nil {
		return ""
	}
	return *t.Foo
}

// SetFoo sets the value of the leaf Foo in the A_B_C_D_E_F_G_H_I_J_K_L_M
// struct.
func (t *A_B_C_D_E_F_G_H_I_J_K_L_M) SetFoo(v string) {
	t.Foo = &v
}

// PopulateDefaults recursively populates unset leaf fields in the A_B_C_D_E_F_G_H_I_J_K_L_M
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *A_B_C_D_E_F_G_H_I_J_K_L_M) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J_K_L_M) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["A_B_C_D_E_F_G_H_I_J_K_L_M"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *A_B_C_D_E_F_G_H_I_J_K_L_M) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *A_B_C_D_E_F_G_H_I_J_K_L_M) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of A_B_C_D_E_F_G_H_I_J_K_L_M.
func (*A_B_C_D_E_F_G_H_I_J_K_L_M) ΛBelongingModule() string {
	return "openconfig-nested"
}

// Container represents the /openconfig-nested/container YANG schema element.
type Container struct {
	Enabled *bool `path:"enabled" module:"openconfig-nested"`
}

// IsYANGGoStruct ensures that Container implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Container) IsYANGGoStruct() {}

// GetEnabled retrieves the value of the leaf Enabled from the Container
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enabled is set, it can
// safely use t.GetEnabled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enabled == nil' before retrieving the leaf's value.
func (t *Container) GetEnabled() bool {
	if t == nil || t.Enabled == nil {
		return false
	}
	return *t.Enabled
}

// SetEnabled sets the value of the leaf Enabled in the Container
// struct.
func (t *Container) SetEnabled(v bool) {
	t.Enabled = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Container
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Container) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Container) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Container"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Container) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Container) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Container.
func (*Container) ΛBelongingModule() string {
	return "openconfig-nested"
}

// Parent represents the /openconfig-simple/parent YANG schema element.
type Parent struct {
	Child *Parent_Child `path:"child" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Parent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent) IsYANGGoStruct() {}

// GetOrCreateChild retrieves the value of the Child field
// or returns the existing field if it already exists.
func (t *Parent) GetOrCreateChild() *Parent_Child {
	if t.Child != nil {
		return t.Child
	}
	t.Child = &Parent_Child{}
	return t.Child
}

// GetChild returns the value of the Child struct pointer
// from Parent. If the receiver or the field Child is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Parent) GetChild() *Parent_Child {
	if t != nil && t.Child != nil {
		return t.Child
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Parent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Parent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Child.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Parent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Parent) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Parent.
func (*Parent) ΛBelongingModule() string {
	return "openconfig-simple"
}

// Parent_Child represents the /openconfig-simple/parent/child YANG schema element.
type Parent_Child struct {
	Five  Binary        `path:"state/five" module:"openconfig-simple/openconfig-simple" shadow-path:"config/five" shadow-module:"openconfig-simple/openconfig-simple"`
	Four  Binary        `path:"state/four" module:"openconfig-simple/openconfig-simple" shadow-path:"config/four" shadow-module:"openconfig-simple/openconfig-simple"`
	One   *string       `path:"state/one" module:"openconfig-simple/openconfig-simple" shadow-path:"config/one" shadow-module:"openconfig-simple/openconfig-simple"`
	Six   []Binary      `path:"state/six" module:"openconfig-simple/openconfig-simple" shadow-path:"config/six" shadow-module:"openconfig-simple/openconfig-simple"`
	Three E_Child_Three `path:"state/three" module:"openconfig-simple/openconfig-simple" shadow-path:"config/three" shadow-module:"openconfig-simple/openconfig-simple"`
	Two   *string       `path:"state/two" module:"openconfig-simple/openconfig-simple"`
}

// IsYANGGoStruct ensures that Parent_Child implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Parent_Child) IsYANGGoStruct() {}

// GetFive retrieves the value of the leaf Five from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Five is set, it can
// safely use t.GetFive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Five == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetFive() Binary {
	if t == nil || t.Five == nil {
		return nil
	}
	return t.Five
}

// GetFour retrieves the value of the leaf Four from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Four is set, it can
// safely use t.GetFour() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Four == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetFour() Binary {
	if t == nil || t.Four == nil {
		return nil
	}
	return t.Four
}

// GetOne retrieves the value of the leaf One from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if One is set, it can
// safely use t.GetOne() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.One == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetOne() string {
	if t == nil || t.One == nil {
		return ""
	}
	return *t.One
}

// GetSix retrieves the value of the leaf Six from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Six is set, it can
// safely use t.GetSix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Six == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetSix() []Binary {
	if t == nil || t.Six == nil {
		return nil
	}
	return t.Six
}

// GetThree retrieves the value of the leaf Three from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Three is set, it can
// safely use t.GetThree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Three == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetThree() E_Child_Three {
	if t == nil || t.Three == 0 {
		return 0
	}
	return t.Three
}

// GetTwo retrieves the value of the leaf Two from the Parent_Child
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Two is set, it can
// safely use t.GetTwo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Two == nil' before retrieving the leaf's value.
func (t *Parent_Child) GetTwo() string {
	if t == nil || t.Two == nil {
		return ""
	}
	return *t.Two
}

// SetFive sets the value of the leaf Five in the Parent_Child
// struct.
func (t *Parent_Child) SetFive(v Binary) {
	t.Five = v
}

// SetFour sets the value of the leaf Four in the Parent_Child
// struct.
func (t *Parent_Child) SetFour(v Binary) {
	t.Four = v
}

// SetOne sets the value of the leaf One in the Parent_Child
// struct.
func (t *Parent_Child) SetOne(v string) {
	t.One = &v
}

// SetSix sets the value of the leaf Six in the Parent_Child
// struct.
func (t *Parent_Child) SetSix(v []Binary) {
	t.Six = v
}

// SetThree sets the value of the leaf Three in the Parent_Child
// struct.
func (t *Parent_Child) SetThree(v E_Child_Three) {
	t.Three = v
}

// SetTwo sets the value of the leaf Two in the Parent_Child
// struct.
func (t *Parent_Child) SetTwo(v string) {
	t.Two = &v
}

// PopulateDefaults recursively populates unset leaf fields in the Parent_Child
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Parent_Child) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent_Child) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Parent_Child"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Parent_Child) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Parent_Child) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Parent_Child.
func (*Parent_Child) ΛBelongingModule() string {
	return "openconfig-simple"
}

// RemoteContainer represents the /openconfig-simple/remote-container YANG schema element.
type RemoteContainer struct {
	ALeaf *string `path:"state/a-leaf" module:"openconfig-simple/openconfig-simple" shadow-path:"config/a-leaf" shadow-module:"openconfig-simple/openconfig-simple"`
}

// IsYANGGoStruct ensures that RemoteContainer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*RemoteContainer) IsYANGGoStruct() {}

// GetALeaf retrieves the value of the leaf ALeaf from the RemoteContainer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ALeaf is set, it can
// safely use t.GetALeaf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ALeaf == nil' before retrieving the leaf's value.
func (t *RemoteContainer) GetALeaf() string {
	if t == nil || t.ALeaf == nil {
		return ""
	}
	return *t.ALeaf
}

// SetALeaf sets the value of the leaf ALeaf in the RemoteContainer
// struct.
func (t *RemoteContainer) SetALeaf(v string) {
	t.ALeaf = &v
}

// PopulateDefaults recursively populates unset leaf fields in the RemoteContainer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *RemoteContainer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RemoteContainer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["RemoteContainer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *RemoteContainer) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *RemoteContainer) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of RemoteContainer.
func (*RemoteContainer) ΛBelongingModule() string {
	return "openconfig-simple"
}

// Root represents the /root YANG schema element.
type Root struct {
	A               *A               `path:"a" module:"openconfig-nested"`
	Container       *Container       `path:"container" module:"openconfig-nested"`
	Parent          *Parent          `path:"parent" module:"openconfig-simple"`
	RemoteContainer *RemoteContainer `path:"remote-container" module:"openconfig-simple"`
}

// IsYANGGoStruct ensures that Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*Root) IsYANGGoStruct() {}

// GetOrCreateA retrieves the value of the A field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateA() *A {
	if t.A != nil {
		return t.A
	}
	t.A = &A{}
	return t.A
}

// GetOrCreateContainer retrieves the value of the Container field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateContainer() *Container {
	if t.Container != nil {
		return t.Container
	}
	t.Container = &Container{}
	return t.Container
}

// GetOrCreateParent retrieves the value of the Parent field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateParent() *Parent {
	if t.Parent != nil {
		return t.Parent
	}
	t.Parent = &Parent{}
	return t.Parent
}

// GetOrCreateRemoteContainer retrieves the value of the RemoteContainer field
// or returns the existing field if it already exists.
func (t *Root) GetOrCreateRemoteContainer() *RemoteContainer {
	if t.RemoteContainer != nil {
		return t.RemoteContainer
	}
	t.RemoteContainer = &RemoteContainer{}
	return t.RemoteContainer
}

// GetA returns the value of the A struct pointer
// from Root. If the receiver or the field A is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetA() *A {
	if t != nil && t.A != nil {
		return t.A
	}
	return nil
}

// GetContainer returns the value of the Container struct pointer
// from Root. If the receiver or the field Container is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetContainer() *Container {
	if t != nil && t.Container != nil {
		return t.Container
	}
	return nil
}

// GetParent returns the value of the Parent struct pointer
// from Root. If the receiver or the field Parent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetParent() *Parent {
	if t != nil && t.Parent != nil {
		return t.Parent
	}
	return nil
}

// GetRemoteContainer returns the value of the RemoteContainer struct pointer
// from Root. If the receiver or the field RemoteContainer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *Root) GetRemoteContainer() *RemoteContainer {
	if t != nil && t.RemoteContainer != nil {
		return t.RemoteContainer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.A.PopulateDefaults()
	t.Container.PopulateDefaults()
	t.Parent.PopulateDefaults()
	t.RemoteContainer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *Root) Validate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *Root) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of Root.
func (*Root) ΛBelongingModule() string {
	return ""
}
