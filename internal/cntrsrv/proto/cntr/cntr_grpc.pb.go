// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cntr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CntrClient is the client API for Cntr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CntrClient interface {
	// Dial instructs the container to dial the target specified in the
	// DialRequest message.
	Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialResponse, error)
	// Ping provides a means for a container to respond to an external gRPC probe.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type cntrClient struct {
	cc grpc.ClientConnInterface
}

func NewCntrClient(cc grpc.ClientConnInterface) CntrClient {
	return &cntrClient{cc}
}

func (c *cntrClient) Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialResponse, error) {
	out := new(DialResponse)
	err := c.cc.Invoke(ctx, "/openconfig.featureprofiles.cntr.Cntr/Dial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cntrClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/openconfig.featureprofiles.cntr.Cntr/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CntrServer is the server API for Cntr service.
// All implementations must embed UnimplementedCntrServer
// for forward compatibility
type CntrServer interface {
	// Dial instructs the container to dial the target specified in the
	// DialRequest message.
	Dial(context.Context, *DialRequest) (*DialResponse, error)
	// Ping provides a means for a container to respond to an external gRPC probe.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedCntrServer()
}

// UnimplementedCntrServer must be embedded to have forward compatible implementations.
type UnimplementedCntrServer struct {
}

func (UnimplementedCntrServer) Dial(context.Context, *DialRequest) (*DialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dial not implemented")
}
func (UnimplementedCntrServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCntrServer) mustEmbedUnimplementedCntrServer() {}

// UnsafeCntrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CntrServer will
// result in compilation errors.
type UnsafeCntrServer interface {
	mustEmbedUnimplementedCntrServer()
}

func RegisterCntrServer(s grpc.ServiceRegistrar, srv CntrServer) {
	s.RegisterService(&Cntr_ServiceDesc, srv)
}

func _Cntr_Dial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CntrServer).Dial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openconfig.featureprofiles.cntr.Cntr/Dial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CntrServer).Dial(ctx, req.(*DialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cntr_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CntrServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openconfig.featureprofiles.cntr.Cntr/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CntrServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cntr_ServiceDesc is the grpc.ServiceDesc for Cntr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cntr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openconfig.featureprofiles.cntr.Cntr",
	HandlerType: (*CntrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dial",
			Handler:    _Cntr_Dial_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Cntr_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cntr.proto",
}
